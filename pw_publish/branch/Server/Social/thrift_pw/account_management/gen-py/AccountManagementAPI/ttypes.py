#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RequestResult(object):
  Success = 0
  BadResult = 1
  LoginNotExist = 2
  SnUidNotExist = 3
  HeroInstIdNotExist = 4
  HeroClassNotExist = 5
  CantRemoveClassHero = 6
  TalentInstIdNotExist = 7
  TalentClassNotExist = 8
  ServerReturnedNull = 9
  TransportException = 10
  AuidNotExist = 11
  NoUsersWithThatNickname = 12
  BadServiceType = 13
  GuildLevelIsTooLow = 14
  IconFileUploadingError = 15
  UnknownOperationType = 16
  UnknownBroadcastLocale = 17
  CantDisjointFsn = 18
  BadResponseFromDatabase = 19
  FlagInstNotExist = 20
  FlagNotExist = 21
  GuildLockRequired = 22
  SiegeInProgress = 23
  SiegeNotExists = 24
  IncorrectSuzerain = 25
  MaxVassalsReached = 26
  DynamicQuestHasIllegalSynthaxis = 27
  AuidsListInUsedInQuest = 28
  CantRemoveGuildMemberFromFriends = 29
  CantRemoveFavouriteFriend = 30
  EmailNotExist = 31
  EmailAlreadyActivated = 32
  NicknameNotExist = 33

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "BadResult",
    2: "LoginNotExist",
    3: "SnUidNotExist",
    4: "HeroInstIdNotExist",
    5: "HeroClassNotExist",
    6: "CantRemoveClassHero",
    7: "TalentInstIdNotExist",
    8: "TalentClassNotExist",
    9: "ServerReturnedNull",
    10: "TransportException",
    11: "AuidNotExist",
    12: "NoUsersWithThatNickname",
    13: "BadServiceType",
    14: "GuildLevelIsTooLow",
    15: "IconFileUploadingError",
    16: "UnknownOperationType",
    17: "UnknownBroadcastLocale",
    18: "CantDisjointFsn",
    19: "BadResponseFromDatabase",
    20: "FlagInstNotExist",
    21: "FlagNotExist",
    22: "GuildLockRequired",
    23: "SiegeInProgress",
    24: "SiegeNotExists",
    25: "IncorrectSuzerain",
    26: "MaxVassalsReached",
    27: "DynamicQuestHasIllegalSynthaxis",
    28: "AuidsListInUsedInQuest",
    29: "CantRemoveGuildMemberFromFriends",
    30: "CantRemoveFavouriteFriend",
    31: "EmailNotExist",
    32: "EmailAlreadyActivated",
    33: "NicknameNotExist",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "BadResult": 1,
    "LoginNotExist": 2,
    "SnUidNotExist": 3,
    "HeroInstIdNotExist": 4,
    "HeroClassNotExist": 5,
    "CantRemoveClassHero": 6,
    "TalentInstIdNotExist": 7,
    "TalentClassNotExist": 8,
    "ServerReturnedNull": 9,
    "TransportException": 10,
    "AuidNotExist": 11,
    "NoUsersWithThatNickname": 12,
    "BadServiceType": 13,
    "GuildLevelIsTooLow": 14,
    "IconFileUploadingError": 15,
    "UnknownOperationType": 16,
    "UnknownBroadcastLocale": 17,
    "CantDisjointFsn": 18,
    "BadResponseFromDatabase": 19,
    "FlagInstNotExist": 20,
    "FlagNotExist": 21,
    "GuildLockRequired": 22,
    "SiegeInProgress": 23,
    "SiegeNotExists": 24,
    "IncorrectSuzerain": 25,
    "MaxVassalsReached": 26,
    "DynamicQuestHasIllegalSynthaxis": 27,
    "AuidsListInUsedInQuest": 28,
    "CantRemoveGuildMemberFromFriends": 29,
    "CantRemoveFavouriteFriend": 30,
    "EmailNotExist": 31,
    "EmailAlreadyActivated": 32,
    "NicknameNotExist": 33,
  }

class Gender(object):
  Unknown = 0
  Male = 1
  Female = 2
  Other = 3

  _VALUES_TO_NAMES = {
    0: "Unknown",
    1: "Male",
    2: "Female",
    3: "Other",
  }

  _NAMES_TO_VALUES = {
    "Unknown": 0,
    "Male": 1,
    "Female": 2,
    "Other": 3,
  }

class PayServiceType(object):
  NoService = 0
  PremiumAccount = 1
  Unban = 2

  _VALUES_TO_NAMES = {
    0: "NoService",
    1: "PremiumAccount",
    2: "Unban",
  }

  _NAMES_TO_VALUES = {
    "NoService": 0,
    "PremiumAccount": 1,
    "Unban": 2,
  }

class PayTicketType(object):
  Silver = 0
  Gold = 1
  Free = 2

  _VALUES_TO_NAMES = {
    0: "Silver",
    1: "Gold",
    2: "Free",
  }

  _NAMES_TO_VALUES = {
    "Silver": 0,
    "Gold": 1,
    "Free": 2,
  }

class QuestStatus(object):
  NotIssued = 0
  New = 1
  Accepted = 2
  Complete = 3

  _VALUES_TO_NAMES = {
    0: "NotIssued",
    1: "New",
    2: "Accepted",
    3: "Complete",
  }

  _NAMES_TO_VALUES = {
    "NotIssued": 0,
    "New": 1,
    "Accepted": 2,
    "Complete": 3,
  }

class QuestChangeAction(object):
  Add = 0
  Accept = 1
  Complete = 2
  Delete = 3

  _VALUES_TO_NAMES = {
    0: "Add",
    1: "Accept",
    2: "Complete",
    3: "Delete",
  }

  _NAMES_TO_VALUES = {
    "Add": 0,
    "Accept": 1,
    "Complete": 2,
    "Delete": 3,
  }

class TalentUpgradeEntityType(object):
  Rune = 0
  Catalist = 1

  _VALUES_TO_NAMES = {
    0: "Rune",
    1: "Catalist",
  }

  _NAMES_TO_VALUES = {
    "Rune": 0,
    "Catalist": 1,
  }

class TicketState(object):
  NotActivated = 0
  InTournament = 1
  TournamentLost = 2

  _VALUES_TO_NAMES = {
    0: "NotActivated",
    1: "InTournament",
    2: "TournamentLost",
  }

  _NAMES_TO_VALUES = {
    "NotActivated": 0,
    "InTournament": 1,
    "TournamentLost": 2,
  }

class TicketPriseState(object):
  HasNoPrise = 0
  PriseInProgress = 1
  HasPrise = 2

  _VALUES_TO_NAMES = {
    0: "HasNoPrise",
    1: "PriseInProgress",
    2: "HasPrise",
  }

  _NAMES_TO_VALUES = {
    "HasNoPrise": 0,
    "PriseInProgress": 1,
    "HasPrise": 2,
  }

class TicketBoughtType(object):
  BoughtForGold = 0
  BoughtForSilver = 1
  GiftedWithPayment = 2
  GivenByGM = 3

  _VALUES_TO_NAMES = {
    0: "BoughtForGold",
    1: "BoughtForSilver",
    2: "GiftedWithPayment",
    3: "GivenByGM",
  }

  _NAMES_TO_VALUES = {
    "BoughtForGold": 0,
    "BoughtForSilver": 1,
    "GiftedWithPayment": 2,
    "GivenByGM": 3,
  }

class UserOperationType(object):
  Ban = 0
  Mute = 1
  Unban = 2
  Unmute = 3
  Forgive = 4
  SetLeave = 5

  _VALUES_TO_NAMES = {
    0: "Ban",
    1: "Mute",
    2: "Unban",
    3: "Unmute",
    4: "Forgive",
    5: "SetLeave",
  }

  _NAMES_TO_VALUES = {
    "Ban": 0,
    "Mute": 1,
    "Unban": 2,
    "Unmute": 3,
    "Forgive": 4,
    "SetLeave": 5,
  }

class ConfigEventType(object):
  Techs = 0
  CustomEvent = 1
  EventMap = 2
  TalentDropRarity = 3
  NewsBanner = 4
  SkinGoldPrice = 5
  HeroPrice = 6
  TransmutationTalentsPerPerl = 7
  ReforgeTalentPrice = 8
  RerollShopSlots = 9
  RerollShopPrice = 10
  RerollShopGroupPrice = 11
  RerollShopGroupCurrencies = 12
  RerollShopGroupProbability = 13
  RerollShopSlotPrice = 14
  FirstBuyPrice = 15
  PremiumNotInactive = 16
  RerollShopSlotAmount = 17
  RerollShopGroupSlots = 18
  RerollShopBanner = 19
  RerollShopTooltip = 20
  RollEvent = 21
  QuestEvent = 22
  TradeEvent = 23
  SeasonEvent = 24
  DonateEvent = 25

  _VALUES_TO_NAMES = {
    0: "Techs",
    1: "CustomEvent",
    2: "EventMap",
    3: "TalentDropRarity",
    4: "NewsBanner",
    5: "SkinGoldPrice",
    6: "HeroPrice",
    7: "TransmutationTalentsPerPerl",
    8: "ReforgeTalentPrice",
    9: "RerollShopSlots",
    10: "RerollShopPrice",
    11: "RerollShopGroupPrice",
    12: "RerollShopGroupCurrencies",
    13: "RerollShopGroupProbability",
    14: "RerollShopSlotPrice",
    15: "FirstBuyPrice",
    16: "PremiumNotInactive",
    17: "RerollShopSlotAmount",
    18: "RerollShopGroupSlots",
    19: "RerollShopBanner",
    20: "RerollShopTooltip",
    21: "RollEvent",
    22: "QuestEvent",
    23: "TradeEvent",
    24: "SeasonEvent",
    25: "DonateEvent",
  }

  _NAMES_TO_VALUES = {
    "Techs": 0,
    "CustomEvent": 1,
    "EventMap": 2,
    "TalentDropRarity": 3,
    "NewsBanner": 4,
    "SkinGoldPrice": 5,
    "HeroPrice": 6,
    "TransmutationTalentsPerPerl": 7,
    "ReforgeTalentPrice": 8,
    "RerollShopSlots": 9,
    "RerollShopPrice": 10,
    "RerollShopGroupPrice": 11,
    "RerollShopGroupCurrencies": 12,
    "RerollShopGroupProbability": 13,
    "RerollShopSlotPrice": 14,
    "FirstBuyPrice": 15,
    "PremiumNotInactive": 16,
    "RerollShopSlotAmount": 17,
    "RerollShopGroupSlots": 18,
    "RerollShopBanner": 19,
    "RerollShopTooltip": 20,
    "RollEvent": 21,
    "QuestEvent": 22,
    "TradeEvent": 23,
    "SeasonEvent": 24,
    "DonateEvent": 25,
  }

class ETalentRarity(object):
  Class = 0
  ordinary = 1
  good = 2
  excellent = 3
  magnificent = 4
  exclusive = 5
  outstanding = 6

  _VALUES_TO_NAMES = {
    0: "Class",
    1: "ordinary",
    2: "good",
    3: "excellent",
    4: "magnificent",
    5: "exclusive",
    6: "outstanding",
  }

  _NAMES_TO_VALUES = {
    "Class": 0,
    "ordinary": 1,
    "good": 2,
    "excellent": 3,
    "magnificent": 4,
    "exclusive": 5,
    "outstanding": 6,
  }

class MassOperationType(object):
  UnlockFlag = 0
  LockFlag = 1
  AddTalent = 2
  AddTalents = 3
  PremiumAccount = 4
  SendMessageToUser = 5
  GiveLamp = 6
  AddSkin = 7
  DeleteSkin = 8
  UnlockHero = 9
  AddBuilding = 10
  EditAccount = 11
  FlushServerId = 12

  _VALUES_TO_NAMES = {
    0: "UnlockFlag",
    1: "LockFlag",
    2: "AddTalent",
    3: "AddTalents",
    4: "PremiumAccount",
    5: "SendMessageToUser",
    6: "GiveLamp",
    7: "AddSkin",
    8: "DeleteSkin",
    9: "UnlockHero",
    10: "AddBuilding",
    11: "EditAccount",
    12: "FlushServerId",
  }

  _NAMES_TO_VALUES = {
    "UnlockFlag": 0,
    "LockFlag": 1,
    "AddTalent": 2,
    "AddTalents": 3,
    "PremiumAccount": 4,
    "SendMessageToUser": 5,
    "GiveLamp": 6,
    "AddSkin": 7,
    "DeleteSkin": 8,
    "UnlockHero": 9,
    "AddBuilding": 10,
    "EditAccount": 11,
    "FlushServerId": 12,
  }

class RollEventItemType(object):
  Resource = 0
  Talent = 1
  Skin = 2
  Hero = 3
  Lootbox = 4

  _VALUES_TO_NAMES = {
    0: "Resource",
    1: "Talent",
    2: "Skin",
    3: "Hero",
    4: "Lootbox",
  }

  _NAMES_TO_VALUES = {
    "Resource": 0,
    "Talent": 1,
    "Skin": 2,
    "Hero": 3,
    "Lootbox": 4,
  }

class RollEventRuleType(object):
  Simple = 0
  Reforge = 1

  _VALUES_TO_NAMES = {
    0: "Simple",
    1: "Reforge",
  }

  _NAMES_TO_VALUES = {
    "Simple": 0,
    "Reforge": 1,
  }


class SeasonAwards(object):
  """
  Attributes:
   - seasonId
   - seasonName
   - startDate
   - endDate
   - perls
   - skin
   - flag
   - talents
   - lootboxes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'seasonId', None, None, ), # 1
    (2, TType.STRING, 'seasonName', None, None, ), # 2
    (3, TType.I64, 'startDate', None, None, ), # 3
    (4, TType.I64, 'endDate', None, None, ), # 4
    (5, TType.I32, 'perls', None, None, ), # 5
    (6, TType.STRING, 'skin', None, None, ), # 6
    (7, TType.STRING, 'flag', None, None, ), # 7
    (8, TType.STRING, 'talents', None, None, ), # 8
    (9, TType.STRING, 'lootboxes', None, None, ), # 9
  )

  def __init__(self, seasonId=None, seasonName=None, startDate=None, endDate=None, perls=None, skin=None, flag=None, talents=None, lootboxes=None,):
    self.seasonId = seasonId
    self.seasonName = seasonName
    self.startDate = startDate
    self.endDate = endDate
    self.perls = perls
    self.skin = skin
    self.flag = flag
    self.talents = talents
    self.lootboxes = lootboxes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.seasonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.seasonName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.perls = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.skin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.talents = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.lootboxes = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonAwards')
    if self.seasonId is not None:
      oprot.writeFieldBegin('seasonId', TType.I32, 1)
      oprot.writeI32(self.seasonId)
      oprot.writeFieldEnd()
    if self.seasonName is not None:
      oprot.writeFieldBegin('seasonName', TType.STRING, 2)
      oprot.writeString(self.seasonName)
      oprot.writeFieldEnd()
    if self.startDate is not None:
      oprot.writeFieldBegin('startDate', TType.I64, 3)
      oprot.writeI64(self.startDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 4)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.perls is not None:
      oprot.writeFieldBegin('perls', TType.I32, 5)
      oprot.writeI32(self.perls)
      oprot.writeFieldEnd()
    if self.skin is not None:
      oprot.writeFieldBegin('skin', TType.STRING, 6)
      oprot.writeString(self.skin)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.STRING, 7)
      oprot.writeString(self.flag)
      oprot.writeFieldEnd()
    if self.talents is not None:
      oprot.writeFieldBegin('talents', TType.STRING, 8)
      oprot.writeString(self.talents)
      oprot.writeFieldEnd()
    if self.lootboxes is not None:
      oprot.writeFieldBegin('lootboxes', TType.STRING, 9)
      oprot.writeString(self.lootboxes)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountInfo(object):
  """
  Attributes:
   - snid
   - snuid
   - login
   - email
   - nickname
   - online
   - gold
   - silver
   - resource1
   - resource2
   - resource3
   - perl
   - redPerl
   - currentsession
   - registerdate
   - fame
   - reliability
   - fraction
   - location
   - banFlag
   - banned
   - muteFlag
   - muted
   - isDeveloper
   - auid
   - gender
   - nickChanges
   - nickChangesFree
   - fractionChanges
   - fractionChangesFree
   - premiumAccountDate
   - lordRating
   - numberOfWins
   - dodges
   - retiredTime
   - guardRating
   - dailyRating
   - guildid
   - guildBuildingLevel
   - isSpectator
   - hasLamp
   - joinedSnids
   - lastPaymentTime
   - lastLampDropTime
   - isRegularMMAllowed
   - locale
   - muid
   - country
   - region
   - city
   - gmcountry
   - gmregion
   - gmcity
   - cwplayerpoints
   - leaverPoints
   - isLeaver
   - isBadBehaviour
   - canMute
   - PlayerRating
   - PlayerRatingHero
   - PlayerRatingHeroLastPlayed
   - numberOfWinsForPR
   - extraComplaints
   - bruteForceDefenderBan
   - extraSessionComplaints
   - listSeasonsAwards
   - Shard
   - currencies
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snid', None, None, ), # 1
    (2, TType.STRING, 'snuid', None, None, ), # 2
    (3, TType.STRING, 'login', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'nickname', None, None, ), # 5
    (6, TType.BOOL, 'online', None, None, ), # 6
    (7, TType.I32, 'gold', None, None, ), # 7
    (8, TType.I32, 'silver', None, None, ), # 8
    (9, TType.I32, 'resource1', None, None, ), # 9
    (10, TType.I32, 'resource2', None, None, ), # 10
    (11, TType.I32, 'resource3', None, None, ), # 11
    (12, TType.I32, 'perl', None, None, ), # 12
    (13, TType.I32, 'redPerl', None, None, ), # 13
    (14, TType.I64, 'currentsession', None, None, ), # 14
    (15, TType.I64, 'registerdate', None, None, ), # 15
    (16, TType.I32, 'fame', None, None, ), # 16
    (17, TType.I32, 'reliability', None, None, ), # 17
    (18, TType.I32, 'fraction', None, None, ), # 18
    (19, TType.STRING, 'location', None, None, ), # 19
    (20, TType.I32, 'banFlag', None, None, ), # 20
    (21, TType.I64, 'banned', None, None, ), # 21
    (22, TType.I32, 'muteFlag', None, None, ), # 22
    (23, TType.I64, 'muted', None, None, ), # 23
    (24, TType.BOOL, 'isDeveloper', None, None, ), # 24
    (25, TType.I64, 'auid', None, None, ), # 25
    (26, TType.I32, 'gender', None, None, ), # 26
    (27, TType.I32, 'nickChanges', None, None, ), # 27
    (28, TType.I32, 'nickChangesFree', None, None, ), # 28
    (29, TType.I32, 'fractionChanges', None, None, ), # 29
    (30, TType.I32, 'fractionChangesFree', None, None, ), # 30
    (31, TType.I64, 'premiumAccountDate', None, None, ), # 31
    (32, TType.DOUBLE, 'lordRating', None, None, ), # 32
    (33, TType.DOUBLE, 'numberOfWins', None, None, ), # 33
    (34, TType.I32, 'dodges', None, None, ), # 34
    (35, TType.I64, 'retiredTime', None, None, ), # 35
    (36, TType.DOUBLE, 'guardRating', None, None, ), # 36
    (37, TType.DOUBLE, 'dailyRating', None, None, ), # 37
    (38, TType.I64, 'guildid', None, None, ), # 38
    (39, TType.I32, 'guildBuildingLevel', None, None, ), # 39
    (40, TType.BOOL, 'isSpectator', None, None, ), # 40
    (41, TType.BOOL, 'hasLamp', None, None, ), # 41
    (42, TType.LIST, 'joinedSnids', (TType.STRING,None), None, ), # 42
    (43, TType.I64, 'lastPaymentTime', None, None, ), # 43
    (44, TType.I64, 'lastLampDropTime', None, None, ), # 44
    (45, TType.BOOL, 'isRegularMMAllowed', None, None, ), # 45
    (46, TType.STRING, 'locale', None, None, ), # 46
    (47, TType.STRING, 'muid', None, None, ), # 47
    (48, TType.STRING, 'country', None, None, ), # 48
    (49, TType.STRING, 'region', None, None, ), # 49
    (50, TType.STRING, 'city', None, None, ), # 50
    (51, TType.STRING, 'gmcountry', None, None, ), # 51
    (52, TType.STRING, 'gmregion', None, None, ), # 52
    (53, TType.STRING, 'gmcity', None, None, ), # 53
    (54, TType.I32, 'cwplayerpoints', None, None, ), # 54
    (55, TType.I32, 'leaverPoints', None, None, ), # 55
    (56, TType.BOOL, 'isLeaver', None, None, ), # 56
    (57, TType.BOOL, 'isBadBehaviour', None, None, ), # 57
    (58, TType.BOOL, 'canMute', None, None, ), # 58
    (59, TType.I32, 'PlayerRating', None, None, ), # 59
    (60, TType.I64, 'PlayerRatingHero', None, None, ), # 60
    (61, TType.I64, 'PlayerRatingHeroLastPlayed', None, None, ), # 61
    (62, TType.I64, 'numberOfWinsForPR', None, None, ), # 62
    (63, TType.I32, 'extraComplaints', None, None, ), # 63
    (64, TType.I64, 'bruteForceDefenderBan', None, None, ), # 64
    (65, TType.I32, 'extraSessionComplaints', None, None, ), # 65
    (66, TType.LIST, 'listSeasonsAwards', (TType.STRUCT,(SeasonAwards, SeasonAwards.thrift_spec)), None, ), # 66
    (67, TType.I32, 'Shard', None, None, ), # 67
    (68, TType.MAP, 'currencies', (TType.STRING,None,TType.I32,None), None, ), # 68
  )

  def __init__(self, snid=None, snuid=None, login=None, email=None, nickname=None, online=None, gold=None, silver=None, resource1=None, resource2=None, resource3=None, perl=None, redPerl=None, currentsession=None, registerdate=None, fame=None, reliability=None, fraction=None, location=None, banFlag=None, banned=None, muteFlag=None, muted=None, isDeveloper=None, auid=None, gender=None, nickChanges=None, nickChangesFree=None, fractionChanges=None, fractionChangesFree=None, premiumAccountDate=None, lordRating=None, numberOfWins=None, dodges=None, retiredTime=None, guardRating=None, dailyRating=None, guildid=None, guildBuildingLevel=None, isSpectator=None, hasLamp=None, joinedSnids=None, lastPaymentTime=None, lastLampDropTime=None, isRegularMMAllowed=None, locale=None, muid=None, country=None, region=None, city=None, gmcountry=None, gmregion=None, gmcity=None, cwplayerpoints=None, leaverPoints=None, isLeaver=None, isBadBehaviour=None, canMute=None, PlayerRating=None, PlayerRatingHero=None, PlayerRatingHeroLastPlayed=None, numberOfWinsForPR=None, extraComplaints=None, bruteForceDefenderBan=None, extraSessionComplaints=None, listSeasonsAwards=None, Shard=None, currencies=None,):
    self.snid = snid
    self.snuid = snuid
    self.login = login
    self.email = email
    self.nickname = nickname
    self.online = online
    self.gold = gold
    self.silver = silver
    self.resource1 = resource1
    self.resource2 = resource2
    self.resource3 = resource3
    self.perl = perl
    self.redPerl = redPerl
    self.currentsession = currentsession
    self.registerdate = registerdate
    self.fame = fame
    self.reliability = reliability
    self.fraction = fraction
    self.location = location
    self.banFlag = banFlag
    self.banned = banned
    self.muteFlag = muteFlag
    self.muted = muted
    self.isDeveloper = isDeveloper
    self.auid = auid
    self.gender = gender
    self.nickChanges = nickChanges
    self.nickChangesFree = nickChangesFree
    self.fractionChanges = fractionChanges
    self.fractionChangesFree = fractionChangesFree
    self.premiumAccountDate = premiumAccountDate
    self.lordRating = lordRating
    self.numberOfWins = numberOfWins
    self.dodges = dodges
    self.retiredTime = retiredTime
    self.guardRating = guardRating
    self.dailyRating = dailyRating
    self.guildid = guildid
    self.guildBuildingLevel = guildBuildingLevel
    self.isSpectator = isSpectator
    self.hasLamp = hasLamp
    self.joinedSnids = joinedSnids
    self.lastPaymentTime = lastPaymentTime
    self.lastLampDropTime = lastLampDropTime
    self.isRegularMMAllowed = isRegularMMAllowed
    self.locale = locale
    self.muid = muid
    self.country = country
    self.region = region
    self.city = city
    self.gmcountry = gmcountry
    self.gmregion = gmregion
    self.gmcity = gmcity
    self.cwplayerpoints = cwplayerpoints
    self.leaverPoints = leaverPoints
    self.isLeaver = isLeaver
    self.isBadBehaviour = isBadBehaviour
    self.canMute = canMute
    self.PlayerRating = PlayerRating
    self.PlayerRatingHero = PlayerRatingHero
    self.PlayerRatingHeroLastPlayed = PlayerRatingHeroLastPlayed
    self.numberOfWinsForPR = numberOfWinsForPR
    self.extraComplaints = extraComplaints
    self.bruteForceDefenderBan = bruteForceDefenderBan
    self.extraSessionComplaints = extraSessionComplaints
    self.listSeasonsAwards = listSeasonsAwards
    self.Shard = Shard
    self.currencies = currencies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.snuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.online = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.gold = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.silver = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.resource1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.resource2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.resource3 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.perl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.redPerl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.currentsession = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.registerdate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.fame = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.reliability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.fraction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.banFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.banned = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.muteFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.muted = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.BOOL:
          self.isDeveloper = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.nickChanges = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.nickChangesFree = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.fractionChanges = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.fractionChangesFree = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          self.premiumAccountDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.DOUBLE:
          self.lordRating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.DOUBLE:
          self.numberOfWins = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.dodges = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I64:
          self.retiredTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.DOUBLE:
          self.guardRating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.DOUBLE:
          self.dailyRating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.guildBuildingLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.isSpectator = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.BOOL:
          self.hasLamp = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.LIST:
          self.joinedSnids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.joinedSnids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I64:
          self.lastPaymentTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I64:
          self.lastLampDropTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.BOOL:
          self.isRegularMMAllowed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.STRING:
          self.muid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.STRING:
          self.region = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.gmcountry = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.STRING:
          self.gmregion = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.STRING:
          self.gmcity = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.I32:
          self.cwplayerpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I32:
          self.leaverPoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.BOOL:
          self.isLeaver = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.BOOL:
          self.isBadBehaviour = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.BOOL:
          self.canMute = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.I32:
          self.PlayerRating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I64:
          self.PlayerRatingHero = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.I64:
          self.PlayerRatingHeroLastPlayed = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.I64:
          self.numberOfWinsForPR = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.I32:
          self.extraComplaints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.I64:
          self.bruteForceDefenderBan = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.I32:
          self.extraSessionComplaints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.LIST:
          self.listSeasonsAwards = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = SeasonAwards()
            _elem11.read(iprot)
            self.listSeasonsAwards.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.I32:
          self.Shard = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.MAP:
          self.currencies = {}
          (_ktype13, _vtype14, _size12 ) = iprot.readMapBegin()
          for _i16 in xrange(_size12):
            _key17 = iprot.readString();
            _val18 = iprot.readI32();
            self.currencies[_key17] = _val18
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountInfo')
    if self.snid is not None:
      oprot.writeFieldBegin('snid', TType.STRING, 1)
      oprot.writeString(self.snid)
      oprot.writeFieldEnd()
    if self.snuid is not None:
      oprot.writeFieldBegin('snuid', TType.STRING, 2)
      oprot.writeString(self.snuid)
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 3)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 5)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 6)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 7)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.silver is not None:
      oprot.writeFieldBegin('silver', TType.I32, 8)
      oprot.writeI32(self.silver)
      oprot.writeFieldEnd()
    if self.resource1 is not None:
      oprot.writeFieldBegin('resource1', TType.I32, 9)
      oprot.writeI32(self.resource1)
      oprot.writeFieldEnd()
    if self.resource2 is not None:
      oprot.writeFieldBegin('resource2', TType.I32, 10)
      oprot.writeI32(self.resource2)
      oprot.writeFieldEnd()
    if self.resource3 is not None:
      oprot.writeFieldBegin('resource3', TType.I32, 11)
      oprot.writeI32(self.resource3)
      oprot.writeFieldEnd()
    if self.perl is not None:
      oprot.writeFieldBegin('perl', TType.I32, 12)
      oprot.writeI32(self.perl)
      oprot.writeFieldEnd()
    if self.redPerl is not None:
      oprot.writeFieldBegin('redPerl', TType.I32, 13)
      oprot.writeI32(self.redPerl)
      oprot.writeFieldEnd()
    if self.currentsession is not None:
      oprot.writeFieldBegin('currentsession', TType.I64, 14)
      oprot.writeI64(self.currentsession)
      oprot.writeFieldEnd()
    if self.registerdate is not None:
      oprot.writeFieldBegin('registerdate', TType.I64, 15)
      oprot.writeI64(self.registerdate)
      oprot.writeFieldEnd()
    if self.fame is not None:
      oprot.writeFieldBegin('fame', TType.I32, 16)
      oprot.writeI32(self.fame)
      oprot.writeFieldEnd()
    if self.reliability is not None:
      oprot.writeFieldBegin('reliability', TType.I32, 17)
      oprot.writeI32(self.reliability)
      oprot.writeFieldEnd()
    if self.fraction is not None:
      oprot.writeFieldBegin('fraction', TType.I32, 18)
      oprot.writeI32(self.fraction)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 19)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.banFlag is not None:
      oprot.writeFieldBegin('banFlag', TType.I32, 20)
      oprot.writeI32(self.banFlag)
      oprot.writeFieldEnd()
    if self.banned is not None:
      oprot.writeFieldBegin('banned', TType.I64, 21)
      oprot.writeI64(self.banned)
      oprot.writeFieldEnd()
    if self.muteFlag is not None:
      oprot.writeFieldBegin('muteFlag', TType.I32, 22)
      oprot.writeI32(self.muteFlag)
      oprot.writeFieldEnd()
    if self.muted is not None:
      oprot.writeFieldBegin('muted', TType.I64, 23)
      oprot.writeI64(self.muted)
      oprot.writeFieldEnd()
    if self.isDeveloper is not None:
      oprot.writeFieldBegin('isDeveloper', TType.BOOL, 24)
      oprot.writeBool(self.isDeveloper)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 25)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 26)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.nickChanges is not None:
      oprot.writeFieldBegin('nickChanges', TType.I32, 27)
      oprot.writeI32(self.nickChanges)
      oprot.writeFieldEnd()
    if self.nickChangesFree is not None:
      oprot.writeFieldBegin('nickChangesFree', TType.I32, 28)
      oprot.writeI32(self.nickChangesFree)
      oprot.writeFieldEnd()
    if self.fractionChanges is not None:
      oprot.writeFieldBegin('fractionChanges', TType.I32, 29)
      oprot.writeI32(self.fractionChanges)
      oprot.writeFieldEnd()
    if self.fractionChangesFree is not None:
      oprot.writeFieldBegin('fractionChangesFree', TType.I32, 30)
      oprot.writeI32(self.fractionChangesFree)
      oprot.writeFieldEnd()
    if self.premiumAccountDate is not None:
      oprot.writeFieldBegin('premiumAccountDate', TType.I64, 31)
      oprot.writeI64(self.premiumAccountDate)
      oprot.writeFieldEnd()
    if self.lordRating is not None:
      oprot.writeFieldBegin('lordRating', TType.DOUBLE, 32)
      oprot.writeDouble(self.lordRating)
      oprot.writeFieldEnd()
    if self.numberOfWins is not None:
      oprot.writeFieldBegin('numberOfWins', TType.DOUBLE, 33)
      oprot.writeDouble(self.numberOfWins)
      oprot.writeFieldEnd()
    if self.dodges is not None:
      oprot.writeFieldBegin('dodges', TType.I32, 34)
      oprot.writeI32(self.dodges)
      oprot.writeFieldEnd()
    if self.retiredTime is not None:
      oprot.writeFieldBegin('retiredTime', TType.I64, 35)
      oprot.writeI64(self.retiredTime)
      oprot.writeFieldEnd()
    if self.guardRating is not None:
      oprot.writeFieldBegin('guardRating', TType.DOUBLE, 36)
      oprot.writeDouble(self.guardRating)
      oprot.writeFieldEnd()
    if self.dailyRating is not None:
      oprot.writeFieldBegin('dailyRating', TType.DOUBLE, 37)
      oprot.writeDouble(self.dailyRating)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 38)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildBuildingLevel is not None:
      oprot.writeFieldBegin('guildBuildingLevel', TType.I32, 39)
      oprot.writeI32(self.guildBuildingLevel)
      oprot.writeFieldEnd()
    if self.isSpectator is not None:
      oprot.writeFieldBegin('isSpectator', TType.BOOL, 40)
      oprot.writeBool(self.isSpectator)
      oprot.writeFieldEnd()
    if self.hasLamp is not None:
      oprot.writeFieldBegin('hasLamp', TType.BOOL, 41)
      oprot.writeBool(self.hasLamp)
      oprot.writeFieldEnd()
    if self.joinedSnids is not None:
      oprot.writeFieldBegin('joinedSnids', TType.LIST, 42)
      oprot.writeListBegin(TType.STRING, len(self.joinedSnids))
      for iter19 in self.joinedSnids:
        oprot.writeString(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lastPaymentTime is not None:
      oprot.writeFieldBegin('lastPaymentTime', TType.I64, 43)
      oprot.writeI64(self.lastPaymentTime)
      oprot.writeFieldEnd()
    if self.lastLampDropTime is not None:
      oprot.writeFieldBegin('lastLampDropTime', TType.I64, 44)
      oprot.writeI64(self.lastLampDropTime)
      oprot.writeFieldEnd()
    if self.isRegularMMAllowed is not None:
      oprot.writeFieldBegin('isRegularMMAllowed', TType.BOOL, 45)
      oprot.writeBool(self.isRegularMMAllowed)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 46)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.muid is not None:
      oprot.writeFieldBegin('muid', TType.STRING, 47)
      oprot.writeString(self.muid)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 48)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 49)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 50)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.gmcountry is not None:
      oprot.writeFieldBegin('gmcountry', TType.STRING, 51)
      oprot.writeString(self.gmcountry)
      oprot.writeFieldEnd()
    if self.gmregion is not None:
      oprot.writeFieldBegin('gmregion', TType.STRING, 52)
      oprot.writeString(self.gmregion)
      oprot.writeFieldEnd()
    if self.gmcity is not None:
      oprot.writeFieldBegin('gmcity', TType.STRING, 53)
      oprot.writeString(self.gmcity)
      oprot.writeFieldEnd()
    if self.cwplayerpoints is not None:
      oprot.writeFieldBegin('cwplayerpoints', TType.I32, 54)
      oprot.writeI32(self.cwplayerpoints)
      oprot.writeFieldEnd()
    if self.leaverPoints is not None:
      oprot.writeFieldBegin('leaverPoints', TType.I32, 55)
      oprot.writeI32(self.leaverPoints)
      oprot.writeFieldEnd()
    if self.isLeaver is not None:
      oprot.writeFieldBegin('isLeaver', TType.BOOL, 56)
      oprot.writeBool(self.isLeaver)
      oprot.writeFieldEnd()
    if self.isBadBehaviour is not None:
      oprot.writeFieldBegin('isBadBehaviour', TType.BOOL, 57)
      oprot.writeBool(self.isBadBehaviour)
      oprot.writeFieldEnd()
    if self.canMute is not None:
      oprot.writeFieldBegin('canMute', TType.BOOL, 58)
      oprot.writeBool(self.canMute)
      oprot.writeFieldEnd()
    if self.PlayerRating is not None:
      oprot.writeFieldBegin('PlayerRating', TType.I32, 59)
      oprot.writeI32(self.PlayerRating)
      oprot.writeFieldEnd()
    if self.PlayerRatingHero is not None:
      oprot.writeFieldBegin('PlayerRatingHero', TType.I64, 60)
      oprot.writeI64(self.PlayerRatingHero)
      oprot.writeFieldEnd()
    if self.PlayerRatingHeroLastPlayed is not None:
      oprot.writeFieldBegin('PlayerRatingHeroLastPlayed', TType.I64, 61)
      oprot.writeI64(self.PlayerRatingHeroLastPlayed)
      oprot.writeFieldEnd()
    if self.numberOfWinsForPR is not None:
      oprot.writeFieldBegin('numberOfWinsForPR', TType.I64, 62)
      oprot.writeI64(self.numberOfWinsForPR)
      oprot.writeFieldEnd()
    if self.extraComplaints is not None:
      oprot.writeFieldBegin('extraComplaints', TType.I32, 63)
      oprot.writeI32(self.extraComplaints)
      oprot.writeFieldEnd()
    if self.bruteForceDefenderBan is not None:
      oprot.writeFieldBegin('bruteForceDefenderBan', TType.I64, 64)
      oprot.writeI64(self.bruteForceDefenderBan)
      oprot.writeFieldEnd()
    if self.extraSessionComplaints is not None:
      oprot.writeFieldBegin('extraSessionComplaints', TType.I32, 65)
      oprot.writeI32(self.extraSessionComplaints)
      oprot.writeFieldEnd()
    if self.listSeasonsAwards is not None:
      oprot.writeFieldBegin('listSeasonsAwards', TType.LIST, 66)
      oprot.writeListBegin(TType.STRUCT, len(self.listSeasonsAwards))
      for iter20 in self.listSeasonsAwards:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.Shard is not None:
      oprot.writeFieldBegin('Shard', TType.I32, 67)
      oprot.writeI32(self.Shard)
      oprot.writeFieldEnd()
    if self.currencies is not None:
      oprot.writeFieldBegin('currencies', TType.MAP, 68)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.currencies))
      for kiter21,viter22 in self.currencies.items():
        oprot.writeString(kiter21)
        oprot.writeI32(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountEdit(object):
  """
  Attributes:
   - snid
   - snuid
   - login
   - email
   - nickname
   - gold
   - silver
   - resource1
   - resource2
   - resource3
   - perl
   - redPerl
   - fame
   - reliability
   - fraction
   - location
   - isDeveloper
   - auid
   - gender
   - switchQuant
   - lordRating
   - numberOfWins
   - dodges
   - retiredTime
   - guardRating
   - dailyRating
   - guildBuildingLevel
   - isSpectator
   - lastPaymentTime
   - lastLampDropTime
   - isRegularMMAllowed
   - cwplayerpoints
   - canMute
   - PlayerRating
   - numberOfWinsForPR
   - extraComplaints
   - bruteForceDefenderBan
   - extraSessionComplaints
   - Shard
   - currencies
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snid', None, None, ), # 1
    (2, TType.STRING, 'snuid', None, None, ), # 2
    (3, TType.STRING, 'login', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'nickname', None, None, ), # 5
    (6, TType.I32, 'gold', None, None, ), # 6
    (7, TType.I32, 'silver', None, None, ), # 7
    (8, TType.I32, 'resource1', None, None, ), # 8
    (9, TType.I32, 'resource2', None, None, ), # 9
    (10, TType.I32, 'resource3', None, None, ), # 10
    (11, TType.I32, 'perl', None, None, ), # 11
    (12, TType.I32, 'redPerl', None, None, ), # 12
    (13, TType.I32, 'fame', None, None, ), # 13
    (14, TType.I32, 'reliability', None, None, ), # 14
    (15, TType.I32, 'fraction', None, None, ), # 15
    (16, TType.STRING, 'location', None, None, ), # 16
    (17, TType.BOOL, 'isDeveloper', None, None, ), # 17
    (18, TType.I64, 'auid', None, None, ), # 18
    (19, TType.I32, 'gender', None, None, ), # 19
    (20, TType.I32, 'switchQuant', None, None, ), # 20
    (21, TType.DOUBLE, 'lordRating', None, None, ), # 21
    (22, TType.DOUBLE, 'numberOfWins', None, None, ), # 22
    (23, TType.I32, 'dodges', None, None, ), # 23
    (24, TType.I64, 'retiredTime', None, None, ), # 24
    (25, TType.DOUBLE, 'guardRating', None, None, ), # 25
    (26, TType.DOUBLE, 'dailyRating', None, None, ), # 26
    (27, TType.I32, 'guildBuildingLevel', None, None, ), # 27
    (28, TType.BOOL, 'isSpectator', None, None, ), # 28
    (29, TType.I64, 'lastPaymentTime', None, None, ), # 29
    (30, TType.I64, 'lastLampDropTime', None, None, ), # 30
    (31, TType.BOOL, 'isRegularMMAllowed', None, None, ), # 31
    (32, TType.I32, 'cwplayerpoints', None, None, ), # 32
    (33, TType.BOOL, 'canMute', None, None, ), # 33
    (34, TType.I32, 'PlayerRating', None, None, ), # 34
    (35, TType.I64, 'numberOfWinsForPR', None, None, ), # 35
    (36, TType.I32, 'extraComplaints', None, None, ), # 36
    (37, TType.I64, 'bruteForceDefenderBan', None, None, ), # 37
    (38, TType.I32, 'extraSessionComplaints', None, None, ), # 38
    (39, TType.I32, 'Shard', None, None, ), # 39
    (40, TType.MAP, 'currencies', (TType.STRING,None,TType.I32,None), None, ), # 40
  )

  def __init__(self, snid=None, snuid=None, login=None, email=None, nickname=None, gold=None, silver=None, resource1=None, resource2=None, resource3=None, perl=None, redPerl=None, fame=None, reliability=None, fraction=None, location=None, isDeveloper=None, auid=None, gender=None, switchQuant=None, lordRating=None, numberOfWins=None, dodges=None, retiredTime=None, guardRating=None, dailyRating=None, guildBuildingLevel=None, isSpectator=None, lastPaymentTime=None, lastLampDropTime=None, isRegularMMAllowed=None, cwplayerpoints=None, canMute=None, PlayerRating=None, numberOfWinsForPR=None, extraComplaints=None, bruteForceDefenderBan=None, extraSessionComplaints=None, Shard=None, currencies=None,):
    self.snid = snid
    self.snuid = snuid
    self.login = login
    self.email = email
    self.nickname = nickname
    self.gold = gold
    self.silver = silver
    self.resource1 = resource1
    self.resource2 = resource2
    self.resource3 = resource3
    self.perl = perl
    self.redPerl = redPerl
    self.fame = fame
    self.reliability = reliability
    self.fraction = fraction
    self.location = location
    self.isDeveloper = isDeveloper
    self.auid = auid
    self.gender = gender
    self.switchQuant = switchQuant
    self.lordRating = lordRating
    self.numberOfWins = numberOfWins
    self.dodges = dodges
    self.retiredTime = retiredTime
    self.guardRating = guardRating
    self.dailyRating = dailyRating
    self.guildBuildingLevel = guildBuildingLevel
    self.isSpectator = isSpectator
    self.lastPaymentTime = lastPaymentTime
    self.lastLampDropTime = lastLampDropTime
    self.isRegularMMAllowed = isRegularMMAllowed
    self.cwplayerpoints = cwplayerpoints
    self.canMute = canMute
    self.PlayerRating = PlayerRating
    self.numberOfWinsForPR = numberOfWinsForPR
    self.extraComplaints = extraComplaints
    self.bruteForceDefenderBan = bruteForceDefenderBan
    self.extraSessionComplaints = extraSessionComplaints
    self.Shard = Shard
    self.currencies = currencies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.snuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.gold = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.silver = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.resource1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.resource2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.resource3 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.perl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.redPerl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.fame = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.reliability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.fraction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.isDeveloper = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.switchQuant = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.lordRating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.numberOfWins = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.dodges = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.retiredTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.guardRating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.DOUBLE:
          self.dailyRating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.guildBuildingLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.BOOL:
          self.isSpectator = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.lastPaymentTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.lastLampDropTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.isRegularMMAllowed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.cwplayerpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.BOOL:
          self.canMute = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.PlayerRating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I64:
          self.numberOfWinsForPR = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.extraComplaints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I64:
          self.bruteForceDefenderBan = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.extraSessionComplaints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.Shard = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.MAP:
          self.currencies = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin()
          for _i27 in xrange(_size23):
            _key28 = iprot.readString();
            _val29 = iprot.readI32();
            self.currencies[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountEdit')
    if self.snid is not None:
      oprot.writeFieldBegin('snid', TType.STRING, 1)
      oprot.writeString(self.snid)
      oprot.writeFieldEnd()
    if self.snuid is not None:
      oprot.writeFieldBegin('snuid', TType.STRING, 2)
      oprot.writeString(self.snuid)
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 3)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 5)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 6)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.silver is not None:
      oprot.writeFieldBegin('silver', TType.I32, 7)
      oprot.writeI32(self.silver)
      oprot.writeFieldEnd()
    if self.resource1 is not None:
      oprot.writeFieldBegin('resource1', TType.I32, 8)
      oprot.writeI32(self.resource1)
      oprot.writeFieldEnd()
    if self.resource2 is not None:
      oprot.writeFieldBegin('resource2', TType.I32, 9)
      oprot.writeI32(self.resource2)
      oprot.writeFieldEnd()
    if self.resource3 is not None:
      oprot.writeFieldBegin('resource3', TType.I32, 10)
      oprot.writeI32(self.resource3)
      oprot.writeFieldEnd()
    if self.perl is not None:
      oprot.writeFieldBegin('perl', TType.I32, 11)
      oprot.writeI32(self.perl)
      oprot.writeFieldEnd()
    if self.redPerl is not None:
      oprot.writeFieldBegin('redPerl', TType.I32, 12)
      oprot.writeI32(self.redPerl)
      oprot.writeFieldEnd()
    if self.fame is not None:
      oprot.writeFieldBegin('fame', TType.I32, 13)
      oprot.writeI32(self.fame)
      oprot.writeFieldEnd()
    if self.reliability is not None:
      oprot.writeFieldBegin('reliability', TType.I32, 14)
      oprot.writeI32(self.reliability)
      oprot.writeFieldEnd()
    if self.fraction is not None:
      oprot.writeFieldBegin('fraction', TType.I32, 15)
      oprot.writeI32(self.fraction)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 16)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.isDeveloper is not None:
      oprot.writeFieldBegin('isDeveloper', TType.BOOL, 17)
      oprot.writeBool(self.isDeveloper)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 18)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 19)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.switchQuant is not None:
      oprot.writeFieldBegin('switchQuant', TType.I32, 20)
      oprot.writeI32(self.switchQuant)
      oprot.writeFieldEnd()
    if self.lordRating is not None:
      oprot.writeFieldBegin('lordRating', TType.DOUBLE, 21)
      oprot.writeDouble(self.lordRating)
      oprot.writeFieldEnd()
    if self.numberOfWins is not None:
      oprot.writeFieldBegin('numberOfWins', TType.DOUBLE, 22)
      oprot.writeDouble(self.numberOfWins)
      oprot.writeFieldEnd()
    if self.dodges is not None:
      oprot.writeFieldBegin('dodges', TType.I32, 23)
      oprot.writeI32(self.dodges)
      oprot.writeFieldEnd()
    if self.retiredTime is not None:
      oprot.writeFieldBegin('retiredTime', TType.I64, 24)
      oprot.writeI64(self.retiredTime)
      oprot.writeFieldEnd()
    if self.guardRating is not None:
      oprot.writeFieldBegin('guardRating', TType.DOUBLE, 25)
      oprot.writeDouble(self.guardRating)
      oprot.writeFieldEnd()
    if self.dailyRating is not None:
      oprot.writeFieldBegin('dailyRating', TType.DOUBLE, 26)
      oprot.writeDouble(self.dailyRating)
      oprot.writeFieldEnd()
    if self.guildBuildingLevel is not None:
      oprot.writeFieldBegin('guildBuildingLevel', TType.I32, 27)
      oprot.writeI32(self.guildBuildingLevel)
      oprot.writeFieldEnd()
    if self.isSpectator is not None:
      oprot.writeFieldBegin('isSpectator', TType.BOOL, 28)
      oprot.writeBool(self.isSpectator)
      oprot.writeFieldEnd()
    if self.lastPaymentTime is not None:
      oprot.writeFieldBegin('lastPaymentTime', TType.I64, 29)
      oprot.writeI64(self.lastPaymentTime)
      oprot.writeFieldEnd()
    if self.lastLampDropTime is not None:
      oprot.writeFieldBegin('lastLampDropTime', TType.I64, 30)
      oprot.writeI64(self.lastLampDropTime)
      oprot.writeFieldEnd()
    if self.isRegularMMAllowed is not None:
      oprot.writeFieldBegin('isRegularMMAllowed', TType.BOOL, 31)
      oprot.writeBool(self.isRegularMMAllowed)
      oprot.writeFieldEnd()
    if self.cwplayerpoints is not None:
      oprot.writeFieldBegin('cwplayerpoints', TType.I32, 32)
      oprot.writeI32(self.cwplayerpoints)
      oprot.writeFieldEnd()
    if self.canMute is not None:
      oprot.writeFieldBegin('canMute', TType.BOOL, 33)
      oprot.writeBool(self.canMute)
      oprot.writeFieldEnd()
    if self.PlayerRating is not None:
      oprot.writeFieldBegin('PlayerRating', TType.I32, 34)
      oprot.writeI32(self.PlayerRating)
      oprot.writeFieldEnd()
    if self.numberOfWinsForPR is not None:
      oprot.writeFieldBegin('numberOfWinsForPR', TType.I64, 35)
      oprot.writeI64(self.numberOfWinsForPR)
      oprot.writeFieldEnd()
    if self.extraComplaints is not None:
      oprot.writeFieldBegin('extraComplaints', TType.I32, 36)
      oprot.writeI32(self.extraComplaints)
      oprot.writeFieldEnd()
    if self.bruteForceDefenderBan is not None:
      oprot.writeFieldBegin('bruteForceDefenderBan', TType.I64, 37)
      oprot.writeI64(self.bruteForceDefenderBan)
      oprot.writeFieldEnd()
    if self.extraSessionComplaints is not None:
      oprot.writeFieldBegin('extraSessionComplaints', TType.I32, 38)
      oprot.writeI32(self.extraSessionComplaints)
      oprot.writeFieldEnd()
    if self.Shard is not None:
      oprot.writeFieldBegin('Shard', TType.I32, 39)
      oprot.writeI32(self.Shard)
      oprot.writeFieldEnd()
    if self.currencies is not None:
      oprot.writeFieldBegin('currencies', TType.MAP, 40)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.currencies))
      for kiter30,viter31 in self.currencies.items():
        oprot.writeString(kiter30)
        oprot.writeI32(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountShortInfo(object):
  """
  Attributes:
   - snid
   - snuid
   - login
   - email
   - nickname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'snid', None, None, ), # 1
    (2, TType.STRING, 'snuid', None, None, ), # 2
    (3, TType.STRING, 'login', None, None, ), # 3
    None, # 4
    (5, TType.STRING, 'email', None, None, ), # 5
    (6, TType.STRING, 'nickname', None, None, ), # 6
  )

  def __init__(self, snid=None, snuid=None, login=None, email=None, nickname=None,):
    self.snid = snid
    self.snuid = snuid
    self.login = login
    self.email = email
    self.nickname = nickname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.snid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.snuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountShortInfo')
    if self.snid is not None:
      oprot.writeFieldBegin('snid', TType.STRING, 1)
      oprot.writeString(self.snid)
      oprot.writeFieldEnd()
    if self.snuid is not None:
      oprot.writeFieldBegin('snuid', TType.STRING, 2)
      oprot.writeString(self.snuid)
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 3)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 5)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 6)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonInfo(object):
  """
  Attributes:
   - seasonId
   - seasonName
   - startDate
   - endDate
   - seasonRating
   - leagueIndex
   - curLeaguePlace
   - bestLeaguePlace
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'seasonId', None, None, ), # 1
    (2, TType.STRING, 'seasonName', None, None, ), # 2
    (3, TType.I64, 'startDate', None, None, ), # 3
    (4, TType.I64, 'endDate', None, None, ), # 4
    (5, TType.I32, 'seasonRating', None, None, ), # 5
    (6, TType.I32, 'leagueIndex', None, None, ), # 6
    (7, TType.I32, 'curLeaguePlace', None, None, ), # 7
    (8, TType.I32, 'bestLeaguePlace', None, None, ), # 8
  )

  def __init__(self, seasonId=None, seasonName=None, startDate=None, endDate=None, seasonRating=None, leagueIndex=None, curLeaguePlace=None, bestLeaguePlace=None,):
    self.seasonId = seasonId
    self.seasonName = seasonName
    self.startDate = startDate
    self.endDate = endDate
    self.seasonRating = seasonRating
    self.leagueIndex = leagueIndex
    self.curLeaguePlace = curLeaguePlace
    self.bestLeaguePlace = bestLeaguePlace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.seasonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.seasonName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.seasonRating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.leagueIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.curLeaguePlace = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.bestLeaguePlace = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonInfo')
    if self.seasonId is not None:
      oprot.writeFieldBegin('seasonId', TType.I32, 1)
      oprot.writeI32(self.seasonId)
      oprot.writeFieldEnd()
    if self.seasonName is not None:
      oprot.writeFieldBegin('seasonName', TType.STRING, 2)
      oprot.writeString(self.seasonName)
      oprot.writeFieldEnd()
    if self.startDate is not None:
      oprot.writeFieldBegin('startDate', TType.I64, 3)
      oprot.writeI64(self.startDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 4)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.seasonRating is not None:
      oprot.writeFieldBegin('seasonRating', TType.I32, 5)
      oprot.writeI32(self.seasonRating)
      oprot.writeFieldEnd()
    if self.leagueIndex is not None:
      oprot.writeFieldBegin('leagueIndex', TType.I32, 6)
      oprot.writeI32(self.leagueIndex)
      oprot.writeFieldEnd()
    if self.curLeaguePlace is not None:
      oprot.writeFieldBegin('curLeaguePlace', TType.I32, 7)
      oprot.writeI32(self.curLeaguePlace)
      oprot.writeFieldEnd()
    if self.bestLeaguePlace is not None:
      oprot.writeFieldBegin('bestLeaguePlace', TType.I32, 8)
      oprot.writeI32(self.bestLeaguePlace)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroInfo(object):
  """
  Attributes:
   - heroClassId
   - heroInstanceId
   - experience
   - rating
   - epicWins
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'heroClassId', None, None, ), # 1
    (2, TType.I64, 'heroInstanceId', None, None, ), # 2
    (3, TType.I32, 'experience', None, None, ), # 3
    (4, TType.DOUBLE, 'rating', None, None, ), # 4
    (5, TType.I32, 'epicWins', None, None, ), # 5
  )

  def __init__(self, heroClassId=None, heroInstanceId=None, experience=None, rating=None, epicWins=None,):
    self.heroClassId = heroClassId
    self.heroInstanceId = heroInstanceId
    self.experience = experience
    self.rating = rating
    self.epicWins = epicWins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.heroClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.heroInstanceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.experience = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.rating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.epicWins = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroInfo')
    if self.heroClassId is not None:
      oprot.writeFieldBegin('heroClassId', TType.I32, 1)
      oprot.writeI32(self.heroClassId)
      oprot.writeFieldEnd()
    if self.heroInstanceId is not None:
      oprot.writeFieldBegin('heroInstanceId', TType.I64, 2)
      oprot.writeI64(self.heroInstanceId)
      oprot.writeFieldEnd()
    if self.experience is not None:
      oprot.writeFieldBegin('experience', TType.I32, 3)
      oprot.writeI32(self.experience)
      oprot.writeFieldEnd()
    if self.rating is not None:
      oprot.writeFieldBegin('rating', TType.DOUBLE, 4)
      oprot.writeDouble(self.rating)
      oprot.writeFieldEnd()
    if self.epicWins is not None:
      oprot.writeFieldBegin('epicWins', TType.I32, 5)
      oprot.writeI32(self.epicWins)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentInfo(object):
  """
  Attributes:
   - talentClassId
   - talentInstanceId
   - refineRate
   - boundHeroClassId
   - boundHeroInstanceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'talentClassId', None, None, ), # 1
    (2, TType.I64, 'talentInstanceId', None, None, ), # 2
    (3, TType.I32, 'refineRate', None, None, ), # 3
    (4, TType.I32, 'boundHeroClassId', None, None, ), # 4
    (5, TType.I64, 'boundHeroInstanceId', None, None, ), # 5
  )

  def __init__(self, talentClassId=None, talentInstanceId=None, refineRate=None, boundHeroClassId=None, boundHeroInstanceId=None,):
    self.talentClassId = talentClassId
    self.talentInstanceId = talentInstanceId
    self.refineRate = refineRate
    self.boundHeroClassId = boundHeroClassId
    self.boundHeroInstanceId = boundHeroInstanceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.talentClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.talentInstanceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.refineRate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.boundHeroClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.boundHeroInstanceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentInfo')
    if self.talentClassId is not None:
      oprot.writeFieldBegin('talentClassId', TType.I32, 1)
      oprot.writeI32(self.talentClassId)
      oprot.writeFieldEnd()
    if self.talentInstanceId is not None:
      oprot.writeFieldBegin('talentInstanceId', TType.I64, 2)
      oprot.writeI64(self.talentInstanceId)
      oprot.writeFieldEnd()
    if self.refineRate is not None:
      oprot.writeFieldBegin('refineRate', TType.I32, 3)
      oprot.writeI32(self.refineRate)
      oprot.writeFieldEnd()
    if self.boundHeroClassId is not None:
      oprot.writeFieldBegin('boundHeroClassId', TType.I32, 4)
      oprot.writeI32(self.boundHeroClassId)
      oprot.writeFieldEnd()
    if self.boundHeroInstanceId is not None:
      oprot.writeFieldBegin('boundHeroInstanceId', TType.I64, 5)
      oprot.writeI64(self.boundHeroInstanceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentSetInfo(object):
  """
  Attributes:
   - talentSetId
   - talents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'talentSetId', None, None, ), # 1
    (2, TType.LIST, 'talents', (TType.STRUCT,(TalentInfo, TalentInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, talentSetId=None, talents=None,):
    self.talentSetId = talentSetId
    self.talents = talents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.talentSetId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.talents = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = TalentInfo()
            _elem37.read(iprot)
            self.talents.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentSetInfo')
    if self.talentSetId is not None:
      oprot.writeFieldBegin('talentSetId', TType.I32, 1)
      oprot.writeI32(self.talentSetId)
      oprot.writeFieldEnd()
    if self.talents is not None:
      oprot.writeFieldBegin('talents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.talents))
      for iter38 in self.talents:
        iter38.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestForTalentInfo(object):
  """
  Attributes:
   - questId
   - startTime
   - endTime
   - talentAwardPersistentId
   - talentAwardName
   - shardsSpent
   - fullDynamicQuestInfo
   - currentObjectiveValue
   - currentObjectiveData
   - currentObjectiveId
   - currentAwardId
   - totalObjectiveData
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'questId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.I32, 'talentAwardPersistentId', None, None, ), # 4
    (5, TType.STRING, 'talentAwardName', None, None, ), # 5
    (6, TType.I32, 'shardsSpent', None, None, ), # 6
    (7, TType.STRING, 'fullDynamicQuestInfo', None, None, ), # 7
    (8, TType.I32, 'currentObjectiveValue', None, None, ), # 8
    (9, TType.STRING, 'currentObjectiveData', None, None, ), # 9
    (10, TType.I32, 'currentObjectiveId', None, None, ), # 10
    (11, TType.I32, 'currentAwardId', None, None, ), # 11
    (12, TType.STRING, 'totalObjectiveData', None, None, ), # 12
    (13, TType.I32, 'reason', None, None, ), # 13
  )

  def __init__(self, questId=None, startTime=None, endTime=None, talentAwardPersistentId=None, talentAwardName=None, shardsSpent=None, fullDynamicQuestInfo=None, currentObjectiveValue=None, currentObjectiveData=None, currentObjectiveId=None, currentAwardId=None, totalObjectiveData=None, reason=None,):
    self.questId = questId
    self.startTime = startTime
    self.endTime = endTime
    self.talentAwardPersistentId = talentAwardPersistentId
    self.talentAwardName = talentAwardName
    self.shardsSpent = shardsSpent
    self.fullDynamicQuestInfo = fullDynamicQuestInfo
    self.currentObjectiveValue = currentObjectiveValue
    self.currentObjectiveData = currentObjectiveData
    self.currentObjectiveId = currentObjectiveId
    self.currentAwardId = currentAwardId
    self.totalObjectiveData = totalObjectiveData
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.questId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.talentAwardPersistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.talentAwardName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.shardsSpent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.fullDynamicQuestInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.currentObjectiveValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.currentObjectiveData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.currentObjectiveId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.currentAwardId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.totalObjectiveData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.reason = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestForTalentInfo')
    if self.questId is not None:
      oprot.writeFieldBegin('questId', TType.I32, 1)
      oprot.writeI32(self.questId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.talentAwardPersistentId is not None:
      oprot.writeFieldBegin('talentAwardPersistentId', TType.I32, 4)
      oprot.writeI32(self.talentAwardPersistentId)
      oprot.writeFieldEnd()
    if self.talentAwardName is not None:
      oprot.writeFieldBegin('talentAwardName', TType.STRING, 5)
      oprot.writeString(self.talentAwardName)
      oprot.writeFieldEnd()
    if self.shardsSpent is not None:
      oprot.writeFieldBegin('shardsSpent', TType.I32, 6)
      oprot.writeI32(self.shardsSpent)
      oprot.writeFieldEnd()
    if self.fullDynamicQuestInfo is not None:
      oprot.writeFieldBegin('fullDynamicQuestInfo', TType.STRING, 7)
      oprot.writeString(self.fullDynamicQuestInfo)
      oprot.writeFieldEnd()
    if self.currentObjectiveValue is not None:
      oprot.writeFieldBegin('currentObjectiveValue', TType.I32, 8)
      oprot.writeI32(self.currentObjectiveValue)
      oprot.writeFieldEnd()
    if self.currentObjectiveData is not None:
      oprot.writeFieldBegin('currentObjectiveData', TType.STRING, 9)
      oprot.writeString(self.currentObjectiveData)
      oprot.writeFieldEnd()
    if self.currentObjectiveId is not None:
      oprot.writeFieldBegin('currentObjectiveId', TType.I32, 10)
      oprot.writeI32(self.currentObjectiveId)
      oprot.writeFieldEnd()
    if self.currentAwardId is not None:
      oprot.writeFieldBegin('currentAwardId', TType.I32, 11)
      oprot.writeI32(self.currentAwardId)
      oprot.writeFieldEnd()
    if self.totalObjectiveData is not None:
      oprot.writeFieldBegin('totalObjectiveData', TType.STRING, 12)
      oprot.writeString(self.totalObjectiveData)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.I32, 13)
      oprot.writeI32(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestForTalentEdit(object):
  """
  Attributes:
   - questId
   - startTime
   - endTime
   - talentAwardName
   - currentObjectiveValue
   - currentObjectiveData
   - editObjectiveId
   - editAwardId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'questId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'talentAwardName', None, None, ), # 4
    (5, TType.I32, 'currentObjectiveValue', None, None, ), # 5
    (6, TType.STRING, 'currentObjectiveData', None, None, ), # 6
    (7, TType.I32, 'editObjectiveId', None, None, ), # 7
    (8, TType.I32, 'editAwardId', None, None, ), # 8
  )

  def __init__(self, questId=None, startTime=None, endTime=None, talentAwardName=None, currentObjectiveValue=None, currentObjectiveData=None, editObjectiveId=None, editAwardId=None,):
    self.questId = questId
    self.startTime = startTime
    self.endTime = endTime
    self.talentAwardName = talentAwardName
    self.currentObjectiveValue = currentObjectiveValue
    self.currentObjectiveData = currentObjectiveData
    self.editObjectiveId = editObjectiveId
    self.editAwardId = editAwardId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.questId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.talentAwardName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.currentObjectiveValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.currentObjectiveData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.editObjectiveId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.editAwardId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestForTalentEdit')
    if self.questId is not None:
      oprot.writeFieldBegin('questId', TType.I32, 1)
      oprot.writeI32(self.questId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.talentAwardName is not None:
      oprot.writeFieldBegin('talentAwardName', TType.STRING, 4)
      oprot.writeString(self.talentAwardName)
      oprot.writeFieldEnd()
    if self.currentObjectiveValue is not None:
      oprot.writeFieldBegin('currentObjectiveValue', TType.I32, 5)
      oprot.writeI32(self.currentObjectiveValue)
      oprot.writeFieldEnd()
    if self.currentObjectiveData is not None:
      oprot.writeFieldBegin('currentObjectiveData', TType.STRING, 6)
      oprot.writeString(self.currentObjectiveData)
      oprot.writeFieldEnd()
    if self.editObjectiveId is not None:
      oprot.writeFieldBegin('editObjectiveId', TType.I32, 7)
      oprot.writeI32(self.editObjectiveId)
      oprot.writeFieldEnd()
    if self.editAwardId is not None:
      oprot.writeFieldBegin('editAwardId', TType.I32, 8)
      oprot.writeI32(self.editAwardId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GameSessionShortInfo(object):
  """
  Attributes:
   - sessionid
   - teamdocts
   - teamadorni
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sessionid', None, None, ), # 1
    (2, TType.LIST, 'teamdocts', (TType.STRUCT,(AccountShortInfo, AccountShortInfo.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'teamadorni', (TType.STRUCT,(AccountShortInfo, AccountShortInfo.thrift_spec)), None, ), # 3
    (4, TType.I32, 'result', None, None, ), # 4
  )

  def __init__(self, sessionid=None, teamdocts=None, teamadorni=None, result=None,):
    self.sessionid = sessionid
    self.teamdocts = teamdocts
    self.teamadorni = teamadorni
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sessionid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.teamdocts = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = AccountShortInfo()
            _elem44.read(iprot)
            self.teamdocts.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.teamadorni = []
          (_etype48, _size45) = iprot.readListBegin()
          for _i49 in xrange(_size45):
            _elem50 = AccountShortInfo()
            _elem50.read(iprot)
            self.teamadorni.append(_elem50)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GameSessionShortInfo')
    if self.sessionid is not None:
      oprot.writeFieldBegin('sessionid', TType.I64, 1)
      oprot.writeI64(self.sessionid)
      oprot.writeFieldEnd()
    if self.teamdocts is not None:
      oprot.writeFieldBegin('teamdocts', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.teamdocts))
      for iter51 in self.teamdocts:
        iter51.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.teamadorni is not None:
      oprot.writeFieldBegin('teamadorni', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.teamadorni))
      for iter52 in self.teamadorni:
        iter52.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 4)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BruteForceAccountShortInfo(object):
  """
  Attributes:
   - banTime
   - email
   - count
   - ip
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'banTime', None, None, ), # 1
    (2, TType.STRING, 'email', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
    (4, TType.STRING, 'ip', None, None, ), # 4
    (5, TType.I32, 'result', None, None, ), # 5
  )

  def __init__(self, banTime=None, email=None, count=None, ip=None, result=None,):
    self.banTime = banTime
    self.email = email
    self.count = count
    self.ip = ip
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.banTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BruteForceAccountShortInfo')
    if self.banTime is not None:
      oprot.writeFieldBegin('banTime', TType.I64, 1)
      oprot.writeI64(self.banTime)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 2)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 4)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 5)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BannedIpShortInfo(object):
  """
  Attributes:
   - BanTime
   - Accounts
   - Tryes
   - Ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'BanTime', None, None, ), # 1
    (2, TType.I32, 'Accounts', None, None, ), # 2
    (3, TType.I32, 'Tryes', None, None, ), # 3
    (4, TType.STRING, 'Ip', None, None, ), # 4
  )

  def __init__(self, BanTime=None, Accounts=None, Tryes=None, Ip=None,):
    self.BanTime = BanTime
    self.Accounts = Accounts
    self.Tryes = Tryes
    self.Ip = Ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.BanTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Accounts = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Tryes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Ip = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BannedIpShortInfo')
    if self.BanTime is not None:
      oprot.writeFieldBegin('BanTime', TType.I64, 1)
      oprot.writeI64(self.BanTime)
      oprot.writeFieldEnd()
    if self.Accounts is not None:
      oprot.writeFieldBegin('Accounts', TType.I32, 2)
      oprot.writeI32(self.Accounts)
      oprot.writeFieldEnd()
    if self.Tryes is not None:
      oprot.writeFieldBegin('Tryes', TType.I32, 3)
      oprot.writeI32(self.Tryes)
      oprot.writeFieldEnd()
    if self.Ip is not None:
      oprot.writeFieldBegin('Ip', TType.STRING, 4)
      oprot.writeString(self.Ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BannedIpFullListInfo(object):
  """
  Attributes:
   - IpList
   - result
   - Count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'IpList', (TType.STRUCT,(BannedIpShortInfo, BannedIpShortInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'result', None, None, ), # 2
    (3, TType.I32, 'Count', None, None, ), # 3
  )

  def __init__(self, IpList=None, result=None, Count=None,):
    self.IpList = IpList
    self.result = result
    self.Count = Count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.IpList = []
          (_etype56, _size53) = iprot.readListBegin()
          for _i57 in xrange(_size53):
            _elem58 = BannedIpShortInfo()
            _elem58.read(iprot)
            self.IpList.append(_elem58)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BannedIpFullListInfo')
    if self.IpList is not None:
      oprot.writeFieldBegin('IpList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.IpList))
      for iter59 in self.IpList:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 2)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.Count is not None:
      oprot.writeFieldBegin('Count', TType.I32, 3)
      oprot.writeI32(self.Count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BroadcastMessage(object):
  """
  Attributes:
   - Locale
   - Text
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Locale', None, None, ), # 1
    (2, TType.STRING, 'Text', None, None, ), # 2
  )

  def __init__(self, Locale=None, Text=None,):
    self.Locale = Locale
    self.Text = Text

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Text = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BroadcastMessage')
    if self.Locale is not None:
      oprot.writeFieldBegin('Locale', TType.STRING, 1)
      oprot.writeString(self.Locale)
      oprot.writeFieldEnd()
    if self.Text is not None:
      oprot.writeFieldBegin('Text', TType.STRING, 2)
      oprot.writeString(self.Text)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BroadcastInfo(object):
  """
  Attributes:
   - Id
   - Title
   - Messages
   - TimeStart
   - TimeFinish
   - Interval
   - EnabledNow
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Id', None, None, ), # 1
    (2, TType.STRING, 'Title', None, None, ), # 2
    (3, TType.LIST, 'Messages', (TType.STRUCT,(BroadcastMessage, BroadcastMessage.thrift_spec)), None, ), # 3
    (4, TType.I64, 'TimeStart', None, None, ), # 4
    (5, TType.I64, 'TimeFinish', None, None, ), # 5
    (6, TType.I32, 'Interval', None, None, ), # 6
    (7, TType.BOOL, 'EnabledNow', None, None, ), # 7
  )

  def __init__(self, Id=None, Title=None, Messages=None, TimeStart=None, TimeFinish=None, Interval=None, EnabledNow=None,):
    self.Id = Id
    self.Title = Title
    self.Messages = Messages
    self.TimeStart = TimeStart
    self.TimeFinish = TimeFinish
    self.Interval = Interval
    self.EnabledNow = EnabledNow

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.Messages = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = BroadcastMessage()
            _elem65.read(iprot)
            self.Messages.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.TimeStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.TimeFinish = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.Interval = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.EnabledNow = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BroadcastInfo')
    if self.Id is not None:
      oprot.writeFieldBegin('Id', TType.I32, 1)
      oprot.writeI32(self.Id)
      oprot.writeFieldEnd()
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 2)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    if self.Messages is not None:
      oprot.writeFieldBegin('Messages', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.Messages))
      for iter66 in self.Messages:
        iter66.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.TimeStart is not None:
      oprot.writeFieldBegin('TimeStart', TType.I64, 4)
      oprot.writeI64(self.TimeStart)
      oprot.writeFieldEnd()
    if self.TimeFinish is not None:
      oprot.writeFieldBegin('TimeFinish', TType.I64, 5)
      oprot.writeI64(self.TimeFinish)
      oprot.writeFieldEnd()
    if self.Interval is not None:
      oprot.writeFieldBegin('Interval', TType.I32, 6)
      oprot.writeI32(self.Interval)
      oprot.writeFieldEnd()
    if self.EnabledNow is not None:
      oprot.writeFieldBegin('EnabledNow', TType.BOOL, 7)
      oprot.writeBool(self.EnabledNow)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BroadcastListResponse(object):
  """
  Attributes:
   - result
   - broadcastList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'broadcastList', (TType.STRUCT,(BroadcastInfo, BroadcastInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, broadcastList=None,):
    self.result = result
    self.broadcastList = broadcastList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.broadcastList = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = BroadcastInfo()
            _elem72.read(iprot)
            self.broadcastList.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BroadcastListResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.broadcastList is not None:
      oprot.writeFieldBegin('broadcastList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.broadcastList))
      for iter73 in self.broadcastList:
        iter73.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BroadcastLocalesResponse(object):
  """
  Attributes:
   - result
   - locales
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'locales', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, result=None, locales=None,):
    self.result = result
    self.locales = locales

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.locales = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in xrange(_size74):
            _elem79 = iprot.readString();
            self.locales.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BroadcastLocalesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.locales is not None:
      oprot.writeFieldBegin('locales', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.locales))
      for iter80 in self.locales:
        oprot.writeString(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BroadcastCreateResponse(object):
  """
  Attributes:
   - result
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, result=None, id=None,):
    self.result = result
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BroadcastCreateResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpgradeHeroTalentsInfo(object):
  """
  Attributes:
   - UsesLeft
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'UsesLeft', None, None, ), # 1
  )

  def __init__(self, UsesLeft=None,):
    self.UsesLeft = UsesLeft

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.UsesLeft = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpgradeHeroTalentsInfo')
    if self.UsesLeft is not None:
      oprot.writeFieldBegin('UsesLeft', TType.I32, 1)
      oprot.writeI32(self.UsesLeft)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpgradeHeroTalentsInfoResponse(object):
  """
  Attributes:
   - result
   - upgradeHeroTalentsInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'upgradeHeroTalentsInfo', (UpgradeHeroTalentsInfo, UpgradeHeroTalentsInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, upgradeHeroTalentsInfo=None,):
    self.result = result
    self.upgradeHeroTalentsInfo = upgradeHeroTalentsInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.upgradeHeroTalentsInfo = UpgradeHeroTalentsInfo()
          self.upgradeHeroTalentsInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpgradeHeroTalentsInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.upgradeHeroTalentsInfo is not None:
      oprot.writeFieldBegin('upgradeHeroTalentsInfo', TType.STRUCT, 2)
      self.upgradeHeroTalentsInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LampInfo(object):
  """
  Attributes:
   - Bonus
   - GoldBonus
   - Transaction
   - Duration
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Bonus', None, None, ), # 1
    (2, TType.I32, 'GoldBonus', None, None, ), # 2
    (3, TType.I32, 'Transaction', None, None, ), # 3
    (4, TType.I64, 'Duration', None, None, ), # 4
  )

  def __init__(self, Bonus=None, GoldBonus=None, Transaction=None, Duration=None,):
    self.Bonus = Bonus
    self.GoldBonus = GoldBonus
    self.Transaction = Transaction
    self.Duration = Duration

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Bonus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.GoldBonus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Transaction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.Duration = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LampInfo')
    if self.Bonus is not None:
      oprot.writeFieldBegin('Bonus', TType.I32, 1)
      oprot.writeI32(self.Bonus)
      oprot.writeFieldEnd()
    if self.GoldBonus is not None:
      oprot.writeFieldBegin('GoldBonus', TType.I32, 2)
      oprot.writeI32(self.GoldBonus)
      oprot.writeFieldEnd()
    if self.Transaction is not None:
      oprot.writeFieldBegin('Transaction', TType.I32, 3)
      oprot.writeI32(self.Transaction)
      oprot.writeFieldEnd()
    if self.Duration is not None:
      oprot.writeFieldBegin('Duration', TType.I64, 4)
      oprot.writeI64(self.Duration)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LampInfoResponse(object):
  """
  Attributes:
   - result
   - lampInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'lampInfo', (LampInfo, LampInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, lampInfo=None,):
    self.result = result
    self.lampInfo = lampInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.lampInfo = LampInfo()
          self.lampInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LampInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.lampInfo is not None:
      oprot.writeFieldBegin('lampInfo', TType.STRUCT, 2)
      self.lampInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountInfoResponse(object):
  """
  Attributes:
   - result
   - accountInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, accountInfo=None,):
    self.result = result
    self.accountInfo = accountInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.accountInfo = AccountInfo()
          self.accountInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.accountInfo is not None:
      oprot.writeFieldBegin('accountInfo', TType.STRUCT, 2)
      self.accountInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestsForTalentsInfoResponse(object):
  """
  Attributes:
   - result
   - questsForTalentsInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'questsForTalentsInfo', (TType.STRUCT,(QuestForTalentInfo, QuestForTalentInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, questsForTalentsInfo=None,):
    self.result = result
    self.questsForTalentsInfo = questsForTalentsInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.questsForTalentsInfo = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in xrange(_size81):
            _elem86 = QuestForTalentInfo()
            _elem86.read(iprot)
            self.questsForTalentsInfo.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestsForTalentsInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.questsForTalentsInfo is not None:
      oprot.writeFieldBegin('questsForTalentsInfo', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.questsForTalentsInfo))
      for iter87 in self.questsForTalentsInfo:
        iter87.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NickSnidResponse(object):
  """
  Attributes:
   - result
   - foundAccount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'foundAccount', (AccountShortInfo, AccountShortInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, foundAccount=None,):
    self.result = result
    self.foundAccount = foundAccount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.foundAccount = AccountShortInfo()
          self.foundAccount.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NickSnidResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.foundAccount is not None:
      oprot.writeFieldBegin('foundAccount', TType.STRUCT, 2)
      self.foundAccount.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NickSnidListResponse(object):
  """
  Attributes:
   - result
   - totalFound
   - foundAccounts
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I32, 'totalFound', None, None, ), # 2
    (3, TType.LIST, 'foundAccounts', (TType.STRUCT,(AccountShortInfo, AccountShortInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, totalFound=None, foundAccounts=None,):
    self.result = result
    self.totalFound = totalFound
    self.foundAccounts = foundAccounts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.totalFound = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.foundAccounts = []
          (_etype91, _size88) = iprot.readListBegin()
          for _i92 in xrange(_size88):
            _elem93 = AccountShortInfo()
            _elem93.read(iprot)
            self.foundAccounts.append(_elem93)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NickSnidListResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.totalFound is not None:
      oprot.writeFieldBegin('totalFound', TType.I32, 2)
      oprot.writeI32(self.totalFound)
      oprot.writeFieldEnd()
    if self.foundAccounts is not None:
      oprot.writeFieldBegin('foundAccounts', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.foundAccounts))
      for iter94 in self.foundAccounts:
        iter94.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LibraryResponse(object):
  """
  Attributes:
   - result
   - libraryList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'libraryList', (TType.STRUCT,(TalentInfo, TalentInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, libraryList=None,):
    self.result = result
    self.libraryList = libraryList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.libraryList = []
          (_etype98, _size95) = iprot.readListBegin()
          for _i99 in xrange(_size95):
            _elem100 = TalentInfo()
            _elem100.read(iprot)
            self.libraryList.append(_elem100)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LibraryResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.libraryList is not None:
      oprot.writeFieldBegin('libraryList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.libraryList))
      for iter101 in self.libraryList:
        iter101.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroesResponse(object):
  """
  Attributes:
   - result
   - heroesList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'heroesList', (TType.STRUCT,(HeroInfo, HeroInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, heroesList=None,):
    self.result = result
    self.heroesList = heroesList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.heroesList = []
          (_etype105, _size102) = iprot.readListBegin()
          for _i106 in xrange(_size102):
            _elem107 = HeroInfo()
            _elem107.read(iprot)
            self.heroesList.append(_elem107)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.heroesList is not None:
      oprot.writeFieldBegin('heroesList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.heroesList))
      for iter108 in self.heroesList:
        iter108.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentSetResponse(object):
  """
  Attributes:
   - result
   - talentSetList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'talentSetList', (TType.STRUCT,(TalentSetInfo, TalentSetInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, talentSetList=None,):
    self.result = result
    self.talentSetList = talentSetList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.talentSetList = []
          (_etype112, _size109) = iprot.readListBegin()
          for _i113 in xrange(_size109):
            _elem114 = TalentSetInfo()
            _elem114.read(iprot)
            self.talentSetList.append(_elem114)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentSetResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.talentSetList is not None:
      oprot.writeFieldBegin('talentSetList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.talentSetList))
      for iter115 in self.talentSetList:
        iter115.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonInfoResponse(object):
  """
  Attributes:
   - result
   - seasonInfoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'seasonInfoList', (TType.STRUCT,(SeasonInfo, SeasonInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, seasonInfoList=None,):
    self.result = result
    self.seasonInfoList = seasonInfoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.seasonInfoList = []
          (_etype119, _size116) = iprot.readListBegin()
          for _i120 in xrange(_size116):
            _elem121 = SeasonInfo()
            _elem121.read(iprot)
            self.seasonInfoList.append(_elem121)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.seasonInfoList is not None:
      oprot.writeFieldBegin('seasonInfoList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.seasonInfoList))
      for iter122 in self.seasonInfoList:
        iter122.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildMemberInfo(object):
  """
  Attributes:
   - auid
   - nickname
   - isofficer
   - addedTalentsDailyCount
   - takenTalentsDailyCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'nickname', None, None, ), # 2
    (3, TType.BOOL, 'isofficer', None, None, ), # 3
    (4, TType.I32, 'addedTalentsDailyCount', None, None, ), # 4
    (5, TType.I32, 'takenTalentsDailyCount', None, None, ), # 5
  )

  def __init__(self, auid=None, nickname=None, isofficer=None, addedTalentsDailyCount=None, takenTalentsDailyCount=None,):
    self.auid = auid
    self.nickname = nickname
    self.isofficer = isofficer
    self.addedTalentsDailyCount = addedTalentsDailyCount
    self.takenTalentsDailyCount = takenTalentsDailyCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.isofficer = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.addedTalentsDailyCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.takenTalentsDailyCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildMemberInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 2)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.isofficer is not None:
      oprot.writeFieldBegin('isofficer', TType.BOOL, 3)
      oprot.writeBool(self.isofficer)
      oprot.writeFieldEnd()
    if self.addedTalentsDailyCount is not None:
      oprot.writeFieldBegin('addedTalentsDailyCount', TType.I32, 4)
      oprot.writeI32(self.addedTalentsDailyCount)
      oprot.writeFieldEnd()
    if self.takenTalentsDailyCount is not None:
      oprot.writeFieldBegin('takenTalentsDailyCount', TType.I32, 5)
      oprot.writeI32(self.takenTalentsDailyCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildShortInfo(object):
  """
  Attributes:
   - guildid
   - shortname
   - fullname
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.STRING, 'shortname', None, None, ), # 2
    (3, TType.STRING, 'fullname', None, None, ), # 3
  )

  def __init__(self, guildid=None, shortname=None, fullname=None,):
    self.guildid = guildid
    self.shortname = shortname
    self.fullname = fullname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shortname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fullname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildShortInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.shortname is not None:
      oprot.writeFieldBegin('shortname', TType.STRING, 2)
      oprot.writeString(self.shortname)
      oprot.writeFieldEnd()
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 3)
      oprot.writeString(self.fullname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfo(object):
  """
  Attributes:
   - guildid
   - shortname
   - fullname
   - messageoftheday
   - leaderauid
   - leadernickname
   - members
   - guildExperience
   - iconChangesCount
   - guildLevel
   - guildBankAddLimit
   - guildBankTakeLimit
   - cwguildpoints
   - cwrating
   - suzerain
   - vassals
   - siegeendtime
   - releaselocktime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.STRING, 'shortname', None, None, ), # 2
    (3, TType.STRING, 'fullname', None, None, ), # 3
    (4, TType.STRING, 'messageoftheday', None, None, ), # 4
    (5, TType.I64, 'leaderauid', None, None, ), # 5
    (6, TType.STRING, 'leadernickname', None, None, ), # 6
    (7, TType.LIST, 'members', (TType.STRUCT,(GuildMemberInfo, GuildMemberInfo.thrift_spec)), None, ), # 7
    (8, TType.I64, 'guildExperience', None, None, ), # 8
    (9, TType.I32, 'iconChangesCount', None, None, ), # 9
    (10, TType.I32, 'guildLevel', None, None, ), # 10
    (11, TType.I32, 'guildBankAddLimit', None, None, ), # 11
    (12, TType.I32, 'guildBankTakeLimit', None, None, ), # 12
    (13, TType.I32, 'cwguildpoints', None, None, ), # 13
    (14, TType.I32, 'cwrating', None, None, ), # 14
    (15, TType.STRUCT, 'suzerain', (GuildShortInfo, GuildShortInfo.thrift_spec), None, ), # 15
    (16, TType.LIST, 'vassals', (TType.STRUCT,(GuildShortInfo, GuildShortInfo.thrift_spec)), None, ), # 16
    (17, TType.I64, 'siegeendtime', None, None, ), # 17
    (18, TType.I64, 'releaselocktime', None, None, ), # 18
  )

  def __init__(self, guildid=None, shortname=None, fullname=None, messageoftheday=None, leaderauid=None, leadernickname=None, members=None, guildExperience=None, iconChangesCount=None, guildLevel=None, guildBankAddLimit=None, guildBankTakeLimit=None, cwguildpoints=None, cwrating=None, suzerain=None, vassals=None, siegeendtime=None, releaselocktime=None,):
    self.guildid = guildid
    self.shortname = shortname
    self.fullname = fullname
    self.messageoftheday = messageoftheday
    self.leaderauid = leaderauid
    self.leadernickname = leadernickname
    self.members = members
    self.guildExperience = guildExperience
    self.iconChangesCount = iconChangesCount
    self.guildLevel = guildLevel
    self.guildBankAddLimit = guildBankAddLimit
    self.guildBankTakeLimit = guildBankTakeLimit
    self.cwguildpoints = cwguildpoints
    self.cwrating = cwrating
    self.suzerain = suzerain
    self.vassals = vassals
    self.siegeendtime = siegeendtime
    self.releaselocktime = releaselocktime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shortname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fullname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.messageoftheday = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.leaderauid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.leadernickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.members = []
          (_etype126, _size123) = iprot.readListBegin()
          for _i127 in xrange(_size123):
            _elem128 = GuildMemberInfo()
            _elem128.read(iprot)
            self.members.append(_elem128)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.guildExperience = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.iconChangesCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.guildLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.guildBankAddLimit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.guildBankTakeLimit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.cwguildpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.cwrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.suzerain = GuildShortInfo()
          self.suzerain.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.vassals = []
          (_etype132, _size129) = iprot.readListBegin()
          for _i133 in xrange(_size129):
            _elem134 = GuildShortInfo()
            _elem134.read(iprot)
            self.vassals.append(_elem134)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.siegeendtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.releaselocktime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.shortname is not None:
      oprot.writeFieldBegin('shortname', TType.STRING, 2)
      oprot.writeString(self.shortname)
      oprot.writeFieldEnd()
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 3)
      oprot.writeString(self.fullname)
      oprot.writeFieldEnd()
    if self.messageoftheday is not None:
      oprot.writeFieldBegin('messageoftheday', TType.STRING, 4)
      oprot.writeString(self.messageoftheday)
      oprot.writeFieldEnd()
    if self.leaderauid is not None:
      oprot.writeFieldBegin('leaderauid', TType.I64, 5)
      oprot.writeI64(self.leaderauid)
      oprot.writeFieldEnd()
    if self.leadernickname is not None:
      oprot.writeFieldBegin('leadernickname', TType.STRING, 6)
      oprot.writeString(self.leadernickname)
      oprot.writeFieldEnd()
    if self.members is not None:
      oprot.writeFieldBegin('members', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.members))
      for iter135 in self.members:
        iter135.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.guildExperience is not None:
      oprot.writeFieldBegin('guildExperience', TType.I64, 8)
      oprot.writeI64(self.guildExperience)
      oprot.writeFieldEnd()
    if self.iconChangesCount is not None:
      oprot.writeFieldBegin('iconChangesCount', TType.I32, 9)
      oprot.writeI32(self.iconChangesCount)
      oprot.writeFieldEnd()
    if self.guildLevel is not None:
      oprot.writeFieldBegin('guildLevel', TType.I32, 10)
      oprot.writeI32(self.guildLevel)
      oprot.writeFieldEnd()
    if self.guildBankAddLimit is not None:
      oprot.writeFieldBegin('guildBankAddLimit', TType.I32, 11)
      oprot.writeI32(self.guildBankAddLimit)
      oprot.writeFieldEnd()
    if self.guildBankTakeLimit is not None:
      oprot.writeFieldBegin('guildBankTakeLimit', TType.I32, 12)
      oprot.writeI32(self.guildBankTakeLimit)
      oprot.writeFieldEnd()
    if self.cwguildpoints is not None:
      oprot.writeFieldBegin('cwguildpoints', TType.I32, 13)
      oprot.writeI32(self.cwguildpoints)
      oprot.writeFieldEnd()
    if self.cwrating is not None:
      oprot.writeFieldBegin('cwrating', TType.I32, 14)
      oprot.writeI32(self.cwrating)
      oprot.writeFieldEnd()
    if self.suzerain is not None:
      oprot.writeFieldBegin('suzerain', TType.STRUCT, 15)
      self.suzerain.write(oprot)
      oprot.writeFieldEnd()
    if self.vassals is not None:
      oprot.writeFieldBegin('vassals', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.vassals))
      for iter136 in self.vassals:
        iter136.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.siegeendtime is not None:
      oprot.writeFieldBegin('siegeendtime', TType.I64, 17)
      oprot.writeI64(self.siegeendtime)
      oprot.writeFieldEnd()
    if self.releaselocktime is not None:
      oprot.writeFieldBegin('releaselocktime', TType.I64, 18)
      oprot.writeI64(self.releaselocktime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfoResponse(object):
  """
  Attributes:
   - result
   - guild
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'guild', (GuildInfo, GuildInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, guild=None,):
    self.result = result
    self.guild = guild

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.guild = GuildInfo()
          self.guild.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.guild is not None:
      oprot.writeFieldBegin('guild', TType.STRUCT, 2)
      self.guild.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildEditInfo(object):
  """
  Attributes:
   - guildid
   - shortname
   - fullname
   - messageoftheday
   - guildExperience
   - cwguildpoints
   - guildrating
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.STRING, 'shortname', None, None, ), # 2
    (3, TType.STRING, 'fullname', None, None, ), # 3
    (4, TType.STRING, 'messageoftheday', None, None, ), # 4
    (5, TType.I64, 'guildExperience', None, None, ), # 5
    (6, TType.I32, 'cwguildpoints', None, None, ), # 6
    (7, TType.I32, 'guildrating', None, None, ), # 7
  )

  def __init__(self, guildid=None, shortname=None, fullname=None, messageoftheday=None, guildExperience=None, cwguildpoints=None, guildrating=None,):
    self.guildid = guildid
    self.shortname = shortname
    self.fullname = fullname
    self.messageoftheday = messageoftheday
    self.guildExperience = guildExperience
    self.cwguildpoints = cwguildpoints
    self.guildrating = guildrating

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shortname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fullname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.messageoftheday = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.guildExperience = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cwguildpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.guildrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildEditInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.shortname is not None:
      oprot.writeFieldBegin('shortname', TType.STRING, 2)
      oprot.writeString(self.shortname)
      oprot.writeFieldEnd()
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 3)
      oprot.writeString(self.fullname)
      oprot.writeFieldEnd()
    if self.messageoftheday is not None:
      oprot.writeFieldBegin('messageoftheday', TType.STRING, 4)
      oprot.writeString(self.messageoftheday)
      oprot.writeFieldEnd()
    if self.guildExperience is not None:
      oprot.writeFieldBegin('guildExperience', TType.I64, 5)
      oprot.writeI64(self.guildExperience)
      oprot.writeFieldEnd()
    if self.cwguildpoints is not None:
      oprot.writeFieldBegin('cwguildpoints', TType.I32, 6)
      oprot.writeI32(self.cwguildpoints)
      oprot.writeFieldEnd()
    if self.guildrating is not None:
      oprot.writeFieldBegin('guildrating', TType.I32, 7)
      oprot.writeI32(self.guildrating)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildMemberInfoResponse(object):
  """
  Attributes:
   - result
   - guildMember
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'guildMember', (GuildMemberInfo, GuildMemberInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, guildMember=None,):
    self.result = result
    self.guildMember = guildMember

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.guildMember = GuildMemberInfo()
          self.guildMember.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildMemberInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.guildMember is not None:
      oprot.writeFieldBegin('guildMember', TType.STRUCT, 2)
      self.guildMember.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocServerVersionResponse(object):
  """
  Attributes:
   - result
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
  )

  def __init__(self, result=None, version=None,):
    self.result = result
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocServerVersionResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StringDataResponse(object):
  """
  Attributes:
   - result
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRING, 'data', None, None, ), # 2
  )

  def __init__(self, result=None, data=None,):
    self.result = result
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StringDataResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 2)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerActionResponse(object):
  """
  Attributes:
   - result
   - error
   - ec
   - error_args
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRING, 'error', None, None, ), # 2
    (3, TType.I32, 'ec', None, None, ), # 3
    (4, TType.STRING, 'error_args', None, None, ), # 4
  )

  def __init__(self, result=None, error=None, ec=None, error_args=None,):
    self.result = result
    self.error = error
    self.ec = ec
    self.error_args = error_args

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ec = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.error_args = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerActionResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRING, 2)
      oprot.writeString(self.error)
      oprot.writeFieldEnd()
    if self.ec is not None:
      oprot.writeFieldBegin('ec', TType.I32, 3)
      oprot.writeI32(self.ec)
      oprot.writeFieldEnd()
    if self.error_args is not None:
      oprot.writeFieldBegin('error_args', TType.STRING, 4)
      oprot.writeString(self.error_args)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceServiceInfo(object):
  """
  Attributes:
   - priceInGold
   - paramValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'priceInGold', None, None, ), # 1
    (2, TType.I32, 'paramValue', None, None, ), # 2
  )

  def __init__(self, priceInGold=None, paramValue=None,):
    self.priceInGold = priceInGold
    self.paramValue = paramValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.priceInGold = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.paramValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceServiceInfo')
    if self.priceInGold is not None:
      oprot.writeFieldBegin('priceInGold', TType.I32, 1)
      oprot.writeI32(self.priceInGold)
      oprot.writeFieldEnd()
    if self.paramValue is not None:
      oprot.writeFieldBegin('paramValue', TType.I32, 2)
      oprot.writeI32(self.paramValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceServiceDataResponse(object):
  """
  Attributes:
   - result
   - prInfoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'result', (ServerActionResponse, ServerActionResponse.thrift_spec), None, ), # 1
    (2, TType.LIST, 'prInfoList', (TType.STRUCT,(PriceServiceInfo, PriceServiceInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, prInfoList=None,):
    self.result = result
    self.prInfoList = prInfoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.result = ServerActionResponse()
          self.result.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.prInfoList = []
          (_etype140, _size137) = iprot.readListBegin()
          for _i141 in xrange(_size137):
            _elem142 = PriceServiceInfo()
            _elem142.read(iprot)
            self.prInfoList.append(_elem142)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceServiceDataResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRUCT, 1)
      self.result.write(oprot)
      oprot.writeFieldEnd()
    if self.prInfoList is not None:
      oprot.writeFieldBegin('prInfoList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.prInfoList))
      for iter143 in self.prInfoList:
        iter143.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegisterPaymentResponse(object):
  """
  Attributes:
   - result
   - bonus_amount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I32, 'bonus_amount', None, None, ), # 2
  )

  def __init__(self, result=None, bonus_amount=None,):
    self.result = result
    self.bonus_amount = bonus_amount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.bonus_amount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisterPaymentResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.bonus_amount is not None:
      oprot.writeFieldBegin('bonus_amount', TType.I32, 2)
      oprot.writeI32(self.bonus_amount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPaymentBonusActionsResponse(object):
  """
  Attributes:
   - result
   - actions
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'actions', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, result=None, actions=None,):
    self.result = result
    self.actions = actions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.actions = []
          (_etype147, _size144) = iprot.readListBegin()
          for _i148 in xrange(_size144):
            _elem149 = iprot.readString();
            self.actions.append(_elem149)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPaymentBonusActionsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.actions is not None:
      oprot.writeFieldBegin('actions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.actions))
      for iter150 in self.actions:
        oprot.writeString(iter150)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestInfo(object):
  """
  Attributes:
   - auid
   - questid
   - name
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'questid', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
  )

  def __init__(self, auid=None, questid=None, name=None, status=None,):
    self.auid = auid
    self.questid = questid
    self.name = name
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.questid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.questid is not None:
      oprot.writeFieldBegin('questid', TType.I32, 2)
      oprot.writeI32(self.questid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestsInfoResponse(object):
  """
  Attributes:
   - result
   - quests
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'quests', (TType.STRUCT,(QuestInfo, QuestInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, quests=None,):
    self.result = result
    self.quests = quests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.quests = []
          (_etype154, _size151) = iprot.readListBegin()
          for _i155 in xrange(_size151):
            _elem156 = QuestInfo()
            _elem156.read(iprot)
            self.quests.append(_elem156)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestsInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.quests is not None:
      oprot.writeFieldBegin('quests', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.quests))
      for iter157 in self.quests:
        iter157.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuildingInfo(object):
  """
  Attributes:
   - classid
   - instanceid
   - level
   - instorage
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'classid', None, None, ), # 1
    (2, TType.I64, 'instanceid', None, None, ), # 2
    (3, TType.I32, 'level', None, None, ), # 3
    (4, TType.BOOL, 'instorage', None, None, ), # 4
  )

  def __init__(self, classid=None, instanceid=None, level=None, instorage=None,):
    self.classid = classid
    self.instanceid = instanceid
    self.level = level
    self.instorage = instorage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.classid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.instanceid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.instorage = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuildingInfo')
    if self.classid is not None:
      oprot.writeFieldBegin('classid', TType.I32, 1)
      oprot.writeI32(self.classid)
      oprot.writeFieldEnd()
    if self.instanceid is not None:
      oprot.writeFieldBegin('instanceid', TType.I64, 2)
      oprot.writeI64(self.instanceid)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.instorage is not None:
      oprot.writeFieldBegin('instorage', TType.BOOL, 4)
      oprot.writeBool(self.instorage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuildingsInfoResponse(object):
  """
  Attributes:
   - result
   - auid
   - buildings
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I64, 'auid', None, None, ), # 2
    (3, TType.LIST, 'buildings', (TType.STRUCT,(BuildingInfo, BuildingInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, auid=None, buildings=None,):
    self.result = result
    self.auid = auid
    self.buildings = buildings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.buildings = []
          (_etype161, _size158) = iprot.readListBegin()
          for _i162 in xrange(_size158):
            _elem163 = BuildingInfo()
            _elem163.read(iprot)
            self.buildings.append(_elem163)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuildingsInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 2)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.buildings is not None:
      oprot.writeFieldBegin('buildings', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.buildings))
      for iter164 in self.buildings:
        iter164.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkinInfo(object):
  """
  Attributes:
   - persistentId
   - heroClassId
   - owned
   - available
   - cost
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'heroClassId', None, None, ), # 2
    (3, TType.BOOL, 'owned', None, None, ), # 3
    (4, TType.BOOL, 'available', None, None, ), # 4
    (5, TType.I32, 'cost', None, None, ), # 5
  )

  def __init__(self, persistentId=None, heroClassId=None, owned=None, available=None, cost=None,):
    self.persistentId = persistentId
    self.heroClassId = heroClassId
    self.owned = owned
    self.available = available
    self.cost = cost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heroClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.owned = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.available = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkinInfo')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.heroClassId is not None:
      oprot.writeFieldBegin('heroClassId', TType.I32, 2)
      oprot.writeI32(self.heroClassId)
      oprot.writeFieldEnd()
    if self.owned is not None:
      oprot.writeFieldBegin('owned', TType.BOOL, 3)
      oprot.writeBool(self.owned)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.BOOL, 4)
      oprot.writeBool(self.available)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 5)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkinsResponse(object):
  """
  Attributes:
   - result
   - auid
   - skins
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I64, 'auid', None, None, ), # 2
    (3, TType.LIST, 'skins', (TType.STRUCT,(SkinInfo, SkinInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, auid=None, skins=None,):
    self.result = result
    self.auid = auid
    self.skins = skins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.skins = []
          (_etype168, _size165) = iprot.readListBegin()
          for _i169 in xrange(_size165):
            _elem170 = SkinInfo()
            _elem170.read(iprot)
            self.skins.append(_elem170)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkinsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 2)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.skins is not None:
      oprot.writeFieldBegin('skins', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.skins))
      for iter171 in self.skins:
        iter171.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentUpgradeEntityInfo(object):
  """
  Attributes:
   - instanceId
   - persistentId
   - chance
   - type
   - talentLevelLimit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'instanceId', None, None, ), # 1
    (2, TType.STRING, 'persistentId', None, None, ), # 2
    (3, TType.I32, 'chance', None, None, ), # 3
    (4, TType.I32, 'type', None, None, ), # 4
    (5, TType.I32, 'talentLevelLimit', None, None, ), # 5
  )

  def __init__(self, instanceId=None, persistentId=None, chance=None, type=None, talentLevelLimit=None,):
    self.instanceId = instanceId
    self.persistentId = persistentId
    self.chance = chance
    self.type = type
    self.talentLevelLimit = talentLevelLimit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.instanceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.talentLevelLimit = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentUpgradeEntityInfo')
    if self.instanceId is not None:
      oprot.writeFieldBegin('instanceId', TType.I64, 1)
      oprot.writeI64(self.instanceId)
      oprot.writeFieldEnd()
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 2)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.chance is not None:
      oprot.writeFieldBegin('chance', TType.I32, 3)
      oprot.writeI32(self.chance)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.talentLevelLimit is not None:
      oprot.writeFieldBegin('talentLevelLimit', TType.I32, 5)
      oprot.writeI32(self.talentLevelLimit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentUpgradeEntitiesResponse(object):
  """
  Attributes:
   - result
   - auid
   - entities
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I64, 'auid', None, None, ), # 2
    (3, TType.LIST, 'entities', (TType.STRUCT,(TalentUpgradeEntityInfo, TalentUpgradeEntityInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, auid=None, entities=None,):
    self.result = result
    self.auid = auid
    self.entities = entities

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.entities = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = TalentUpgradeEntityInfo()
            _elem177.read(iprot)
            self.entities.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentUpgradeEntitiesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 2)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.entities is not None:
      oprot.writeFieldBegin('entities', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.entities))
      for iter178 in self.entities:
        iter178.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentInfo(object):
  """
  Attributes:
   - Wins
   - Losses
   - LastGameTime
   - TicketPriseState
   - State
   - TicketBoughtType
   - MissedGames
   - IsSynchronized
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Wins', None, None, ), # 1
    (2, TType.I32, 'Losses', None, None, ), # 2
    (3, TType.I64, 'LastGameTime', None, None, ), # 3
    (4, TType.I32, 'TicketPriseState', None, None, ), # 4
    (5, TType.I32, 'State', None, None, ), # 5
    (6, TType.I32, 'TicketBoughtType', None, None, ), # 6
    (7, TType.I32, 'MissedGames', None, None, ), # 7
    (8, TType.BOOL, 'IsSynchronized', None, None, ), # 8
  )

  def __init__(self, Wins=None, Losses=None, LastGameTime=None, TicketPriseState=None, State=None, TicketBoughtType=None, MissedGames=None, IsSynchronized=None,):
    self.Wins = Wins
    self.Losses = Losses
    self.LastGameTime = LastGameTime
    self.TicketPriseState = TicketPriseState
    self.State = State
    self.TicketBoughtType = TicketBoughtType
    self.MissedGames = MissedGames
    self.IsSynchronized = IsSynchronized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Wins = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Losses = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.LastGameTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.TicketPriseState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.State = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.TicketBoughtType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.MissedGames = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.IsSynchronized = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentInfo')
    if self.Wins is not None:
      oprot.writeFieldBegin('Wins', TType.I32, 1)
      oprot.writeI32(self.Wins)
      oprot.writeFieldEnd()
    if self.Losses is not None:
      oprot.writeFieldBegin('Losses', TType.I32, 2)
      oprot.writeI32(self.Losses)
      oprot.writeFieldEnd()
    if self.LastGameTime is not None:
      oprot.writeFieldBegin('LastGameTime', TType.I64, 3)
      oprot.writeI64(self.LastGameTime)
      oprot.writeFieldEnd()
    if self.TicketPriseState is not None:
      oprot.writeFieldBegin('TicketPriseState', TType.I32, 4)
      oprot.writeI32(self.TicketPriseState)
      oprot.writeFieldEnd()
    if self.State is not None:
      oprot.writeFieldBegin('State', TType.I32, 5)
      oprot.writeI32(self.State)
      oprot.writeFieldEnd()
    if self.TicketBoughtType is not None:
      oprot.writeFieldBegin('TicketBoughtType', TType.I32, 6)
      oprot.writeI32(self.TicketBoughtType)
      oprot.writeFieldEnd()
    if self.MissedGames is not None:
      oprot.writeFieldBegin('MissedGames', TType.I32, 7)
      oprot.writeI32(self.MissedGames)
      oprot.writeFieldEnd()
    if self.IsSynchronized is not None:
      oprot.writeFieldBegin('IsSynchronized', TType.BOOL, 8)
      oprot.writeBool(self.IsSynchronized)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentInfoResponse(object):
  """
  Attributes:
   - Result
   - TournamentInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Result', None, None, ), # 1
    (2, TType.STRUCT, 'TournamentInfo', (TournamentInfo, TournamentInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, Result=None, TournamentInfo=None,):
    self.Result = Result
    self.TournamentInfo = TournamentInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.TournamentInfo = TournamentInfo()
          self.TournamentInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentInfoResponse')
    if self.Result is not None:
      oprot.writeFieldBegin('Result', TType.I32, 1)
      oprot.writeI32(self.Result)
      oprot.writeFieldEnd()
    if self.TournamentInfo is not None:
      oprot.writeFieldBegin('TournamentInfo', TType.STRUCT, 2)
      self.TournamentInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentGamesInfo(object):
  """
  Attributes:
   - GameStartTime
   - GameDuration
   - SessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'GameStartTime', None, None, ), # 1
    (2, TType.I32, 'GameDuration', None, None, ), # 2
    (3, TType.STRING, 'SessionId', None, None, ), # 3
  )

  def __init__(self, GameStartTime=None, GameDuration=None, SessionId=None,):
    self.GameStartTime = GameStartTime
    self.GameDuration = GameDuration
    self.SessionId = SessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.GameStartTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.GameDuration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentGamesInfo')
    if self.GameStartTime is not None:
      oprot.writeFieldBegin('GameStartTime', TType.I64, 1)
      oprot.writeI64(self.GameStartTime)
      oprot.writeFieldEnd()
    if self.GameDuration is not None:
      oprot.writeFieldBegin('GameDuration', TType.I32, 2)
      oprot.writeI32(self.GameDuration)
      oprot.writeFieldEnd()
    if self.SessionId is not None:
      oprot.writeFieldBegin('SessionId', TType.STRING, 3)
      oprot.writeString(self.SessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentGamesInfoResponse(object):
  """
  Attributes:
   - Result
   - TournamentGames
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Result', None, None, ), # 1
    (2, TType.LIST, 'TournamentGames', (TType.STRUCT,(TournamentGamesInfo, TournamentGamesInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, Result=None, TournamentGames=None,):
    self.Result = Result
    self.TournamentGames = TournamentGames

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.TournamentGames = []
          (_etype182, _size179) = iprot.readListBegin()
          for _i183 in xrange(_size179):
            _elem184 = TournamentGamesInfo()
            _elem184.read(iprot)
            self.TournamentGames.append(_elem184)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentGamesInfoResponse')
    if self.Result is not None:
      oprot.writeFieldBegin('Result', TType.I32, 1)
      oprot.writeI32(self.Result)
      oprot.writeFieldEnd()
    if self.TournamentGames is not None:
      oprot.writeFieldBegin('TournamentGames', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.TournamentGames))
      for iter185 in self.TournamentGames:
        iter185.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiveTournamentTicketResponse(object):
  """
  Attributes:
   - Result
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Result', None, None, ), # 1
  )

  def __init__(self, Result=None,):
    self.Result = Result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Result = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiveTournamentTicketResponse')
    if self.Result is not None:
      oprot.writeFieldBegin('Result', TType.I32, 1)
      oprot.writeI32(self.Result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildTalentInfo(object):
  """
  Attributes:
   - Owner
   - Holder
   - HeroClassId
   - Points
   - PersistentId
   - InstanceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'Owner', None, None, ), # 1
    (2, TType.I64, 'Holder', None, None, ), # 2
    (3, TType.I32, 'HeroClassId', None, None, ), # 3
    (4, TType.I32, 'Points', None, None, ), # 4
    (5, TType.I32, 'PersistentId', None, None, ), # 5
    (6, TType.I64, 'InstanceId', None, None, ), # 6
  )

  def __init__(self, Owner=None, Holder=None, HeroClassId=None, Points=None, PersistentId=None, InstanceId=None,):
    self.Owner = Owner
    self.Holder = Holder
    self.HeroClassId = HeroClassId
    self.Points = Points
    self.PersistentId = PersistentId
    self.InstanceId = InstanceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.Owner = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.Holder = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.HeroClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.Points = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.PersistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.InstanceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildTalentInfo')
    if self.Owner is not None:
      oprot.writeFieldBegin('Owner', TType.I64, 1)
      oprot.writeI64(self.Owner)
      oprot.writeFieldEnd()
    if self.Holder is not None:
      oprot.writeFieldBegin('Holder', TType.I64, 2)
      oprot.writeI64(self.Holder)
      oprot.writeFieldEnd()
    if self.HeroClassId is not None:
      oprot.writeFieldBegin('HeroClassId', TType.I32, 3)
      oprot.writeI32(self.HeroClassId)
      oprot.writeFieldEnd()
    if self.Points is not None:
      oprot.writeFieldBegin('Points', TType.I32, 4)
      oprot.writeI32(self.Points)
      oprot.writeFieldEnd()
    if self.PersistentId is not None:
      oprot.writeFieldBegin('PersistentId', TType.I32, 5)
      oprot.writeI32(self.PersistentId)
      oprot.writeFieldEnd()
    if self.InstanceId is not None:
      oprot.writeFieldBegin('InstanceId', TType.I64, 6)
      oprot.writeI64(self.InstanceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildBankTalentsResponse(object):
  """
  Attributes:
   - result
   - guildBankTalents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'guildBankTalents', (TType.STRUCT,(GuildTalentInfo, GuildTalentInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, guildBankTalents=None,):
    self.result = result
    self.guildBankTalents = guildBankTalents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.guildBankTalents = []
          (_etype189, _size186) = iprot.readListBegin()
          for _i190 in xrange(_size186):
            _elem191 = GuildTalentInfo()
            _elem191.read(iprot)
            self.guildBankTalents.append(_elem191)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildBankTalentsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.guildBankTalents is not None:
      oprot.writeFieldBegin('guildBankTalents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.guildBankTalents))
      for iter192 in self.guildBankTalents:
        iter192.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialNetworksResponse(object):
  """
  Attributes:
   - result
   - socialnetworks
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'socialnetworks', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, result=None, socialnetworks=None,):
    self.result = result
    self.socialnetworks = socialnetworks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.socialnetworks = []
          (_etype196, _size193) = iprot.readListBegin()
          for _i197 in xrange(_size193):
            _elem198 = iprot.readString();
            self.socialnetworks.append(_elem198)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialNetworksResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.socialnetworks is not None:
      oprot.writeFieldBegin('socialnetworks', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.socialnetworks))
      for iter199 in self.socialnetworks:
        oprot.writeString(iter199)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LocaleInfo(object):
  """
  Attributes:
   - locale
   - muid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
    (2, TType.STRING, 'muid', None, None, ), # 2
  )

  def __init__(self, locale=None, muid=None,):
    self.locale = locale
    self.muid = muid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.muid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LocaleInfo')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.muid is not None:
      oprot.writeFieldBegin('muid', TType.STRING, 2)
      oprot.writeString(self.muid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LocaleInfoResponse(object):
  """
  Attributes:
   - result
   - info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'info', (LocaleInfo, LocaleInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, info=None,):
    self.result = result
    self.info = info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.info = LocaleInfo()
          self.info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LocaleInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.STRUCT, 2)
      self.info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestInfo(object):
  """
  Attributes:
   - QuestText
   - Locale
   - Index
   - PullId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'QuestText', None, None, ), # 1
    (2, TType.STRING, 'Locale', None, None, ), # 2
    (3, TType.I32, 'Index', None, None, ), # 3
    (4, TType.I32, 'PullId', None, None, ), # 4
  )

  def __init__(self, QuestText=None, Locale=None, Index=None, PullId=None,):
    self.QuestText = QuestText
    self.Locale = Locale
    self.Index = Index
    self.PullId = PullId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.QuestText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.PullId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestInfo')
    if self.QuestText is not None:
      oprot.writeFieldBegin('QuestText', TType.STRING, 1)
      oprot.writeString(self.QuestText)
      oprot.writeFieldEnd()
    if self.Locale is not None:
      oprot.writeFieldBegin('Locale', TType.STRING, 2)
      oprot.writeString(self.Locale)
      oprot.writeFieldEnd()
    if self.Index is not None:
      oprot.writeFieldBegin('Index', TType.I32, 3)
      oprot.writeI32(self.Index)
      oprot.writeFieldEnd()
    if self.PullId is not None:
      oprot.writeFieldBegin('PullId', TType.I32, 4)
      oprot.writeI32(self.PullId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestInfoResponse(object):
  """
  Attributes:
   - result
   - quests
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'quests', (TType.STRUCT,(DynamicQuestInfo, DynamicQuestInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, quests=None,):
    self.result = result
    self.quests = quests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.quests = []
          (_etype203, _size200) = iprot.readListBegin()
          for _i204 in xrange(_size200):
            _elem205 = DynamicQuestInfo()
            _elem205.read(iprot)
            self.quests.append(_elem205)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.quests is not None:
      oprot.writeFieldBegin('quests', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.quests))
      for iter206 in self.quests:
        iter206.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestByIdResponse(object):
  """
  Attributes:
   - result
   - quest
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'quest', (DynamicQuestInfo, DynamicQuestInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, quest=None,):
    self.result = result
    self.quest = quest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.quest = DynamicQuestInfo()
          self.quest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.quest is not None:
      oprot.writeFieldBegin('quest', TType.STRUCT, 2)
      self.quest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddDynamicQuestResponse(object):
  """
  Attributes:
   - result
   - questId
   - details
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.I32, 'questId', None, None, ), # 2
    (3, TType.STRING, 'details', None, None, ), # 3
  )

  def __init__(self, result=None, questId=None, details=None,):
    self.result = result
    self.questId = questId
    self.details = details

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.questId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddDynamicQuestResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.questId is not None:
      oprot.writeFieldBegin('questId', TType.I32, 2)
      oprot.writeI32(self.questId)
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 3)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuidsList(object):
  """
  Attributes:
   - index
   - description
   - auids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'index', None, None, ), # 1
    (2, TType.STRING, 'description', None, None, ), # 2
    (3, TType.LIST, 'auids', (TType.I64,None), None, ), # 3
  )

  def __init__(self, index=None, description=None, auids=None,):
    self.index = index
    self.description = description
    self.auids = auids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.auids = []
          (_etype210, _size207) = iprot.readListBegin()
          for _i211 in xrange(_size207):
            _elem212 = iprot.readI64();
            self.auids.append(_elem212)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuidsList')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 1)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 2)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.auids is not None:
      oprot.writeFieldBegin('auids', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.auids))
      for iter213 in self.auids:
        oprot.writeI64(iter213)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuidsListResponse(object):
  """
  Attributes:
   - result
   - auidsLists
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'auidsLists', (TType.STRUCT,(AuidsList, AuidsList.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, auidsLists=None,):
    self.result = result
    self.auidsLists = auidsLists

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.auidsLists = []
          (_etype217, _size214) = iprot.readListBegin()
          for _i218 in xrange(_size214):
            _elem219 = AuidsList()
            _elem219.read(iprot)
            self.auidsLists.append(_elem219)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuidsListResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.auidsLists is not None:
      oprot.writeFieldBegin('auidsLists', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.auidsLists))
      for iter220 in self.auidsLists:
        iter220.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuidsListByIdResponse(object):
  """
  Attributes:
   - result
   - auidsLists
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'auidsLists', (AuidsList, AuidsList.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, auidsLists=None,):
    self.result = result
    self.auidsLists = auidsLists

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.auidsLists = AuidsList()
          self.auidsLists.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuidsListByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.auidsLists is not None:
      oprot.writeFieldBegin('auidsLists', TType.STRUCT, 2)
      self.auidsLists.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestPull(object):
  """
  Attributes:
   - locale
   - startTime
   - endTime
   - persistentId
   - quests
   - hasRotation
   - isActive
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
    (2, TType.I64, 'startTime', None, None, ), # 2
    (3, TType.I64, 'endTime', None, None, ), # 3
    (4, TType.I32, 'persistentId', None, None, ), # 4
    (5, TType.LIST, 'quests', (TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'hasRotation', None, None, ), # 6
    (7, TType.BOOL, 'isActive', None, None, ), # 7
  )

  def __init__(self, locale=None, startTime=None, endTime=None, persistentId=None, quests=None, hasRotation=None, isActive=None,):
    self.locale = locale
    self.startTime = startTime
    self.endTime = endTime
    self.persistentId = persistentId
    self.quests = quests
    self.hasRotation = hasRotation
    self.isActive = isActive

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.quests = []
          (_etype224, _size221) = iprot.readListBegin()
          for _i225 in xrange(_size221):
            _elem226 = iprot.readI32();
            self.quests.append(_elem226)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.hasRotation = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.isActive = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestPull')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 2)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 3)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 4)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.quests is not None:
      oprot.writeFieldBegin('quests', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.quests))
      for iter227 in self.quests:
        oprot.writeI32(iter227)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hasRotation is not None:
      oprot.writeFieldBegin('hasRotation', TType.BOOL, 6)
      oprot.writeBool(self.hasRotation)
      oprot.writeFieldEnd()
    if self.isActive is not None:
      oprot.writeFieldBegin('isActive', TType.BOOL, 7)
      oprot.writeBool(self.isActive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestPullsInfoResponse(object):
  """
  Attributes:
   - result
   - questPulls
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'questPulls', (TType.STRUCT,(DynamicQuestPull, DynamicQuestPull.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, questPulls=None,):
    self.result = result
    self.questPulls = questPulls

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.questPulls = []
          (_etype231, _size228) = iprot.readListBegin()
          for _i232 in xrange(_size228):
            _elem233 = DynamicQuestPull()
            _elem233.read(iprot)
            self.questPulls.append(_elem233)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestPullsInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.questPulls is not None:
      oprot.writeFieldBegin('questPulls', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.questPulls))
      for iter234 in self.questPulls:
        iter234.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestPullByIdResponse(object):
  """
  Attributes:
   - result
   - questPull
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'questPull', (DynamicQuestPull, DynamicQuestPull.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, questPull=None,):
    self.result = result
    self.questPull = questPull

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.questPull = DynamicQuestPull()
          self.questPull.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestPullByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.questPull is not None:
      oprot.writeFieldBegin('questPull', TType.STRUCT, 2)
      self.questPull.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Flag(object):
  """
  Attributes:
   - flagPersistentId
   - flagPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'flagPersistentId', None, None, ), # 1
    (2, TType.I32, 'flagPrice', None, None, ), # 2
  )

  def __init__(self, flagPersistentId=None, flagPrice=None,):
    self.flagPersistentId = flagPersistentId
    self.flagPrice = flagPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.flagPersistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.flagPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Flag')
    if self.flagPersistentId is not None:
      oprot.writeFieldBegin('flagPersistentId', TType.STRING, 1)
      oprot.writeString(self.flagPersistentId)
      oprot.writeFieldEnd()
    if self.flagPrice is not None:
      oprot.writeFieldBegin('flagPrice', TType.I32, 2)
      oprot.writeI32(self.flagPrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FlagResponse(object):
  """
  Attributes:
   - result
   - ownedFlags
   - adminFlags
   - notOwnedFlags
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'ownedFlags', (TType.STRUCT,(Flag, Flag.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'adminFlags', (TType.STRUCT,(Flag, Flag.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'notOwnedFlags', (TType.STRUCT,(Flag, Flag.thrift_spec)), None, ), # 4
  )

  def __init__(self, result=None, ownedFlags=None, adminFlags=None, notOwnedFlags=None,):
    self.result = result
    self.ownedFlags = ownedFlags
    self.adminFlags = adminFlags
    self.notOwnedFlags = notOwnedFlags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ownedFlags = []
          (_etype238, _size235) = iprot.readListBegin()
          for _i239 in xrange(_size235):
            _elem240 = Flag()
            _elem240.read(iprot)
            self.ownedFlags.append(_elem240)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.adminFlags = []
          (_etype244, _size241) = iprot.readListBegin()
          for _i245 in xrange(_size241):
            _elem246 = Flag()
            _elem246.read(iprot)
            self.adminFlags.append(_elem246)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.notOwnedFlags = []
          (_etype250, _size247) = iprot.readListBegin()
          for _i251 in xrange(_size247):
            _elem252 = Flag()
            _elem252.read(iprot)
            self.notOwnedFlags.append(_elem252)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FlagResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.ownedFlags is not None:
      oprot.writeFieldBegin('ownedFlags', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.ownedFlags))
      for iter253 in self.ownedFlags:
        iter253.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.adminFlags is not None:
      oprot.writeFieldBegin('adminFlags', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.adminFlags))
      for iter254 in self.adminFlags:
        iter254.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.notOwnedFlags is not None:
      oprot.writeFieldBegin('notOwnedFlags', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.notOwnedFlags))
      for iter255 in self.notOwnedFlags:
        iter255.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdminMessage(object):
  """
  Attributes:
   - messageTitle
   - messageText
   - gmLogin
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'messageTitle', None, None, ), # 1
    (2, TType.STRING, 'messageText', None, None, ), # 2
    (3, TType.STRING, 'gmLogin', None, None, ), # 3
    (4, TType.I64, 'timestamp', None, None, ), # 4
  )

  def __init__(self, messageTitle=None, messageText=None, gmLogin=None, timestamp=None,):
    self.messageTitle = messageTitle
    self.messageText = messageText
    self.gmLogin = gmLogin
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.messageTitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.messageText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.gmLogin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdminMessage')
    if self.messageTitle is not None:
      oprot.writeFieldBegin('messageTitle', TType.STRING, 1)
      oprot.writeString(self.messageTitle)
      oprot.writeFieldEnd()
    if self.messageText is not None:
      oprot.writeFieldBegin('messageText', TType.STRING, 2)
      oprot.writeString(self.messageText)
      oprot.writeFieldEnd()
    if self.gmLogin is not None:
      oprot.writeFieldBegin('gmLogin', TType.STRING, 3)
      oprot.writeString(self.gmLogin)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 4)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdminMessagesResponse(object):
  """
  Attributes:
   - result
   - adminMessages
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'adminMessages', (TType.STRUCT,(AdminMessage, AdminMessage.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, adminMessages=None,):
    self.result = result
    self.adminMessages = adminMessages

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.adminMessages = []
          (_etype259, _size256) = iprot.readListBegin()
          for _i260 in xrange(_size256):
            _elem261 = AdminMessage()
            _elem261.read(iprot)
            self.adminMessages.append(_elem261)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdminMessagesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.adminMessages is not None:
      oprot.writeFieldBegin('adminMessages', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.adminMessages))
      for iter262 in self.adminMessages:
        iter262.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentsEventsResponse(object):
  """
  Attributes:
   - result
   - talentsEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'talentsEvents', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, result=None, talentsEvents=None,):
    self.result = result
    self.talentsEvents = talentsEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.talentsEvents = []
          (_etype266, _size263) = iprot.readListBegin()
          for _i267 in xrange(_size263):
            _elem268 = iprot.readString();
            self.talentsEvents.append(_elem268)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentsEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.talentsEvents is not None:
      oprot.writeFieldBegin('talentsEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.talentsEvents))
      for iter269 in self.talentsEvents:
        oprot.writeString(iter269)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourceEventsResponse(object):
  """
  Attributes:
   - result
   - resourceEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'resourceEvents', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, result=None, resourceEvents=None,):
    self.result = result
    self.resourceEvents = resourceEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resourceEvents = []
          (_etype273, _size270) = iprot.readListBegin()
          for _i274 in xrange(_size270):
            _elem275 = iprot.readString();
            self.resourceEvents.append(_elem275)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourceEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.resourceEvents is not None:
      oprot.writeFieldBegin('resourceEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.resourceEvents))
      for iter276 in self.resourceEvents:
        oprot.writeString(iter276)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonEventInfo(object):
  """
  Attributes:
   - persistentId
   - type
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, type=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.type = type
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonEventInfo')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonEventsListResponse(object):
  """
  Attributes:
   - result
   - availableEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'availableEvents', (TType.STRUCT,(CommonEventInfo, CommonEventInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, availableEvents=None,):
    self.result = result
    self.availableEvents = availableEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.availableEvents = []
          (_etype280, _size277) = iprot.readListBegin()
          for _i281 in xrange(_size277):
            _elem282 = CommonEventInfo()
            _elem282.read(iprot)
            self.availableEvents.append(_elem282)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonEventsListResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.availableEvents is not None:
      oprot.writeFieldBegin('availableEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.availableEvents))
      for iter283 in self.availableEvents:
        iter283.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TechsInfo(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - type
   - time
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'type', None, None, ), # 4
    (5, TType.I32, 'time', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, type=None, time=None, description=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.type = type
    self.time = time
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TechsInfo')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 4)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 5)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TechsInfoByIdResponse(object):
  """
  Attributes:
   - result
   - techInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'techInfo', (TechsInfo, TechsInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, techInfo=None,):
    self.result = result
    self.techInfo = techInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.techInfo = TechsInfo()
          self.techInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TechsInfoByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.techInfo is not None:
      oprot.writeFieldBegin('techInfo', TType.STRUCT, 2)
      self.techInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TechsInfosResponse(object):
  """
  Attributes:
   - result
   - techInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'techInfos', (TType.STRUCT,(TechsInfo, TechsInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, techInfos=None,):
    self.result = result
    self.techInfos = techInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.techInfos = []
          (_etype287, _size284) = iprot.readListBegin()
          for _i288 in xrange(_size284):
            _elem289 = TechsInfo()
            _elem289.read(iprot)
            self.techInfos.append(_elem289)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TechsInfosResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.techInfos is not None:
      oprot.writeFieldBegin('techInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.techInfos))
      for iter290 in self.techInfos:
        iter290.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomEvent(object):
  """
  Attributes:
   - persistentId
   - type
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, type=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.type = type
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomEventByIdResponse(object):
  """
  Attributes:
   - result
   - customEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'customEvent', (CustomEvent, CustomEvent.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, customEvent=None,):
    self.result = result
    self.customEvent = customEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.customEvent = CustomEvent()
          self.customEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomEventByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.customEvent is not None:
      oprot.writeFieldBegin('customEvent', TType.STRUCT, 2)
      self.customEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomEventsResponse(object):
  """
  Attributes:
   - result
   - customEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'customEvents', (TType.STRUCT,(CustomEvent, CustomEvent.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, customEvents=None,):
    self.result = result
    self.customEvents = customEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.customEvents = []
          (_etype294, _size291) = iprot.readListBegin()
          for _i295 in xrange(_size291):
            _elem296 = CustomEvent()
            _elem296.read(iprot)
            self.customEvents.append(_elem296)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.customEvents is not None:
      oprot.writeFieldBegin('customEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.customEvents))
      for iter297 in self.customEvents:
        iter297.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomMap(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - day
   - startHour
   - endHour
   - mapDbid
   - mapType
   - mapEnabled
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'day', None, None, ), # 4
    (5, TType.STRING, 'startHour', None, None, ), # 5
    (6, TType.STRING, 'endHour', None, None, ), # 6
    (7, TType.STRING, 'mapDbid', None, None, ), # 7
    (8, TType.STRING, 'mapType', None, None, ), # 8
    (9, TType.BOOL, 'mapEnabled', None, None, ), # 9
    (10, TType.BOOL, 'enabled', None, None, ), # 10
    (11, TType.STRING, 'description', None, None, ), # 11
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, day=None, startHour=None, endHour=None, mapDbid=None, mapType=None, mapEnabled=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.day = day
    self.startHour = startHour
    self.endHour = endHour
    self.mapDbid = mapDbid
    self.mapType = mapType
    self.mapEnabled = mapEnabled
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.day = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.startHour = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.endHour = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mapDbid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.mapType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.mapEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomMap')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.day is not None:
      oprot.writeFieldBegin('day', TType.STRING, 4)
      oprot.writeString(self.day)
      oprot.writeFieldEnd()
    if self.startHour is not None:
      oprot.writeFieldBegin('startHour', TType.STRING, 5)
      oprot.writeString(self.startHour)
      oprot.writeFieldEnd()
    if self.endHour is not None:
      oprot.writeFieldBegin('endHour', TType.STRING, 6)
      oprot.writeString(self.endHour)
      oprot.writeFieldEnd()
    if self.mapDbid is not None:
      oprot.writeFieldBegin('mapDbid', TType.STRING, 7)
      oprot.writeString(self.mapDbid)
      oprot.writeFieldEnd()
    if self.mapType is not None:
      oprot.writeFieldBegin('mapType', TType.STRING, 8)
      oprot.writeString(self.mapType)
      oprot.writeFieldEnd()
    if self.mapEnabled is not None:
      oprot.writeFieldBegin('mapEnabled', TType.BOOL, 9)
      oprot.writeBool(self.mapEnabled)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 10)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 11)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomMapsResponse(object):
  """
  Attributes:
   - result
   - customMaps
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'customMaps', (TType.STRUCT,(CustomMap, CustomMap.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, customMaps=None,):
    self.result = result
    self.customMaps = customMaps

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.customMaps = []
          (_etype301, _size298) = iprot.readListBegin()
          for _i302 in xrange(_size298):
            _elem303 = CustomMap()
            _elem303.read(iprot)
            self.customMaps.append(_elem303)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomMapsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.customMaps is not None:
      oprot.writeFieldBegin('customMaps', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.customMaps))
      for iter304 in self.customMaps:
        iter304.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomMapByIdResponse(object):
  """
  Attributes:
   - result
   - customMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'customMap', (CustomMap, CustomMap.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, customMap=None,):
    self.result = result
    self.customMap = customMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.customMap = CustomMap()
          self.customMap.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomMapByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.customMap is not None:
      oprot.writeFieldBegin('customMap', TType.STRUCT, 2)
      self.customMap.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentDropRarity(object):
  """
  Attributes:
   - classRar
   - ordinary
   - good
   - excellent
   - magnificent
   - exclusive
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'classRar', None, None, ), # 1
    (2, TType.I32, 'ordinary', None, None, ), # 2
    (3, TType.I32, 'good', None, None, ), # 3
    (4, TType.I32, 'excellent', None, None, ), # 4
    (5, TType.I32, 'magnificent', None, None, ), # 5
    (6, TType.I32, 'exclusive', None, None, ), # 6
  )

  def __init__(self, classRar=None, ordinary=None, good=None, excellent=None, magnificent=None, exclusive=None,):
    self.classRar = classRar
    self.ordinary = ordinary
    self.good = good
    self.excellent = excellent
    self.magnificent = magnificent
    self.exclusive = exclusive

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.classRar = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ordinary = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.good = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.excellent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.magnificent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.exclusive = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentDropRarity')
    if self.classRar is not None:
      oprot.writeFieldBegin('classRar', TType.I32, 1)
      oprot.writeI32(self.classRar)
      oprot.writeFieldEnd()
    if self.ordinary is not None:
      oprot.writeFieldBegin('ordinary', TType.I32, 2)
      oprot.writeI32(self.ordinary)
      oprot.writeFieldEnd()
    if self.good is not None:
      oprot.writeFieldBegin('good', TType.I32, 3)
      oprot.writeI32(self.good)
      oprot.writeFieldEnd()
    if self.excellent is not None:
      oprot.writeFieldBegin('excellent', TType.I32, 4)
      oprot.writeI32(self.excellent)
      oprot.writeFieldEnd()
    if self.magnificent is not None:
      oprot.writeFieldBegin('magnificent', TType.I32, 5)
      oprot.writeI32(self.magnificent)
      oprot.writeFieldEnd()
    if self.exclusive is not None:
      oprot.writeFieldBegin('exclusive', TType.I32, 6)
      oprot.writeI32(self.exclusive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentDropRarityEvent(object):
  """
  Attributes:
   - persistentId
   - dropRarity
   - startTime
   - endTime
   - enabled
   - description
   - premium
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.STRUCT, 'dropRarity', (TalentDropRarity, TalentDropRarity.thrift_spec), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
    (7, TType.BOOL, 'premium', None, None, ), # 7
  )

  def __init__(self, persistentId=None, dropRarity=None, startTime=None, endTime=None, enabled=None, description=None, premium=None,):
    self.persistentId = persistentId
    self.dropRarity = dropRarity
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description
    self.premium = premium

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dropRarity = TalentDropRarity()
          self.dropRarity.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.premium = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentDropRarityEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.dropRarity is not None:
      oprot.writeFieldBegin('dropRarity', TType.STRUCT, 2)
      self.dropRarity.write(oprot)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.premium is not None:
      oprot.writeFieldBegin('premium', TType.BOOL, 7)
      oprot.writeBool(self.premium)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentDropRarityByIdResponse(object):
  """
  Attributes:
   - result
   - talentDropEvent
   - ordinaryDefault
   - premiumDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'talentDropEvent', (TalentDropRarityEvent, TalentDropRarityEvent.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ordinaryDefault', (TalentDropRarity, TalentDropRarity.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'premiumDefault', (TalentDropRarity, TalentDropRarity.thrift_spec), None, ), # 4
  )

  def __init__(self, result=None, talentDropEvent=None, ordinaryDefault=None, premiumDefault=None,):
    self.result = result
    self.talentDropEvent = talentDropEvent
    self.ordinaryDefault = ordinaryDefault
    self.premiumDefault = premiumDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.talentDropEvent = TalentDropRarityEvent()
          self.talentDropEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ordinaryDefault = TalentDropRarity()
          self.ordinaryDefault.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.premiumDefault = TalentDropRarity()
          self.premiumDefault.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentDropRarityByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.talentDropEvent is not None:
      oprot.writeFieldBegin('talentDropEvent', TType.STRUCT, 2)
      self.talentDropEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.ordinaryDefault is not None:
      oprot.writeFieldBegin('ordinaryDefault', TType.STRUCT, 3)
      self.ordinaryDefault.write(oprot)
      oprot.writeFieldEnd()
    if self.premiumDefault is not None:
      oprot.writeFieldBegin('premiumDefault', TType.STRUCT, 4)
      self.premiumDefault.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentDropRaritiesResponse(object):
  """
  Attributes:
   - result
   - talentDropEvents
   - ordinaryDefault
   - premiumDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'talentDropEvents', (TType.STRUCT,(TalentDropRarityEvent, TalentDropRarityEvent.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'ordinaryDefault', (TalentDropRarity, TalentDropRarity.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'premiumDefault', (TalentDropRarity, TalentDropRarity.thrift_spec), None, ), # 4
  )

  def __init__(self, result=None, talentDropEvents=None, ordinaryDefault=None, premiumDefault=None,):
    self.result = result
    self.talentDropEvents = talentDropEvents
    self.ordinaryDefault = ordinaryDefault
    self.premiumDefault = premiumDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.talentDropEvents = []
          (_etype308, _size305) = iprot.readListBegin()
          for _i309 in xrange(_size305):
            _elem310 = TalentDropRarityEvent()
            _elem310.read(iprot)
            self.talentDropEvents.append(_elem310)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ordinaryDefault = TalentDropRarity()
          self.ordinaryDefault.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.premiumDefault = TalentDropRarity()
          self.premiumDefault.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentDropRaritiesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.talentDropEvents is not None:
      oprot.writeFieldBegin('talentDropEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.talentDropEvents))
      for iter311 in self.talentDropEvents:
        iter311.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ordinaryDefault is not None:
      oprot.writeFieldBegin('ordinaryDefault', TType.STRUCT, 3)
      self.ordinaryDefault.write(oprot)
      oprot.writeFieldEnd()
    if self.premiumDefault is not None:
      oprot.writeFieldBegin('premiumDefault', TType.STRUCT, 4)
      self.premiumDefault.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsBanner(object):
  """
  Attributes:
   - persistentId
   - buttonText
   - windowCaption
   - buttonUrl
   - mainUrl
   - tooltip
   - mainUrlB
   - LoginNetworks
   - minLordLevel
   - hideIfViewed
   - startTime
   - endTime
   - locale
   - enabled
   - description
   - extensionJson
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.STRING, 'buttonText', None, None, ), # 2
    (3, TType.STRING, 'windowCaption', None, None, ), # 3
    (4, TType.STRING, 'buttonUrl', None, None, ), # 4
    (5, TType.STRING, 'mainUrl', None, None, ), # 5
    (6, TType.STRING, 'tooltip', None, None, ), # 6
    (7, TType.STRING, 'mainUrlB', None, None, ), # 7
    (8, TType.STRING, 'LoginNetworks', None, None, ), # 8
    (9, TType.I32, 'minLordLevel', None, None, ), # 9
    (10, TType.BOOL, 'hideIfViewed', None, None, ), # 10
    (11, TType.I32, 'startTime', None, None, ), # 11
    (12, TType.I32, 'endTime', None, None, ), # 12
    (13, TType.STRING, 'locale', None, None, ), # 13
    (14, TType.BOOL, 'enabled', None, None, ), # 14
    (15, TType.STRING, 'description', None, None, ), # 15
    (16, TType.STRING, 'extensionJson', None, None, ), # 16
  )

  def __init__(self, persistentId=None, buttonText=None, windowCaption=None, buttonUrl=None, mainUrl=None, tooltip=None, mainUrlB=None, LoginNetworks=None, minLordLevel=None, hideIfViewed=None, startTime=None, endTime=None, locale=None, enabled=None, description=None, extensionJson=None,):
    self.persistentId = persistentId
    self.buttonText = buttonText
    self.windowCaption = windowCaption
    self.buttonUrl = buttonUrl
    self.mainUrl = mainUrl
    self.tooltip = tooltip
    self.mainUrlB = mainUrlB
    self.LoginNetworks = LoginNetworks
    self.minLordLevel = minLordLevel
    self.hideIfViewed = hideIfViewed
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description
    self.extensionJson = extensionJson

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.buttonText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.windowCaption = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.buttonUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mainUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tooltip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mainUrlB = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.LoginNetworks = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.minLordLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.hideIfViewed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.extensionJson = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsBanner')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.buttonText is not None:
      oprot.writeFieldBegin('buttonText', TType.STRING, 2)
      oprot.writeString(self.buttonText)
      oprot.writeFieldEnd()
    if self.windowCaption is not None:
      oprot.writeFieldBegin('windowCaption', TType.STRING, 3)
      oprot.writeString(self.windowCaption)
      oprot.writeFieldEnd()
    if self.buttonUrl is not None:
      oprot.writeFieldBegin('buttonUrl', TType.STRING, 4)
      oprot.writeString(self.buttonUrl)
      oprot.writeFieldEnd()
    if self.mainUrl is not None:
      oprot.writeFieldBegin('mainUrl', TType.STRING, 5)
      oprot.writeString(self.mainUrl)
      oprot.writeFieldEnd()
    if self.tooltip is not None:
      oprot.writeFieldBegin('tooltip', TType.STRING, 6)
      oprot.writeString(self.tooltip)
      oprot.writeFieldEnd()
    if self.mainUrlB is not None:
      oprot.writeFieldBegin('mainUrlB', TType.STRING, 7)
      oprot.writeString(self.mainUrlB)
      oprot.writeFieldEnd()
    if self.LoginNetworks is not None:
      oprot.writeFieldBegin('LoginNetworks', TType.STRING, 8)
      oprot.writeString(self.LoginNetworks)
      oprot.writeFieldEnd()
    if self.minLordLevel is not None:
      oprot.writeFieldBegin('minLordLevel', TType.I32, 9)
      oprot.writeI32(self.minLordLevel)
      oprot.writeFieldEnd()
    if self.hideIfViewed is not None:
      oprot.writeFieldBegin('hideIfViewed', TType.BOOL, 10)
      oprot.writeBool(self.hideIfViewed)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 11)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 12)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 13)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 14)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 15)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.extensionJson is not None:
      oprot.writeFieldBegin('extensionJson', TType.STRING, 16)
      oprot.writeString(self.extensionJson)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsBannerByIdResponse(object):
  """
  Attributes:
   - result
   - newsBanner
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'newsBanner', (NewsBanner, NewsBanner.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, newsBanner=None,):
    self.result = result
    self.newsBanner = newsBanner

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.newsBanner = NewsBanner()
          self.newsBanner.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsBannerByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.newsBanner is not None:
      oprot.writeFieldBegin('newsBanner', TType.STRUCT, 2)
      self.newsBanner.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewsBannersResponse(object):
  """
  Attributes:
   - result
   - newsBanners
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'newsBanners', (TType.STRUCT,(NewsBanner, NewsBanner.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, newsBanners=None,):
    self.result = result
    self.newsBanners = newsBanners

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.newsBanners = []
          (_etype315, _size312) = iprot.readListBegin()
          for _i316 in xrange(_size312):
            _elem317 = NewsBanner()
            _elem317.read(iprot)
            self.newsBanners.append(_elem317)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsBannersResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.newsBanners is not None:
      oprot.writeFieldBegin('newsBanners', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.newsBanners))
      for iter318 in self.newsBanners:
        iter318.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkinGoldPrice(object):
  """
  Attributes:
   - persistentId
   - heroClassId
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'heroClassId', None, None, ), # 2
    (3, TType.I32, 'price', None, None, ), # 3
  )

  def __init__(self, persistentId=None, heroClassId=None, price=None,):
    self.persistentId = persistentId
    self.heroClassId = heroClassId
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heroClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkinGoldPrice')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.heroClassId is not None:
      oprot.writeFieldBegin('heroClassId', TType.I32, 2)
      oprot.writeI32(self.heroClassId)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 3)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkinGoldPriceEvent(object):
  """
  Attributes:
   - persistentId
   - skins
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'skins', (TType.STRUCT,(SkinGoldPrice, SkinGoldPrice.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, skins=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.skins = skins
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.skins = []
          (_etype322, _size319) = iprot.readListBegin()
          for _i323 in xrange(_size319):
            _elem324 = SkinGoldPrice()
            _elem324.read(iprot)
            self.skins.append(_elem324)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkinGoldPriceEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.skins is not None:
      oprot.writeFieldBegin('skins', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.skins))
      for iter325 in self.skins:
        iter325.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkinGoldPriceByIdResponse(object):
  """
  Attributes:
   - result
   - skinEvent
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'skinEvent', (SkinGoldPriceEvent, SkinGoldPriceEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(SkinGoldPrice, SkinGoldPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, skinEvent=None, defaultPrices=None,):
    self.result = result
    self.skinEvent = skinEvent
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.skinEvent = SkinGoldPriceEvent()
          self.skinEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype329, _size326) = iprot.readListBegin()
          for _i330 in xrange(_size326):
            _elem331 = SkinGoldPrice()
            _elem331.read(iprot)
            self.defaultPrices.append(_elem331)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkinGoldPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.skinEvent is not None:
      oprot.writeFieldBegin('skinEvent', TType.STRUCT, 2)
      self.skinEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter332 in self.defaultPrices:
        iter332.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SkinGoldPricesResponse(object):
  """
  Attributes:
   - result
   - skinEvents
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'skinEvents', (TType.STRUCT,(SkinGoldPriceEvent, SkinGoldPriceEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(SkinGoldPrice, SkinGoldPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, skinEvents=None, defaultPrices=None,):
    self.result = result
    self.skinEvents = skinEvents
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.skinEvents = []
          (_etype336, _size333) = iprot.readListBegin()
          for _i337 in xrange(_size333):
            _elem338 = SkinGoldPriceEvent()
            _elem338.read(iprot)
            self.skinEvents.append(_elem338)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype342, _size339) = iprot.readListBegin()
          for _i343 in xrange(_size339):
            _elem344 = SkinGoldPrice()
            _elem344.read(iprot)
            self.defaultPrices.append(_elem344)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SkinGoldPricesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.skinEvents is not None:
      oprot.writeFieldBegin('skinEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.skinEvents))
      for iter345 in self.skinEvents:
        iter345.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter346 in self.defaultPrices:
        iter346.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroPrice(object):
  """
  Attributes:
   - persistentId
   - silverPrice
   - goldPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'silverPrice', None, None, ), # 2
    (3, TType.I32, 'goldPrice', None, None, ), # 3
  )

  def __init__(self, persistentId=None, silverPrice=None, goldPrice=None,):
    self.persistentId = persistentId
    self.silverPrice = silverPrice
    self.goldPrice = goldPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.silverPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.goldPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroPrice')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.silverPrice is not None:
      oprot.writeFieldBegin('silverPrice', TType.I32, 2)
      oprot.writeI32(self.silverPrice)
      oprot.writeFieldEnd()
    if self.goldPrice is not None:
      oprot.writeFieldBegin('goldPrice', TType.I32, 3)
      oprot.writeI32(self.goldPrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroPriceEvent(object):
  """
  Attributes:
   - persistentId
   - heroes
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'heroes', (TType.STRUCT,(HeroPrice, HeroPrice.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, heroes=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.heroes = heroes
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.heroes = []
          (_etype350, _size347) = iprot.readListBegin()
          for _i351 in xrange(_size347):
            _elem352 = HeroPrice()
            _elem352.read(iprot)
            self.heroes.append(_elem352)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroPriceEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.heroes is not None:
      oprot.writeFieldBegin('heroes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.heroes))
      for iter353 in self.heroes:
        iter353.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroPriceByIdResponse(object):
  """
  Attributes:
   - result
   - heroEvent
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'heroEvent', (HeroPriceEvent, HeroPriceEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(HeroPrice, HeroPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, heroEvent=None, defaultPrices=None,):
    self.result = result
    self.heroEvent = heroEvent
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.heroEvent = HeroPriceEvent()
          self.heroEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype357, _size354) = iprot.readListBegin()
          for _i358 in xrange(_size354):
            _elem359 = HeroPrice()
            _elem359.read(iprot)
            self.defaultPrices.append(_elem359)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.heroEvent is not None:
      oprot.writeFieldBegin('heroEvent', TType.STRUCT, 2)
      self.heroEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter360 in self.defaultPrices:
        iter360.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroPricesResponse(object):
  """
  Attributes:
   - result
   - heroEvents
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'heroEvents', (TType.STRUCT,(HeroPriceEvent, HeroPriceEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(HeroPrice, HeroPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, heroEvents=None, defaultPrices=None,):
    self.result = result
    self.heroEvents = heroEvents
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.heroEvents = []
          (_etype364, _size361) = iprot.readListBegin()
          for _i365 in xrange(_size361):
            _elem366 = HeroPriceEvent()
            _elem366.read(iprot)
            self.heroEvents.append(_elem366)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype370, _size367) = iprot.readListBegin()
          for _i371 in xrange(_size367):
            _elem372 = HeroPrice()
            _elem372.read(iprot)
            self.defaultPrices.append(_elem372)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroPricesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.heroEvents is not None:
      oprot.writeFieldBegin('heroEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.heroEvents))
      for iter373 in self.heroEvents:
        iter373.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter374 in self.defaultPrices:
        iter374.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransmutationTalentsPerPerl(object):
  """
  Attributes:
   - persistentId
   - talents
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'talents', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, talents=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.talents = talents
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.talents = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransmutationTalentsPerPerl')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.talents is not None:
      oprot.writeFieldBegin('talents', TType.I32, 2)
      oprot.writeI32(self.talents)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransmutationTalentsPerPerlByIdResponse(object):
  """
  Attributes:
   - result
   - talentsPerPerl
   - talentsDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'talentsPerPerl', (TransmutationTalentsPerPerl, TransmutationTalentsPerPerl.thrift_spec), None, ), # 2
    (3, TType.I32, 'talentsDefault', None, None, ), # 3
  )

  def __init__(self, result=None, talentsPerPerl=None, talentsDefault=None,):
    self.result = result
    self.talentsPerPerl = talentsPerPerl
    self.talentsDefault = talentsDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.talentsPerPerl = TransmutationTalentsPerPerl()
          self.talentsPerPerl.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.talentsDefault = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransmutationTalentsPerPerlByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.talentsPerPerl is not None:
      oprot.writeFieldBegin('talentsPerPerl', TType.STRUCT, 2)
      self.talentsPerPerl.write(oprot)
      oprot.writeFieldEnd()
    if self.talentsDefault is not None:
      oprot.writeFieldBegin('talentsDefault', TType.I32, 3)
      oprot.writeI32(self.talentsDefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransmutationTalentsPerPerlResponse(object):
  """
  Attributes:
   - result
   - talentsPerPerlEvents
   - talentsDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'talentsPerPerlEvents', (TType.STRUCT,(TransmutationTalentsPerPerl, TransmutationTalentsPerPerl.thrift_spec)), None, ), # 2
    (3, TType.I32, 'talentsDefault', None, None, ), # 3
  )

  def __init__(self, result=None, talentsPerPerlEvents=None, talentsDefault=None,):
    self.result = result
    self.talentsPerPerlEvents = talentsPerPerlEvents
    self.talentsDefault = talentsDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.talentsPerPerlEvents = []
          (_etype378, _size375) = iprot.readListBegin()
          for _i379 in xrange(_size375):
            _elem380 = TransmutationTalentsPerPerl()
            _elem380.read(iprot)
            self.talentsPerPerlEvents.append(_elem380)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.talentsDefault = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransmutationTalentsPerPerlResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.talentsPerPerlEvents is not None:
      oprot.writeFieldBegin('talentsPerPerlEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.talentsPerPerlEvents))
      for iter381 in self.talentsPerPerlEvents:
        iter381.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.talentsDefault is not None:
      oprot.writeFieldBegin('talentsDefault', TType.I32, 3)
      oprot.writeI32(self.talentsDefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendInfo(object):
  """
  Attributes:
   - auid
   - nickname
   - guildShortName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'nickname', None, None, ), # 2
    (3, TType.STRING, 'guildShortName', None, None, ), # 3
  )

  def __init__(self, auid=None, nickname=None, guildShortName=None,):
    self.auid = auid
    self.nickname = nickname
    self.guildShortName = guildShortName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.guildShortName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 2)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.guildShortName is not None:
      oprot.writeFieldBegin('guildShortName', TType.STRING, 3)
      oprot.writeString(self.guildShortName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendInfoResponse(object):
  """
  Attributes:
   - result
   - friends
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'friends', (TType.STRUCT,(FriendInfo, FriendInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, friends=None,):
    self.result = result
    self.friends = friends

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.friends = []
          (_etype385, _size382) = iprot.readListBegin()
          for _i386 in xrange(_size382):
            _elem387 = FriendInfo()
            _elem387.read(iprot)
            self.friends.append(_elem387)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendInfoResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.friends is not None:
      oprot.writeFieldBegin('friends', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.friends))
      for iter388 in self.friends:
        iter388.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReforgeTalentPrice(object):
  """
  Attributes:
   - rarity
   - rerollPrice
   - upgradePrice
   - talentsToUpgrade
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rarity', None, None, ), # 1
    (2, TType.I32, 'rerollPrice', None, None, ), # 2
    (3, TType.I32, 'upgradePrice', None, None, ), # 3
    (4, TType.I32, 'talentsToUpgrade', None, None, ), # 4
  )

  def __init__(self, rarity=None, rerollPrice=None, upgradePrice=None, talentsToUpgrade=None,):
    self.rarity = rarity
    self.rerollPrice = rerollPrice
    self.upgradePrice = upgradePrice
    self.talentsToUpgrade = talentsToUpgrade

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.rarity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rerollPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.upgradePrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.talentsToUpgrade = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReforgeTalentPrice')
    if self.rarity is not None:
      oprot.writeFieldBegin('rarity', TType.I32, 1)
      oprot.writeI32(self.rarity)
      oprot.writeFieldEnd()
    if self.rerollPrice is not None:
      oprot.writeFieldBegin('rerollPrice', TType.I32, 2)
      oprot.writeI32(self.rerollPrice)
      oprot.writeFieldEnd()
    if self.upgradePrice is not None:
      oprot.writeFieldBegin('upgradePrice', TType.I32, 3)
      oprot.writeI32(self.upgradePrice)
      oprot.writeFieldEnd()
    if self.talentsToUpgrade is not None:
      oprot.writeFieldBegin('talentsToUpgrade', TType.I32, 4)
      oprot.writeI32(self.talentsToUpgrade)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReforgeTalentPrices(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - enabled
   - description
   - listReforgeTalentPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.BOOL, 'enabled', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.LIST, 'listReforgeTalentPrices', (TType.STRUCT,(ReforgeTalentPrice, ReforgeTalentPrice.thrift_spec)), None, ), # 6
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, enabled=None, description=None, listReforgeTalentPrices=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description
    self.listReforgeTalentPrices = listReforgeTalentPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.listReforgeTalentPrices = []
          (_etype392, _size389) = iprot.readListBegin()
          for _i393 in xrange(_size389):
            _elem394 = ReforgeTalentPrice()
            _elem394.read(iprot)
            self.listReforgeTalentPrices.append(_elem394)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReforgeTalentPrices')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 4)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.listReforgeTalentPrices is not None:
      oprot.writeFieldBegin('listReforgeTalentPrices', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.listReforgeTalentPrices))
      for iter395 in self.listReforgeTalentPrices:
        iter395.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReforgeTalentPriceResponse(object):
  """
  Attributes:
   - result
   - reforgeTalentPricesEvents
   - defaultReforgeTalentPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'reforgeTalentPricesEvents', (TType.STRUCT,(ReforgeTalentPrices, ReforgeTalentPrices.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'defaultReforgeTalentPrices', (ReforgeTalentPrices, ReforgeTalentPrices.thrift_spec), None, ), # 3
  )

  def __init__(self, result=None, reforgeTalentPricesEvents=None, defaultReforgeTalentPrices=None,):
    self.result = result
    self.reforgeTalentPricesEvents = reforgeTalentPricesEvents
    self.defaultReforgeTalentPrices = defaultReforgeTalentPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.reforgeTalentPricesEvents = []
          (_etype399, _size396) = iprot.readListBegin()
          for _i400 in xrange(_size396):
            _elem401 = ReforgeTalentPrices()
            _elem401.read(iprot)
            self.reforgeTalentPricesEvents.append(_elem401)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.defaultReforgeTalentPrices = ReforgeTalentPrices()
          self.defaultReforgeTalentPrices.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReforgeTalentPriceResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.reforgeTalentPricesEvents is not None:
      oprot.writeFieldBegin('reforgeTalentPricesEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.reforgeTalentPricesEvents))
      for iter402 in self.reforgeTalentPricesEvents:
        iter402.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultReforgeTalentPrices is not None:
      oprot.writeFieldBegin('defaultReforgeTalentPrices', TType.STRUCT, 3)
      self.defaultReforgeTalentPrices.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReforgeTalentPriceByIdResponse(object):
  """
  Attributes:
   - result
   - defaultReforgeTalentPrices
   - reforgeTalentPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'defaultReforgeTalentPrices', (ReforgeTalentPrices, ReforgeTalentPrices.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'reforgeTalentPrices', (ReforgeTalentPrices, ReforgeTalentPrices.thrift_spec), None, ), # 3
  )

  def __init__(self, result=None, defaultReforgeTalentPrices=None, reforgeTalentPrices=None,):
    self.result = result
    self.defaultReforgeTalentPrices = defaultReforgeTalentPrices
    self.reforgeTalentPrices = reforgeTalentPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.defaultReforgeTalentPrices = ReforgeTalentPrices()
          self.defaultReforgeTalentPrices.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.reforgeTalentPrices = ReforgeTalentPrices()
          self.reforgeTalentPrices.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReforgeTalentPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.defaultReforgeTalentPrices is not None:
      oprot.writeFieldBegin('defaultReforgeTalentPrices', TType.STRUCT, 2)
      self.defaultReforgeTalentPrices.write(oprot)
      oprot.writeFieldEnd()
    if self.reforgeTalentPrices is not None:
      oprot.writeFieldBegin('reforgeTalentPrices', TType.STRUCT, 3)
      self.reforgeTalentPrices.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlots(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - enabled
   - description
   - usualSlots
   - premiumSlots
   - maxActiveUsualSlots
   - maxActivePremiumSlots
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.BOOL, 'enabled', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.I32, 'usualSlots', None, None, ), # 6
    (7, TType.I32, 'premiumSlots', None, None, ), # 7
    (8, TType.I32, 'maxActiveUsualSlots', None, None, ), # 8
    (9, TType.I32, 'maxActivePremiumSlots', None, None, ), # 9
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, enabled=None, description=None, usualSlots=None, premiumSlots=None, maxActiveUsualSlots=None, maxActivePremiumSlots=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description
    self.usualSlots = usualSlots
    self.premiumSlots = premiumSlots
    self.maxActiveUsualSlots = maxActiveUsualSlots
    self.maxActivePremiumSlots = maxActivePremiumSlots

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.usualSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.premiumSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.maxActiveUsualSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.maxActivePremiumSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlots')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 4)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.usualSlots is not None:
      oprot.writeFieldBegin('usualSlots', TType.I32, 6)
      oprot.writeI32(self.usualSlots)
      oprot.writeFieldEnd()
    if self.premiumSlots is not None:
      oprot.writeFieldBegin('premiumSlots', TType.I32, 7)
      oprot.writeI32(self.premiumSlots)
      oprot.writeFieldEnd()
    if self.maxActiveUsualSlots is not None:
      oprot.writeFieldBegin('maxActiveUsualSlots', TType.I32, 8)
      oprot.writeI32(self.maxActiveUsualSlots)
      oprot.writeFieldEnd()
    if self.maxActivePremiumSlots is not None:
      oprot.writeFieldBegin('maxActivePremiumSlots', TType.I32, 9)
      oprot.writeI32(self.maxActivePremiumSlots)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotsByIdResponse(object):
  """
  Attributes:
   - result
   - rerollShopSlots
   - defaultUsualSlots
   - defaultPremiumSlots
   - defaultMaxActiveUsualSlots
   - defaultMaxActivePremiumSlots
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'rerollShopSlots', (RerollShopSlots, RerollShopSlots.thrift_spec), None, ), # 2
    (3, TType.I32, 'defaultUsualSlots', None, None, ), # 3
    (4, TType.I32, 'defaultPremiumSlots', None, None, ), # 4
    (5, TType.I32, 'defaultMaxActiveUsualSlots', None, None, ), # 5
    (6, TType.I32, 'defaultMaxActivePremiumSlots', None, None, ), # 6
  )

  def __init__(self, result=None, rerollShopSlots=None, defaultUsualSlots=None, defaultPremiumSlots=None, defaultMaxActiveUsualSlots=None, defaultMaxActivePremiumSlots=None,):
    self.result = result
    self.rerollShopSlots = rerollShopSlots
    self.defaultUsualSlots = defaultUsualSlots
    self.defaultPremiumSlots = defaultPremiumSlots
    self.defaultMaxActiveUsualSlots = defaultMaxActiveUsualSlots
    self.defaultMaxActivePremiumSlots = defaultMaxActivePremiumSlots

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rerollShopSlots = RerollShopSlots()
          self.rerollShopSlots.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.defaultUsualSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.defaultPremiumSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.defaultMaxActiveUsualSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.defaultMaxActivePremiumSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotsByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopSlots is not None:
      oprot.writeFieldBegin('rerollShopSlots', TType.STRUCT, 2)
      self.rerollShopSlots.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultUsualSlots is not None:
      oprot.writeFieldBegin('defaultUsualSlots', TType.I32, 3)
      oprot.writeI32(self.defaultUsualSlots)
      oprot.writeFieldEnd()
    if self.defaultPremiumSlots is not None:
      oprot.writeFieldBegin('defaultPremiumSlots', TType.I32, 4)
      oprot.writeI32(self.defaultPremiumSlots)
      oprot.writeFieldEnd()
    if self.defaultMaxActiveUsualSlots is not None:
      oprot.writeFieldBegin('defaultMaxActiveUsualSlots', TType.I32, 5)
      oprot.writeI32(self.defaultMaxActiveUsualSlots)
      oprot.writeFieldEnd()
    if self.defaultMaxActivePremiumSlots is not None:
      oprot.writeFieldBegin('defaultMaxActivePremiumSlots', TType.I32, 6)
      oprot.writeI32(self.defaultMaxActivePremiumSlots)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotsResponse(object):
  """
  Attributes:
   - result
   - rerollShopSlotsEvents
   - defaultUsualSlots
   - defaultPremiumSlots
   - defaultMaxActiveUsualSlots
   - defaultMaxActivePremiumSlots
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'rerollShopSlotsEvents', (TType.STRUCT,(RerollShopSlots, RerollShopSlots.thrift_spec)), None, ), # 2
    (3, TType.I32, 'defaultUsualSlots', None, None, ), # 3
    (4, TType.I32, 'defaultPremiumSlots', None, None, ), # 4
    (5, TType.I32, 'defaultMaxActiveUsualSlots', None, None, ), # 5
    (6, TType.I32, 'defaultMaxActivePremiumSlots', None, None, ), # 6
  )

  def __init__(self, result=None, rerollShopSlotsEvents=None, defaultUsualSlots=None, defaultPremiumSlots=None, defaultMaxActiveUsualSlots=None, defaultMaxActivePremiumSlots=None,):
    self.result = result
    self.rerollShopSlotsEvents = rerollShopSlotsEvents
    self.defaultUsualSlots = defaultUsualSlots
    self.defaultPremiumSlots = defaultPremiumSlots
    self.defaultMaxActiveUsualSlots = defaultMaxActiveUsualSlots
    self.defaultMaxActivePremiumSlots = defaultMaxActivePremiumSlots

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rerollShopSlotsEvents = []
          (_etype406, _size403) = iprot.readListBegin()
          for _i407 in xrange(_size403):
            _elem408 = RerollShopSlots()
            _elem408.read(iprot)
            self.rerollShopSlotsEvents.append(_elem408)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.defaultUsualSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.defaultPremiumSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.defaultMaxActiveUsualSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.defaultMaxActivePremiumSlots = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopSlotsEvents is not None:
      oprot.writeFieldBegin('rerollShopSlotsEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.rerollShopSlotsEvents))
      for iter409 in self.rerollShopSlotsEvents:
        iter409.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultUsualSlots is not None:
      oprot.writeFieldBegin('defaultUsualSlots', TType.I32, 3)
      oprot.writeI32(self.defaultUsualSlots)
      oprot.writeFieldEnd()
    if self.defaultPremiumSlots is not None:
      oprot.writeFieldBegin('defaultPremiumSlots', TType.I32, 4)
      oprot.writeI32(self.defaultPremiumSlots)
      oprot.writeFieldEnd()
    if self.defaultMaxActiveUsualSlots is not None:
      oprot.writeFieldBegin('defaultMaxActiveUsualSlots', TType.I32, 5)
      oprot.writeI32(self.defaultMaxActiveUsualSlots)
      oprot.writeFieldEnd()
    if self.defaultMaxActivePremiumSlots is not None:
      oprot.writeFieldBegin('defaultMaxActivePremiumSlots', TType.I32, 6)
      oprot.writeI32(self.defaultMaxActivePremiumSlots)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourceTableSmall(object):
  """
  Attributes:
   - resource1
   - resource2
   - resource3
   - silver
   - gold
   - perl
   - redPerl
   - currencyId
   - currency
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'resource1', None, None, ), # 1
    (2, TType.I32, 'resource2', None, None, ), # 2
    (3, TType.I32, 'resource3', None, None, ), # 3
    (4, TType.I32, 'silver', None, None, ), # 4
    (5, TType.I32, 'gold', None, None, ), # 5
    (6, TType.I32, 'perl', None, None, ), # 6
    (7, TType.I32, 'redPerl', None, None, ), # 7
    (8, TType.STRING, 'currencyId', None, None, ), # 8
    (9, TType.I32, 'currency', None, None, ), # 9
  )

  def __init__(self, resource1=None, resource2=None, resource3=None, silver=None, gold=None, perl=None, redPerl=None, currencyId=None, currency=None,):
    self.resource1 = resource1
    self.resource2 = resource2
    self.resource3 = resource3
    self.silver = silver
    self.gold = gold
    self.perl = perl
    self.redPerl = redPerl
    self.currencyId = currencyId
    self.currency = currency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.resource1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.resource2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.resource3 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.silver = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.gold = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.perl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.redPerl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.currencyId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.currency = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourceTableSmall')
    if self.resource1 is not None:
      oprot.writeFieldBegin('resource1', TType.I32, 1)
      oprot.writeI32(self.resource1)
      oprot.writeFieldEnd()
    if self.resource2 is not None:
      oprot.writeFieldBegin('resource2', TType.I32, 2)
      oprot.writeI32(self.resource2)
      oprot.writeFieldEnd()
    if self.resource3 is not None:
      oprot.writeFieldBegin('resource3', TType.I32, 3)
      oprot.writeI32(self.resource3)
      oprot.writeFieldEnd()
    if self.silver is not None:
      oprot.writeFieldBegin('silver', TType.I32, 4)
      oprot.writeI32(self.silver)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 5)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.perl is not None:
      oprot.writeFieldBegin('perl', TType.I32, 6)
      oprot.writeI32(self.perl)
      oprot.writeFieldEnd()
    if self.redPerl is not None:
      oprot.writeFieldBegin('redPerl', TType.I32, 7)
      oprot.writeI32(self.redPerl)
      oprot.writeFieldEnd()
    if self.currencyId is not None:
      oprot.writeFieldBegin('currencyId', TType.STRING, 8)
      oprot.writeString(self.currencyId)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.I32, 9)
      oprot.writeI32(self.currency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopPrice(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - enabled
   - description
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.BOOL, 'enabled', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.STRUCT, 'price', (ResourceTableSmall, ResourceTableSmall.thrift_spec), None, ), # 6
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, enabled=None, description=None, price=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.price = ResourceTableSmall()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopPrice')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 4)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 6)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopPriceByIdResponse(object):
  """
  Attributes:
   - result
   - rerollShopPrice
   - defaultRerollShopPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'rerollShopPrice', (RerollShopPrice, RerollShopPrice.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'defaultRerollShopPrice', (ResourceTableSmall, ResourceTableSmall.thrift_spec), None, ), # 3
  )

  def __init__(self, result=None, rerollShopPrice=None, defaultRerollShopPrice=None,):
    self.result = result
    self.rerollShopPrice = rerollShopPrice
    self.defaultRerollShopPrice = defaultRerollShopPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rerollShopPrice = RerollShopPrice()
          self.rerollShopPrice.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.defaultRerollShopPrice = ResourceTableSmall()
          self.defaultRerollShopPrice.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopPrice is not None:
      oprot.writeFieldBegin('rerollShopPrice', TType.STRUCT, 2)
      self.rerollShopPrice.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultRerollShopPrice is not None:
      oprot.writeFieldBegin('defaultRerollShopPrice', TType.STRUCT, 3)
      self.defaultRerollShopPrice.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopPricesResponse(object):
  """
  Attributes:
   - result
   - rerollShopPriceEvents
   - defaultRerollShopPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'rerollShopPriceEvents', (TType.STRUCT,(RerollShopPrice, RerollShopPrice.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'defaultRerollShopPrice', (ResourceTableSmall, ResourceTableSmall.thrift_spec), None, ), # 3
  )

  def __init__(self, result=None, rerollShopPriceEvents=None, defaultRerollShopPrice=None,):
    self.result = result
    self.rerollShopPriceEvents = rerollShopPriceEvents
    self.defaultRerollShopPrice = defaultRerollShopPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rerollShopPriceEvents = []
          (_etype413, _size410) = iprot.readListBegin()
          for _i414 in xrange(_size410):
            _elem415 = RerollShopPrice()
            _elem415.read(iprot)
            self.rerollShopPriceEvents.append(_elem415)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.defaultRerollShopPrice = ResourceTableSmall()
          self.defaultRerollShopPrice.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopPricesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopPriceEvents is not None:
      oprot.writeFieldBegin('rerollShopPriceEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.rerollShopPriceEvents))
      for iter416 in self.rerollShopPriceEvents:
        iter416.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultRerollShopPrice is not None:
      oprot.writeFieldBegin('defaultRerollShopPrice', TType.STRUCT, 3)
      self.defaultRerollShopPrice.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupPrice(object):
  """
  Attributes:
   - persistentId
   - minPrice
   - maxPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'minPrice', None, None, ), # 2
    (3, TType.I32, 'maxPrice', None, None, ), # 3
  )

  def __init__(self, persistentId=None, minPrice=None, maxPrice=None,):
    self.persistentId = persistentId
    self.minPrice = minPrice
    self.maxPrice = maxPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.minPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupPrice')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.minPrice is not None:
      oprot.writeFieldBegin('minPrice', TType.I32, 2)
      oprot.writeI32(self.minPrice)
      oprot.writeFieldEnd()
    if self.maxPrice is not None:
      oprot.writeFieldBegin('maxPrice', TType.I32, 3)
      oprot.writeI32(self.maxPrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupPriceEvent(object):
  """
  Attributes:
   - persistentId
   - groups
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'groups', (TType.STRUCT,(RerollShopGroupPrice, RerollShopGroupPrice.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, groups=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.groups = groups
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groups = []
          (_etype420, _size417) = iprot.readListBegin()
          for _i421 in xrange(_size417):
            _elem422 = RerollShopGroupPrice()
            _elem422.read(iprot)
            self.groups.append(_elem422)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupPriceEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groups))
      for iter423 in self.groups:
        iter423.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupPriceByIdResponse(object):
  """
  Attributes:
   - result
   - groupEvent
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'groupEvent', (RerollShopGroupPriceEvent, RerollShopGroupPriceEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(RerollShopGroupPrice, RerollShopGroupPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, groupEvent=None, defaultPrices=None,):
    self.result = result
    self.groupEvent = groupEvent
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.groupEvent = RerollShopGroupPriceEvent()
          self.groupEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype427, _size424) = iprot.readListBegin()
          for _i428 in xrange(_size424):
            _elem429 = RerollShopGroupPrice()
            _elem429.read(iprot)
            self.defaultPrices.append(_elem429)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.groupEvent is not None:
      oprot.writeFieldBegin('groupEvent', TType.STRUCT, 2)
      self.groupEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter430 in self.defaultPrices:
        iter430.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupPricesResponse(object):
  """
  Attributes:
   - result
   - groupEvents
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'groupEvents', (TType.STRUCT,(RerollShopGroupPriceEvent, RerollShopGroupPriceEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(RerollShopGroupPrice, RerollShopGroupPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, groupEvents=None, defaultPrices=None,):
    self.result = result
    self.groupEvents = groupEvents
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groupEvents = []
          (_etype434, _size431) = iprot.readListBegin()
          for _i435 in xrange(_size431):
            _elem436 = RerollShopGroupPriceEvent()
            _elem436.read(iprot)
            self.groupEvents.append(_elem436)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype440, _size437) = iprot.readListBegin()
          for _i441 in xrange(_size437):
            _elem442 = RerollShopGroupPrice()
            _elem442.read(iprot)
            self.defaultPrices.append(_elem442)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupPricesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.groupEvents is not None:
      oprot.writeFieldBegin('groupEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groupEvents))
      for iter443 in self.groupEvents:
        iter443.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter444 in self.defaultPrices:
        iter444.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupCurrencies(object):
  """
  Attributes:
   - persistentId
   - currencies
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'currencies', None, None, ), # 2
  )

  def __init__(self, persistentId=None, currencies=None,):
    self.persistentId = persistentId
    self.currencies = currencies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.currencies = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupCurrencies')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.currencies is not None:
      oprot.writeFieldBegin('currencies', TType.I32, 2)
      oprot.writeI32(self.currencies)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupCurrenciesEvent(object):
  """
  Attributes:
   - persistentId
   - groups
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'groups', (TType.STRUCT,(RerollShopGroupCurrencies, RerollShopGroupCurrencies.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, groups=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.groups = groups
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groups = []
          (_etype448, _size445) = iprot.readListBegin()
          for _i449 in xrange(_size445):
            _elem450 = RerollShopGroupCurrencies()
            _elem450.read(iprot)
            self.groups.append(_elem450)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupCurrenciesEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groups))
      for iter451 in self.groups:
        iter451.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupCurrenciesByIdResponse(object):
  """
  Attributes:
   - result
   - groupEvent
   - defaultCurrencies
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'groupEvent', (RerollShopGroupCurrenciesEvent, RerollShopGroupCurrenciesEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultCurrencies', (TType.STRUCT,(RerollShopGroupCurrencies, RerollShopGroupCurrencies.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, groupEvent=None, defaultCurrencies=None,):
    self.result = result
    self.groupEvent = groupEvent
    self.defaultCurrencies = defaultCurrencies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.groupEvent = RerollShopGroupCurrenciesEvent()
          self.groupEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultCurrencies = []
          (_etype455, _size452) = iprot.readListBegin()
          for _i456 in xrange(_size452):
            _elem457 = RerollShopGroupCurrencies()
            _elem457.read(iprot)
            self.defaultCurrencies.append(_elem457)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupCurrenciesByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.groupEvent is not None:
      oprot.writeFieldBegin('groupEvent', TType.STRUCT, 2)
      self.groupEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultCurrencies is not None:
      oprot.writeFieldBegin('defaultCurrencies', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultCurrencies))
      for iter458 in self.defaultCurrencies:
        iter458.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupCurrenciesResponse(object):
  """
  Attributes:
   - result
   - groupEvents
   - defaultCurrencies
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'groupEvents', (TType.STRUCT,(RerollShopGroupCurrenciesEvent, RerollShopGroupCurrenciesEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultCurrencies', (TType.STRUCT,(RerollShopGroupCurrencies, RerollShopGroupCurrencies.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, groupEvents=None, defaultCurrencies=None,):
    self.result = result
    self.groupEvents = groupEvents
    self.defaultCurrencies = defaultCurrencies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groupEvents = []
          (_etype462, _size459) = iprot.readListBegin()
          for _i463 in xrange(_size459):
            _elem464 = RerollShopGroupCurrenciesEvent()
            _elem464.read(iprot)
            self.groupEvents.append(_elem464)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultCurrencies = []
          (_etype468, _size465) = iprot.readListBegin()
          for _i469 in xrange(_size465):
            _elem470 = RerollShopGroupCurrencies()
            _elem470.read(iprot)
            self.defaultCurrencies.append(_elem470)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupCurrenciesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.groupEvents is not None:
      oprot.writeFieldBegin('groupEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groupEvents))
      for iter471 in self.groupEvents:
        iter471.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultCurrencies is not None:
      oprot.writeFieldBegin('defaultCurrencies', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultCurrencies))
      for iter472 in self.defaultCurrencies:
        iter472.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotPrice(object):
  """
  Attributes:
   - persistentId
   - groupId
   - minPrice
   - maxPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.I32, 'minPrice', None, None, ), # 3
    (4, TType.I32, 'maxPrice', None, None, ), # 4
  )

  def __init__(self, persistentId=None, groupId=None, minPrice=None, maxPrice=None,):
    self.persistentId = persistentId
    self.groupId = groupId
    self.minPrice = minPrice
    self.maxPrice = maxPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.minPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.maxPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotPrice')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.groupId is not None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.minPrice is not None:
      oprot.writeFieldBegin('minPrice', TType.I32, 3)
      oprot.writeI32(self.minPrice)
      oprot.writeFieldEnd()
    if self.maxPrice is not None:
      oprot.writeFieldBegin('maxPrice', TType.I32, 4)
      oprot.writeI32(self.maxPrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotPriceEvent(object):
  """
  Attributes:
   - persistentId
   - slots
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'slots', (TType.STRUCT,(RerollShopSlotPrice, RerollShopSlotPrice.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, slots=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.slots = slots
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.slots = []
          (_etype476, _size473) = iprot.readListBegin()
          for _i477 in xrange(_size473):
            _elem478 = RerollShopSlotPrice()
            _elem478.read(iprot)
            self.slots.append(_elem478)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotPriceEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.slots is not None:
      oprot.writeFieldBegin('slots', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.slots))
      for iter479 in self.slots:
        iter479.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotPriceByIdResponse(object):
  """
  Attributes:
   - result
   - slotEvent
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'slotEvent', (RerollShopSlotPriceEvent, RerollShopSlotPriceEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(RerollShopSlotPrice, RerollShopSlotPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, slotEvent=None, defaultPrices=None,):
    self.result = result
    self.slotEvent = slotEvent
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.slotEvent = RerollShopSlotPriceEvent()
          self.slotEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype483, _size480) = iprot.readListBegin()
          for _i484 in xrange(_size480):
            _elem485 = RerollShopSlotPrice()
            _elem485.read(iprot)
            self.defaultPrices.append(_elem485)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.slotEvent is not None:
      oprot.writeFieldBegin('slotEvent', TType.STRUCT, 2)
      self.slotEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter486 in self.defaultPrices:
        iter486.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotPricesResponse(object):
  """
  Attributes:
   - result
   - slotEvents
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'slotEvents', (TType.STRUCT,(RerollShopSlotPriceEvent, RerollShopSlotPriceEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(RerollShopSlotPrice, RerollShopSlotPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, slotEvents=None, defaultPrices=None,):
    self.result = result
    self.slotEvents = slotEvents
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.slotEvents = []
          (_etype490, _size487) = iprot.readListBegin()
          for _i491 in xrange(_size487):
            _elem492 = RerollShopSlotPriceEvent()
            _elem492.read(iprot)
            self.slotEvents.append(_elem492)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype496, _size493) = iprot.readListBegin()
          for _i497 in xrange(_size493):
            _elem498 = RerollShopSlotPrice()
            _elem498.read(iprot)
            self.defaultPrices.append(_elem498)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotPricesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.slotEvents is not None:
      oprot.writeFieldBegin('slotEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.slotEvents))
      for iter499 in self.slotEvents:
        iter499.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter500 in self.defaultPrices:
        iter500.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupProbability(object):
  """
  Attributes:
   - persistentId
   - rerollTime
   - probability
   - minUpgradeLevel
   - maxUpgradeLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'rerollTime', None, None, ), # 2
    (3, TType.I32, 'probability', None, None, ), # 3
    (4, TType.I32, 'minUpgradeLevel', None, None, ), # 4
    (5, TType.I32, 'maxUpgradeLevel', None, None, ), # 5
  )

  def __init__(self, persistentId=None, rerollTime=None, probability=None, minUpgradeLevel=None, maxUpgradeLevel=None,):
    self.persistentId = persistentId
    self.rerollTime = rerollTime
    self.probability = probability
    self.minUpgradeLevel = minUpgradeLevel
    self.maxUpgradeLevel = maxUpgradeLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rerollTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.probability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.minUpgradeLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.maxUpgradeLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupProbability')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.rerollTime is not None:
      oprot.writeFieldBegin('rerollTime', TType.I32, 2)
      oprot.writeI32(self.rerollTime)
      oprot.writeFieldEnd()
    if self.probability is not None:
      oprot.writeFieldBegin('probability', TType.I32, 3)
      oprot.writeI32(self.probability)
      oprot.writeFieldEnd()
    if self.minUpgradeLevel is not None:
      oprot.writeFieldBegin('minUpgradeLevel', TType.I32, 4)
      oprot.writeI32(self.minUpgradeLevel)
      oprot.writeFieldEnd()
    if self.maxUpgradeLevel is not None:
      oprot.writeFieldBegin('maxUpgradeLevel', TType.I32, 5)
      oprot.writeI32(self.maxUpgradeLevel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupProbabilityEvent(object):
  """
  Attributes:
   - persistentId
   - groups
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'groups', (TType.STRUCT,(RerollShopGroupProbability, RerollShopGroupProbability.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, groups=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.groups = groups
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groups = []
          (_etype504, _size501) = iprot.readListBegin()
          for _i505 in xrange(_size501):
            _elem506 = RerollShopGroupProbability()
            _elem506.read(iprot)
            self.groups.append(_elem506)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupProbabilityEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groups))
      for iter507 in self.groups:
        iter507.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupProbabilityByIdResponse(object):
  """
  Attributes:
   - result
   - groupEvent
   - defaultProbability
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'groupEvent', (RerollShopGroupProbabilityEvent, RerollShopGroupProbabilityEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultProbability', (TType.STRUCT,(RerollShopGroupProbability, RerollShopGroupProbability.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, groupEvent=None, defaultProbability=None,):
    self.result = result
    self.groupEvent = groupEvent
    self.defaultProbability = defaultProbability

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.groupEvent = RerollShopGroupProbabilityEvent()
          self.groupEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultProbability = []
          (_etype511, _size508) = iprot.readListBegin()
          for _i512 in xrange(_size508):
            _elem513 = RerollShopGroupProbability()
            _elem513.read(iprot)
            self.defaultProbability.append(_elem513)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupProbabilityByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.groupEvent is not None:
      oprot.writeFieldBegin('groupEvent', TType.STRUCT, 2)
      self.groupEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultProbability is not None:
      oprot.writeFieldBegin('defaultProbability', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultProbability))
      for iter514 in self.defaultProbability:
        iter514.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupProbabilitiesResponse(object):
  """
  Attributes:
   - result
   - groupEvents
   - defaultProbability
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'groupEvents', (TType.STRUCT,(RerollShopGroupProbabilityEvent, RerollShopGroupProbabilityEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultProbability', (TType.STRUCT,(RerollShopGroupProbability, RerollShopGroupProbability.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, groupEvents=None, defaultProbability=None,):
    self.result = result
    self.groupEvents = groupEvents
    self.defaultProbability = defaultProbability

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groupEvents = []
          (_etype518, _size515) = iprot.readListBegin()
          for _i519 in xrange(_size515):
            _elem520 = RerollShopGroupProbabilityEvent()
            _elem520.read(iprot)
            self.groupEvents.append(_elem520)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultProbability = []
          (_etype524, _size521) = iprot.readListBegin()
          for _i525 in xrange(_size521):
            _elem526 = RerollShopGroupProbability()
            _elem526.read(iprot)
            self.defaultProbability.append(_elem526)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupProbabilitiesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.groupEvents is not None:
      oprot.writeFieldBegin('groupEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groupEvents))
      for iter527 in self.groupEvents:
        iter527.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultProbability is not None:
      oprot.writeFieldBegin('defaultProbability', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultProbability))
      for iter528 in self.defaultProbability:
        iter528.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FirstBuyGoldPrice(object):
  """
  Attributes:
   - persistentId
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'price', None, None, ), # 2
  )

  def __init__(self, persistentId=None, price=None,):
    self.persistentId = persistentId
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.price = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FirstBuyGoldPrice')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 2)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FirstBuyGoldPriceEvent(object):
  """
  Attributes:
   - persistentId
   - firstBuys
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'firstBuys', (TType.STRUCT,(FirstBuyGoldPrice, FirstBuyGoldPrice.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, firstBuys=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.firstBuys = firstBuys
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.firstBuys = []
          (_etype532, _size529) = iprot.readListBegin()
          for _i533 in xrange(_size529):
            _elem534 = FirstBuyGoldPrice()
            _elem534.read(iprot)
            self.firstBuys.append(_elem534)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FirstBuyGoldPriceEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.firstBuys is not None:
      oprot.writeFieldBegin('firstBuys', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.firstBuys))
      for iter535 in self.firstBuys:
        iter535.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FirstBuyGoldPriceByIdResponse(object):
  """
  Attributes:
   - result
   - firstBuyEvent
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'firstBuyEvent', (FirstBuyGoldPriceEvent, FirstBuyGoldPriceEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(FirstBuyGoldPrice, FirstBuyGoldPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, firstBuyEvent=None, defaultPrices=None,):
    self.result = result
    self.firstBuyEvent = firstBuyEvent
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.firstBuyEvent = FirstBuyGoldPriceEvent()
          self.firstBuyEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype539, _size536) = iprot.readListBegin()
          for _i540 in xrange(_size536):
            _elem541 = FirstBuyGoldPrice()
            _elem541.read(iprot)
            self.defaultPrices.append(_elem541)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FirstBuyGoldPriceByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.firstBuyEvent is not None:
      oprot.writeFieldBegin('firstBuyEvent', TType.STRUCT, 2)
      self.firstBuyEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter542 in self.defaultPrices:
        iter542.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FirstBuyGoldPricesResponse(object):
  """
  Attributes:
   - result
   - firstBuyEvents
   - defaultPrices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'firstBuyEvents', (TType.STRUCT,(FirstBuyGoldPriceEvent, FirstBuyGoldPriceEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultPrices', (TType.STRUCT,(FirstBuyGoldPrice, FirstBuyGoldPrice.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, firstBuyEvents=None, defaultPrices=None,):
    self.result = result
    self.firstBuyEvents = firstBuyEvents
    self.defaultPrices = defaultPrices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.firstBuyEvents = []
          (_etype546, _size543) = iprot.readListBegin()
          for _i547 in xrange(_size543):
            _elem548 = FirstBuyGoldPriceEvent()
            _elem548.read(iprot)
            self.firstBuyEvents.append(_elem548)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultPrices = []
          (_etype552, _size549) = iprot.readListBegin()
          for _i553 in xrange(_size549):
            _elem554 = FirstBuyGoldPrice()
            _elem554.read(iprot)
            self.defaultPrices.append(_elem554)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FirstBuyGoldPricesResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.firstBuyEvents is not None:
      oprot.writeFieldBegin('firstBuyEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.firstBuyEvents))
      for iter555 in self.firstBuyEvents:
        iter555.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultPrices is not None:
      oprot.writeFieldBegin('defaultPrices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultPrices))
      for iter556 in self.defaultPrices:
        iter556.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopPremiumNotInactiveEvent(object):
  """
  Attributes:
   - persistentId
   - isInactive
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.BOOL, 'isInactive', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, isInactive=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.isInactive = isInactive
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.isInactive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopPremiumNotInactiveEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.isInactive is not None:
      oprot.writeFieldBegin('isInactive', TType.BOOL, 2)
      oprot.writeBool(self.isInactive)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopPremiumNotInactiveByIdResponse(object):
  """
  Attributes:
   - result
   - rerollShopPremiumNotInactive
   - rerollShopPremiumNotInactiveDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'rerollShopPremiumNotInactive', (RerollShopPremiumNotInactiveEvent, RerollShopPremiumNotInactiveEvent.thrift_spec), None, ), # 2
    (3, TType.BOOL, 'rerollShopPremiumNotInactiveDefault', None, None, ), # 3
  )

  def __init__(self, result=None, rerollShopPremiumNotInactive=None, rerollShopPremiumNotInactiveDefault=None,):
    self.result = result
    self.rerollShopPremiumNotInactive = rerollShopPremiumNotInactive
    self.rerollShopPremiumNotInactiveDefault = rerollShopPremiumNotInactiveDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rerollShopPremiumNotInactive = RerollShopPremiumNotInactiveEvent()
          self.rerollShopPremiumNotInactive.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.rerollShopPremiumNotInactiveDefault = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopPremiumNotInactiveByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopPremiumNotInactive is not None:
      oprot.writeFieldBegin('rerollShopPremiumNotInactive', TType.STRUCT, 2)
      self.rerollShopPremiumNotInactive.write(oprot)
      oprot.writeFieldEnd()
    if self.rerollShopPremiumNotInactiveDefault is not None:
      oprot.writeFieldBegin('rerollShopPremiumNotInactiveDefault', TType.BOOL, 3)
      oprot.writeBool(self.rerollShopPremiumNotInactiveDefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopPremiumNotInactiveResponse(object):
  """
  Attributes:
   - result
   - rerollShopPremiumNotInactiveEvents
   - rerollShopPremiumNotInactiveDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'rerollShopPremiumNotInactiveEvents', (TType.STRUCT,(RerollShopPremiumNotInactiveEvent, RerollShopPremiumNotInactiveEvent.thrift_spec)), None, ), # 2
    (3, TType.BOOL, 'rerollShopPremiumNotInactiveDefault', None, None, ), # 3
  )

  def __init__(self, result=None, rerollShopPremiumNotInactiveEvents=None, rerollShopPremiumNotInactiveDefault=None,):
    self.result = result
    self.rerollShopPremiumNotInactiveEvents = rerollShopPremiumNotInactiveEvents
    self.rerollShopPremiumNotInactiveDefault = rerollShopPremiumNotInactiveDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rerollShopPremiumNotInactiveEvents = []
          (_etype560, _size557) = iprot.readListBegin()
          for _i561 in xrange(_size557):
            _elem562 = RerollShopPremiumNotInactiveEvent()
            _elem562.read(iprot)
            self.rerollShopPremiumNotInactiveEvents.append(_elem562)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.rerollShopPremiumNotInactiveDefault = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopPremiumNotInactiveResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopPremiumNotInactiveEvents is not None:
      oprot.writeFieldBegin('rerollShopPremiumNotInactiveEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.rerollShopPremiumNotInactiveEvents))
      for iter563 in self.rerollShopPremiumNotInactiveEvents:
        iter563.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rerollShopPremiumNotInactiveDefault is not None:
      oprot.writeFieldBegin('rerollShopPremiumNotInactiveDefault', TType.BOOL, 3)
      oprot.writeBool(self.rerollShopPremiumNotInactiveDefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotAmount(object):
  """
  Attributes:
   - persistentId
   - groupId
   - amount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.I32, 'amount', None, None, ), # 3
  )

  def __init__(self, persistentId=None, groupId=None, amount=None,):
    self.persistentId = persistentId
    self.groupId = groupId
    self.amount = amount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.amount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotAmount')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.groupId is not None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 3)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotAmountEvent(object):
  """
  Attributes:
   - persistentId
   - slots
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'slots', (TType.STRUCT,(RerollShopSlotAmount, RerollShopSlotAmount.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, slots=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.slots = slots
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.slots = []
          (_etype567, _size564) = iprot.readListBegin()
          for _i568 in xrange(_size564):
            _elem569 = RerollShopSlotAmount()
            _elem569.read(iprot)
            self.slots.append(_elem569)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotAmountEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.slots is not None:
      oprot.writeFieldBegin('slots', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.slots))
      for iter570 in self.slots:
        iter570.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotAmountByIdResponse(object):
  """
  Attributes:
   - result
   - slotEvent
   - defaultAmounts
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'slotEvent', (RerollShopSlotAmountEvent, RerollShopSlotAmountEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultAmounts', (TType.STRUCT,(RerollShopSlotAmount, RerollShopSlotAmount.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, slotEvent=None, defaultAmounts=None,):
    self.result = result
    self.slotEvent = slotEvent
    self.defaultAmounts = defaultAmounts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.slotEvent = RerollShopSlotAmountEvent()
          self.slotEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultAmounts = []
          (_etype574, _size571) = iprot.readListBegin()
          for _i575 in xrange(_size571):
            _elem576 = RerollShopSlotAmount()
            _elem576.read(iprot)
            self.defaultAmounts.append(_elem576)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotAmountByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.slotEvent is not None:
      oprot.writeFieldBegin('slotEvent', TType.STRUCT, 2)
      self.slotEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultAmounts is not None:
      oprot.writeFieldBegin('defaultAmounts', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultAmounts))
      for iter577 in self.defaultAmounts:
        iter577.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopSlotAmountsResponse(object):
  """
  Attributes:
   - result
   - slotEvents
   - defaultAmounts
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'slotEvents', (TType.STRUCT,(RerollShopSlotAmountEvent, RerollShopSlotAmountEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultAmounts', (TType.STRUCT,(RerollShopSlotAmount, RerollShopSlotAmount.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, slotEvents=None, defaultAmounts=None,):
    self.result = result
    self.slotEvents = slotEvents
    self.defaultAmounts = defaultAmounts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.slotEvents = []
          (_etype581, _size578) = iprot.readListBegin()
          for _i582 in xrange(_size578):
            _elem583 = RerollShopSlotAmountEvent()
            _elem583.read(iprot)
            self.slotEvents.append(_elem583)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultAmounts = []
          (_etype587, _size584) = iprot.readListBegin()
          for _i588 in xrange(_size584):
            _elem589 = RerollShopSlotAmount()
            _elem589.read(iprot)
            self.defaultAmounts.append(_elem589)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopSlotAmountsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.slotEvents is not None:
      oprot.writeFieldBegin('slotEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.slotEvents))
      for iter590 in self.slotEvents:
        iter590.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultAmounts is not None:
      oprot.writeFieldBegin('defaultAmounts', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultAmounts))
      for iter591 in self.defaultAmounts:
        iter591.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupSlots(object):
  """
  Attributes:
   - persistentIds
   - groupId
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'persistentIds', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
  )

  def __init__(self, persistentIds=None, groupId=None,):
    self.persistentIds = persistentIds
    self.groupId = groupId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.persistentIds = []
          (_etype595, _size592) = iprot.readListBegin()
          for _i596 in xrange(_size592):
            _elem597 = iprot.readString();
            self.persistentIds.append(_elem597)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupSlots')
    if self.persistentIds is not None:
      oprot.writeFieldBegin('persistentIds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.persistentIds))
      for iter598 in self.persistentIds:
        oprot.writeString(iter598)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.groupId is not None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupSlotsEvent(object):
  """
  Attributes:
   - persistentId
   - groups
   - startTime
   - endTime
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.LIST, 'groups', (TType.STRUCT,(RerollShopGroupSlots, RerollShopGroupSlots.thrift_spec)), None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, persistentId=None, groups=None, startTime=None, endTime=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.groups = groups
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.groups = []
          (_etype602, _size599) = iprot.readListBegin()
          for _i603 in xrange(_size599):
            _elem604 = RerollShopGroupSlots()
            _elem604.read(iprot)
            self.groups.append(_elem604)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupSlotsEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.groups))
      for iter605 in self.groups:
        iter605.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupSlotsByIdResponse(object):
  """
  Attributes:
   - result
   - slotEvent
   - defaultSlots
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'slotEvent', (RerollShopGroupSlotsEvent, RerollShopGroupSlotsEvent.thrift_spec), None, ), # 2
    (3, TType.LIST, 'defaultSlots', (TType.STRUCT,(RerollShopGroupSlots, RerollShopGroupSlots.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, slotEvent=None, defaultSlots=None,):
    self.result = result
    self.slotEvent = slotEvent
    self.defaultSlots = defaultSlots

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.slotEvent = RerollShopGroupSlotsEvent()
          self.slotEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultSlots = []
          (_etype609, _size606) = iprot.readListBegin()
          for _i610 in xrange(_size606):
            _elem611 = RerollShopGroupSlots()
            _elem611.read(iprot)
            self.defaultSlots.append(_elem611)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupSlotsByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.slotEvent is not None:
      oprot.writeFieldBegin('slotEvent', TType.STRUCT, 2)
      self.slotEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.defaultSlots is not None:
      oprot.writeFieldBegin('defaultSlots', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultSlots))
      for iter612 in self.defaultSlots:
        iter612.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopGroupSlotsResponse(object):
  """
  Attributes:
   - result
   - slotEvents
   - defaultSlots
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'slotEvents', (TType.STRUCT,(RerollShopGroupSlotsEvent, RerollShopGroupSlotsEvent.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'defaultSlots', (TType.STRUCT,(RerollShopGroupSlots, RerollShopGroupSlots.thrift_spec)), None, ), # 3
  )

  def __init__(self, result=None, slotEvents=None, defaultSlots=None,):
    self.result = result
    self.slotEvents = slotEvents
    self.defaultSlots = defaultSlots

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.slotEvents = []
          (_etype616, _size613) = iprot.readListBegin()
          for _i617 in xrange(_size613):
            _elem618 = RerollShopGroupSlotsEvent()
            _elem618.read(iprot)
            self.slotEvents.append(_elem618)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.defaultSlots = []
          (_etype622, _size619) = iprot.readListBegin()
          for _i623 in xrange(_size619):
            _elem624 = RerollShopGroupSlots()
            _elem624.read(iprot)
            self.defaultSlots.append(_elem624)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopGroupSlotsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.slotEvents is not None:
      oprot.writeFieldBegin('slotEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.slotEvents))
      for iter625 in self.slotEvents:
        iter625.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.defaultSlots is not None:
      oprot.writeFieldBegin('defaultSlots', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.defaultSlots))
      for iter626 in self.defaultSlots:
        iter626.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDumpsDataResponse(object):
  """
  Attributes:
   - avaialbleBackups
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'avaialbleBackups', (TType.STRING,None), None, ), # 1
    (2, TType.I32, 'result', None, None, ), # 2
  )

  def __init__(self, avaialbleBackups=None, result=None,):
    self.avaialbleBackups = avaialbleBackups
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.avaialbleBackups = []
          (_etype630, _size627) = iprot.readListBegin()
          for _i631 in xrange(_size627):
            _elem632 = iprot.readString();
            self.avaialbleBackups.append(_elem632)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDumpsDataResponse')
    if self.avaialbleBackups is not None:
      oprot.writeFieldBegin('avaialbleBackups', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.avaialbleBackups))
      for iter633 in self.avaialbleBackups:
        oprot.writeString(iter633)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 2)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MassOperationInfo(object):
  """
  Attributes:
   - type
   - auids
   - flagId
   - talentId
   - talentIds
   - days
   - message
   - lampInfo
   - skinId
   - heroId
   - buildingId
   - accountEdit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.LIST, 'auids', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'flagId', None, None, ), # 3
    (4, TType.I32, 'talentId', None, None, ), # 4
    (5, TType.LIST, 'talentIds', (TType.I32,None), None, ), # 5
    (6, TType.I32, 'days', None, None, ), # 6
    (7, TType.STRING, 'message', None, None, ), # 7
    (8, TType.STRUCT, 'lampInfo', (LampInfo, LampInfo.thrift_spec), None, ), # 8
    (9, TType.STRING, 'skinId', None, None, ), # 9
    (10, TType.I32, 'heroId', None, None, ), # 10
    (11, TType.I32, 'buildingId', None, None, ), # 11
    (12, TType.STRUCT, 'accountEdit', (AccountEdit, AccountEdit.thrift_spec), None, ), # 12
  )

  def __init__(self, type=None, auids=None, flagId=None, talentId=None, talentIds=None, days=None, message=None, lampInfo=None, skinId=None, heroId=None, buildingId=None, accountEdit=None,):
    self.type = type
    self.auids = auids
    self.flagId = flagId
    self.talentId = talentId
    self.talentIds = talentIds
    self.days = days
    self.message = message
    self.lampInfo = lampInfo
    self.skinId = skinId
    self.heroId = heroId
    self.buildingId = buildingId
    self.accountEdit = accountEdit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.auids = []
          (_etype637, _size634) = iprot.readListBegin()
          for _i638 in xrange(_size634):
            _elem639 = iprot.readI64();
            self.auids.append(_elem639)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.flagId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.talentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.talentIds = []
          (_etype643, _size640) = iprot.readListBegin()
          for _i644 in xrange(_size640):
            _elem645 = iprot.readI32();
            self.talentIds.append(_elem645)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.days = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.lampInfo = LampInfo()
          self.lampInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.skinId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.heroId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.buildingId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.accountEdit = AccountEdit()
          self.accountEdit.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MassOperationInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.auids is not None:
      oprot.writeFieldBegin('auids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.auids))
      for iter646 in self.auids:
        oprot.writeI64(iter646)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flagId is not None:
      oprot.writeFieldBegin('flagId', TType.STRING, 3)
      oprot.writeString(self.flagId)
      oprot.writeFieldEnd()
    if self.talentId is not None:
      oprot.writeFieldBegin('talentId', TType.I32, 4)
      oprot.writeI32(self.talentId)
      oprot.writeFieldEnd()
    if self.talentIds is not None:
      oprot.writeFieldBegin('talentIds', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.talentIds))
      for iter647 in self.talentIds:
        oprot.writeI32(iter647)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 6)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 7)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.lampInfo is not None:
      oprot.writeFieldBegin('lampInfo', TType.STRUCT, 8)
      self.lampInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.skinId is not None:
      oprot.writeFieldBegin('skinId', TType.STRING, 9)
      oprot.writeString(self.skinId)
      oprot.writeFieldEnd()
    if self.heroId is not None:
      oprot.writeFieldBegin('heroId', TType.I32, 10)
      oprot.writeI32(self.heroId)
      oprot.writeFieldEnd()
    if self.buildingId is not None:
      oprot.writeFieldBegin('buildingId', TType.I32, 11)
      oprot.writeI32(self.buildingId)
      oprot.writeFieldEnd()
    if self.accountEdit is not None:
      oprot.writeFieldBegin('accountEdit', TType.STRUCT, 12)
      self.accountEdit.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MassOperationResult(object):
  """
  Attributes:
   - operationId
   - type
   - startTime
   - endTime
   - failedAuids
   - finished
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'operationId', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.STRING, 'failedAuids', None, None, ), # 5
    (6, TType.BOOL, 'finished', None, None, ), # 6
  )

  def __init__(self, operationId=None, type=None, startTime=None, endTime=None, failedAuids=None, finished=None,):
    self.operationId = operationId
    self.type = type
    self.startTime = startTime
    self.endTime = endTime
    self.failedAuids = failedAuids
    self.finished = finished

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.operationId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.failedAuids = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.finished = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MassOperationResult')
    if self.operationId is not None:
      oprot.writeFieldBegin('operationId', TType.I32, 1)
      oprot.writeI32(self.operationId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.failedAuids is not None:
      oprot.writeFieldBegin('failedAuids', TType.STRING, 5)
      oprot.writeString(self.failedAuids)
      oprot.writeFieldEnd()
    if self.finished is not None:
      oprot.writeFieldBegin('finished', TType.BOOL, 6)
      oprot.writeBool(self.finished)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MassOperationsResultResponse(object):
  """
  Attributes:
   - result
   - massOperations
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'massOperations', (TType.STRUCT,(MassOperationResult, MassOperationResult.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, massOperations=None,):
    self.result = result
    self.massOperations = massOperations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.massOperations = []
          (_etype651, _size648) = iprot.readListBegin()
          for _i652 in xrange(_size648):
            _elem653 = MassOperationResult()
            _elem653.read(iprot)
            self.massOperations.append(_elem653)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MassOperationsResultResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.massOperations is not None:
      oprot.writeFieldBegin('massOperations', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.massOperations))
      for iter654 in self.massOperations:
        iter654.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopBanner(object):
  """
  Attributes:
   - persistentId
   - mainUrl
   - startTime
   - endTime
   - locale
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.STRING, 'mainUrl', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.STRING, 'locale', None, None, ), # 5
    (6, TType.BOOL, 'enabled', None, None, ), # 6
    (7, TType.STRING, 'description', None, None, ), # 7
  )

  def __init__(self, persistentId=None, mainUrl=None, startTime=None, endTime=None, locale=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.mainUrl = mainUrl
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mainUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopBanner')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.mainUrl is not None:
      oprot.writeFieldBegin('mainUrl', TType.STRING, 2)
      oprot.writeString(self.mainUrl)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 5)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 6)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 7)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopBannerByIdResponse(object):
  """
  Attributes:
   - result
   - rerollShopBanner
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'rerollShopBanner', (RerollShopBanner, RerollShopBanner.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, rerollShopBanner=None,):
    self.result = result
    self.rerollShopBanner = rerollShopBanner

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rerollShopBanner = RerollShopBanner()
          self.rerollShopBanner.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopBannerByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopBanner is not None:
      oprot.writeFieldBegin('rerollShopBanner', TType.STRUCT, 2)
      self.rerollShopBanner.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopBannersResponse(object):
  """
  Attributes:
   - result
   - rerollShopBanners
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'rerollShopBanners', (TType.STRUCT,(RerollShopBanner, RerollShopBanner.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, rerollShopBanners=None,):
    self.result = result
    self.rerollShopBanners = rerollShopBanners

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rerollShopBanners = []
          (_etype658, _size655) = iprot.readListBegin()
          for _i659 in xrange(_size655):
            _elem660 = RerollShopBanner()
            _elem660.read(iprot)
            self.rerollShopBanners.append(_elem660)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopBannersResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopBanners is not None:
      oprot.writeFieldBegin('rerollShopBanners', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.rerollShopBanners))
      for iter661 in self.rerollShopBanners:
        iter661.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopTooltip(object):
  """
  Attributes:
   - persistentId
   - tooltip
   - startTime
   - endTime
   - locale
   - enabled
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.STRING, 'tooltip', None, None, ), # 2
    (3, TType.I32, 'startTime', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.STRING, 'locale', None, None, ), # 5
    (6, TType.BOOL, 'enabled', None, None, ), # 6
    (7, TType.STRING, 'description', None, None, ), # 7
  )

  def __init__(self, persistentId=None, tooltip=None, startTime=None, endTime=None, locale=None, enabled=None, description=None,):
    self.persistentId = persistentId
    self.tooltip = tooltip
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tooltip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopTooltip')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.tooltip is not None:
      oprot.writeFieldBegin('tooltip', TType.STRING, 2)
      oprot.writeString(self.tooltip)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 3)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 5)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 6)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 7)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopTooltipByIdResponse(object):
  """
  Attributes:
   - result
   - rerollShopTooltip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'rerollShopTooltip', (RerollShopTooltip, RerollShopTooltip.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, rerollShopTooltip=None,):
    self.result = result
    self.rerollShopTooltip = rerollShopTooltip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rerollShopTooltip = RerollShopTooltip()
          self.rerollShopTooltip.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopTooltipByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopTooltip is not None:
      oprot.writeFieldBegin('rerollShopTooltip', TType.STRUCT, 2)
      self.rerollShopTooltip.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RerollShopTooltipsResponse(object):
  """
  Attributes:
   - result
   - rerollShopTooltips
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'rerollShopTooltips', (TType.STRUCT,(RerollShopTooltip, RerollShopTooltip.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, rerollShopTooltips=None,):
    self.result = result
    self.rerollShopTooltips = rerollShopTooltips

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rerollShopTooltips = []
          (_etype665, _size662) = iprot.readListBegin()
          for _i666 in xrange(_size662):
            _elem667 = RerollShopTooltip()
            _elem667.read(iprot)
            self.rerollShopTooltips.append(_elem667)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RerollShopTooltipsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rerollShopTooltips is not None:
      oprot.writeFieldBegin('rerollShopTooltips', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.rerollShopTooltips))
      for iter668 in self.rerollShopTooltips:
        iter668.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWEventModel(object):
  """
  Attributes:
   - persistentId
   - enabled
   - pointsToAddLimit
   - endTime
   - locale
   - points
   - limit
   - event_index
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'persistentId', None, None, ), # 1
    (2, TType.BOOL, 'enabled', None, None, ), # 2
    (3, TType.I32, 'pointsToAddLimit', None, None, ), # 3
    (4, TType.I32, 'endTime', None, None, ), # 4
    (5, TType.STRING, 'locale', None, None, ), # 5
    (6, TType.I64, 'points', None, None, ), # 6
    (7, TType.I64, 'limit', None, None, ), # 7
    (8, TType.I32, 'event_index', None, None, ), # 8
  )

  def __init__(self, persistentId=None, enabled=None, pointsToAddLimit=None, endTime=None, locale=None, points=None, limit=None, event_index=None,):
    self.persistentId = persistentId
    self.enabled = enabled
    self.pointsToAddLimit = pointsToAddLimit
    self.endTime = endTime
    self.locale = locale
    self.points = points
    self.limit = limit
    self.event_index = event_index

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pointsToAddLimit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.points = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.event_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWEventModel')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 1)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 2)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.pointsToAddLimit is not None:
      oprot.writeFieldBegin('pointsToAddLimit', TType.I32, 3)
      oprot.writeI32(self.pointsToAddLimit)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 4)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 5)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.points is not None:
      oprot.writeFieldBegin('points', TType.I64, 6)
      oprot.writeI64(self.points)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 7)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.event_index is not None:
      oprot.writeFieldBegin('event_index', TType.I32, 8)
      oprot.writeI32(self.event_index)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWEventsModelByIdResponse(object):
  """
  Attributes:
   - result
   - gwEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'gwEvent', (GWEventModel, GWEventModel.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, gwEvent=None,):
    self.result = result
    self.gwEvent = gwEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.gwEvent = GWEventModel()
          self.gwEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWEventsModelByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.gwEvent is not None:
      oprot.writeFieldBegin('gwEvent', TType.STRUCT, 2)
      self.gwEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWEventsModelResponse(object):
  """
  Attributes:
   - result
   - gwEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'gwEvents', (TType.STRUCT,(GWEventModel, GWEventModel.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, gwEvents=None,):
    self.result = result
    self.gwEvents = gwEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.gwEvents = []
          (_etype672, _size669) = iprot.readListBegin()
          for _i673 in xrange(_size669):
            _elem674 = GWEventModel()
            _elem674.read(iprot)
            self.gwEvents.append(_elem674)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWEventsModelResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.gwEvents is not None:
      oprot.writeFieldBegin('gwEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.gwEvents))
      for iter675 in self.gwEvents:
        iter675.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollEventItem(object):
  """
  Attributes:
   - itemType
   - persistentId
   - resource
   - ratio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'itemType', None, None, ), # 1
    (2, TType.STRING, 'persistentId', None, None, ), # 2
    (3, TType.STRUCT, 'resource', (ResourceTableSmall, ResourceTableSmall.thrift_spec), None, ), # 3
    (4, TType.DOUBLE, 'ratio', None, None, ), # 4
  )

  def __init__(self, itemType=None, persistentId=None, resource=None, ratio=None,):
    self.itemType = itemType
    self.persistentId = persistentId
    self.resource = resource
    self.ratio = ratio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.itemType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.persistentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.resource = ResourceTableSmall()
          self.resource.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollEventItem')
    if self.itemType is not None:
      oprot.writeFieldBegin('itemType', TType.I32, 1)
      oprot.writeI32(self.itemType)
      oprot.writeFieldEnd()
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.STRING, 2)
      oprot.writeString(self.persistentId)
      oprot.writeFieldEnd()
    if self.resource is not None:
      oprot.writeFieldBegin('resource', TType.STRUCT, 3)
      self.resource.write(oprot)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 4)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollEventRule(object):
  """
  Attributes:
   - ruleType
   - description
   - titleLocalized
   - textLocalized
   - price
   - rewards
   - reforgeSource
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ruleType', None, None, ), # 1
    (2, TType.STRING, 'description', None, None, ), # 2
    (3, TType.STRING, 'titleLocalized', None, None, ), # 3
    (4, TType.STRING, 'textLocalized', None, None, ), # 4
    (5, TType.STRUCT, 'price', (ResourceTableSmall, ResourceTableSmall.thrift_spec), None, ), # 5
    (6, TType.LIST, 'rewards', (TType.STRUCT,(RollEventItem, RollEventItem.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'reforgeSource', (TType.STRUCT,(RollEventItem, RollEventItem.thrift_spec)), None, ), # 7
  )

  def __init__(self, ruleType=None, description=None, titleLocalized=None, textLocalized=None, price=None, rewards=None, reforgeSource=None,):
    self.ruleType = ruleType
    self.description = description
    self.titleLocalized = titleLocalized
    self.textLocalized = textLocalized
    self.price = price
    self.rewards = rewards
    self.reforgeSource = reforgeSource

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ruleType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.titleLocalized = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.textLocalized = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.price = ResourceTableSmall()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.rewards = []
          (_etype679, _size676) = iprot.readListBegin()
          for _i680 in xrange(_size676):
            _elem681 = RollEventItem()
            _elem681.read(iprot)
            self.rewards.append(_elem681)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.reforgeSource = []
          (_etype685, _size682) = iprot.readListBegin()
          for _i686 in xrange(_size682):
            _elem687 = RollEventItem()
            _elem687.read(iprot)
            self.reforgeSource.append(_elem687)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollEventRule')
    if self.ruleType is not None:
      oprot.writeFieldBegin('ruleType', TType.I32, 1)
      oprot.writeI32(self.ruleType)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 2)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.titleLocalized is not None:
      oprot.writeFieldBegin('titleLocalized', TType.STRING, 3)
      oprot.writeString(self.titleLocalized)
      oprot.writeFieldEnd()
    if self.textLocalized is not None:
      oprot.writeFieldBegin('textLocalized', TType.STRING, 4)
      oprot.writeString(self.textLocalized)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 5)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.rewards is not None:
      oprot.writeFieldBegin('rewards', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.rewards))
      for iter688 in self.rewards:
        iter688.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reforgeSource is not None:
      oprot.writeFieldBegin('reforgeSource', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.reforgeSource))
      for iter689 in self.reforgeSource:
        iter689.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollEvent(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - locale
   - enabled
   - description
   - title
   - image
   - text
   - currencyIds
   - rolls
   - completionTalentId
   - completionTalentRatio
   - guid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'locale', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.STRING, 'image', None, None, ), # 8
    (9, TType.STRING, 'text', None, None, ), # 9
    (10, TType.LIST, 'currencyIds', (TType.STRING,None), None, ), # 10
    (11, TType.LIST, 'rolls', (TType.STRUCT,(RollEventRule, RollEventRule.thrift_spec)), None, ), # 11
    (12, TType.STRING, 'completionTalentId', None, None, ), # 12
    (13, TType.I32, 'completionTalentRatio', None, None, ), # 13
    (14, TType.I32, 'guid', None, None, ), # 14
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, locale=None, enabled=None, description=None, title=None, image=None, text=None, currencyIds=None, rolls=None, completionTalentId=None, completionTalentRatio=None, guid=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description
    self.title = title
    self.image = image
    self.text = text
    self.currencyIds = currencyIds
    self.rolls = rolls
    self.completionTalentId = completionTalentId
    self.completionTalentRatio = completionTalentRatio
    self.guid = guid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.currencyIds = []
          (_etype693, _size690) = iprot.readListBegin()
          for _i694 in xrange(_size690):
            _elem695 = iprot.readString();
            self.currencyIds.append(_elem695)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.rolls = []
          (_etype699, _size696) = iprot.readListBegin()
          for _i700 in xrange(_size696):
            _elem701 = RollEventRule()
            _elem701.read(iprot)
            self.rolls.append(_elem701)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.completionTalentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.completionTalentRatio = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.guid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 4)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 8)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 9)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.currencyIds is not None:
      oprot.writeFieldBegin('currencyIds', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.currencyIds))
      for iter702 in self.currencyIds:
        oprot.writeString(iter702)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rolls is not None:
      oprot.writeFieldBegin('rolls', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.rolls))
      for iter703 in self.rolls:
        iter703.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.completionTalentId is not None:
      oprot.writeFieldBegin('completionTalentId', TType.STRING, 12)
      oprot.writeString(self.completionTalentId)
      oprot.writeFieldEnd()
    if self.completionTalentRatio is not None:
      oprot.writeFieldBegin('completionTalentRatio', TType.I32, 13)
      oprot.writeI32(self.completionTalentRatio)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.I32, 14)
      oprot.writeI32(self.guid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollEventByIdResponse(object):
  """
  Attributes:
   - result
   - rollEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'rollEvent', (RollEvent, RollEvent.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, rollEvent=None,):
    self.result = result
    self.rollEvent = rollEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rollEvent = RollEvent()
          self.rollEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollEventByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rollEvent is not None:
      oprot.writeFieldBegin('rollEvent', TType.STRUCT, 2)
      self.rollEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RollEventsResponse(object):
  """
  Attributes:
   - result
   - rollEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'rollEvents', (TType.STRUCT,(RollEvent, RollEvent.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, rollEvents=None,):
    self.result = result
    self.rollEvents = rollEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rollEvents = []
          (_etype707, _size704) = iprot.readListBegin()
          for _i708 in xrange(_size704):
            _elem709 = RollEvent()
            _elem709.read(iprot)
            self.rollEvents.append(_elem709)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RollEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.rollEvents is not None:
      oprot.writeFieldBegin('rollEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.rollEvents))
      for iter710 in self.rollEvents:
        iter710.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStageStepVariant(object):
  """
  Attributes:
   - message
   - winMessage
   - loseMessage
   - winRatioBase
   - winRatioGold
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.STRING, 'winMessage', None, None, ), # 2
    (3, TType.STRING, 'loseMessage', None, None, ), # 3
    (4, TType.DOUBLE, 'winRatioBase', None, None, ), # 4
    (5, TType.DOUBLE, 'winRatioGold', None, None, ), # 5
    (6, TType.STRUCT, 'price', (ResourceTableSmall, ResourceTableSmall.thrift_spec), None, ), # 6
  )

  def __init__(self, message=None, winMessage=None, loseMessage=None, winRatioBase=None, winRatioGold=None, price=None,):
    self.message = message
    self.winMessage = winMessage
    self.loseMessage = loseMessage
    self.winRatioBase = winRatioBase
    self.winRatioGold = winRatioGold
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.winMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.loseMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.winRatioBase = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.winRatioGold = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.price = ResourceTableSmall()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStageStepVariant')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.winMessage is not None:
      oprot.writeFieldBegin('winMessage', TType.STRING, 2)
      oprot.writeString(self.winMessage)
      oprot.writeFieldEnd()
    if self.loseMessage is not None:
      oprot.writeFieldBegin('loseMessage', TType.STRING, 3)
      oprot.writeString(self.loseMessage)
      oprot.writeFieldEnd()
    if self.winRatioBase is not None:
      oprot.writeFieldBegin('winRatioBase', TType.DOUBLE, 4)
      oprot.writeDouble(self.winRatioBase)
      oprot.writeFieldEnd()
    if self.winRatioGold is not None:
      oprot.writeFieldBegin('winRatioGold', TType.DOUBLE, 5)
      oprot.writeDouble(self.winRatioGold)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 6)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStageStep(object):
  """
  Attributes:
   - title
   - variants
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.LIST, 'variants', (TType.STRUCT,(QuestEventStageStepVariant, QuestEventStageStepVariant.thrift_spec)), None, ), # 2
  )

  def __init__(self, title=None, variants=None,):
    self.title = title
    self.variants = variants

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.variants = []
          (_etype714, _size711) = iprot.readListBegin()
          for _i715 in xrange(_size711):
            _elem716 = QuestEventStageStepVariant()
            _elem716.read(iprot)
            self.variants.append(_elem716)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStageStep')
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.variants is not None:
      oprot.writeFieldBegin('variants', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.variants))
      for iter717 in self.variants:
        iter717.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStage(object):
  """
  Attributes:
   - title
   - text
   - image
   - reward
   - steps
   - loseReward
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'text', None, None, ), # 2
    (3, TType.STRING, 'image', None, None, ), # 3
    (4, TType.STRUCT, 'reward', (RollEventItem, RollEventItem.thrift_spec), None, ), # 4
    (5, TType.LIST, 'steps', (TType.STRUCT,(QuestEventStageStep, QuestEventStageStep.thrift_spec)), None, ), # 5
    (6, TType.STRUCT, 'loseReward', (RollEventItem, RollEventItem.thrift_spec), None, ), # 6
  )

  def __init__(self, title=None, text=None, image=None, reward=None, steps=None, loseReward=None,):
    self.title = title
    self.text = text
    self.image = image
    self.reward = reward
    self.steps = steps
    self.loseReward = loseReward

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reward = RollEventItem()
          self.reward.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.steps = []
          (_etype721, _size718) = iprot.readListBegin()
          for _i722 in xrange(_size718):
            _elem723 = QuestEventStageStep()
            _elem723.read(iprot)
            self.steps.append(_elem723)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.loseReward = RollEventItem()
          self.loseReward.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStage')
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 2)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 3)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.reward is not None:
      oprot.writeFieldBegin('reward', TType.STRUCT, 4)
      self.reward.write(oprot)
      oprot.writeFieldEnd()
    if self.steps is not None:
      oprot.writeFieldBegin('steps', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.steps))
      for iter724 in self.steps:
        iter724.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.loseReward is not None:
      oprot.writeFieldBegin('loseReward', TType.STRUCT, 6)
      self.loseReward.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEvent(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - locale
   - enabled
   - description
   - title
   - text
   - currencyIds
   - stages
   - completionTalentId
   - completionTalentRatio
   - guid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'locale', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.STRING, 'text', None, None, ), # 8
    (9, TType.LIST, 'currencyIds', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'stages', (TType.STRUCT,(QuestEventStage, QuestEventStage.thrift_spec)), None, ), # 10
    (11, TType.STRING, 'completionTalentId', None, None, ), # 11
    (12, TType.I32, 'completionTalentRatio', None, None, ), # 12
    (13, TType.I32, 'guid', None, None, ), # 13
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, locale=None, enabled=None, description=None, title=None, text=None, currencyIds=None, stages=None, completionTalentId=None, completionTalentRatio=None, guid=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description
    self.title = title
    self.text = text
    self.currencyIds = currencyIds
    self.stages = stages
    self.completionTalentId = completionTalentId
    self.completionTalentRatio = completionTalentRatio
    self.guid = guid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.currencyIds = []
          (_etype728, _size725) = iprot.readListBegin()
          for _i729 in xrange(_size725):
            _elem730 = iprot.readString();
            self.currencyIds.append(_elem730)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.stages = []
          (_etype734, _size731) = iprot.readListBegin()
          for _i735 in xrange(_size731):
            _elem736 = QuestEventStage()
            _elem736.read(iprot)
            self.stages.append(_elem736)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.completionTalentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.completionTalentRatio = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.guid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 4)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 8)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.currencyIds is not None:
      oprot.writeFieldBegin('currencyIds', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.currencyIds))
      for iter737 in self.currencyIds:
        oprot.writeString(iter737)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.stages is not None:
      oprot.writeFieldBegin('stages', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.stages))
      for iter738 in self.stages:
        iter738.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.completionTalentId is not None:
      oprot.writeFieldBegin('completionTalentId', TType.STRING, 11)
      oprot.writeString(self.completionTalentId)
      oprot.writeFieldEnd()
    if self.completionTalentRatio is not None:
      oprot.writeFieldBegin('completionTalentRatio', TType.I32, 12)
      oprot.writeI32(self.completionTalentRatio)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.I32, 13)
      oprot.writeI32(self.guid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventByIdResponse(object):
  """
  Attributes:
   - result
   - questEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'questEvent', (QuestEvent, QuestEvent.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, questEvent=None,):
    self.result = result
    self.questEvent = questEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.questEvent = QuestEvent()
          self.questEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.questEvent is not None:
      oprot.writeFieldBegin('questEvent', TType.STRUCT, 2)
      self.questEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventsResponse(object):
  """
  Attributes:
   - result
   - questEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'questEvents', (TType.STRUCT,(QuestEvent, QuestEvent.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, questEvents=None,):
    self.result = result
    self.questEvents = questEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.questEvents = []
          (_etype742, _size739) = iprot.readListBegin()
          for _i743 in xrange(_size739):
            _elem744 = QuestEvent()
            _elem744.read(iprot)
            self.questEvents.append(_elem744)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.questEvents is not None:
      oprot.writeFieldBegin('questEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.questEvents))
      for iter745 in self.questEvents:
        iter745.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeGroupMemberModel(object):
  """
  Attributes:
   - name
   - image
   - currencyName
   - currencyCostPerExp
   - rewardA
   - rewardACost
   - rewardB
   - rewardBCost
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'image', None, None, ), # 2
    (3, TType.STRING, 'currencyName', None, None, ), # 3
    (4, TType.DOUBLE, 'currencyCostPerExp', None, None, ), # 4
    (5, TType.STRUCT, 'rewardA', (RollEventItem, RollEventItem.thrift_spec), None, ), # 5
    (6, TType.I32, 'rewardACost', None, None, ), # 6
    (7, TType.STRUCT, 'rewardB', (RollEventItem, RollEventItem.thrift_spec), None, ), # 7
    (8, TType.I32, 'rewardBCost', None, None, ), # 8
  )

  def __init__(self, name=None, image=None, currencyName=None, currencyCostPerExp=None, rewardA=None, rewardACost=None, rewardB=None, rewardBCost=None,):
    self.name = name
    self.image = image
    self.currencyName = currencyName
    self.currencyCostPerExp = currencyCostPerExp
    self.rewardA = rewardA
    self.rewardACost = rewardACost
    self.rewardB = rewardB
    self.rewardBCost = rewardBCost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.currencyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.currencyCostPerExp = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rewardA = RollEventItem()
          self.rewardA.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.rewardACost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.rewardB = RollEventItem()
          self.rewardB.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.rewardBCost = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeGroupMemberModel')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 2)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.currencyName is not None:
      oprot.writeFieldBegin('currencyName', TType.STRING, 3)
      oprot.writeString(self.currencyName)
      oprot.writeFieldEnd()
    if self.currencyCostPerExp is not None:
      oprot.writeFieldBegin('currencyCostPerExp', TType.DOUBLE, 4)
      oprot.writeDouble(self.currencyCostPerExp)
      oprot.writeFieldEnd()
    if self.rewardA is not None:
      oprot.writeFieldBegin('rewardA', TType.STRUCT, 5)
      self.rewardA.write(oprot)
      oprot.writeFieldEnd()
    if self.rewardACost is not None:
      oprot.writeFieldBegin('rewardACost', TType.I32, 6)
      oprot.writeI32(self.rewardACost)
      oprot.writeFieldEnd()
    if self.rewardB is not None:
      oprot.writeFieldBegin('rewardB', TType.STRUCT, 7)
      self.rewardB.write(oprot)
      oprot.writeFieldEnd()
    if self.rewardBCost is not None:
      oprot.writeFieldBegin('rewardBCost', TType.I32, 8)
      oprot.writeI32(self.rewardBCost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeEventGroupModel(object):
  """
  Attributes:
   - name
   - tradeGroupMembers
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.LIST, 'tradeGroupMembers', (TType.STRUCT,(TradeGroupMemberModel, TradeGroupMemberModel.thrift_spec)), None, ), # 2
  )

  def __init__(self, name=None, tradeGroupMembers=None,):
    self.name = name
    self.tradeGroupMembers = tradeGroupMembers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tradeGroupMembers = []
          (_etype749, _size746) = iprot.readListBegin()
          for _i750 in xrange(_size746):
            _elem751 = TradeGroupMemberModel()
            _elem751.read(iprot)
            self.tradeGroupMembers.append(_elem751)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeEventGroupModel')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.tradeGroupMembers is not None:
      oprot.writeFieldBegin('tradeGroupMembers', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.tradeGroupMembers))
      for iter752 in self.tradeGroupMembers:
        iter752.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExperienceRewardRelation(object):
  """
  Attributes:
   - reward
   - rewardCount
   - experience
   - isMinor
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reward', (RollEventItem, RollEventItem.thrift_spec), None, ), # 1
    (2, TType.I32, 'rewardCount', None, None, ), # 2
    (3, TType.I32, 'experience', None, None, ), # 3
    (4, TType.BOOL, 'isMinor', None, None, ), # 4
  )

  def __init__(self, reward=None, rewardCount=None, experience=None, isMinor=None,):
    self.reward = reward
    self.rewardCount = rewardCount
    self.experience = experience
    self.isMinor = isMinor

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reward = RollEventItem()
          self.reward.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rewardCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.experience = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.isMinor = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExperienceRewardRelation')
    if self.reward is not None:
      oprot.writeFieldBegin('reward', TType.STRUCT, 1)
      self.reward.write(oprot)
      oprot.writeFieldEnd()
    if self.rewardCount is not None:
      oprot.writeFieldBegin('rewardCount', TType.I32, 2)
      oprot.writeI32(self.rewardCount)
      oprot.writeFieldEnd()
    if self.experience is not None:
      oprot.writeFieldBegin('experience', TType.I32, 3)
      oprot.writeI32(self.experience)
      oprot.writeFieldEnd()
    if self.isMinor is not None:
      oprot.writeFieldBegin('isMinor', TType.BOOL, 4)
      oprot.writeBool(self.isMinor)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorldRatingRewardRelation(object):
  """
  Attributes:
   - reward
   - rewardCount
   - worldPosition
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reward', (RollEventItem, RollEventItem.thrift_spec), None, ), # 1
    (2, TType.I32, 'rewardCount', None, None, ), # 2
    (3, TType.I32, 'worldPosition', None, None, ), # 3
  )

  def __init__(self, reward=None, rewardCount=None, worldPosition=None,):
    self.reward = reward
    self.rewardCount = rewardCount
    self.worldPosition = worldPosition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reward = RollEventItem()
          self.reward.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rewardCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.worldPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorldRatingRewardRelation')
    if self.reward is not None:
      oprot.writeFieldBegin('reward', TType.STRUCT, 1)
      self.reward.write(oprot)
      oprot.writeFieldEnd()
    if self.rewardCount is not None:
      oprot.writeFieldBegin('rewardCount', TType.I32, 2)
      oprot.writeI32(self.rewardCount)
      oprot.writeFieldEnd()
    if self.worldPosition is not None:
      oprot.writeFieldBegin('worldPosition', TType.I32, 3)
      oprot.writeI32(self.worldPosition)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeEventModel(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - locale
   - enabled
   - description
   - title
   - text
   - completionTalentId
   - completionTalentRatio
   - experienceCurrencyName
   - bannerUrl
   - tradeEventGroups
   - worldRatingRewardRelations
   - experienceRewardRelations
   - rewardsBlockTitle
   - guid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'locale', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.STRING, 'text', None, None, ), # 8
    (9, TType.STRING, 'completionTalentId', None, None, ), # 9
    (10, TType.I32, 'completionTalentRatio', None, None, ), # 10
    (11, TType.STRING, 'experienceCurrencyName', None, None, ), # 11
    (12, TType.STRING, 'bannerUrl', None, None, ), # 12
    (13, TType.LIST, 'tradeEventGroups', (TType.STRUCT,(TradeEventGroupModel, TradeEventGroupModel.thrift_spec)), None, ), # 13
    (14, TType.LIST, 'worldRatingRewardRelations', (TType.STRUCT,(WorldRatingRewardRelation, WorldRatingRewardRelation.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'experienceRewardRelations', (TType.STRUCT,(ExperienceRewardRelation, ExperienceRewardRelation.thrift_spec)), None, ), # 15
    (16, TType.STRING, 'rewardsBlockTitle', None, None, ), # 16
    (17, TType.I32, 'guid', None, None, ), # 17
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, locale=None, enabled=None, description=None, title=None, text=None, completionTalentId=None, completionTalentRatio=None, experienceCurrencyName=None, bannerUrl=None, tradeEventGroups=None, worldRatingRewardRelations=None, experienceRewardRelations=None, rewardsBlockTitle=None, guid=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description
    self.title = title
    self.text = text
    self.completionTalentId = completionTalentId
    self.completionTalentRatio = completionTalentRatio
    self.experienceCurrencyName = experienceCurrencyName
    self.bannerUrl = bannerUrl
    self.tradeEventGroups = tradeEventGroups
    self.worldRatingRewardRelations = worldRatingRewardRelations
    self.experienceRewardRelations = experienceRewardRelations
    self.rewardsBlockTitle = rewardsBlockTitle
    self.guid = guid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.completionTalentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.completionTalentRatio = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.experienceCurrencyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.bannerUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.tradeEventGroups = []
          (_etype756, _size753) = iprot.readListBegin()
          for _i757 in xrange(_size753):
            _elem758 = TradeEventGroupModel()
            _elem758.read(iprot)
            self.tradeEventGroups.append(_elem758)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.worldRatingRewardRelations = []
          (_etype762, _size759) = iprot.readListBegin()
          for _i763 in xrange(_size759):
            _elem764 = WorldRatingRewardRelation()
            _elem764.read(iprot)
            self.worldRatingRewardRelations.append(_elem764)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.experienceRewardRelations = []
          (_etype768, _size765) = iprot.readListBegin()
          for _i769 in xrange(_size765):
            _elem770 = ExperienceRewardRelation()
            _elem770.read(iprot)
            self.experienceRewardRelations.append(_elem770)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.rewardsBlockTitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.guid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeEventModel')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 4)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 8)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.completionTalentId is not None:
      oprot.writeFieldBegin('completionTalentId', TType.STRING, 9)
      oprot.writeString(self.completionTalentId)
      oprot.writeFieldEnd()
    if self.completionTalentRatio is not None:
      oprot.writeFieldBegin('completionTalentRatio', TType.I32, 10)
      oprot.writeI32(self.completionTalentRatio)
      oprot.writeFieldEnd()
    if self.experienceCurrencyName is not None:
      oprot.writeFieldBegin('experienceCurrencyName', TType.STRING, 11)
      oprot.writeString(self.experienceCurrencyName)
      oprot.writeFieldEnd()
    if self.bannerUrl is not None:
      oprot.writeFieldBegin('bannerUrl', TType.STRING, 12)
      oprot.writeString(self.bannerUrl)
      oprot.writeFieldEnd()
    if self.tradeEventGroups is not None:
      oprot.writeFieldBegin('tradeEventGroups', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.tradeEventGroups))
      for iter771 in self.tradeEventGroups:
        iter771.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.worldRatingRewardRelations is not None:
      oprot.writeFieldBegin('worldRatingRewardRelations', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.worldRatingRewardRelations))
      for iter772 in self.worldRatingRewardRelations:
        iter772.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.experienceRewardRelations is not None:
      oprot.writeFieldBegin('experienceRewardRelations', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.experienceRewardRelations))
      for iter773 in self.experienceRewardRelations:
        iter773.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rewardsBlockTitle is not None:
      oprot.writeFieldBegin('rewardsBlockTitle', TType.STRING, 16)
      oprot.writeString(self.rewardsBlockTitle)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.I32, 17)
      oprot.writeI32(self.guid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeEventByIdResponse(object):
  """
  Attributes:
   - result
   - tradeEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'tradeEvent', (TradeEventModel, TradeEventModel.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, tradeEvent=None,):
    self.result = result
    self.tradeEvent = tradeEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.tradeEvent = TradeEventModel()
          self.tradeEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeEventByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.tradeEvent is not None:
      oprot.writeFieldBegin('tradeEvent', TType.STRUCT, 2)
      self.tradeEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeEventsResponse(object):
  """
  Attributes:
   - result
   - tradeEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'tradeEvents', (TType.STRUCT,(TradeEventModel, TradeEventModel.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, tradeEvents=None,):
    self.result = result
    self.tradeEvents = tradeEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tradeEvents = []
          (_etype777, _size774) = iprot.readListBegin()
          for _i778 in xrange(_size774):
            _elem779 = TradeEventModel()
            _elem779.read(iprot)
            self.tradeEvents.append(_elem779)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.tradeEvents is not None:
      oprot.writeFieldBegin('tradeEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.tradeEvents))
      for iter780 in self.tradeEvents:
        iter780.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonEventShopItem(object):
  """
  Attributes:
   - name
   - image
   - lootboxId
   - cost
   - limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'image', None, None, ), # 2
    (3, TType.STRING, 'lootboxId', None, None, ), # 3
    (4, TType.I32, 'cost', None, None, ), # 4
    (5, TType.I32, 'limit', None, None, ), # 5
  )

  def __init__(self, name=None, image=None, lootboxId=None, cost=None, limit=None,):
    self.name = name
    self.image = image
    self.lootboxId = lootboxId
    self.cost = cost
    self.limit = limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.lootboxId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonEventShopItem')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 2)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.lootboxId is not None:
      oprot.writeFieldBegin('lootboxId', TType.STRING, 3)
      oprot.writeString(self.lootboxId)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 4)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 5)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonEventShopGroup(object):
  """
  Attributes:
   - name
   - items
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.LIST, 'items', (TType.STRUCT,(SeasonEventShopItem, SeasonEventShopItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, name=None, items=None,):
    self.name = name
    self.items = items

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.items = []
          (_etype784, _size781) = iprot.readListBegin()
          for _i785 in xrange(_size781):
            _elem786 = SeasonEventShopItem()
            _elem786.read(iprot)
            self.items.append(_elem786)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonEventShopGroup')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter787 in self.items:
        iter787.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonProgressRewardRelation(object):
  """
  Attributes:
   - reward
   - rewardCount
   - requiredProgress
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reward', (RollEventItem, RollEventItem.thrift_spec), None, ), # 1
    (2, TType.I32, 'rewardCount', None, None, ), # 2
    (3, TType.I32, 'requiredProgress', None, None, ), # 3
  )

  def __init__(self, reward=None, rewardCount=None, requiredProgress=None,):
    self.reward = reward
    self.rewardCount = rewardCount
    self.requiredProgress = requiredProgress

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reward = RollEventItem()
          self.reward.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rewardCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.requiredProgress = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonProgressRewardRelation')
    if self.reward is not None:
      oprot.writeFieldBegin('reward', TType.STRUCT, 1)
      self.reward.write(oprot)
      oprot.writeFieldEnd()
    if self.rewardCount is not None:
      oprot.writeFieldBegin('rewardCount', TType.I32, 2)
      oprot.writeI32(self.rewardCount)
      oprot.writeFieldEnd()
    if self.requiredProgress is not None:
      oprot.writeFieldBegin('requiredProgress', TType.I32, 3)
      oprot.writeI32(self.requiredProgress)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonEvent(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - locale
   - enabled
   - description
   - title
   - text
   - completionTalentId
   - completionTalentRatio
   - shopCurrencyId
   - rewardsCurrencyId
   - bannerUrl
   - shopGroups
   - worldRatingRewardRelations
   - progressRewardRelations
   - rewardsBlockTitle
   - guid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.STRING, 'locale', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.STRING, 'text', None, None, ), # 8
    (9, TType.STRING, 'completionTalentId', None, None, ), # 9
    (10, TType.I32, 'completionTalentRatio', None, None, ), # 10
    (11, TType.STRING, 'shopCurrencyId', None, None, ), # 11
    (12, TType.STRING, 'rewardsCurrencyId', None, None, ), # 12
    (13, TType.STRING, 'bannerUrl', None, None, ), # 13
    (14, TType.LIST, 'shopGroups', (TType.STRUCT,(SeasonEventShopGroup, SeasonEventShopGroup.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'worldRatingRewardRelations', (TType.STRUCT,(WorldRatingRewardRelation, WorldRatingRewardRelation.thrift_spec)), None, ), # 15
    (16, TType.LIST, 'progressRewardRelations', (TType.STRUCT,(SeasonProgressRewardRelation, SeasonProgressRewardRelation.thrift_spec)), None, ), # 16
    (17, TType.STRING, 'rewardsBlockTitle', None, None, ), # 17
    (18, TType.I32, 'guid', None, None, ), # 18
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, locale=None, enabled=None, description=None, title=None, text=None, completionTalentId=None, completionTalentRatio=None, shopCurrencyId=None, rewardsCurrencyId=None, bannerUrl=None, shopGroups=None, worldRatingRewardRelations=None, progressRewardRelations=None, rewardsBlockTitle=None, guid=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.locale = locale
    self.enabled = enabled
    self.description = description
    self.title = title
    self.text = text
    self.completionTalentId = completionTalentId
    self.completionTalentRatio = completionTalentRatio
    self.shopCurrencyId = shopCurrencyId
    self.rewardsCurrencyId = rewardsCurrencyId
    self.bannerUrl = bannerUrl
    self.shopGroups = shopGroups
    self.worldRatingRewardRelations = worldRatingRewardRelations
    self.progressRewardRelations = progressRewardRelations
    self.rewardsBlockTitle = rewardsBlockTitle
    self.guid = guid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.completionTalentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.completionTalentRatio = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.shopCurrencyId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.rewardsCurrencyId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.bannerUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.shopGroups = []
          (_etype791, _size788) = iprot.readListBegin()
          for _i792 in xrange(_size788):
            _elem793 = SeasonEventShopGroup()
            _elem793.read(iprot)
            self.shopGroups.append(_elem793)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.worldRatingRewardRelations = []
          (_etype797, _size794) = iprot.readListBegin()
          for _i798 in xrange(_size794):
            _elem799 = WorldRatingRewardRelation()
            _elem799.read(iprot)
            self.worldRatingRewardRelations.append(_elem799)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.progressRewardRelations = []
          (_etype803, _size800) = iprot.readListBegin()
          for _i804 in xrange(_size800):
            _elem805 = SeasonProgressRewardRelation()
            _elem805.read(iprot)
            self.progressRewardRelations.append(_elem805)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.rewardsBlockTitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.guid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 4)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 8)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.completionTalentId is not None:
      oprot.writeFieldBegin('completionTalentId', TType.STRING, 9)
      oprot.writeString(self.completionTalentId)
      oprot.writeFieldEnd()
    if self.completionTalentRatio is not None:
      oprot.writeFieldBegin('completionTalentRatio', TType.I32, 10)
      oprot.writeI32(self.completionTalentRatio)
      oprot.writeFieldEnd()
    if self.shopCurrencyId is not None:
      oprot.writeFieldBegin('shopCurrencyId', TType.STRING, 11)
      oprot.writeString(self.shopCurrencyId)
      oprot.writeFieldEnd()
    if self.rewardsCurrencyId is not None:
      oprot.writeFieldBegin('rewardsCurrencyId', TType.STRING, 12)
      oprot.writeString(self.rewardsCurrencyId)
      oprot.writeFieldEnd()
    if self.bannerUrl is not None:
      oprot.writeFieldBegin('bannerUrl', TType.STRING, 13)
      oprot.writeString(self.bannerUrl)
      oprot.writeFieldEnd()
    if self.shopGroups is not None:
      oprot.writeFieldBegin('shopGroups', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.shopGroups))
      for iter806 in self.shopGroups:
        iter806.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.worldRatingRewardRelations is not None:
      oprot.writeFieldBegin('worldRatingRewardRelations', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.worldRatingRewardRelations))
      for iter807 in self.worldRatingRewardRelations:
        iter807.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.progressRewardRelations is not None:
      oprot.writeFieldBegin('progressRewardRelations', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.progressRewardRelations))
      for iter808 in self.progressRewardRelations:
        iter808.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rewardsBlockTitle is not None:
      oprot.writeFieldBegin('rewardsBlockTitle', TType.STRING, 17)
      oprot.writeString(self.rewardsBlockTitle)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.I32, 18)
      oprot.writeI32(self.guid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonEventByIdResponse(object):
  """
  Attributes:
   - result
   - seasonEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'seasonEvent', (SeasonEvent, SeasonEvent.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, seasonEvent=None,):
    self.result = result
    self.seasonEvent = seasonEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.seasonEvent = SeasonEvent()
          self.seasonEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonEventByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.seasonEvent is not None:
      oprot.writeFieldBegin('seasonEvent', TType.STRUCT, 2)
      self.seasonEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SeasonEventsResponse(object):
  """
  Attributes:
   - result
   - seasonEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'seasonEvents', (TType.STRUCT,(SeasonEvent, SeasonEvent.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, seasonEvents=None,):
    self.result = result
    self.seasonEvents = seasonEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.seasonEvents = []
          (_etype812, _size809) = iprot.readListBegin()
          for _i813 in xrange(_size809):
            _elem814 = SeasonEvent()
            _elem814.read(iprot)
            self.seasonEvents.append(_elem814)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SeasonEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.seasonEvents is not None:
      oprot.writeFieldBegin('seasonEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.seasonEvents))
      for iter815 in self.seasonEvents:
        iter815.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DonateReward(object):
  """
  Attributes:
   - lootboxes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'lootboxes', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, lootboxes=None,):
    self.lootboxes = lootboxes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.lootboxes = []
          (_etype819, _size816) = iprot.readListBegin()
          for _i820 in xrange(_size816):
            _elem821 = iprot.readString();
            self.lootboxes.append(_elem821)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DonateReward')
    if self.lootboxes is not None:
      oprot.writeFieldBegin('lootboxes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.lootboxes))
      for iter822 in self.lootboxes:
        oprot.writeString(iter822)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DonateRange(object):
  """
  Attributes:
   - amountFrom
   - amountTo
   - rewards
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'amountFrom', None, None, ), # 1
    (2, TType.I32, 'amountTo', None, None, ), # 2
    (3, TType.LIST, 'rewards', (TType.STRUCT,(DonateReward, DonateReward.thrift_spec)), None, ), # 3
  )

  def __init__(self, amountFrom=None, amountTo=None, rewards=None,):
    self.amountFrom = amountFrom
    self.amountTo = amountTo
    self.rewards = rewards

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.amountFrom = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.amountTo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.rewards = []
          (_etype826, _size823) = iprot.readListBegin()
          for _i827 in xrange(_size823):
            _elem828 = DonateReward()
            _elem828.read(iprot)
            self.rewards.append(_elem828)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DonateRange')
    if self.amountFrom is not None:
      oprot.writeFieldBegin('amountFrom', TType.I32, 1)
      oprot.writeI32(self.amountFrom)
      oprot.writeFieldEnd()
    if self.amountTo is not None:
      oprot.writeFieldBegin('amountTo', TType.I32, 2)
      oprot.writeI32(self.amountTo)
      oprot.writeFieldEnd()
    if self.rewards is not None:
      oprot.writeFieldBegin('rewards', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.rewards))
      for iter829 in self.rewards:
        iter829.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DonateEvent(object):
  """
  Attributes:
   - persistentId
   - startTime
   - endTime
   - enabled
   - description
   - ranges
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'persistentId', None, None, ), # 1
    (2, TType.I32, 'startTime', None, None, ), # 2
    (3, TType.I32, 'endTime', None, None, ), # 3
    (4, TType.BOOL, 'enabled', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.LIST, 'ranges', (TType.STRUCT,(DonateRange, DonateRange.thrift_spec)), None, ), # 6
  )

  def __init__(self, persistentId=None, startTime=None, endTime=None, enabled=None, description=None, ranges=None,):
    self.persistentId = persistentId
    self.startTime = startTime
    self.endTime = endTime
    self.enabled = enabled
    self.description = description
    self.ranges = ranges

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.persistentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.ranges = []
          (_etype833, _size830) = iprot.readListBegin()
          for _i834 in xrange(_size830):
            _elem835 = DonateRange()
            _elem835.read(iprot)
            self.ranges.append(_elem835)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DonateEvent')
    if self.persistentId is not None:
      oprot.writeFieldBegin('persistentId', TType.I32, 1)
      oprot.writeI32(self.persistentId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 2)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 4)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.ranges is not None:
      oprot.writeFieldBegin('ranges', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.ranges))
      for iter836 in self.ranges:
        iter836.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DonateEventByIdResponse(object):
  """
  Attributes:
   - result
   - donateEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.STRUCT, 'donateEvent', (DonateEvent, DonateEvent.thrift_spec), None, ), # 2
  )

  def __init__(self, result=None, donateEvent=None,):
    self.result = result
    self.donateEvent = donateEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.donateEvent = DonateEvent()
          self.donateEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DonateEventByIdResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.donateEvent is not None:
      oprot.writeFieldBegin('donateEvent', TType.STRUCT, 2)
      self.donateEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DonateEventsResponse(object):
  """
  Attributes:
   - result
   - donateEvents
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, None, ), # 1
    (2, TType.LIST, 'donateEvents', (TType.STRUCT,(DonateEvent, DonateEvent.thrift_spec)), None, ), # 2
  )

  def __init__(self, result=None, donateEvents=None,):
    self.result = result
    self.donateEvents = donateEvents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.donateEvents = []
          (_etype840, _size837) = iprot.readListBegin()
          for _i841 in xrange(_size837):
            _elem842 = DonateEvent()
            _elem842.read(iprot)
            self.donateEvents.append(_elem842)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DonateEventsResponse')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.donateEvents is not None:
      oprot.writeFieldBegin('donateEvents', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.donateEvents))
      for iter843 in self.donateEvents:
        iter843.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
