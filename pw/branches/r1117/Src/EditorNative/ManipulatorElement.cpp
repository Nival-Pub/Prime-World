#include "stdafx.h"
#include "Manipulator.h"
#include "ManipulatorElement.h"

using namespace System::Drawing;

using namespace EditorNative;
using namespace EditorNative::Manipulators;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ManipulatorElement::ManipulatorElement( Manipulator^ _tool, System::Drawing::Color _color )
: tool ( _tool ),
	color ( _color ),
  parentRotation(Quaternion::Identity)
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ManipulatorElement::PerformDrawing( NScene::ICamera& camera )
{
	Draw( camera );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float ManipulatorElement::CalculateScale( const NScene::ICamera& camera )
{
	return fabs( Location - CalculateCameraLocation( camera ) ) / SizeCoeff;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CVec3 ManipulatorElement::CalculateCameraLocation( const NScene::ICamera& camera )
{
	NScene::SCameraPosition cameraPosition;
	camera.GetPosition( &cameraPosition );
	return  cameraPosition.vAnchor - cameraPosition.GetCameraDir() * cameraPosition.fRod;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ManipulatorElement::TryCapture( const CVec2& cursorPosition, NScene::ICamera& camera )
{
	IsCaptured = Enabled && CanBeSelected( cursorPosition, camera );
	IsSelected = IsCaptured;
	return IsCaptured;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ManipulatorElement::IsSelected::set( bool value )
{
	if ( isSelected != value )
	{
		isSelected = value;
		OnSelectedChanged( value );
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ManipulatorElement::IsCaptured::set( bool value )
{
	if ( isCaptured != value )
	{
		isCaptured = value;
		OnCapturedChanged( value );
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Color ManipulatorElement::CurrentColor::get()
{
	if ( Enabled )
	{
		return IsSelected ? Color::Yellow : color;
	}
	else
	{
		return Color::DarkGray;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
