/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MonitoringService
{
  public partial class MonitoringSummary {
    public interface Iface {
      int GetGameClusterCCU();
      #if SILVERLIGHT
      IAsyncResult Begin_GetGameClusterCCU(AsyncCallback callback, object state);
      int End_GetGameClusterCCU(IAsyncResult asyncResult);
      #endif
      int GetSocialClusterCCU();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSocialClusterCCU(AsyncCallback callback, object state);
      int End_GetSocialClusterCCU(IAsyncResult asyncResult);
      #endif
      int GetNumberOfMatchmakingUsers();
      #if SILVERLIGHT
      IAsyncResult Begin_GetNumberOfMatchmakingUsers(AsyncCallback callback, object state);
      int End_GetNumberOfMatchmakingUsers(IAsyncResult asyncResult);
      #endif
      int GetMonitoringCounter(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_GetMonitoringCounter(AsyncCallback callback, object state, string name);
      int End_GetMonitoringCounter(IAsyncResult asyncResult);
      #endif
      MonitoringInfo GetFullMonitoringInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_GetFullMonitoringInfo(AsyncCallback callback, object state);
      MonitoringInfo End_GetFullMonitoringInfo(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGameClusterCCU(AsyncCallback callback, object state)
      {
        return send_GetGameClusterCCU(callback, state);
      }

      public int End_GetGameClusterCCU(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGameClusterCCU();
      }

      #endif

      public int GetGameClusterCCU()
      {
        #if !SILVERLIGHT
        send_GetGameClusterCCU();
        return recv_GetGameClusterCCU();

        #else
        var asyncResult = Begin_GetGameClusterCCU(null, null);
        return End_GetGameClusterCCU(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGameClusterCCU(AsyncCallback callback, object state)
      #else
      public void send_GetGameClusterCCU()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGameClusterCCU", TMessageType.Call, seqid_));
        GetGameClusterCCU_args args = new GetGameClusterCCU_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetGameClusterCCU()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGameClusterCCU_result result = new GetGameClusterCCU_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGameClusterCCU failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSocialClusterCCU(AsyncCallback callback, object state)
      {
        return send_GetSocialClusterCCU(callback, state);
      }

      public int End_GetSocialClusterCCU(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSocialClusterCCU();
      }

      #endif

      public int GetSocialClusterCCU()
      {
        #if !SILVERLIGHT
        send_GetSocialClusterCCU();
        return recv_GetSocialClusterCCU();

        #else
        var asyncResult = Begin_GetSocialClusterCCU(null, null);
        return End_GetSocialClusterCCU(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSocialClusterCCU(AsyncCallback callback, object state)
      #else
      public void send_GetSocialClusterCCU()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSocialClusterCCU", TMessageType.Call, seqid_));
        GetSocialClusterCCU_args args = new GetSocialClusterCCU_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetSocialClusterCCU()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSocialClusterCCU_result result = new GetSocialClusterCCU_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSocialClusterCCU failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetNumberOfMatchmakingUsers(AsyncCallback callback, object state)
      {
        return send_GetNumberOfMatchmakingUsers(callback, state);
      }

      public int End_GetNumberOfMatchmakingUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNumberOfMatchmakingUsers();
      }

      #endif

      public int GetNumberOfMatchmakingUsers()
      {
        #if !SILVERLIGHT
        send_GetNumberOfMatchmakingUsers();
        return recv_GetNumberOfMatchmakingUsers();

        #else
        var asyncResult = Begin_GetNumberOfMatchmakingUsers(null, null);
        return End_GetNumberOfMatchmakingUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNumberOfMatchmakingUsers(AsyncCallback callback, object state)
      #else
      public void send_GetNumberOfMatchmakingUsers()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetNumberOfMatchmakingUsers", TMessageType.Call, seqid_));
        GetNumberOfMatchmakingUsers_args args = new GetNumberOfMatchmakingUsers_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetNumberOfMatchmakingUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNumberOfMatchmakingUsers_result result = new GetNumberOfMatchmakingUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNumberOfMatchmakingUsers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMonitoringCounter(AsyncCallback callback, object state, string name)
      {
        return send_GetMonitoringCounter(callback, state, name);
      }

      public int End_GetMonitoringCounter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMonitoringCounter();
      }

      #endif

      public int GetMonitoringCounter(string name)
      {
        #if !SILVERLIGHT
        send_GetMonitoringCounter(name);
        return recv_GetMonitoringCounter();

        #else
        var asyncResult = Begin_GetMonitoringCounter(null, null, name);
        return End_GetMonitoringCounter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMonitoringCounter(AsyncCallback callback, object state, string name)
      #else
      public void send_GetMonitoringCounter(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMonitoringCounter", TMessageType.Call, seqid_));
        GetMonitoringCounter_args args = new GetMonitoringCounter_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetMonitoringCounter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMonitoringCounter_result result = new GetMonitoringCounter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMonitoringCounter failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFullMonitoringInfo(AsyncCallback callback, object state)
      {
        return send_GetFullMonitoringInfo(callback, state);
      }

      public MonitoringInfo End_GetFullMonitoringInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFullMonitoringInfo();
      }

      #endif

      public MonitoringInfo GetFullMonitoringInfo()
      {
        #if !SILVERLIGHT
        send_GetFullMonitoringInfo();
        return recv_GetFullMonitoringInfo();

        #else
        var asyncResult = Begin_GetFullMonitoringInfo(null, null);
        return End_GetFullMonitoringInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFullMonitoringInfo(AsyncCallback callback, object state)
      #else
      public void send_GetFullMonitoringInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFullMonitoringInfo", TMessageType.Call, seqid_));
        GetFullMonitoringInfo_args args = new GetFullMonitoringInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MonitoringInfo recv_GetFullMonitoringInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFullMonitoringInfo_result result = new GetFullMonitoringInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFullMonitoringInfo failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetGameClusterCCU"] = GetGameClusterCCU_Process;
        processMap_["GetSocialClusterCCU"] = GetSocialClusterCCU_Process;
        processMap_["GetNumberOfMatchmakingUsers"] = GetNumberOfMatchmakingUsers_Process;
        processMap_["GetMonitoringCounter"] = GetMonitoringCounter_Process;
        processMap_["GetFullMonitoringInfo"] = GetFullMonitoringInfo_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetGameClusterCCU_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGameClusterCCU_args args = new GetGameClusterCCU_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGameClusterCCU_result result = new GetGameClusterCCU_result();
        result.Success = iface_.GetGameClusterCCU();
        oprot.WriteMessageBegin(new TMessage("GetGameClusterCCU", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSocialClusterCCU_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSocialClusterCCU_args args = new GetSocialClusterCCU_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSocialClusterCCU_result result = new GetSocialClusterCCU_result();
        result.Success = iface_.GetSocialClusterCCU();
        oprot.WriteMessageBegin(new TMessage("GetSocialClusterCCU", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNumberOfMatchmakingUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNumberOfMatchmakingUsers_args args = new GetNumberOfMatchmakingUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNumberOfMatchmakingUsers_result result = new GetNumberOfMatchmakingUsers_result();
        result.Success = iface_.GetNumberOfMatchmakingUsers();
        oprot.WriteMessageBegin(new TMessage("GetNumberOfMatchmakingUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMonitoringCounter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMonitoringCounter_args args = new GetMonitoringCounter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMonitoringCounter_result result = new GetMonitoringCounter_result();
        result.Success = iface_.GetMonitoringCounter(args.Name);
        oprot.WriteMessageBegin(new TMessage("GetMonitoringCounter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFullMonitoringInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFullMonitoringInfo_args args = new GetFullMonitoringInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFullMonitoringInfo_result result = new GetFullMonitoringInfo_result();
        result.Success = iface_.GetFullMonitoringInfo();
        oprot.WriteMessageBegin(new TMessage("GetFullMonitoringInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGameClusterCCU_args : TBase
    {

      public GetGameClusterCCU_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGameClusterCCU_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGameClusterCCU_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGameClusterCCU_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGameClusterCCU_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGameClusterCCU_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGameClusterCCU_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSocialClusterCCU_args : TBase
    {

      public GetSocialClusterCCU_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSocialClusterCCU_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSocialClusterCCU_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSocialClusterCCU_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSocialClusterCCU_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSocialClusterCCU_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSocialClusterCCU_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNumberOfMatchmakingUsers_args : TBase
    {

      public GetNumberOfMatchmakingUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumberOfMatchmakingUsers_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumberOfMatchmakingUsers_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNumberOfMatchmakingUsers_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetNumberOfMatchmakingUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNumberOfMatchmakingUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNumberOfMatchmakingUsers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMonitoringCounter_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public GetMonitoringCounter_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMonitoringCounter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMonitoringCounter_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMonitoringCounter_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMonitoringCounter_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMonitoringCounter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMonitoringCounter_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullMonitoringInfo_args : TBase
    {

      public GetFullMonitoringInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFullMonitoringInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFullMonitoringInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullMonitoringInfo_result : TBase
    {
      private MonitoringInfo _success;

      public MonitoringInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFullMonitoringInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MonitoringInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFullMonitoringInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFullMonitoringInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
