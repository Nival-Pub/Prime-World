/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReRollShopInfo : TBase
  {
    private long _auid;
    private int _itemId;
    private int _itemGroup;
    private long _itemPrice;
    private ERerollShopResources _itemPriceType;
    private int _rerollCount;
    private string _slotType;
    private int _timestamp;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public int ItemGroup
    {
      get
      {
        return _itemGroup;
      }
      set
      {
        __isset.itemGroup = true;
        this._itemGroup = value;
      }
    }

    public long ItemPrice
    {
      get
      {
        return _itemPrice;
      }
      set
      {
        __isset.itemPrice = true;
        this._itemPrice = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ERerollShopResources"/>
    /// </summary>
    public ERerollShopResources ItemPriceType
    {
      get
      {
        return _itemPriceType;
      }
      set
      {
        __isset.itemPriceType = true;
        this._itemPriceType = value;
      }
    }

    public int RerollCount
    {
      get
      {
        return _rerollCount;
      }
      set
      {
        __isset.rerollCount = true;
        this._rerollCount = value;
      }
    }

    public string SlotType
    {
      get
      {
        return _slotType;
      }
      set
      {
        __isset.slotType = true;
        this._slotType = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool itemId;
      public bool itemGroup;
      public bool itemPrice;
      public bool itemPriceType;
      public bool rerollCount;
      public bool slotType;
      public bool timestamp;
    }

    public ReRollShopInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ItemGroup = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ItemPrice = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ItemPriceType = (ERerollShopResources)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              RerollCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              SlotType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReRollShopInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemGroup) {
        field.Name = "itemGroup";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemGroup);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemPrice) {
        field.Name = "itemPrice";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ItemPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemPriceType) {
        field.Name = "itemPriceType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ItemPriceType);
        oprot.WriteFieldEnd();
      }
      if (__isset.rerollCount) {
        field.Name = "rerollCount";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RerollCount);
        oprot.WriteFieldEnd();
      }
      if (SlotType != null && __isset.slotType) {
        field.Name = "slotType";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SlotType);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReRollShopInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",ItemId: ");
      sb.Append(ItemId);
      sb.Append(",ItemGroup: ");
      sb.Append(ItemGroup);
      sb.Append(",ItemPrice: ");
      sb.Append(ItemPrice);
      sb.Append(",ItemPriceType: ");
      sb.Append(ItemPriceType);
      sb.Append(",RerollCount: ");
      sb.Append(RerollCount);
      sb.Append(",SlotType: ");
      sb.Append(SlotType);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
