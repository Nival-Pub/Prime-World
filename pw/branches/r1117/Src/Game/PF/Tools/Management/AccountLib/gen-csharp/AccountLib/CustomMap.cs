/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CustomMap : TBase
  {
    private int _persistentId;
    private int _startTime;
    private int _endTime;
    private string _day;
    private string _startHour;
    private string _endHour;
    private string _mapDbid;
    private string _mapType;
    private bool _mapEnabled;
    private bool _enabled;
    private string _description;

    public int PersistentId
    {
      get
      {
        return _persistentId;
      }
      set
      {
        __isset.persistentId = true;
        this._persistentId = value;
      }
    }

    public int StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public int EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public string StartHour
    {
      get
      {
        return _startHour;
      }
      set
      {
        __isset.startHour = true;
        this._startHour = value;
      }
    }

    public string EndHour
    {
      get
      {
        return _endHour;
      }
      set
      {
        __isset.endHour = true;
        this._endHour = value;
      }
    }

    public string MapDbid
    {
      get
      {
        return _mapDbid;
      }
      set
      {
        __isset.mapDbid = true;
        this._mapDbid = value;
      }
    }

    public string MapType
    {
      get
      {
        return _mapType;
      }
      set
      {
        __isset.mapType = true;
        this._mapType = value;
      }
    }

    public bool MapEnabled
    {
      get
      {
        return _mapEnabled;
      }
      set
      {
        __isset.mapEnabled = true;
        this._mapEnabled = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool persistentId;
      public bool startTime;
      public bool endTime;
      public bool day;
      public bool startHour;
      public bool endHour;
      public bool mapDbid;
      public bool mapType;
      public bool mapEnabled;
      public bool enabled;
      public bool description;
    }

    public CustomMap() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              PersistentId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              StartTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              EndTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Day = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              StartHour = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              EndHour = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              MapDbid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              MapType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              MapEnabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              Enabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CustomMap");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.persistentId) {
        field.Name = "persistentId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersistentId);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndTime);
        oprot.WriteFieldEnd();
      }
      if (Day != null && __isset.day) {
        field.Name = "day";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Day);
        oprot.WriteFieldEnd();
      }
      if (StartHour != null && __isset.startHour) {
        field.Name = "startHour";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StartHour);
        oprot.WriteFieldEnd();
      }
      if (EndHour != null && __isset.endHour) {
        field.Name = "endHour";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndHour);
        oprot.WriteFieldEnd();
      }
      if (MapDbid != null && __isset.mapDbid) {
        field.Name = "mapDbid";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MapDbid);
        oprot.WriteFieldEnd();
      }
      if (MapType != null && __isset.mapType) {
        field.Name = "mapType";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MapType);
        oprot.WriteFieldEnd();
      }
      if (__isset.mapEnabled) {
        field.Name = "mapEnabled";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(MapEnabled);
        oprot.WriteFieldEnd();
      }
      if (__isset.enabled) {
        field.Name = "enabled";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Enabled);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CustomMap(");
      sb.Append("PersistentId: ");
      sb.Append(PersistentId);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",Day: ");
      sb.Append(Day);
      sb.Append(",StartHour: ");
      sb.Append(StartHour);
      sb.Append(",EndHour: ");
      sb.Append(EndHour);
      sb.Append(",MapDbid: ");
      sb.Append(MapDbid);
      sb.Append(",MapType: ");
      sb.Append(MapType);
      sb.Append(",MapEnabled: ");
      sb.Append(MapEnabled);
      sb.Append(",Enabled: ");
      sb.Append(Enabled);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
