/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ClusterLib
{
  public partial class ClusterManagement {
    public interface Iface {
      List<ServiceInfo> GetServices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetServices(AsyncCallback callback, object state);
      List<ServiceInfo> End_GetServices(IAsyncResult asyncResult);
      #endif
      List<ServiceInfo> GetServicesByMachine(string machine);
      #if SILVERLIGHT
      IAsyncResult Begin_GetServicesByMachine(AsyncCallback callback, object state, string machine);
      List<ServiceInfo> End_GetServicesByMachine(IAsyncResult asyncResult);
      #endif
      List<ServiceInfo> GetServicesByType(string stype);
      #if SILVERLIGHT
      IAsyncResult Begin_GetServicesByType(AsyncCallback callback, object state, string stype);
      List<ServiceInfo> End_GetServicesByType(IAsyncResult asyncResult);
      #endif
      ServiceInfo GetServiceById(string serviceid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetServiceById(AsyncCallback callback, object state, string serviceid);
      ServiceInfo End_GetServiceById(IAsyncResult asyncResult);
      #endif
      int ExecuteCommand(string serviceid, ServiceCommand command, string arguments);
      #if SILVERLIGHT
      IAsyncResult Begin_ExecuteCommand(AsyncCallback callback, object state, string serviceid, ServiceCommand command, string arguments);
      int End_ExecuteCommand(IAsyncResult asyncResult);
      #endif
      int ChangeParameters(string serviceid, List<ServiceParameter> parameters, bool saveinconfig);
      #if SILVERLIGHT
      IAsyncResult Begin_ChangeParameters(AsyncCallback callback, object state, string serviceid, List<ServiceParameter> parameters, bool saveinconfig);
      int End_ChangeParameters(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetServices(AsyncCallback callback, object state)
      {
        return send_GetServices(callback, state);
      }

      public List<ServiceInfo> End_GetServices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetServices();
      }

      #endif

      public List<ServiceInfo> GetServices()
      {
        #if !SILVERLIGHT
        send_GetServices();
        return recv_GetServices();

        #else
        var asyncResult = Begin_GetServices(null, null);
        return End_GetServices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetServices(AsyncCallback callback, object state)
      #else
      public void send_GetServices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetServices", TMessageType.Call, seqid_));
        GetServices_args args = new GetServices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ServiceInfo> recv_GetServices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetServices_result result = new GetServices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetServicesByMachine(AsyncCallback callback, object state, string machine)
      {
        return send_GetServicesByMachine(callback, state, machine);
      }

      public List<ServiceInfo> End_GetServicesByMachine(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetServicesByMachine();
      }

      #endif

      public List<ServiceInfo> GetServicesByMachine(string machine)
      {
        #if !SILVERLIGHT
        send_GetServicesByMachine(machine);
        return recv_GetServicesByMachine();

        #else
        var asyncResult = Begin_GetServicesByMachine(null, null, machine);
        return End_GetServicesByMachine(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetServicesByMachine(AsyncCallback callback, object state, string machine)
      #else
      public void send_GetServicesByMachine(string machine)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetServicesByMachine", TMessageType.Call, seqid_));
        GetServicesByMachine_args args = new GetServicesByMachine_args();
        args.Machine = machine;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ServiceInfo> recv_GetServicesByMachine()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetServicesByMachine_result result = new GetServicesByMachine_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServicesByMachine failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetServicesByType(AsyncCallback callback, object state, string stype)
      {
        return send_GetServicesByType(callback, state, stype);
      }

      public List<ServiceInfo> End_GetServicesByType(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetServicesByType();
      }

      #endif

      public List<ServiceInfo> GetServicesByType(string stype)
      {
        #if !SILVERLIGHT
        send_GetServicesByType(stype);
        return recv_GetServicesByType();

        #else
        var asyncResult = Begin_GetServicesByType(null, null, stype);
        return End_GetServicesByType(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetServicesByType(AsyncCallback callback, object state, string stype)
      #else
      public void send_GetServicesByType(string stype)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetServicesByType", TMessageType.Call, seqid_));
        GetServicesByType_args args = new GetServicesByType_args();
        args.Stype = stype;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ServiceInfo> recv_GetServicesByType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetServicesByType_result result = new GetServicesByType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServicesByType failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetServiceById(AsyncCallback callback, object state, string serviceid)
      {
        return send_GetServiceById(callback, state, serviceid);
      }

      public ServiceInfo End_GetServiceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetServiceById();
      }

      #endif

      public ServiceInfo GetServiceById(string serviceid)
      {
        #if !SILVERLIGHT
        send_GetServiceById(serviceid);
        return recv_GetServiceById();

        #else
        var asyncResult = Begin_GetServiceById(null, null, serviceid);
        return End_GetServiceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetServiceById(AsyncCallback callback, object state, string serviceid)
      #else
      public void send_GetServiceById(string serviceid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetServiceById", TMessageType.Call, seqid_));
        GetServiceById_args args = new GetServiceById_args();
        args.Serviceid = serviceid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServiceInfo recv_GetServiceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetServiceById_result result = new GetServiceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServiceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ExecuteCommand(AsyncCallback callback, object state, string serviceid, ServiceCommand command, string arguments)
      {
        return send_ExecuteCommand(callback, state, serviceid, command, arguments);
      }

      public int End_ExecuteCommand(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ExecuteCommand();
      }

      #endif

      public int ExecuteCommand(string serviceid, ServiceCommand command, string arguments)
      {
        #if !SILVERLIGHT
        send_ExecuteCommand(serviceid, command, arguments);
        return recv_ExecuteCommand();

        #else
        var asyncResult = Begin_ExecuteCommand(null, null, serviceid, command, arguments);
        return End_ExecuteCommand(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ExecuteCommand(AsyncCallback callback, object state, string serviceid, ServiceCommand command, string arguments)
      #else
      public void send_ExecuteCommand(string serviceid, ServiceCommand command, string arguments)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteCommand", TMessageType.Call, seqid_));
        ExecuteCommand_args args = new ExecuteCommand_args();
        args.Serviceid = serviceid;
        args.Command = command;
        args.Arguments = arguments;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_ExecuteCommand()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ExecuteCommand_result result = new ExecuteCommand_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteCommand failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangeParameters(AsyncCallback callback, object state, string serviceid, List<ServiceParameter> parameters, bool saveinconfig)
      {
        return send_ChangeParameters(callback, state, serviceid, parameters, saveinconfig);
      }

      public int End_ChangeParameters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ChangeParameters();
      }

      #endif

      public int ChangeParameters(string serviceid, List<ServiceParameter> parameters, bool saveinconfig)
      {
        #if !SILVERLIGHT
        send_ChangeParameters(serviceid, parameters, saveinconfig);
        return recv_ChangeParameters();

        #else
        var asyncResult = Begin_ChangeParameters(null, null, serviceid, parameters, saveinconfig);
        return End_ChangeParameters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangeParameters(AsyncCallback callback, object state, string serviceid, List<ServiceParameter> parameters, bool saveinconfig)
      #else
      public void send_ChangeParameters(string serviceid, List<ServiceParameter> parameters, bool saveinconfig)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangeParameters", TMessageType.Call, seqid_));
        ChangeParameters_args args = new ChangeParameters_args();
        args.Serviceid = serviceid;
        args.Parameters = parameters;
        args.Saveinconfig = saveinconfig;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_ChangeParameters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangeParameters_result result = new ChangeParameters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangeParameters failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetServices"] = GetServices_Process;
        processMap_["GetServicesByMachine"] = GetServicesByMachine_Process;
        processMap_["GetServicesByType"] = GetServicesByType_Process;
        processMap_["GetServiceById"] = GetServiceById_Process;
        processMap_["ExecuteCommand"] = ExecuteCommand_Process;
        processMap_["ChangeParameters"] = ChangeParameters_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetServices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetServices_args args = new GetServices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetServices_result result = new GetServices_result();
        result.Success = iface_.GetServices();
        oprot.WriteMessageBegin(new TMessage("GetServices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetServicesByMachine_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetServicesByMachine_args args = new GetServicesByMachine_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetServicesByMachine_result result = new GetServicesByMachine_result();
        result.Success = iface_.GetServicesByMachine(args.Machine);
        oprot.WriteMessageBegin(new TMessage("GetServicesByMachine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetServicesByType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetServicesByType_args args = new GetServicesByType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetServicesByType_result result = new GetServicesByType_result();
        result.Success = iface_.GetServicesByType(args.Stype);
        oprot.WriteMessageBegin(new TMessage("GetServicesByType", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetServiceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetServiceById_args args = new GetServiceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetServiceById_result result = new GetServiceById_result();
        result.Success = iface_.GetServiceById(args.Serviceid);
        oprot.WriteMessageBegin(new TMessage("GetServiceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ExecuteCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ExecuteCommand_args args = new ExecuteCommand_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ExecuteCommand_result result = new ExecuteCommand_result();
        result.Success = iface_.ExecuteCommand(args.Serviceid, args.Command, args.Arguments);
        oprot.WriteMessageBegin(new TMessage("ExecuteCommand", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangeParameters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangeParameters_args args = new ChangeParameters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangeParameters_result result = new ChangeParameters_result();
        result.Success = iface_.ChangeParameters(args.Serviceid, args.Parameters, args.Saveinconfig);
        oprot.WriteMessageBegin(new TMessage("ChangeParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServices_args : TBase
    {

      public GetServices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServices_result : TBase
    {
      private List<ServiceInfo> _success;

      public List<ServiceInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetServices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ServiceInfo>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    ServiceInfo _elem6 = new ServiceInfo();
                    _elem6 = new ServiceInfo();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ServiceInfo _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServices_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServicesByMachine_args : TBase
    {
      private string _machine;

      public string Machine
      {
        get
        {
          return _machine;
        }
        set
        {
          __isset.machine = true;
          this._machine = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool machine;
      }

      public GetServicesByMachine_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Machine = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServicesByMachine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Machine != null && __isset.machine) {
          field.Name = "machine";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Machine);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServicesByMachine_args(");
        sb.Append("Machine: ");
        sb.Append(Machine);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServicesByMachine_result : TBase
    {
      private List<ServiceInfo> _success;

      public List<ServiceInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetServicesByMachine_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ServiceInfo>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    ServiceInfo _elem10 = new ServiceInfo();
                    _elem10 = new ServiceInfo();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServicesByMachine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ServiceInfo _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServicesByMachine_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServicesByType_args : TBase
    {
      private string _stype;

      public string Stype
      {
        get
        {
          return _stype;
        }
        set
        {
          __isset.stype = true;
          this._stype = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool stype;
      }

      public GetServicesByType_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Stype = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServicesByType_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Stype != null && __isset.stype) {
          field.Name = "stype";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stype);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServicesByType_args(");
        sb.Append("Stype: ");
        sb.Append(Stype);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServicesByType_result : TBase
    {
      private List<ServiceInfo> _success;

      public List<ServiceInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetServicesByType_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ServiceInfo>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    ServiceInfo _elem14 = new ServiceInfo();
                    _elem14 = new ServiceInfo();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServicesByType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ServiceInfo _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServicesByType_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServiceById_args : TBase
    {
      private string _serviceid;

      public string Serviceid
      {
        get
        {
          return _serviceid;
        }
        set
        {
          __isset.serviceid = true;
          this._serviceid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceid;
      }

      public GetServiceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Serviceid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServiceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Serviceid != null && __isset.serviceid) {
          field.Name = "serviceid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Serviceid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServiceById_args(");
        sb.Append("Serviceid: ");
        sb.Append(Serviceid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServiceById_result : TBase
    {
      private ServiceInfo _success;

      public ServiceInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetServiceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServiceInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetServiceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetServiceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteCommand_args : TBase
    {
      private string _serviceid;
      private ServiceCommand _command;
      private string _arguments;

      public string Serviceid
      {
        get
        {
          return _serviceid;
        }
        set
        {
          __isset.serviceid = true;
          this._serviceid = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="ServiceCommand"/>
      /// </summary>
      public ServiceCommand Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }

      public string Arguments
      {
        get
        {
          return _arguments;
        }
        set
        {
          __isset.arguments = true;
          this._arguments = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceid;
        public bool command;
        public bool arguments;
      }

      public ExecuteCommand_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Serviceid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Command = (ServiceCommand)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Arguments = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ExecuteCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Serviceid != null && __isset.serviceid) {
          field.Name = "serviceid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Serviceid);
          oprot.WriteFieldEnd();
        }
        if (__isset.command) {
          field.Name = "command";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Command);
          oprot.WriteFieldEnd();
        }
        if (Arguments != null && __isset.arguments) {
          field.Name = "arguments";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Arguments);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ExecuteCommand_args(");
        sb.Append("Serviceid: ");
        sb.Append(Serviceid);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(",Arguments: ");
        sb.Append(Arguments);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteCommand_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ExecuteCommand_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ExecuteCommand_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ExecuteCommand_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeParameters_args : TBase
    {
      private string _serviceid;
      private List<ServiceParameter> _parameters;
      private bool _saveinconfig;

      public string Serviceid
      {
        get
        {
          return _serviceid;
        }
        set
        {
          __isset.serviceid = true;
          this._serviceid = value;
        }
      }

      public List<ServiceParameter> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }

      public bool Saveinconfig
      {
        get
        {
          return _saveinconfig;
        }
        set
        {
          __isset.saveinconfig = true;
          this._saveinconfig = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceid;
        public bool parameters;
        public bool saveinconfig;
      }

      public ChangeParameters_args() {
        this._saveinconfig = false;
        this.__isset.saveinconfig = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Serviceid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<ServiceParameter>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    ServiceParameter _elem18 = new ServiceParameter();
                    _elem18 = new ServiceParameter();
                    _elem18.Read(iprot);
                    Parameters.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Saveinconfig = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeParameters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Serviceid != null && __isset.serviceid) {
          field.Name = "serviceid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Serviceid);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (ServiceParameter _iter19 in Parameters)
            {
              _iter19.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.saveinconfig) {
          field.Name = "saveinconfig";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Saveinconfig);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeParameters_args(");
        sb.Append("Serviceid: ");
        sb.Append(Serviceid);
        sb.Append(",Parameters: ");
        sb.Append(Parameters);
        sb.Append(",Saveinconfig: ");
        sb.Append(Saveinconfig);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeParameters_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ChangeParameters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeParameters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeParameters_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
