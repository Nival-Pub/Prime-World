/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BannedIpShortInfo : TBase
  {
    private long _BanTime;
    private int _Accounts;
    private int _Tryes;
    private string _Ip;

    public long BanTime
    {
      get
      {
        return _BanTime;
      }
      set
      {
        __isset.BanTime = true;
        this._BanTime = value;
      }
    }

    public int Accounts
    {
      get
      {
        return _Accounts;
      }
      set
      {
        __isset.Accounts = true;
        this._Accounts = value;
      }
    }

    public int Tryes
    {
      get
      {
        return _Tryes;
      }
      set
      {
        __isset.Tryes = true;
        this._Tryes = value;
      }
    }

    public string Ip
    {
      get
      {
        return _Ip;
      }
      set
      {
        __isset.Ip = true;
        this._Ip = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool BanTime;
      public bool Accounts;
      public bool Tryes;
      public bool Ip;
    }

    public BannedIpShortInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              BanTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Accounts = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Tryes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Ip = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BannedIpShortInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.BanTime) {
        field.Name = "BanTime";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BanTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.Accounts) {
        field.Name = "Accounts";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Accounts);
        oprot.WriteFieldEnd();
      }
      if (__isset.Tryes) {
        field.Name = "Tryes";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Tryes);
        oprot.WriteFieldEnd();
      }
      if (Ip != null && __isset.Ip) {
        field.Name = "Ip";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ip);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BannedIpShortInfo(");
      sb.Append("BanTime: ");
      sb.Append(BanTime);
      sb.Append(",Accounts: ");
      sb.Append(Accounts);
      sb.Append(",Tryes: ");
      sb.Append(Tryes);
      sb.Append(",Ip: ");
      sb.Append(Ip);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
