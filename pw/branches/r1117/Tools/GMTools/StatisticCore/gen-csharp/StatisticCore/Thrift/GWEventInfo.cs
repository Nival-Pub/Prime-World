/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GWEventInfo : TBase
  {
    private string _mongoid;
    private int _eventidx;
    private bool _enabled;
    private int _points;
    private int _endtime;
    private int _limit;

    public string Mongoid
    {
      get
      {
        return _mongoid;
      }
      set
      {
        __isset.mongoid = true;
        this._mongoid = value;
      }
    }

    public int Eventidx
    {
      get
      {
        return _eventidx;
      }
      set
      {
        __isset.eventidx = true;
        this._eventidx = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    public int Points
    {
      get
      {
        return _points;
      }
      set
      {
        __isset.points = true;
        this._points = value;
      }
    }

    public int Endtime
    {
      get
      {
        return _endtime;
      }
      set
      {
        __isset.endtime = true;
        this._endtime = value;
      }
    }

    public int Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mongoid;
      public bool eventidx;
      public bool enabled;
      public bool points;
      public bool endtime;
      public bool limit;
    }

    public GWEventInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Mongoid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Eventidx = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Enabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Points = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Endtime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Limit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GWEventInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Mongoid != null && __isset.mongoid) {
        field.Name = "mongoid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mongoid);
        oprot.WriteFieldEnd();
      }
      if (__isset.eventidx) {
        field.Name = "eventidx";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Eventidx);
        oprot.WriteFieldEnd();
      }
      if (__isset.enabled) {
        field.Name = "enabled";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Enabled);
        oprot.WriteFieldEnd();
      }
      if (__isset.points) {
        field.Name = "points";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Points);
        oprot.WriteFieldEnd();
      }
      if (__isset.endtime) {
        field.Name = "endtime";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Endtime);
        oprot.WriteFieldEnd();
      }
      if (__isset.limit) {
        field.Name = "limit";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Limit);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GWEventInfo(");
      sb.Append("Mongoid: ");
      sb.Append(Mongoid);
      sb.Append(",Eventidx: ");
      sb.Append(Eventidx);
      sb.Append(",Enabled: ");
      sb.Append(Enabled);
      sb.Append(",Points: ");
      sb.Append(Points);
      sb.Append(",Endtime: ");
      sb.Append(Endtime);
      sb.Append(",Limit: ");
      sb.Append(Limit);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
