/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClaimInfo : TBase
  {
    private long _fromAuid;
    private long _toAuid;
    private int _source;
    private int _category;
    private string _comment;
    private string _log;
    private int _timestamp;
    private long _sessionpersistentid;
    private int _kills;
    private int _deaths;
    private int _assists;
    private int _points;
    private int _prime;
    private int _distance;
    private int _afks;
    private int _connstatus;
    private string _locale;
    private string _muid;

    public long FromAuid
    {
      get
      {
        return _fromAuid;
      }
      set
      {
        __isset.fromAuid = true;
        this._fromAuid = value;
      }
    }

    public long ToAuid
    {
      get
      {
        return _toAuid;
      }
      set
      {
        __isset.toAuid = true;
        this._toAuid = value;
      }
    }

    public int Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public int Category
    {
      get
      {
        return _category;
      }
      set
      {
        __isset.category = true;
        this._category = value;
      }
    }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }

    public string Log
    {
      get
      {
        return _log;
      }
      set
      {
        __isset.log = true;
        this._log = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public long Sessionpersistentid
    {
      get
      {
        return _sessionpersistentid;
      }
      set
      {
        __isset.sessionpersistentid = true;
        this._sessionpersistentid = value;
      }
    }

    public int Kills
    {
      get
      {
        return _kills;
      }
      set
      {
        __isset.kills = true;
        this._kills = value;
      }
    }

    public int Deaths
    {
      get
      {
        return _deaths;
      }
      set
      {
        __isset.deaths = true;
        this._deaths = value;
      }
    }

    public int Assists
    {
      get
      {
        return _assists;
      }
      set
      {
        __isset.assists = true;
        this._assists = value;
      }
    }

    public int Points
    {
      get
      {
        return _points;
      }
      set
      {
        __isset.points = true;
        this._points = value;
      }
    }

    public int Prime
    {
      get
      {
        return _prime;
      }
      set
      {
        __isset.prime = true;
        this._prime = value;
      }
    }

    public int Distance
    {
      get
      {
        return _distance;
      }
      set
      {
        __isset.distance = true;
        this._distance = value;
      }
    }

    public int Afks
    {
      get
      {
        return _afks;
      }
      set
      {
        __isset.afks = true;
        this._afks = value;
      }
    }

    public int Connstatus
    {
      get
      {
        return _connstatus;
      }
      set
      {
        __isset.connstatus = true;
        this._connstatus = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public string Muid
    {
      get
      {
        return _muid;
      }
      set
      {
        __isset.muid = true;
        this._muid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fromAuid;
      public bool toAuid;
      public bool source;
      public bool category;
      public bool comment;
      public bool log;
      public bool timestamp;
      public bool sessionpersistentid;
      public bool kills;
      public bool deaths;
      public bool assists;
      public bool points;
      public bool prime;
      public bool distance;
      public bool afks;
      public bool connstatus;
      public bool locale;
      public bool muid;
    }

    public ClaimInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              FromAuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              ToAuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Source = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Category = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Comment = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Log = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              Sessionpersistentid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Kills = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Deaths = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Assists = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Points = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Prime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Distance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Afks = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Connstatus = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              Muid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClaimInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.fromAuid) {
        field.Name = "fromAuid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FromAuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.toAuid) {
        field.Name = "toAuid";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ToAuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.source) {
        field.Name = "source";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Source);
        oprot.WriteFieldEnd();
      }
      if (__isset.category) {
        field.Name = "category";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Category);
        oprot.WriteFieldEnd();
      }
      if (Comment != null && __isset.comment) {
        field.Name = "comment";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Comment);
        oprot.WriteFieldEnd();
      }
      if (Log != null && __isset.log) {
        field.Name = "log";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Log);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionpersistentid) {
        field.Name = "sessionpersistentid";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Sessionpersistentid);
        oprot.WriteFieldEnd();
      }
      if (__isset.kills) {
        field.Name = "kills";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Kills);
        oprot.WriteFieldEnd();
      }
      if (__isset.deaths) {
        field.Name = "deaths";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Deaths);
        oprot.WriteFieldEnd();
      }
      if (__isset.assists) {
        field.Name = "assists";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Assists);
        oprot.WriteFieldEnd();
      }
      if (__isset.points) {
        field.Name = "points";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Points);
        oprot.WriteFieldEnd();
      }
      if (__isset.prime) {
        field.Name = "prime";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Prime);
        oprot.WriteFieldEnd();
      }
      if (__isset.distance) {
        field.Name = "distance";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Distance);
        oprot.WriteFieldEnd();
      }
      if (__isset.afks) {
        field.Name = "afks";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Afks);
        oprot.WriteFieldEnd();
      }
      if (__isset.connstatus) {
        field.Name = "connstatus";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Connstatus);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (Muid != null && __isset.muid) {
        field.Name = "muid";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Muid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClaimInfo(");
      sb.Append("FromAuid: ");
      sb.Append(FromAuid);
      sb.Append(",ToAuid: ");
      sb.Append(ToAuid);
      sb.Append(",Source: ");
      sb.Append(Source);
      sb.Append(",Category: ");
      sb.Append(Category);
      sb.Append(",Comment: ");
      sb.Append(Comment);
      sb.Append(",Log: ");
      sb.Append(Log);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Sessionpersistentid: ");
      sb.Append(Sessionpersistentid);
      sb.Append(",Kills: ");
      sb.Append(Kills);
      sb.Append(",Deaths: ");
      sb.Append(Deaths);
      sb.Append(",Assists: ");
      sb.Append(Assists);
      sb.Append(",Points: ");
      sb.Append(Points);
      sb.Append(",Prime: ");
      sb.Append(Prime);
      sb.Append(",Distance: ");
      sb.Append(Distance);
      sb.Append(",Afks: ");
      sb.Append(Afks);
      sb.Append(",Connstatus: ");
      sb.Append(Connstatus);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(",Muid: ");
      sb.Append(Muid);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
