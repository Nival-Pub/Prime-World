/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BroadcastInfo : TBase
  {
    private int _Id;
    private string _Title;
    private List<BroadcastMessage> _Messages;
    private long _TimeStart;
    private long _TimeFinish;
    private int _Interval;
    private bool _EnabledNow;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Title
    {
      get
      {
        return _Title;
      }
      set
      {
        __isset.Title = true;
        this._Title = value;
      }
    }

    public List<BroadcastMessage> Messages
    {
      get
      {
        return _Messages;
      }
      set
      {
        __isset.Messages = true;
        this._Messages = value;
      }
    }

    public long TimeStart
    {
      get
      {
        return _TimeStart;
      }
      set
      {
        __isset.TimeStart = true;
        this._TimeStart = value;
      }
    }

    public long TimeFinish
    {
      get
      {
        return _TimeFinish;
      }
      set
      {
        __isset.TimeFinish = true;
        this._TimeFinish = value;
      }
    }

    public int Interval
    {
      get
      {
        return _Interval;
      }
      set
      {
        __isset.Interval = true;
        this._Interval = value;
      }
    }

    public bool EnabledNow
    {
      get
      {
        return _EnabledNow;
      }
      set
      {
        __isset.EnabledNow = true;
        this._EnabledNow = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Title;
      public bool Messages;
      public bool TimeStart;
      public bool TimeFinish;
      public bool Interval;
      public bool EnabledNow;
    }

    public BroadcastInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Messages = new List<BroadcastMessage>();
                TList _list34 = iprot.ReadListBegin();
                for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                {
                  BroadcastMessage _elem36 = new BroadcastMessage();
                  _elem36 = new BroadcastMessage();
                  _elem36.Read(iprot);
                  Messages.Add(_elem36);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              TimeStart = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              TimeFinish = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Interval = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              EnabledNow = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BroadcastInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Id) {
        field.Name = "Id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.Title) {
        field.Name = "Title";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.Messages) {
        field.Name = "Messages";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Messages.Count));
          foreach (BroadcastMessage _iter37 in Messages)
          {
            _iter37.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.TimeStart) {
        field.Name = "TimeStart";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TimeStart);
        oprot.WriteFieldEnd();
      }
      if (__isset.TimeFinish) {
        field.Name = "TimeFinish";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TimeFinish);
        oprot.WriteFieldEnd();
      }
      if (__isset.Interval) {
        field.Name = "Interval";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Interval);
        oprot.WriteFieldEnd();
      }
      if (__isset.EnabledNow) {
        field.Name = "EnabledNow";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(EnabledNow);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BroadcastInfo(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",Messages: ");
      sb.Append(Messages);
      sb.Append(",TimeStart: ");
      sb.Append(TimeStart);
      sb.Append(",TimeFinish: ");
      sb.Append(TimeFinish);
      sb.Append(",Interval: ");
      sb.Append(Interval);
      sb.Append(",EnabledNow: ");
      sb.Append(EnabledNow);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
