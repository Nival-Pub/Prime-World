/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClusterManagementAPI_TYPES_H
#define ClusterManagementAPI_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ClusterAdmin { namespace Thrift {

struct ServiceStatus {
  enum type {
    RUNNING = 1,
    STOPPED = 2,
    START_PENDING = 3,
    STOP_PENDING = 4,
    WAITING_FOR_STOP = 5,
    WAITING_FOR_RESTART = 6
  };
};

extern const std::map<int, const char*> _ServiceStatus_VALUES_TO_NAMES;

struct ServiceCommand {
  enum type {
    START = 1,
    STOP = 2,
    RESTART = 4,
    SOFT_STOP = 8,
    SOFT_RESTART = 16,
    RELOAD_CONFIG = 32
  };
};

extern const std::map<int, const char*> _ServiceCommand_VALUES_TO_NAMES;

typedef struct _ServiceParameter__isset {
  _ServiceParameter__isset() : name(false), value(false), changeable(false), needrestart(false) {}
  bool name;
  bool value;
  bool changeable;
  bool needrestart;
} _ServiceParameter__isset;

class ServiceParameter {
 public:

  static const char* ascii_fingerprint; // = "205A83737DD361E88B396E77A0B7A5BD";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0x5A,0x83,0x73,0x7D,0xD3,0x61,0xE8,0x8B,0x39,0x6E,0x77,0xA0,0xB7,0xA5,0xBD};

  ServiceParameter() : name(), value(), changeable(0), needrestart(0) {
  }

  virtual ~ServiceParameter() throw() {}

  std::string name;
  std::string value;
  bool changeable;
  bool needrestart;

  _ServiceParameter__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_changeable(const bool val) {
    changeable = val;
  }

  void __set_needrestart(const bool val) {
    needrestart = val;
  }

  bool operator == (const ServiceParameter & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(changeable == rhs.changeable))
      return false;
    if (!(needrestart == rhs.needrestart))
      return false;
    return true;
  }
  bool operator != (const ServiceParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceParameter &a, ServiceParameter &b);

typedef struct _ServiceInfo__isset {
  _ServiceInfo__isset() : sid(false), stype(false), machine(false), status(false), pid(false), uptime(false), backendaddr(false), frontendaddr(false), parameters(false) {}
  bool sid;
  bool stype;
  bool machine;
  bool status;
  bool pid;
  bool uptime;
  bool backendaddr;
  bool frontendaddr;
  bool parameters;
} _ServiceInfo__isset;

class ServiceInfo {
 public:

  static const char* ascii_fingerprint; // = "90E6A2A74BC4ABD15DCFC6836ACBD6E8";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xE6,0xA2,0xA7,0x4B,0xC4,0xAB,0xD1,0x5D,0xCF,0xC6,0x83,0x6A,0xCB,0xD6,0xE8};

  ServiceInfo() : sid(), stype(), machine(), status((ServiceStatus::type)0), pid(0), uptime(0), backendaddr(), frontendaddr() {
  }

  virtual ~ServiceInfo() throw() {}

  std::string sid;
  std::string stype;
  std::string machine;
  ServiceStatus::type status;
  int32_t pid;
  int32_t uptime;
  std::string backendaddr;
  std::string frontendaddr;
  std::vector<ServiceParameter>  parameters;

  _ServiceInfo__isset __isset;

  void __set_sid(const std::string& val) {
    sid = val;
  }

  void __set_stype(const std::string& val) {
    stype = val;
  }

  void __set_machine(const std::string& val) {
    machine = val;
  }

  void __set_status(const ServiceStatus::type val) {
    status = val;
  }

  void __set_pid(const int32_t val) {
    pid = val;
  }

  void __set_uptime(const int32_t val) {
    uptime = val;
  }

  void __set_backendaddr(const std::string& val) {
    backendaddr = val;
  }

  void __set_frontendaddr(const std::string& val) {
    frontendaddr = val;
  }

  void __set_parameters(const std::vector<ServiceParameter> & val) {
    parameters = val;
  }

  bool operator == (const ServiceInfo & rhs) const
  {
    if (!(sid == rhs.sid))
      return false;
    if (!(stype == rhs.stype))
      return false;
    if (!(machine == rhs.machine))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(pid == rhs.pid))
      return false;
    if (!(uptime == rhs.uptime))
      return false;
    if (!(backendaddr == rhs.backendaddr))
      return false;
    if (!(frontendaddr == rhs.frontendaddr))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const ServiceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceInfo &a, ServiceInfo &b);

}} // namespace

#endif
