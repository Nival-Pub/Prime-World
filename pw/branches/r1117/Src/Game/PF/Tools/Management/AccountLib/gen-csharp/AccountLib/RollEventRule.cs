/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RollEventRule : TBase
  {
    private RollEventRuleType _ruleType;
    private string _description;
    private string _titleLocalized;
    private string _textLocalized;
    private ResourceTableSmall _price;
    private List<RollEventItem> _rewards;
    private List<RollEventItem> _reforgeSource;

    /// <summary>
    /// 
    /// <seealso cref="RollEventRuleType"/>
    /// </summary>
    public RollEventRuleType RuleType
    {
      get
      {
        return _ruleType;
      }
      set
      {
        __isset.ruleType = true;
        this._ruleType = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string TitleLocalized
    {
      get
      {
        return _titleLocalized;
      }
      set
      {
        __isset.titleLocalized = true;
        this._titleLocalized = value;
      }
    }

    public string TextLocalized
    {
      get
      {
        return _textLocalized;
      }
      set
      {
        __isset.textLocalized = true;
        this._textLocalized = value;
      }
    }

    public ResourceTableSmall Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    public List<RollEventItem> Rewards
    {
      get
      {
        return _rewards;
      }
      set
      {
        __isset.rewards = true;
        this._rewards = value;
      }
    }

    public List<RollEventItem> ReforgeSource
    {
      get
      {
        return _reforgeSource;
      }
      set
      {
        __isset.reforgeSource = true;
        this._reforgeSource = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ruleType;
      public bool description;
      public bool titleLocalized;
      public bool textLocalized;
      public bool price;
      public bool rewards;
      public bool reforgeSource;
    }

    public RollEventRule() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              RuleType = (RollEventRuleType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TitleLocalized = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              TextLocalized = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Price = new ResourceTableSmall();
              Price.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Rewards = new List<RollEventItem>();
                TList _list386 = iprot.ReadListBegin();
                for( int _i387 = 0; _i387 < _list386.Count; ++_i387)
                {
                  RollEventItem _elem388 = new RollEventItem();
                  _elem388 = new RollEventItem();
                  _elem388.Read(iprot);
                  Rewards.Add(_elem388);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                ReforgeSource = new List<RollEventItem>();
                TList _list389 = iprot.ReadListBegin();
                for( int _i390 = 0; _i390 < _list389.Count; ++_i390)
                {
                  RollEventItem _elem391 = new RollEventItem();
                  _elem391 = new RollEventItem();
                  _elem391.Read(iprot);
                  ReforgeSource.Add(_elem391);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RollEventRule");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ruleType) {
        field.Name = "ruleType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)RuleType);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (TitleLocalized != null && __isset.titleLocalized) {
        field.Name = "titleLocalized";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TitleLocalized);
        oprot.WriteFieldEnd();
      }
      if (TextLocalized != null && __isset.textLocalized) {
        field.Name = "textLocalized";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TextLocalized);
        oprot.WriteFieldEnd();
      }
      if (Price != null && __isset.price) {
        field.Name = "price";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Price.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Rewards != null && __isset.rewards) {
        field.Name = "rewards";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Rewards.Count));
          foreach (RollEventItem _iter392 in Rewards)
          {
            _iter392.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ReforgeSource != null && __isset.reforgeSource) {
        field.Name = "reforgeSource";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ReforgeSource.Count));
          foreach (RollEventItem _iter393 in ReforgeSource)
          {
            _iter393.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RollEventRule(");
      sb.Append("RuleType: ");
      sb.Append(RuleType);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",TitleLocalized: ");
      sb.Append(TitleLocalized);
      sb.Append(",TextLocalized: ");
      sb.Append(TextLocalized);
      sb.Append(",Price: ");
      sb.Append(Price== null ? "<null>" : Price.ToString());
      sb.Append(",Rewards: ");
      sb.Append(Rewards);
      sb.Append(",ReforgeSource: ");
      sb.Append(ReforgeSource);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
