//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace River.Tests.Scenarios {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Scenarios {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Scenarios() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("River.Tests.Scenarios.Scenarios", typeof(Scenarios).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using River.Core;
        ///
        ///[DistributeAttribute]
        ///class SimpleScenario : Scenario
        ///{
        ///}
        ///.
        /// </summary>
        internal static string OneBotSuite {
            get {
                return ResourceManager.GetString("OneBotSuite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.IO;
        ///using River.Core;
        ///
        ///public class ScenarioCheckContext : Scenario
        ///{
        ///  public ScenarioCheckContext()
        ///  {
        ///  }
        ///
        ///  public override void Install( IContext context )
        ///  {
        ///    context.SyncInc( &quot;var1&quot; );
        ///  }
        ///
        ///  public override void Execute( IContext context )
        ///  {
        ///    context.SyncDec( &quot;var2&quot; );
        ///  }
        ///}.
        /// </summary>
        internal static string ScenarioCheckContext {
            get {
                return ResourceManager.GetString("ScenarioCheckContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.IO;
        ///using System.Threading;
        ///using River.Core;
        ///
        ///public class ScenarioCurrentDirectory : Scenario
        ///{
        ///  private bool throwInstallException = false;
        ///  private bool throwExecuteException = false;
        ///  private bool waitInInstall = false;
        ///  private bool waitInExecute = false;
        ///
        ///  public ScenarioCurrentDirectory()
        ///  {
        ///  }
        ///
        ///  public override void Install( IContext context )
        ///  {
        ///    using ( StreamWriter writer = new StreamWriter( &quot;&lt;FILE1&gt;&quot; ) )
        ///    {
        ///      writer.Write( Enviro [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScenarioCurrentDirectory {
            get {
                return ResourceManager.GetString("ScenarioCurrentDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using River.Core;
        ///
        ///public class ScenarioExecuteException : Scenario
        ///{
        ///  public ScenarioExecuteException()
        ///  {
        ///  }
        ///
        ///  public override void Execute( IContext context )
        ///  {
        ///    throw new Exception( &quot;ExecuteException&quot; );
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string ScenarioExecuteException {
            get {
                return ResourceManager.GetString("ScenarioExecuteException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.IO;
        ///using River.Core;
        ///
        ///public class ScenarioInstallAndExecute : Scenario
        ///{
        ///  public ScenarioInstallAndExecute()
        ///  {
        ///  }
        ///
        ///  public override void Install( IContext context )
        ///  {
        ///    using ( StreamWriter writer = new StreamWriter( &quot;&lt;FILE1&gt;&quot; ) )
        ///    {
        ///      writer.Write( &apos;I&apos; );
        ///      writer.Flush();
        ///      writer.Close();
        ///    }
        /// }
        ///
        ///  public override void Execute( IContext context )
        ///  {
        ///    using ( StreamWriter writer = new StreamWriter( &quot;&lt;FILE2&gt;&quot; ) )
        ///    {
        ///      writer.Write(  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScenarioInstallAndExecute {
            get {
                return ResourceManager.GetString("ScenarioInstallAndExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using River.Core;
        ///
        ///public class ScenarioInstallException : Scenario
        ///{
        ///  public ScenarioInstallException()
        ///  {
        ///  }
        ///
        ///  public override void Install( IContext context )
        ///  {
        ///    throw new Exception( &quot;InstallException&quot; );
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string ScenarioInstallException {
            get {
                return ResourceManager.GetString("ScenarioInstallException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Threading;
        ///using River.Core;
        ///
        ///public class ScenarioVeryLongExecute : Scenario
        ///{
        ///  public ScenarioVeryLongExecute()
        ///  {
        ///  }
        ///
        ///  public override void Execute( IContext context )
        ///  {
        ///    Thread.Sleep( 10000 );
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string ScenarioVeryLongExecute {
            get {
                return ResourceManager.GetString("ScenarioVeryLongExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Threading;
        ///using River.Core;
        ///
        ///public class ScenarioVeryLongInstall : Scenario
        ///{
        ///  public ScenarioVeryLongInstall()
        ///  {
        ///  }
        ///
        ///  public override void Install( IContext context )
        ///  {
        ///    Thread.Sleep( 10000 );
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string ScenarioVeryLongInstall {
            get {
                return ResourceManager.GetString("ScenarioVeryLongInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using River.Core;
        ///
        ///public class SimpleCorrectScenario : Scenario
        ///{
        ///  public SimpleCorrectScenario()
        ///  {
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string SimpleCorrectScenario {
            get {
                return ResourceManager.GetString("SimpleCorrectScenario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using River.Core;
        ///
        ///public class SimpleExceptionScenario : Scenario
        ///{
        ///  public SimpleExceptionScenario()
        ///  {
        ///    throw new Exception( &quot;Qwerty&quot; );
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string SimpleExceptionScenario {
            get {
                return ResourceManager.GetString("SimpleExceptionScenario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using River.Core;
        ///
        ///public class SimpleNonloadableScenario : Scenario
        ///{
        ///  public SimpleNonloadableScenario( int a )
        ///  {
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string SimpleNonloadableScenario {
            get {
                return ResourceManager.GetString("SimpleNonloadableScenario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using River.Core;
        ///
        ///public class SimpleUnbuildableScenario : Scenario
        ///{
        ///  int;
        ///}
        ///.
        /// </summary>
        internal static string SimpleUnbuildableScenario {
            get {
                return ResourceManager.GetString("SimpleUnbuildableScenario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using River.Core;
        ///
        ///[DistributeAttribute]
        ///public class SimpleScenario1Of3 : Scenario
        ///{
        ///}
        ///
        ///[DistributeAttribute]
        ///public class SimpleScenario2Of3 : Scenario
        ///{
        ///}
        ///
        ///[DistributeAttribute]
        ///public class SimpleScenario3Of3 : Scenario
        ///{
        ///}
        ///
        ///.
        /// </summary>
        internal static string ThreeBotsSuite {
            get {
                return ResourceManager.GetString("ThreeBotsSuite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using River.Core;
        ///
        ///[DistributeAttribute]
        ///public class SimpleScenario1 : Scenario
        ///{
        ///}
        ///
        ///[DistributeAttribute]
        ///public class SimpleScenario2 : Scenario
        ///{
        ///}
        ///
        ///.
        /// </summary>
        internal static string TwoBotsSuite {
            get {
                return ResourceManager.GetString("TwoBotsSuite", resourceCulture);
            }
        }
    }
}
