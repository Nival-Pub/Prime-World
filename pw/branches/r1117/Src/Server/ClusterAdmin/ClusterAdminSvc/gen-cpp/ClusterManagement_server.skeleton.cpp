// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ClusterManagement.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ClusterAdmin::Thrift;

class ClusterManagementHandler : virtual public ClusterManagementIf {
 public:
  ClusterManagementHandler() {
    // Your initialization goes here
  }

  void GetServices(std::vector<ServiceInfo> & _return) {
    // Your implementation goes here
    printf("GetServices\n");
  }

  void GetServicesByMachine(std::vector<ServiceInfo> & _return, const std::string& machine) {
    // Your implementation goes here
    printf("GetServicesByMachine\n");
  }

  void GetServicesByType(std::vector<ServiceInfo> & _return, const std::string& stype) {
    // Your implementation goes here
    printf("GetServicesByType\n");
  }

  void GetServiceById(ServiceInfo& _return, const std::string& serviceid) {
    // Your implementation goes here
    printf("GetServiceById\n");
  }

  int32_t ExecuteCommand(const std::string& serviceid, const ServiceCommand::type command, const std::string& arguments) {
    // Your implementation goes here
    printf("ExecuteCommand\n");
  }

  int32_t ChangeParameters(const std::string& serviceid, const std::vector<ServiceParameter> & parameters, const bool saveinconfig) {
    // Your implementation goes here
    printf("ChangeParameters\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ClusterManagementHandler> handler(new ClusterManagementHandler());
  shared_ptr<TProcessor> processor(new ClusterManagementProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

