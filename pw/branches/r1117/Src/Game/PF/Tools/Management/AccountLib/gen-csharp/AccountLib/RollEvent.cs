/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RollEvent : TBase
  {
    private int _persistentId;
    private int _startTime;
    private int _endTime;
    private string _locale;
    private bool _enabled;
    private string _description;
    private string _title;
    private string _image;
    private string _text;
    private List<string> _currencyIds;
    private List<RollEventRule> _rolls;
    private string _completionTalentId;
    private int _completionTalentRatio;
    private int _guid;

    public int PersistentId
    {
      get
      {
        return _persistentId;
      }
      set
      {
        __isset.persistentId = true;
        this._persistentId = value;
      }
    }

    public int StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public int EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    public List<string> CurrencyIds
    {
      get
      {
        return _currencyIds;
      }
      set
      {
        __isset.currencyIds = true;
        this._currencyIds = value;
      }
    }

    public List<RollEventRule> Rolls
    {
      get
      {
        return _rolls;
      }
      set
      {
        __isset.rolls = true;
        this._rolls = value;
      }
    }

    public string CompletionTalentId
    {
      get
      {
        return _completionTalentId;
      }
      set
      {
        __isset.completionTalentId = true;
        this._completionTalentId = value;
      }
    }

    public int CompletionTalentRatio
    {
      get
      {
        return _completionTalentRatio;
      }
      set
      {
        __isset.completionTalentRatio = true;
        this._completionTalentRatio = value;
      }
    }

    public int Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool persistentId;
      public bool startTime;
      public bool endTime;
      public bool locale;
      public bool enabled;
      public bool description;
      public bool title;
      public bool image;
      public bool text;
      public bool currencyIds;
      public bool rolls;
      public bool completionTalentId;
      public bool completionTalentRatio;
      public bool guid;
    }

    public RollEvent() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              PersistentId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              StartTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              EndTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Enabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Image = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                CurrencyIds = new List<string>();
                TList _list394 = iprot.ReadListBegin();
                for( int _i395 = 0; _i395 < _list394.Count; ++_i395)
                {
                  string _elem396 = null;
                  _elem396 = iprot.ReadString();
                  CurrencyIds.Add(_elem396);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Rolls = new List<RollEventRule>();
                TList _list397 = iprot.ReadListBegin();
                for( int _i398 = 0; _i398 < _list397.Count; ++_i398)
                {
                  RollEventRule _elem399 = new RollEventRule();
                  _elem399 = new RollEventRule();
                  _elem399.Read(iprot);
                  Rolls.Add(_elem399);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              CompletionTalentId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              CompletionTalentRatio = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Guid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RollEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.persistentId) {
        field.Name = "persistentId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersistentId);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndTime);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (__isset.enabled) {
        field.Name = "enabled";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Enabled);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Image);
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (CurrencyIds != null && __isset.currencyIds) {
        field.Name = "currencyIds";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, CurrencyIds.Count));
          foreach (string _iter400 in CurrencyIds)
          {
            oprot.WriteString(_iter400);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Rolls != null && __isset.rolls) {
        field.Name = "rolls";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Rolls.Count));
          foreach (RollEventRule _iter401 in Rolls)
          {
            _iter401.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CompletionTalentId != null && __isset.completionTalentId) {
        field.Name = "completionTalentId";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CompletionTalentId);
        oprot.WriteFieldEnd();
      }
      if (__isset.completionTalentRatio) {
        field.Name = "completionTalentRatio";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CompletionTalentRatio);
        oprot.WriteFieldEnd();
      }
      if (__isset.guid) {
        field.Name = "guid";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RollEvent(");
      sb.Append("PersistentId: ");
      sb.Append(PersistentId);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(",Enabled: ");
      sb.Append(Enabled);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",Image: ");
      sb.Append(Image);
      sb.Append(",Text: ");
      sb.Append(Text);
      sb.Append(",CurrencyIds: ");
      sb.Append(CurrencyIds);
      sb.Append(",Rolls: ");
      sb.Append(Rolls);
      sb.Append(",CompletionTalentId: ");
      sb.Append(CompletionTalentId);
      sb.Append(",CompletionTalentRatio: ");
      sb.Append(CompletionTalentRatio);
      sb.Append(",Guid: ");
      sb.Append(Guid);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
