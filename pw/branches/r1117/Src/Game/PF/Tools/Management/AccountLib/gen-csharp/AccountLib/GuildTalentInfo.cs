/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildTalentInfo : TBase
  {
    private long _Owner;
    private long _Holder;
    private int _HeroClassId;
    private int _Points;
    private int _PersistentId;
    private long _InstanceId;

    public long Owner
    {
      get
      {
        return _Owner;
      }
      set
      {
        __isset.Owner = true;
        this._Owner = value;
      }
    }

    public long Holder
    {
      get
      {
        return _Holder;
      }
      set
      {
        __isset.Holder = true;
        this._Holder = value;
      }
    }

    public int HeroClassId
    {
      get
      {
        return _HeroClassId;
      }
      set
      {
        __isset.HeroClassId = true;
        this._HeroClassId = value;
      }
    }

    public int Points
    {
      get
      {
        return _Points;
      }
      set
      {
        __isset.Points = true;
        this._Points = value;
      }
    }

    public int PersistentId
    {
      get
      {
        return _PersistentId;
      }
      set
      {
        __isset.PersistentId = true;
        this._PersistentId = value;
      }
    }

    public long InstanceId
    {
      get
      {
        return _InstanceId;
      }
      set
      {
        __isset.InstanceId = true;
        this._InstanceId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Owner;
      public bool Holder;
      public bool HeroClassId;
      public bool Points;
      public bool PersistentId;
      public bool InstanceId;
    }

    public GuildTalentInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Owner = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Holder = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              HeroClassId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Points = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              PersistentId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              InstanceId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildTalentInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Owner) {
        field.Name = "Owner";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Owner);
        oprot.WriteFieldEnd();
      }
      if (__isset.Holder) {
        field.Name = "Holder";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Holder);
        oprot.WriteFieldEnd();
      }
      if (__isset.HeroClassId) {
        field.Name = "HeroClassId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HeroClassId);
        oprot.WriteFieldEnd();
      }
      if (__isset.Points) {
        field.Name = "Points";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Points);
        oprot.WriteFieldEnd();
      }
      if (__isset.PersistentId) {
        field.Name = "PersistentId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersistentId);
        oprot.WriteFieldEnd();
      }
      if (__isset.InstanceId) {
        field.Name = "InstanceId";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(InstanceId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildTalentInfo(");
      sb.Append("Owner: ");
      sb.Append(Owner);
      sb.Append(",Holder: ");
      sb.Append(Holder);
      sb.Append(",HeroClassId: ");
      sb.Append(HeroClassId);
      sb.Append(",Points: ");
      sb.Append(Points);
      sb.Append(",PersistentId: ");
      sb.Append(PersistentId);
      sb.Append(",InstanceId: ");
      sb.Append(InstanceId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
