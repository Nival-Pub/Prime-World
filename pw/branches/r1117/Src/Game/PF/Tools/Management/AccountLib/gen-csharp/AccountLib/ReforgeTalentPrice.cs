/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReforgeTalentPrice : TBase
  {
    private ETalentRarity _rarity;
    private int _rerollPrice;
    private int _upgradePrice;
    private int _talentsToUpgrade;

    /// <summary>
    /// 
    /// <seealso cref="ETalentRarity"/>
    /// </summary>
    public ETalentRarity Rarity
    {
      get
      {
        return _rarity;
      }
      set
      {
        __isset.rarity = true;
        this._rarity = value;
      }
    }

    public int RerollPrice
    {
      get
      {
        return _rerollPrice;
      }
      set
      {
        __isset.rerollPrice = true;
        this._rerollPrice = value;
      }
    }

    public int UpgradePrice
    {
      get
      {
        return _upgradePrice;
      }
      set
      {
        __isset.upgradePrice = true;
        this._upgradePrice = value;
      }
    }

    public int TalentsToUpgrade
    {
      get
      {
        return _talentsToUpgrade;
      }
      set
      {
        __isset.talentsToUpgrade = true;
        this._talentsToUpgrade = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rarity;
      public bool rerollPrice;
      public bool upgradePrice;
      public bool talentsToUpgrade;
    }

    public ReforgeTalentPrice() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Rarity = (ETalentRarity)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RerollPrice = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              UpgradePrice = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              TalentsToUpgrade = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReforgeTalentPrice");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.rarity) {
        field.Name = "rarity";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Rarity);
        oprot.WriteFieldEnd();
      }
      if (__isset.rerollPrice) {
        field.Name = "rerollPrice";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RerollPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.upgradePrice) {
        field.Name = "upgradePrice";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UpgradePrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.talentsToUpgrade) {
        field.Name = "talentsToUpgrade";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TalentsToUpgrade);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReforgeTalentPrice(");
      sb.Append("Rarity: ");
      sb.Append(Rarity);
      sb.Append(",RerollPrice: ");
      sb.Append(RerollPrice);
      sb.Append(",UpgradePrice: ");
      sb.Append(UpgradePrice);
      sb.Append(",TalentsToUpgrade: ");
      sb.Append(TalentsToUpgrade);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
