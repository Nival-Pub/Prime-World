/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuestEventStage : TBase
  {
    private string _title;
    private string _text;
    private string _image;
    private RollEventItem _reward;
    private List<QuestEventStageStep> _steps;
    private RollEventItem _loseReward;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public RollEventItem Reward
    {
      get
      {
        return _reward;
      }
      set
      {
        __isset.reward = true;
        this._reward = value;
      }
    }

    public List<QuestEventStageStep> Steps
    {
      get
      {
        return _steps;
      }
      set
      {
        __isset.steps = true;
        this._steps = value;
      }
    }

    public RollEventItem LoseReward
    {
      get
      {
        return _loseReward;
      }
      set
      {
        __isset.loseReward = true;
        this._loseReward = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool title;
      public bool text;
      public bool image;
      public bool reward;
      public bool steps;
      public bool loseReward;
    }

    public QuestEventStage() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Image = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Reward = new RollEventItem();
              Reward.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Steps = new List<QuestEventStageStep>();
                TList _list410 = iprot.ReadListBegin();
                for( int _i411 = 0; _i411 < _list410.Count; ++_i411)
                {
                  QuestEventStageStep _elem412 = new QuestEventStageStep();
                  _elem412 = new QuestEventStageStep();
                  _elem412.Read(iprot);
                  Steps.Add(_elem412);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              LoseReward = new RollEventItem();
              LoseReward.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestEventStage");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Image);
        oprot.WriteFieldEnd();
      }
      if (Reward != null && __isset.reward) {
        field.Name = "reward";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Reward.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Steps != null && __isset.steps) {
        field.Name = "steps";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Steps.Count));
          foreach (QuestEventStageStep _iter413 in Steps)
          {
            _iter413.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (LoseReward != null && __isset.loseReward) {
        field.Name = "loseReward";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        LoseReward.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestEventStage(");
      sb.Append("Title: ");
      sb.Append(Title);
      sb.Append(",Text: ");
      sb.Append(Text);
      sb.Append(",Image: ");
      sb.Append(Image);
      sb.Append(",Reward: ");
      sb.Append(Reward== null ? "<null>" : Reward.ToString());
      sb.Append(",Steps: ");
      sb.Append(Steps);
      sb.Append(",LoseReward: ");
      sb.Append(LoseReward== null ? "<null>" : LoseReward.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
