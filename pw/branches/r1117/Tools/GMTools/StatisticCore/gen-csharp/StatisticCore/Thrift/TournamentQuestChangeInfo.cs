/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TournamentQuestChangeInfo : TBase
  {
    private long _auid;
    private int _questindex;
    private string _questname;
    private TournamentQuestResult _reason;
    private int _timestamp;
    private bool _alternativeline;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public int Questindex
    {
      get
      {
        return _questindex;
      }
      set
      {
        __isset.questindex = true;
        this._questindex = value;
      }
    }

    public string Questname
    {
      get
      {
        return _questname;
      }
      set
      {
        __isset.questname = true;
        this._questname = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TournamentQuestResult"/>
    /// </summary>
    public TournamentQuestResult Reason
    {
      get
      {
        return _reason;
      }
      set
      {
        __isset.reason = true;
        this._reason = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public bool Alternativeline
    {
      get
      {
        return _alternativeline;
      }
      set
      {
        __isset.alternativeline = true;
        this._alternativeline = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool questindex;
      public bool questname;
      public bool reason;
      public bool timestamp;
      public bool alternativeline;
    }

    public TournamentQuestChangeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Questindex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Questname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Reason = (TournamentQuestResult)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Alternativeline = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TournamentQuestChangeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.questindex) {
        field.Name = "questindex";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Questindex);
        oprot.WriteFieldEnd();
      }
      if (Questname != null && __isset.questname) {
        field.Name = "questname";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Questname);
        oprot.WriteFieldEnd();
      }
      if (__isset.reason) {
        field.Name = "reason";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Reason);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.alternativeline) {
        field.Name = "alternativeline";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Alternativeline);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TournamentQuestChangeInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",Questindex: ");
      sb.Append(Questindex);
      sb.Append(",Questname: ");
      sb.Append(Questname);
      sb.Append(",Reason: ");
      sb.Append(Reason);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Alternativeline: ");
      sb.Append(Alternativeline);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
