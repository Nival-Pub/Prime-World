#pragma once

#include "../System/2Darray.h"
#include "Defines.h"

namespace NDb
{
  struct UICursorBase;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NCursor
{

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Image
{
	CArray2D<DWORD> data;
  UI::Point hotSpot;
  HCURSOR hCursor; // todo: rewrite cursor system completely instead of hacking [3/15/2011 paul.smirnov]
  HCURSOR hCursorPic;
  int width, height;
public:
	mutable int cacheRef;
	const CArray2D<DWORD> & GetData() const { return data; }
  const UI::Point & GetHotSpot() const { return hotSpot; }
  HCURSOR GetHandle() const { return hCursor; }
  HCURSOR GetCursorPic() const { return hCursorPic; }
  void ResetHandle() { hCursor = 0; }
  int GetWidth() const { return width; }
  int GetHeight() const { return height; }
	Image(): hotSpot(0,0), hCursor(0), cacheRef(0) {}
  ~Image();

	bool Load( const NDb::UICursorBase *pCursor );
	void Blit( int x, int y, Image & src, int sx, int sy, int sw=0, int sh=0 );
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetDefault( const Image *pCursorImage );
void Freeze( bool freeze );
void Update( DWORD time );
void Render(); // for software cursor

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Init();
void Release();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const UI::Point & GetCurrentSize();
const UI::Point & GetCurrentHotSpot();

} //namespace NCursor


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NCursors
{

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Register( const string & cursorName, /*const*/ NCursor::Image *pCursorImage );
bool IsRegistered( const string & cursorName );
void Reset();
void Release();
void Select( const string & cursorName, int priority );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace NCursors
