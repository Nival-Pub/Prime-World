/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LeaverPointsChangeInfo : TBase
  {
    private long _auid;
    private string _type;
    private int _leaverpointschange;
    private int _leaverpointstotal;
    private bool _isleaverchanged;
    private bool _isleaver;
    private bool _isbadbehaviour;
    private int _timestamp;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public string Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Leaverpointschange
    {
      get
      {
        return _leaverpointschange;
      }
      set
      {
        __isset.leaverpointschange = true;
        this._leaverpointschange = value;
      }
    }

    public int Leaverpointstotal
    {
      get
      {
        return _leaverpointstotal;
      }
      set
      {
        __isset.leaverpointstotal = true;
        this._leaverpointstotal = value;
      }
    }

    public bool Isleaverchanged
    {
      get
      {
        return _isleaverchanged;
      }
      set
      {
        __isset.isleaverchanged = true;
        this._isleaverchanged = value;
      }
    }

    public bool Isleaver
    {
      get
      {
        return _isleaver;
      }
      set
      {
        __isset.isleaver = true;
        this._isleaver = value;
      }
    }

    public bool Isbadbehaviour
    {
      get
      {
        return _isbadbehaviour;
      }
      set
      {
        __isset.isbadbehaviour = true;
        this._isbadbehaviour = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool type;
      public bool leaverpointschange;
      public bool leaverpointstotal;
      public bool isleaverchanged;
      public bool isleaver;
      public bool isbadbehaviour;
      public bool timestamp;
    }

    public LeaverPointsChangeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Type = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Leaverpointschange = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Leaverpointstotal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Isleaverchanged = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Isleaver = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              Isbadbehaviour = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LeaverPointsChangeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (Type != null && __isset.type) {
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.leaverpointschange) {
        field.Name = "leaverpointschange";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Leaverpointschange);
        oprot.WriteFieldEnd();
      }
      if (__isset.leaverpointstotal) {
        field.Name = "leaverpointstotal";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Leaverpointstotal);
        oprot.WriteFieldEnd();
      }
      if (__isset.isleaverchanged) {
        field.Name = "isleaverchanged";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Isleaverchanged);
        oprot.WriteFieldEnd();
      }
      if (__isset.isleaver) {
        field.Name = "isleaver";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Isleaver);
        oprot.WriteFieldEnd();
      }
      if (__isset.isbadbehaviour) {
        field.Name = "isbadbehaviour";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Isbadbehaviour);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LeaverPointsChangeInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",Leaverpointschange: ");
      sb.Append(Leaverpointschange);
      sb.Append(",Leaverpointstotal: ");
      sb.Append(Leaverpointstotal);
      sb.Append(",Isleaverchanged: ");
      sb.Append(Isleaverchanged);
      sb.Append(",Isleaver: ");
      sb.Append(Isleaver);
      sb.Append(",Isbadbehaviour: ");
      sb.Append(Isbadbehaviour);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
