/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LoginInfo : TBase
  {
    private long _auid;
    private string _nick;
    private string _server;
    private string _cluster;
    private int _timestamp;
    private string _ip;
    private string _faction;
    private bool _factionselected;
    private bool _isdeveloper;
    private string _locale;
    private long _guildid;
    private string _guildshortname;
    private string _guildfullname;
    private int _leaverpoints;
    private bool _isleaver;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public string Nick
    {
      get
      {
        return _nick;
      }
      set
      {
        __isset.nick = true;
        this._nick = value;
      }
    }

    public string Server
    {
      get
      {
        return _server;
      }
      set
      {
        __isset.server = true;
        this._server = value;
      }
    }

    public string Cluster
    {
      get
      {
        return _cluster;
      }
      set
      {
        __isset.cluster = true;
        this._cluster = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string Ip
    {
      get
      {
        return _ip;
      }
      set
      {
        __isset.ip = true;
        this._ip = value;
      }
    }

    public string Faction
    {
      get
      {
        return _faction;
      }
      set
      {
        __isset.faction = true;
        this._faction = value;
      }
    }

    public bool Factionselected
    {
      get
      {
        return _factionselected;
      }
      set
      {
        __isset.factionselected = true;
        this._factionselected = value;
      }
    }

    public bool Isdeveloper
    {
      get
      {
        return _isdeveloper;
      }
      set
      {
        __isset.isdeveloper = true;
        this._isdeveloper = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public long Guildid
    {
      get
      {
        return _guildid;
      }
      set
      {
        __isset.guildid = true;
        this._guildid = value;
      }
    }

    public string Guildshortname
    {
      get
      {
        return _guildshortname;
      }
      set
      {
        __isset.guildshortname = true;
        this._guildshortname = value;
      }
    }

    public string Guildfullname
    {
      get
      {
        return _guildfullname;
      }
      set
      {
        __isset.guildfullname = true;
        this._guildfullname = value;
      }
    }

    public int Leaverpoints
    {
      get
      {
        return _leaverpoints;
      }
      set
      {
        __isset.leaverpoints = true;
        this._leaverpoints = value;
      }
    }

    public bool Isleaver
    {
      get
      {
        return _isleaver;
      }
      set
      {
        __isset.isleaver = true;
        this._isleaver = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool nick;
      public bool server;
      public bool cluster;
      public bool timestamp;
      public bool ip;
      public bool faction;
      public bool factionselected;
      public bool isdeveloper;
      public bool locale;
      public bool guildid;
      public bool guildshortname;
      public bool guildfullname;
      public bool leaverpoints;
      public bool isleaver;
    }

    public LoginInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Nick = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Server = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Cluster = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Ip = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Faction = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              Factionselected = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Isdeveloper = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              Guildid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Guildshortname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Guildfullname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Leaverpoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              Isleaver = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LoginInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (Nick != null && __isset.nick) {
        field.Name = "nick";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Nick);
        oprot.WriteFieldEnd();
      }
      if (Server != null && __isset.server) {
        field.Name = "server";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Server);
        oprot.WriteFieldEnd();
      }
      if (Cluster != null && __isset.cluster) {
        field.Name = "cluster";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Ip != null && __isset.ip) {
        field.Name = "ip";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ip);
        oprot.WriteFieldEnd();
      }
      if (Faction != null && __isset.faction) {
        field.Name = "faction";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Faction);
        oprot.WriteFieldEnd();
      }
      if (__isset.factionselected) {
        field.Name = "factionselected";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Factionselected);
        oprot.WriteFieldEnd();
      }
      if (__isset.isdeveloper) {
        field.Name = "isdeveloper";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Isdeveloper);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildid) {
        field.Name = "guildid";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Guildid);
        oprot.WriteFieldEnd();
      }
      if (Guildshortname != null && __isset.guildshortname) {
        field.Name = "guildshortname";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Guildshortname);
        oprot.WriteFieldEnd();
      }
      if (Guildfullname != null && __isset.guildfullname) {
        field.Name = "guildfullname";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Guildfullname);
        oprot.WriteFieldEnd();
      }
      if (__isset.leaverpoints) {
        field.Name = "leaverpoints";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Leaverpoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.isleaver) {
        field.Name = "isleaver";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Isleaver);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LoginInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",Nick: ");
      sb.Append(Nick);
      sb.Append(",Server: ");
      sb.Append(Server);
      sb.Append(",Cluster: ");
      sb.Append(Cluster);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Ip: ");
      sb.Append(Ip);
      sb.Append(",Faction: ");
      sb.Append(Faction);
      sb.Append(",Factionselected: ");
      sb.Append(Factionselected);
      sb.Append(",Isdeveloper: ");
      sb.Append(Isdeveloper);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(",Guildid: ");
      sb.Append(Guildid);
      sb.Append(",Guildshortname: ");
      sb.Append(Guildshortname);
      sb.Append(",Guildfullname: ");
      sb.Append(Guildfullname);
      sb.Append(",Leaverpoints: ");
      sb.Append(Leaverpoints);
      sb.Append(",Isleaver: ");
      sb.Append(Isleaver);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
