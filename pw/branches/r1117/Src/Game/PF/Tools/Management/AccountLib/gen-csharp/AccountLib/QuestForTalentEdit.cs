/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuestForTalentEdit : TBase
  {
    private int _questId;
    private int _startTime;
    private int _endTime;
    private string _talentAwardName;
    private int _currentObjectiveValue;
    private string _currentObjectiveData;
    private int _editObjectiveId;
    private int _editAwardId;

    public int QuestId
    {
      get
      {
        return _questId;
      }
      set
      {
        __isset.questId = true;
        this._questId = value;
      }
    }

    public int StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public int EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public string TalentAwardName
    {
      get
      {
        return _talentAwardName;
      }
      set
      {
        __isset.talentAwardName = true;
        this._talentAwardName = value;
      }
    }

    public int CurrentObjectiveValue
    {
      get
      {
        return _currentObjectiveValue;
      }
      set
      {
        __isset.currentObjectiveValue = true;
        this._currentObjectiveValue = value;
      }
    }

    public string CurrentObjectiveData
    {
      get
      {
        return _currentObjectiveData;
      }
      set
      {
        __isset.currentObjectiveData = true;
        this._currentObjectiveData = value;
      }
    }

    public int EditObjectiveId
    {
      get
      {
        return _editObjectiveId;
      }
      set
      {
        __isset.editObjectiveId = true;
        this._editObjectiveId = value;
      }
    }

    public int EditAwardId
    {
      get
      {
        return _editAwardId;
      }
      set
      {
        __isset.editAwardId = true;
        this._editAwardId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool questId;
      public bool startTime;
      public bool endTime;
      public bool talentAwardName;
      public bool currentObjectiveValue;
      public bool currentObjectiveData;
      public bool editObjectiveId;
      public bool editAwardId;
    }

    public QuestForTalentEdit() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              QuestId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              StartTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              EndTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              TalentAwardName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              CurrentObjectiveValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              CurrentObjectiveData = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              EditObjectiveId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              EditAwardId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestForTalentEdit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.questId) {
        field.Name = "questId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuestId);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndTime);
        oprot.WriteFieldEnd();
      }
      if (TalentAwardName != null && __isset.talentAwardName) {
        field.Name = "talentAwardName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TalentAwardName);
        oprot.WriteFieldEnd();
      }
      if (__isset.currentObjectiveValue) {
        field.Name = "currentObjectiveValue";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CurrentObjectiveValue);
        oprot.WriteFieldEnd();
      }
      if (CurrentObjectiveData != null && __isset.currentObjectiveData) {
        field.Name = "currentObjectiveData";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrentObjectiveData);
        oprot.WriteFieldEnd();
      }
      if (__isset.editObjectiveId) {
        field.Name = "editObjectiveId";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EditObjectiveId);
        oprot.WriteFieldEnd();
      }
      if (__isset.editAwardId) {
        field.Name = "editAwardId";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EditAwardId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestForTalentEdit(");
      sb.Append("QuestId: ");
      sb.Append(QuestId);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",TalentAwardName: ");
      sb.Append(TalentAwardName);
      sb.Append(",CurrentObjectiveValue: ");
      sb.Append(CurrentObjectiveValue);
      sb.Append(",CurrentObjectiveData: ");
      sb.Append(CurrentObjectiveData);
      sb.Append(",EditObjectiveId: ");
      sb.Append(EditObjectiveId);
      sb.Append(",EditAwardId: ");
      sb.Append(EditAwardId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
