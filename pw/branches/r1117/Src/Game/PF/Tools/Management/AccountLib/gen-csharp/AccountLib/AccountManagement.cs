/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{
  public partial class AccountManagement {
    public interface Iface {
      AccountInfoResponse GetAccountBySNUid(string snid, string snuid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountBySNUid(AsyncCallback callback, object state, string snid, string snuid);
      AccountInfoResponse End_GetAccountBySNUid(IAsyncResult asyncResult);
      #endif
      AccountInfoResponse GetAccountByAuid(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountByAuid(AsyncCallback callback, object state, long auid);
      AccountInfoResponse End_GetAccountByAuid(IAsyncResult asyncResult);
      #endif
      NickSnidResponse FindNicknameExact(string nickName);
      #if SILVERLIGHT
      IAsyncResult Begin_FindNicknameExact(AsyncCallback callback, object state, string nickName);
      NickSnidResponse End_FindNicknameExact(IAsyncResult asyncResult);
      #endif
      NickSnidListResponse FindNicknamesLike(string nickName, int page_offset, int page_size);
      #if SILVERLIGHT
      IAsyncResult Begin_FindNicknamesLike(AsyncCallback callback, object state, string nickName, int page_offset, int page_size);
      NickSnidListResponse End_FindNicknamesLike(IAsyncResult asyncResult);
      #endif
      SocialNetworksResponse GetSocialNetworks();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSocialNetworks(AsyncCallback callback, object state);
      SocialNetworksResponse End_GetSocialNetworks(IAsyncResult asyncResult);
      #endif
      LocaleInfoResponse GetLocaleInfoBySNUid(string snid, string snuid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetLocaleInfoBySNUid(AsyncCallback callback, object state, string snid, string snuid);
      LocaleInfoResponse End_GetLocaleInfoBySNUid(IAsyncResult asyncResult);
      #endif
      LocaleInfoResponse GetLocaleInfoByAuid(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetLocaleInfoByAuid(AsyncCallback callback, object state, long auid);
      LocaleInfoResponse End_GetLocaleInfoByAuid(IAsyncResult asyncResult);
      #endif
      NickSnidResponse FindPlayerByNickname(string nickname);
      #if SILVERLIGHT
      IAsyncResult Begin_FindPlayerByNickname(AsyncCallback callback, object state, string nickname);
      NickSnidResponse End_FindPlayerByNickname(IAsyncResult asyncResult);
      #endif
      NickSnidResponse FindPlayerByEmail(string email);
      #if SILVERLIGHT
      IAsyncResult Begin_FindPlayerByEmail(AsyncCallback callback, object state, string email);
      NickSnidResponse End_FindPlayerByEmail(IAsyncResult asyncResult);
      #endif
      NickSnidResponse PlayerChangeEmail(string email, string newEmail, string newPass);
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerChangeEmail(AsyncCallback callback, object state, string email, string newEmail, string newPass);
      NickSnidResponse End_PlayerChangeEmail(IAsyncResult asyncResult);
      #endif
      NickSnidResponse PlayerRemoveNickname(string email, string nickname);
      #if SILVERLIGHT
      IAsyncResult Begin_PlayerRemoveNickname(AsyncCallback callback, object state, string email, string nickname);
      NickSnidResponse End_PlayerRemoveNickname(IAsyncResult asyncResult);
      #endif
      QuestsForTalentsInfoResponse GetAccountQuestsForTalentsByAuid(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountQuestsForTalentsByAuid(AsyncCallback callback, object state, string login);
      QuestsForTalentsInfoResponse End_GetAccountQuestsForTalentsByAuid(IAsyncResult asyncResult);
      #endif
      RequestResult EditQuestForTalent(string login, QuestForTalentEdit questForTalentEdit, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_EditQuestForTalent(AsyncCallback callback, object state, string login, QuestForTalentEdit questForTalentEdit, string gmLogin, string extra_comment);
      RequestResult End_EditQuestForTalent(IAsyncResult asyncResult);
      #endif
      RequestResult EditAccount(string login, AccountEdit accountEdit, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_EditAccount(AsyncCallback callback, object state, string login, AccountEdit accountEdit, string gmLogin, string extra_comment);
      RequestResult End_EditAccount(IAsyncResult asyncResult);
      #endif
      RequestResult EditAccountResources(string login, AccountEdit accountEdit, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_EditAccountResources(AsyncCallback callback, object state, string login, AccountEdit accountEdit, string gmLogin, string extra_comment);
      RequestResult End_EditAccountResources(IAsyncResult asyncResult);
      #endif
      LibraryResponse GetAccountLibrary(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountLibrary(AsyncCallback callback, object state, string login);
      LibraryResponse End_GetAccountLibrary(IAsyncResult asyncResult);
      #endif
      GameSessionShortInfo GetGameSession(int sessionid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGameSession(AsyncCallback callback, object state, int sessionid);
      GameSessionShortInfo End_GetGameSession(IAsyncResult asyncResult);
      #endif
      BruteForceAccountShortInfo GetBruteForceAccount(string email);
      #if SILVERLIGHT
      IAsyncResult Begin_GetBruteForceAccount(AsyncCallback callback, object state, string email);
      BruteForceAccountShortInfo End_GetBruteForceAccount(IAsyncResult asyncResult);
      #endif
      RequestResult UnBanBruteForceAccount(string email);
      #if SILVERLIGHT
      IAsyncResult Begin_UnBanBruteForceAccount(AsyncCallback callback, object state, string email);
      RequestResult End_UnBanBruteForceAccount(IAsyncResult asyncResult);
      #endif
      BannedIpFullListInfo GetBannedIp(int limit, int skip);
      #if SILVERLIGHT
      IAsyncResult Begin_GetBannedIp(AsyncCallback callback, object state, int limit, int skip);
      BannedIpFullListInfo End_GetBannedIp(IAsyncResult asyncResult);
      #endif
      RequestResult UnBanIp(string ip);
      #if SILVERLIGHT
      IAsyncResult Begin_UnBanIp(AsyncCallback callback, object state, string ip);
      RequestResult End_UnBanIp(IAsyncResult asyncResult);
      #endif
      RequestResult EditFreeChanges(string login, string gmLogin, int nickChanges, int fractionChanges);
      #if SILVERLIGHT
      IAsyncResult Begin_EditFreeChanges(AsyncCallback callback, object state, string login, string gmLogin, int nickChanges, int fractionChanges);
      RequestResult End_EditFreeChanges(IAsyncResult asyncResult);
      #endif
      RequestResult AddResources(long auid, string ResourceType, int amount);
      #if SILVERLIGHT
      IAsyncResult Begin_AddResources(AsyncCallback callback, object state, long auid, string ResourceType, int amount);
      RequestResult End_AddResources(IAsyncResult asyncResult);
      #endif
      HeroesResponse GetAccountHeroes(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountHeroes(AsyncCallback callback, object state, string login);
      HeroesResponse End_GetAccountHeroes(IAsyncResult asyncResult);
      #endif
      RequestResult UnlockHero(string login, int heroClassId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_UnlockHero(AsyncCallback callback, object state, string login, int heroClassId, string gmLogin, string extra_comment);
      RequestResult End_UnlockHero(IAsyncResult asyncResult);
      #endif
      RequestResult EditHero(string login, HeroInfo heroEdit, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditHero(AsyncCallback callback, object state, string login, HeroInfo heroEdit, string gmLogin);
      RequestResult End_EditHero(IAsyncResult asyncResult);
      #endif
      RequestResult LockHero(string login, long heroInstanceId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_LockHero(AsyncCallback callback, object state, string login, long heroInstanceId, string gmLogin);
      RequestResult End_LockHero(IAsyncResult asyncResult);
      #endif
      RequestResult EditSeasonAwards(string login, SeasonAwards awardEdit, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditSeasonAwards(AsyncCallback callback, object state, string login, SeasonAwards awardEdit, string gmLogin);
      RequestResult End_EditSeasonAwards(IAsyncResult asyncResult);
      #endif
      RequestResult EditSeasonInfo(string login, long heroInstanceId, SeasonInfo seasonEdit, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditSeasonInfo(AsyncCallback callback, object state, string login, long heroInstanceId, SeasonInfo seasonEdit, string gmLogin);
      RequestResult End_EditSeasonInfo(IAsyncResult asyncResult);
      #endif
      TalentSetResponse GetHeroTalentSet(string login, long heroInstanceId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetHeroTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId);
      TalentSetResponse End_GetHeroTalentSet(IAsyncResult asyncResult);
      #endif
      SeasonInfoResponse GetHeroSeasonsInfo(string login, long heroInstanceId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetHeroSeasonsInfo(AsyncCallback callback, object state, string login, long heroInstanceId);
      SeasonInfoResponse End_GetHeroSeasonsInfo(IAsyncResult asyncResult);
      #endif
      RequestResult AddTalent(string login, int talentClassId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_AddTalent(AsyncCallback callback, object state, string login, int talentClassId, string gmLogin, string extra_comment);
      RequestResult End_AddTalent(IAsyncResult asyncResult);
      #endif
      RequestResult AddTalents(string login, List<int> talentIds, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_AddTalents(AsyncCallback callback, object state, string login, List<int> talentIds, string gmLogin, string extra_comment);
      RequestResult End_AddTalents(IAsyncResult asyncResult);
      #endif
      RequestResult EditTalent(string login, TalentInfo talentEdit, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditTalent(AsyncCallback callback, object state, string login, TalentInfo talentEdit, string gmLogin);
      RequestResult End_EditTalent(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteTalent(string login, long talentInstanceId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteTalent(AsyncCallback callback, object state, string login, long talentInstanceId, string gmLogin);
      RequestResult End_DeleteTalent(IAsyncResult asyncResult);
      #endif
      RequestResult MoveTalentFromTalentSetToLibrary(string login, long heroInstanceId, long talentInstanceId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_MoveTalentFromTalentSetToLibrary(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, string gmLogin);
      RequestResult End_MoveTalentFromTalentSetToLibrary(IAsyncResult asyncResult);
      #endif
      RequestResult MoveTalentFromLibraryToTalentSet(string login, long heroInstanceId, long talentInstanceId, int slot, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_MoveTalentFromLibraryToTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, int slot, string gmLogin);
      RequestResult End_MoveTalentFromLibraryToTalentSet(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveTalentFromTalentSet(string login, long heroInstanceId, long talentInstanceId, int talentSetId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveTalentFromTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, int talentSetId, string gmLogin);
      RequestResult End_RemoveTalentFromTalentSet(IAsyncResult asyncResult);
      #endif
      SkinsResponse GetAccountSkins(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountSkins(AsyncCallback callback, object state, long auid);
      SkinsResponse End_GetAccountSkins(IAsyncResult asyncResult);
      #endif
      RequestResult AddSkin(long auid, string skinPersistentId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_AddSkin(AsyncCallback callback, object state, long auid, string skinPersistentId, string gmLogin, string extra_comment);
      RequestResult End_AddSkin(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteSkin(long auid, string skinPersistentId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteSkin(AsyncCallback callback, object state, long auid, string skinPersistentId, string gmLogin, string extra_comment);
      RequestResult End_DeleteSkin(IAsyncResult asyncResult);
      #endif
      TalentUpgradeEntitiesResponse GetAccountTalentUpgradeEntities(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountTalentUpgradeEntities(AsyncCallback callback, object state, long auid);
      TalentUpgradeEntitiesResponse End_GetAccountTalentUpgradeEntities(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteTalentUpgradeEntity(long auid, long instanceId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteTalentUpgradeEntity(AsyncCallback callback, object state, long auid, long instanceId, string gmLogin, string extra_comment);
      RequestResult End_DeleteTalentUpgradeEntity(IAsyncResult asyncResult);
      #endif
      BuildingsInfoResponse GetAccountBuildings(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountBuildings(AsyncCallback callback, object state, long auid);
      BuildingsInfoResponse End_GetAccountBuildings(IAsyncResult asyncResult);
      #endif
      RequestResult MoveBuildingToStorage(long auid, long buildingInstanceId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_MoveBuildingToStorage(AsyncCallback callback, object state, long auid, long buildingInstanceId, string gmLogin);
      RequestResult End_MoveBuildingToStorage(IAsyncResult asyncResult);
      #endif
      RequestResult AddBuilding(long auid, int buildingClassId, int level, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_AddBuilding(AsyncCallback callback, object state, long auid, int buildingClassId, int level, string gmLogin, string extra_comment);
      RequestResult End_AddBuilding(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteBuilding(long auid, long buildingInstanceId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteBuilding(AsyncCallback callback, object state, long auid, long buildingInstanceId, string gmLogin);
      RequestResult End_DeleteBuilding(IAsyncResult asyncResult);
      #endif
      RequestResult GiveLamp(string login, LampInfo lampInfo, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_GiveLamp(AsyncCallback callback, object state, string login, LampInfo lampInfo, string gmLogin, string extra_comment);
      RequestResult End_GiveLamp(IAsyncResult asyncResult);
      #endif
      LampInfoResponse GetLampInfo(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetLampInfo(AsyncCallback callback, object state, string login);
      LampInfoResponse End_GetLampInfo(IAsyncResult asyncResult);
      #endif
      RequestResult GiveUpgradeHeroTalents(string login, UpgradeHeroTalentsInfo lampInfo, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_GiveUpgradeHeroTalents(AsyncCallback callback, object state, string login, UpgradeHeroTalentsInfo lampInfo, string gmLogin, string extra_comment);
      RequestResult End_GiveUpgradeHeroTalents(IAsyncResult asyncResult);
      #endif
      UpgradeHeroTalentsInfoResponse GetUpgradeHeroTalentsInfo(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetUpgradeHeroTalentsInfo(AsyncCallback callback, object state, string login);
      UpgradeHeroTalentsInfoResponse End_GetUpgradeHeroTalentsInfo(IAsyncResult asyncResult);
      #endif
      RequestResult DisjointSN(long auid, string snid);
      #if SILVERLIGHT
      IAsyncResult Begin_DisjointSN(AsyncCallback callback, object state, long auid, string snid);
      RequestResult End_DisjointSN(IAsyncResult asyncResult);
      #endif
      RequestResult ChangeFSN(long auid, string snid);
      #if SILVERLIGHT
      IAsyncResult Begin_ChangeFSN(AsyncCallback callback, object state, long auid, string snid);
      RequestResult End_ChangeFSN(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteSAAccount(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteSAAccount(AsyncCallback callback, object state, long auid);
      RequestResult End_DeleteSAAccount(IAsyncResult asyncResult);
      #endif
      TournamentInfoResponse GetAccountTournamentInfo(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountTournamentInfo(AsyncCallback callback, object state, string login);
      TournamentInfoResponse End_GetAccountTournamentInfo(IAsyncResult asyncResult);
      #endif
      RequestResult EditTournamentInfo(string login, TournamentInfo tournamentInfo, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditTournamentInfo(AsyncCallback callback, object state, string login, TournamentInfo tournamentInfo, string gmLogin);
      RequestResult End_EditTournamentInfo(IAsyncResult asyncResult);
      #endif
      GiveTournamentTicketResponse GiveTournamentTicket(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GiveTournamentTicket(AsyncCallback callback, object state, string login);
      GiveTournamentTicketResponse End_GiveTournamentTicket(IAsyncResult asyncResult);
      #endif
      TournamentGamesInfoResponse GetAccountTournamentGames(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountTournamentGames(AsyncCallback callback, object state, string login);
      TournamentGamesInfoResponse End_GetAccountTournamentGames(IAsyncResult asyncResult);
      #endif
      GuildInfoResponse GetGuildById(long guildid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGuildById(AsyncCallback callback, object state, long guildid);
      GuildInfoResponse End_GetGuildById(IAsyncResult asyncResult);
      #endif
      GuildInfoResponse GetGuildByName(string shortname, string fullname);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGuildByName(AsyncCallback callback, object state, string shortname, string fullname);
      GuildInfoResponse End_GetGuildByName(IAsyncResult asyncResult);
      #endif
      GuildMemberInfoResponse GetGuildMemberById(long guildid, long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGuildMemberById(AsyncCallback callback, object state, long guildid, long auid);
      GuildMemberInfoResponse End_GetGuildMemberById(IAsyncResult asyncResult);
      #endif
      RequestResult EditGuild(GuildEditInfo info, string gmlogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditGuild(AsyncCallback callback, object state, GuildEditInfo info, string gmlogin);
      RequestResult End_EditGuild(IAsyncResult asyncResult);
      #endif
      RequestResult ChangeGuildLeader(long guildid, long auid, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ChangeGuildLeader(AsyncCallback callback, object state, long guildid, long auid, string gmLogin);
      RequestResult End_ChangeGuildLeader(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveGuildMembers(long guildid, List<long> auids, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveGuildMembers(AsyncCallback callback, object state, long guildid, List<long> auids, string gmLogin);
      RequestResult End_RemoveGuildMembers(IAsyncResult asyncResult);
      #endif
      RequestResult ViewGuildMembers(long guildid);
      #if SILVERLIGHT
      IAsyncResult Begin_ViewGuildMembers(AsyncCallback callback, object state, long guildid);
      RequestResult End_ViewGuildMembers(IAsyncResult asyncResult);
      #endif
      RequestResult EditGuildMember(long guildid, GuildMemberInfo member, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditGuildMember(AsyncCallback callback, object state, long guildid, GuildMemberInfo member, string gmLogin);
      RequestResult End_EditGuildMember(IAsyncResult asyncResult);
      #endif
      RequestResult SetGuildIcon(long guildid, byte[] image);
      #if SILVERLIGHT
      IAsyncResult Begin_SetGuildIcon(AsyncCallback callback, object state, long guildid, byte[] image);
      RequestResult End_SetGuildIcon(IAsyncResult asyncResult);
      #endif
      RequestResult SwitchToNewGuildIcon(long guildid, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_SwitchToNewGuildIcon(AsyncCallback callback, object state, long guildid, string gmLogin);
      RequestResult End_SwitchToNewGuildIcon(IAsyncResult asyncResult);
      #endif
      ServerActionResponse TryToPayForGuildIconChange(long leaderauid, int changeiter);
      #if SILVERLIGHT
      IAsyncResult Begin_TryToPayForGuildIconChange(AsyncCallback callback, object state, long leaderauid, int changeiter);
      ServerActionResponse End_TryToPayForGuildIconChange(IAsyncResult asyncResult);
      #endif
      RequestResult AcquireGuildLock(long guildid, string gmlogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AcquireGuildLock(AsyncCallback callback, object state, long guildid, string gmlogin);
      RequestResult End_AcquireGuildLock(IAsyncResult asyncResult);
      #endif
      RequestResult ReleaseGuildLock(long guildid, string gmlogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ReleaseGuildLock(AsyncCallback callback, object state, long guildid, string gmlogin);
      RequestResult End_ReleaseGuildLock(IAsyncResult asyncResult);
      #endif
      RequestResult StopGuildSiege(long targetguildid, string gmlogin);
      #if SILVERLIGHT
      IAsyncResult Begin_StopGuildSiege(AsyncCallback callback, object state, long targetguildid, string gmlogin);
      RequestResult End_StopGuildSiege(IAsyncResult asyncResult);
      #endif
      RequestResult AddGuildSuzerain(long guildid, long suzerainguildid, string gmlogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AddGuildSuzerain(AsyncCallback callback, object state, long guildid, long suzerainguildid, string gmlogin);
      RequestResult End_AddGuildSuzerain(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveGuildSuzerain(long guildid, string gmlogin);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveGuildSuzerain(AsyncCallback callback, object state, long guildid, string gmlogin);
      RequestResult End_RemoveGuildSuzerain(IAsyncResult asyncResult);
      #endif
      StringDataResponse GetFullGuildDump(long guildid, bool zip);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFullGuildDump(AsyncCallback callback, object state, long guildid, bool zip);
      StringDataResponse End_GetFullGuildDump(IAsyncResult asyncResult);
      #endif
      GuildBankTalentsResponse GetFreeGuildBankTalents(long guildid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFreeGuildBankTalents(AsyncCallback callback, object state, long guildid);
      GuildBankTalentsResponse End_GetFreeGuildBankTalents(IAsyncResult asyncResult);
      #endif
      GuildBankTalentsResponse GetTakenGuildBankTalents(long guildid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetTakenGuildBankTalents(AsyncCallback callback, object state, long guildid);
      GuildBankTalentsResponse End_GetTakenGuildBankTalents(IAsyncResult asyncResult);
      #endif
      RequestResult ReturnTalentToOwner(long guildid, long talentId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ReturnTalentToOwner(AsyncCallback callback, object state, long guildid, long talentId, string gmLogin);
      RequestResult End_ReturnTalentToOwner(IAsyncResult asyncResult);
      #endif
      RequestResult ReturnTalentToGuildBank(long guildid, long talentId, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ReturnTalentToGuildBank(AsyncCallback callback, object state, long guildid, long talentId, string gmLogin);
      RequestResult End_ReturnTalentToGuildBank(IAsyncResult asyncResult);
      #endif
      RequestResult SendMessageToUser(string login, long auid, string messageTitle, string messageText, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_SendMessageToUser(AsyncCallback callback, object state, string login, long auid, string messageTitle, string messageText, string gmLogin, string extra_comment);
      RequestResult End_SendMessageToUser(IAsyncResult asyncResult);
      #endif
      AdminMessagesResponse GetAccountAdminMessages(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountAdminMessages(AsyncCallback callback, object state, string login);
      AdminMessagesResponse End_GetAccountAdminMessages(IAsyncResult asyncResult);
      #endif
      RequestResult UserOperation(long auid, UserOperationType type, int minutes, string reason, List<int> claims, string gmLogin, List<long> claimAuids, int points);
      #if SILVERLIGHT
      IAsyncResult Begin_UserOperation(AsyncCallback callback, object state, long auid, UserOperationType type, int minutes, string reason, List<int> claims, string gmLogin, List<long> claimAuids, int points);
      RequestResult End_UserOperation(IAsyncResult asyncResult);
      #endif
      RequestResult ResetUserAccount(string login, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ResetUserAccount(AsyncCallback callback, object state, string login, string gmLogin);
      RequestResult End_ResetUserAccount(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteUserAccount(string login, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteUserAccount(AsyncCallback callback, object state, string login, string gmLogin);
      RequestResult End_DeleteUserAccount(IAsyncResult asyncResult);
      #endif
      RequestResult KickUser(string login, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_KickUser(AsyncCallback callback, object state, string login, string gmLogin);
      RequestResult End_KickUser(IAsyncResult asyncResult);
      #endif
      StringDataResponse EditNickname(string login, string gmLogin, string nickname);
      #if SILVERLIGHT
      IAsyncResult Begin_EditNickname(AsyncCallback callback, object state, string login, string gmLogin, string nickname);
      StringDataResponse End_EditNickname(IAsyncResult asyncResult);
      #endif
      ServerActionResponse PayEditNickname(string login, string nickname);
      #if SILVERLIGHT
      IAsyncResult Begin_PayEditNickname(AsyncCallback callback, object state, string login, string nickname);
      ServerActionResponse End_PayEditNickname(IAsyncResult asyncResult);
      #endif
      ServerActionResponse PayChangeFraction(string login, int fraction);
      #if SILVERLIGHT
      IAsyncResult Begin_PayChangeFraction(AsyncCallback callback, object state, string login, int fraction);
      ServerActionResponse End_PayChangeFraction(IAsyncResult asyncResult);
      #endif
      PriceServiceDataResponse GetPrices(string login, PayServiceType servicetype, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_GetPrices(AsyncCallback callback, object state, string login, PayServiceType servicetype, string extra_comment);
      PriceServiceDataResponse End_GetPrices(IAsyncResult asyncResult);
      #endif
      ServerActionResponse BuyService(string login, PayServiceType servicetype, int paramValue);
      #if SILVERLIGHT
      IAsyncResult Begin_BuyService(AsyncCallback callback, object state, string login, PayServiceType servicetype, int paramValue);
      ServerActionResponse End_BuyService(IAsyncResult asyncResult);
      #endif
      RequestResult PayService(string login, PayServiceType servicetype, int paramValue, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_PayService(AsyncCallback callback, object state, string login, PayServiceType servicetype, int paramValue, string gmLogin);
      RequestResult End_PayService(IAsyncResult asyncResult);
      #endif
      RequestResult BuyTournamentTicket(string login, PayTicketType pttype);
      #if SILVERLIGHT
      IAsyncResult Begin_BuyTournamentTicket(AsyncCallback callback, object state, string login, PayTicketType pttype);
      RequestResult End_BuyTournamentTicket(IAsyncResult asyncResult);
      #endif
      BroadcastCreateResponse CreateBroadcast(BroadcastInfo createInfo, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateBroadcast(AsyncCallback callback, object state, BroadcastInfo createInfo, string gmLogin);
      BroadcastCreateResponse End_CreateBroadcast(IAsyncResult asyncResult);
      #endif
      BroadcastLocalesResponse GetBroadcastLocales();
      #if SILVERLIGHT
      IAsyncResult Begin_GetBroadcastLocales(AsyncCallback callback, object state);
      BroadcastLocalesResponse End_GetBroadcastLocales(IAsyncResult asyncResult);
      #endif
      RequestResult EditBroadcast(BroadcastInfo editInfo, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditBroadcast(AsyncCallback callback, object state, BroadcastInfo editInfo, string gmLogin);
      RequestResult End_EditBroadcast(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteBroadcast(int id, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteBroadcast(AsyncCallback callback, object state, int id, string gmLogin);
      RequestResult End_DeleteBroadcast(IAsyncResult asyncResult);
      #endif
      BroadcastListResponse GetBroadcastList(int skipLines, int takeLines);
      #if SILVERLIGHT
      IAsyncResult Begin_GetBroadcastList(AsyncCallback callback, object state, int skipLines, int takeLines);
      BroadcastListResponse End_GetBroadcastList(IAsyncResult asyncResult);
      #endif
      RequestResult StartMessageRotation(int id, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_StartMessageRotation(AsyncCallback callback, object state, int id, string gmLogin);
      RequestResult End_StartMessageRotation(IAsyncResult asyncResult);
      #endif
      RequestResult StopMessageRotation(int id, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_StopMessageRotation(AsyncCallback callback, object state, int id, string gmLogin);
      RequestResult End_StopMessageRotation(IAsyncResult asyncResult);
      #endif
      SocServerVersionResponse GetSocServerVersion();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSocServerVersion(AsyncCallback callback, object state);
      SocServerVersionResponse End_GetSocServerVersion(IAsyncResult asyncResult);
      #endif
      StringDataResponse GetFullUserDump(string login, bool zip);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFullUserDump(AsyncCallback callback, object state, string login, bool zip);
      StringDataResponse End_GetFullUserDump(IAsyncResult asyncResult);
      #endif
      RequestResult ApplyFullUserDump(string login, string dumpdata);
      #if SILVERLIGHT
      IAsyncResult Begin_ApplyFullUserDump(AsyncCallback callback, object state, string login, string dumpdata);
      RequestResult End_ApplyFullUserDump(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveFakeAuid(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveFakeAuid(AsyncCallback callback, object state, string login);
      RequestResult End_RemoveFakeAuid(IAsyncResult asyncResult);
      #endif
      UserDumpsDataResponse GetBackups();
      #if SILVERLIGHT
      IAsyncResult Begin_GetBackups(AsyncCallback callback, object state);
      UserDumpsDataResponse End_GetBackups(IAsyncResult asyncResult);
      #endif
      StringDataResponse GetBrokenUserDump(string login, string date, bool zip);
      #if SILVERLIGHT
      IAsyncResult Begin_GetBrokenUserDump(AsyncCallback callback, object state, string login, string date, bool zip);
      StringDataResponse End_GetBrokenUserDump(IAsyncResult asyncResult);
      #endif
      StringDataResponse GetBrokenUserDumpByNickname(string nickname, string date, bool zip);
      #if SILVERLIGHT
      IAsyncResult Begin_GetBrokenUserDumpByNickname(AsyncCallback callback, object state, string nickname, string date, bool zip);
      StringDataResponse End_GetBrokenUserDumpByNickname(IAsyncResult asyncResult);
      #endif
      StringDataResponse CheckAccountValidity(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_CheckAccountValidity(AsyncCallback callback, object state, string login);
      StringDataResponse End_CheckAccountValidity(IAsyncResult asyncResult);
      #endif
      RequestResult FixAccount(string login, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_FixAccount(AsyncCallback callback, object state, string login, string gmLogin);
      RequestResult End_FixAccount(IAsyncResult asyncResult);
      #endif
      RequestResult ActivateEmail(string email, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ActivateEmail(AsyncCallback callback, object state, string email, string gmLogin);
      RequestResult End_ActivateEmail(IAsyncResult asyncResult);
      #endif
      RequestResult FlushServerId(string login, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_FlushServerId(AsyncCallback callback, object state, string login, string gmLogin);
      RequestResult End_FlushServerId(IAsyncResult asyncResult);
      #endif
      RequestResult AddUserRestriction(string snid, string snuid, string cbtAccessKey);
      #if SILVERLIGHT
      IAsyncResult Begin_AddUserRestriction(AsyncCallback callback, object state, string snid, string snuid, string cbtAccessKey);
      RequestResult End_AddUserRestriction(IAsyncResult asyncResult);
      #endif
      RequestResult EditAccountDbValue(string login, string gmLogin, string key, string value);
      #if SILVERLIGHT
      IAsyncResult Begin_EditAccountDbValue(AsyncCallback callback, object state, string login, string gmLogin, string key, string value);
      RequestResult End_EditAccountDbValue(IAsyncResult asyncResult);
      #endif
      RegisterPaymentResponse RegisterPayment(long auid, int amount, string source, string txnid);
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterPayment(AsyncCallback callback, object state, long auid, int amount, string source, string txnid);
      RegisterPaymentResponse End_RegisterPayment(IAsyncResult asyncResult);
      #endif
      GetPaymentBonusActionsResponse GetPaymentBonusActions(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetPaymentBonusActions(AsyncCallback callback, object state, long auid);
      GetPaymentBonusActionsResponse End_GetPaymentBonusActions(IAsyncResult asyncResult);
      #endif
      RequestResult ReplenishUserGold(long auid, int amount, string payment_system);
      #if SILVERLIGHT
      IAsyncResult Begin_ReplenishUserGold(AsyncCallback callback, object state, long auid, int amount, string payment_system);
      RequestResult End_ReplenishUserGold(IAsyncResult asyncResult);
      #endif
      RequestResult UpdateUserGold(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateUserGold(AsyncCallback callback, object state, long auid);
      RequestResult End_UpdateUserGold(IAsyncResult asyncResult);
      #endif
      QuestsInfoResponse GetQuests(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetQuests(AsyncCallback callback, object state, long auid);
      QuestsInfoResponse End_GetQuests(IAsyncResult asyncResult);
      #endif
      ServerActionResponse ChangeQuest(long auid, int questid, QuestChangeAction action, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_ChangeQuest(AsyncCallback callback, object state, long auid, int questid, QuestChangeAction action, string gmLogin);
      ServerActionResponse End_ChangeQuest(IAsyncResult asyncResult);
      #endif
      RequestResult UpdateGeoshowFlag(long auid, bool isAllowed);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateGeoshowFlag(AsyncCallback callback, object state, long auid, bool isAllowed);
      RequestResult End_UpdateGeoshowFlag(IAsyncResult asyncResult);
      #endif
      RequestResult ApplyDLC(long auid, string dlcid);
      #if SILVERLIGHT
      IAsyncResult Begin_ApplyDLC(AsyncCallback callback, object state, long auid, string dlcid);
      RequestResult End_ApplyDLC(IAsyncResult asyncResult);
      #endif
      DynamicQuestInfoResponse GetDynamicQuestInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_GetDynamicQuestInfo(AsyncCallback callback, object state);
      DynamicQuestInfoResponse End_GetDynamicQuestInfo(IAsyncResult asyncResult);
      #endif
      DynamicQuestByIdResponse GetDynamicQuestById(int index);
      #if SILVERLIGHT
      IAsyncResult Begin_GetDynamicQuestById(AsyncCallback callback, object state, int index);
      DynamicQuestByIdResponse End_GetDynamicQuestById(IAsyncResult asyncResult);
      #endif
      AddDynamicQuestResponse AddDynamicQuest(string questData, string locale, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AddDynamicQuest(AsyncCallback callback, object state, string questData, string locale, string gmLogin);
      AddDynamicQuestResponse End_AddDynamicQuest(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveDynamicQuest(int index, string locale);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveDynamicQuest(AsyncCallback callback, object state, int index, string locale);
      RequestResult End_RemoveDynamicQuest(IAsyncResult asyncResult);
      #endif
      RequestResult EditDynamicQuest(int index, string locale, string questData);
      #if SILVERLIGHT
      IAsyncResult Begin_EditDynamicQuest(AsyncCallback callback, object state, int index, string locale, string questData);
      RequestResult End_EditDynamicQuest(IAsyncResult asyncResult);
      #endif
      DynamicQuestPullsInfoResponse GetDynamicQuestPullsInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_GetDynamicQuestPullsInfo(AsyncCallback callback, object state);
      DynamicQuestPullsInfoResponse End_GetDynamicQuestPullsInfo(IAsyncResult asyncResult);
      #endif
      DynamicQuestPullByIdResponse GetDynamicQuestPullById(int pullId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetDynamicQuestPullById(AsyncCallback callback, object state, int pullId);
      DynamicQuestPullByIdResponse End_GetDynamicQuestPullById(IAsyncResult asyncResult);
      #endif
      AuidsListResponse GetAuidsLists();
      #if SILVERLIGHT
      IAsyncResult Begin_GetAuidsLists(AsyncCallback callback, object state);
      AuidsListResponse End_GetAuidsLists(IAsyncResult asyncResult);
      #endif
      AuidsListByIdResponse GetAuidsListById(int index);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAuidsListById(AsyncCallback callback, object state, int index);
      AuidsListByIdResponse End_GetAuidsListById(IAsyncResult asyncResult);
      #endif
      RequestResult AddAuidsList(AuidsList auidsList, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AddAuidsList(AsyncCallback callback, object state, AuidsList auidsList, string gmLogin);
      RequestResult End_AddAuidsList(IAsyncResult asyncResult);
      #endif
      RequestResult EditAuidsList(AuidsList auidsList, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditAuidsList(AsyncCallback callback, object state, AuidsList auidsList, string gmLogin);
      RequestResult End_EditAuidsList(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveAuidsList(int index);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveAuidsList(AsyncCallback callback, object state, int index);
      RequestResult End_RemoveAuidsList(IAsyncResult asyncResult);
      #endif
      RequestResult AddDynamicQuestPull(DynamicQuestPull questPull, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AddDynamicQuestPull(AsyncCallback callback, object state, DynamicQuestPull questPull, string gmLogin);
      RequestResult End_AddDynamicQuestPull(IAsyncResult asyncResult);
      #endif
      RequestResult EditDynamicQuestPull(DynamicQuestPull questPull, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditDynamicQuestPull(AsyncCallback callback, object state, DynamicQuestPull questPull, string gmLogin);
      RequestResult End_EditDynamicQuestPull(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveDynamicQuestPull(int index, string locale, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveDynamicQuestPull(AsyncCallback callback, object state, int index, string locale, string gmLogin);
      RequestResult End_RemoveDynamicQuestPull(IAsyncResult asyncResult);
      #endif
      RequestResult AddDynamicQuestsToPull(int pullId, List<int> questIds, string locale, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AddDynamicQuestsToPull(AsyncCallback callback, object state, int pullId, List<int> questIds, string locale, string gmLogin);
      RequestResult End_AddDynamicQuestsToPull(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveDynamicQuestsFromPull(int pullId, List<int> questIds, string locale, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveDynamicQuestsFromPull(AsyncCallback callback, object state, int pullId, List<int> questIds, string locale, string gmLogin);
      RequestResult End_RemoveDynamicQuestsFromPull(IAsyncResult asyncResult);
      #endif
      FlagResponse GetAccountFlags(string login);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountFlags(AsyncCallback callback, object state, string login);
      FlagResponse End_GetAccountFlags(IAsyncResult asyncResult);
      #endif
      RequestResult UnlockFlag(string login, string flagPersistentId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_UnlockFlag(AsyncCallback callback, object state, string login, string flagPersistentId, string gmLogin, string extra_comment);
      RequestResult End_UnlockFlag(IAsyncResult asyncResult);
      #endif
      RequestResult LockFlag(string login, string flagPersistentId, string gmLogin, string extra_comment);
      #if SILVERLIGHT
      IAsyncResult Begin_LockFlag(AsyncCallback callback, object state, string login, string flagPersistentId, string gmLogin, string extra_comment);
      RequestResult End_LockFlag(IAsyncResult asyncResult);
      #endif
      RequestResult BindToGeolocation(long auid, string country, string region, string city, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_BindToGeolocation(AsyncCallback callback, object state, long auid, string country, string region, string city, string gmLogin);
      RequestResult End_BindToGeolocation(IAsyncResult asyncResult);
      #endif
      TalentsEventsResponse GetTalentsEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTalentsEvents(AsyncCallback callback, object state);
      TalentsEventsResponse End_GetTalentsEvents(IAsyncResult asyncResult);
      #endif
      ResourceEventsResponse GetResourceEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetResourceEvents(AsyncCallback callback, object state);
      ResourceEventsResponse End_GetResourceEvents(IAsyncResult asyncResult);
      #endif
      RequestResult AddMassOperation(MassOperationInfo massOperation, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_AddMassOperation(AsyncCallback callback, object state, MassOperationInfo massOperation, string gmLogin);
      RequestResult End_AddMassOperation(IAsyncResult asyncResult);
      #endif
      MassOperationsResultResponse GetMassOperationsInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_GetMassOperationsInfo(AsyncCallback callback, object state);
      MassOperationsResultResponse End_GetMassOperationsInfo(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteMassOperationInfo(int operaionId);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteMassOperationInfo(AsyncCallback callback, object state, int operaionId);
      RequestResult End_DeleteMassOperationInfo(IAsyncResult asyncResult);
      #endif
      CommonEventsListResponse GetAvailableEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvailableEvents(AsyncCallback callback, object state);
      CommonEventsListResponse End_GetAvailableEvents(IAsyncResult asyncResult);
      #endif
      RequestResult ChangeEventStateById(int persistentId, bool state);
      #if SILVERLIGHT
      IAsyncResult Begin_ChangeEventStateById(AsyncCallback callback, object state, int persistentId, bool state);
      RequestResult End_ChangeEventStateById(IAsyncResult asyncResult);
      #endif
      RequestResult DeleteEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteEventById(AsyncCallback callback, object state, int persistentId);
      RequestResult End_DeleteEventById(IAsyncResult asyncResult);
      #endif
      TechsInfosResponse GetTechsInfos();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTechsInfos(AsyncCallback callback, object state);
      TechsInfosResponse End_GetTechsInfos(IAsyncResult asyncResult);
      #endif
      TechsInfoByIdResponse GetTechsInfoById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetTechsInfoById(AsyncCallback callback, object state, int persistentId);
      TechsInfoByIdResponse End_GetTechsInfoById(IAsyncResult asyncResult);
      #endif
      RequestResult AddTechs(TechsInfo techInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_AddTechs(AsyncCallback callback, object state, TechsInfo techInfo);
      RequestResult End_AddTechs(IAsyncResult asyncResult);
      #endif
      RequestResult EditTechs(TechsInfo techInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_EditTechs(AsyncCallback callback, object state, TechsInfo techInfo);
      RequestResult End_EditTechs(IAsyncResult asyncResult);
      #endif
      CustomEventsResponse GetCustomEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetCustomEvents(AsyncCallback callback, object state);
      CustomEventsResponse End_GetCustomEvents(IAsyncResult asyncResult);
      #endif
      CustomEventByIdResponse GetCustomEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetCustomEventById(AsyncCallback callback, object state, int persistentId);
      CustomEventByIdResponse End_GetCustomEventById(IAsyncResult asyncResult);
      #endif
      RequestResult AddCustomEvent(CustomEvent customEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddCustomEvent(AsyncCallback callback, object state, CustomEvent customEvent);
      RequestResult End_AddCustomEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditCustomEvent(CustomEvent customEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditCustomEvent(AsyncCallback callback, object state, CustomEvent customEvent);
      RequestResult End_EditCustomEvent(IAsyncResult asyncResult);
      #endif
      CustomMapsResponse GetCustomMaps();
      #if SILVERLIGHT
      IAsyncResult Begin_GetCustomMaps(AsyncCallback callback, object state);
      CustomMapsResponse End_GetCustomMaps(IAsyncResult asyncResult);
      #endif
      CustomMapByIdResponse GetCustomMapById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetCustomMapById(AsyncCallback callback, object state, int persistentId);
      CustomMapByIdResponse End_GetCustomMapById(IAsyncResult asyncResult);
      #endif
      RequestResult AddCustomMap(CustomMap customMap);
      #if SILVERLIGHT
      IAsyncResult Begin_AddCustomMap(AsyncCallback callback, object state, CustomMap customMap);
      RequestResult End_AddCustomMap(IAsyncResult asyncResult);
      #endif
      RequestResult EditCustomMap(CustomMap customMap);
      #if SILVERLIGHT
      IAsyncResult Begin_EditCustomMap(AsyncCallback callback, object state, CustomMap customMap);
      RequestResult End_EditCustomMap(IAsyncResult asyncResult);
      #endif
      TalentDropRaritiesResponse GetTalentDropRarities();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTalentDropRarities(AsyncCallback callback, object state);
      TalentDropRaritiesResponse End_GetTalentDropRarities(IAsyncResult asyncResult);
      #endif
      TalentDropRarityByIdResponse GetTalentDropRarityById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetTalentDropRarityById(AsyncCallback callback, object state, int persistentId);
      TalentDropRarityByIdResponse End_GetTalentDropRarityById(IAsyncResult asyncResult);
      #endif
      RequestResult AddTalentDropRarities(TalentDropRarityEvent dropRarity);
      #if SILVERLIGHT
      IAsyncResult Begin_AddTalentDropRarities(AsyncCallback callback, object state, TalentDropRarityEvent dropRarity);
      RequestResult End_AddTalentDropRarities(IAsyncResult asyncResult);
      #endif
      RequestResult EditTalentDropRarities(TalentDropRarityEvent dropRarity);
      #if SILVERLIGHT
      IAsyncResult Begin_EditTalentDropRarities(AsyncCallback callback, object state, TalentDropRarityEvent dropRarity);
      RequestResult End_EditTalentDropRarities(IAsyncResult asyncResult);
      #endif
      NewsBannersResponse GetNewsBanners();
      #if SILVERLIGHT
      IAsyncResult Begin_GetNewsBanners(AsyncCallback callback, object state);
      NewsBannersResponse End_GetNewsBanners(IAsyncResult asyncResult);
      #endif
      NewsBannerByIdResponse GetNewsBannerById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetNewsBannerById(AsyncCallback callback, object state, int persistentId);
      NewsBannerByIdResponse End_GetNewsBannerById(IAsyncResult asyncResult);
      #endif
      RequestResult AddNewsBanner(NewsBanner banner);
      #if SILVERLIGHT
      IAsyncResult Begin_AddNewsBanner(AsyncCallback callback, object state, NewsBanner banner);
      RequestResult End_AddNewsBanner(IAsyncResult asyncResult);
      #endif
      RequestResult EditNewsBanner(NewsBanner banner);
      #if SILVERLIGHT
      IAsyncResult Begin_EditNewsBanner(AsyncCallback callback, object state, NewsBanner banner);
      RequestResult End_EditNewsBanner(IAsyncResult asyncResult);
      #endif
      SkinGoldPricesResponse GetSkinPrices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSkinPrices(AsyncCallback callback, object state);
      SkinGoldPricesResponse End_GetSkinPrices(IAsyncResult asyncResult);
      #endif
      SkinGoldPriceByIdResponse GetSkinPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetSkinPriceById(AsyncCallback callback, object state, int persistentId);
      SkinGoldPriceByIdResponse End_GetSkinPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddSkinPricesEvent(SkinGoldPriceEvent skinEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddSkinPricesEvent(AsyncCallback callback, object state, SkinGoldPriceEvent skinEvent);
      RequestResult End_AddSkinPricesEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditSkinPricesEvent(SkinGoldPriceEvent skinEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditSkinPricesEvent(AsyncCallback callback, object state, SkinGoldPriceEvent skinEvent);
      RequestResult End_EditSkinPricesEvent(IAsyncResult asyncResult);
      #endif
      HeroPricesResponse GetHeroPrices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetHeroPrices(AsyncCallback callback, object state);
      HeroPricesResponse End_GetHeroPrices(IAsyncResult asyncResult);
      #endif
      HeroPriceByIdResponse GetHeroPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetHeroPriceById(AsyncCallback callback, object state, int persistentId);
      HeroPriceByIdResponse End_GetHeroPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddHeroPricesEvent(HeroPriceEvent skinEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddHeroPricesEvent(AsyncCallback callback, object state, HeroPriceEvent skinEvent);
      RequestResult End_AddHeroPricesEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditHeroPricesEvent(HeroPriceEvent skinEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditHeroPricesEvent(AsyncCallback callback, object state, HeroPriceEvent skinEvent);
      RequestResult End_EditHeroPricesEvent(IAsyncResult asyncResult);
      #endif
      TransmutationTalentsPerPerlResponse GetTransmutationTalentsPerPerl();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTransmutationTalentsPerPerl(AsyncCallback callback, object state);
      TransmutationTalentsPerPerlResponse End_GetTransmutationTalentsPerPerl(IAsyncResult asyncResult);
      #endif
      TransmutationTalentsPerPerlByIdResponse GetTransmutationTalentsPerPerlById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetTransmutationTalentsPerPerlById(AsyncCallback callback, object state, int persistentId);
      TransmutationTalentsPerPerlByIdResponse End_GetTransmutationTalentsPerPerlById(IAsyncResult asyncResult);
      #endif
      RequestResult AddTalentPerPerlEvent(TransmutationTalentsPerPerl talentsPerPerlEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddTalentPerPerlEvent(AsyncCallback callback, object state, TransmutationTalentsPerPerl talentsPerPerlEvent);
      RequestResult End_AddTalentPerPerlEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditTalentPerPerlEvent(TransmutationTalentsPerPerl talentsPerPerlEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditTalentPerPerlEvent(AsyncCallback callback, object state, TransmutationTalentsPerPerl talentsPerPerlEvent);
      RequestResult End_EditTalentPerPerlEvent(IAsyncResult asyncResult);
      #endif
      RerollShopSlotsResponse GetRerollShopSlots();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopSlots(AsyncCallback callback, object state);
      RerollShopSlotsResponse End_GetRerollShopSlots(IAsyncResult asyncResult);
      #endif
      RerollShopSlotsByIdResponse GetRerollShopSlotsById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopSlotsById(AsyncCallback callback, object state, int persistentId);
      RerollShopSlotsByIdResponse End_GetRerollShopSlotsById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopSlotsEvent(RerollShopSlots rerollShopSlotsEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopSlotsEvent(AsyncCallback callback, object state, RerollShopSlots rerollShopSlotsEvent);
      RequestResult End_AddRerollShopSlotsEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopSlotsEvent(RerollShopSlots rerollShopSlotsEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopSlotsEvent(AsyncCallback callback, object state, RerollShopSlots rerollShopSlotsEvent);
      RequestResult End_EditRerollShopSlotsEvent(IAsyncResult asyncResult);
      #endif
      RerollShopPricesResponse GetRerollShopPrices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopPrices(AsyncCallback callback, object state);
      RerollShopPricesResponse End_GetRerollShopPrices(IAsyncResult asyncResult);
      #endif
      RerollShopPriceByIdResponse GetRerollShopPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopPriceById(AsyncCallback callback, object state, int persistentId);
      RerollShopPriceByIdResponse End_GetRerollShopPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopPriceEvent(RerollShopPrice rerollShopPriceEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopPriceEvent(AsyncCallback callback, object state, RerollShopPrice rerollShopPriceEvent);
      RequestResult End_AddRerollShopPriceEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopPriceEvent(RerollShopPrice rerollShopPriceEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopPriceEvent(AsyncCallback callback, object state, RerollShopPrice rerollShopPriceEvent);
      RequestResult End_EditRerollShopPriceEvent(IAsyncResult asyncResult);
      #endif
      ReforgeTalentPriceResponse GetReforgeTalentPrice();
      #if SILVERLIGHT
      IAsyncResult Begin_GetReforgeTalentPrice(AsyncCallback callback, object state);
      ReforgeTalentPriceResponse End_GetReforgeTalentPrice(IAsyncResult asyncResult);
      #endif
      ReforgeTalentPriceByIdResponse GetReforgeTalentPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetReforgeTalentPriceById(AsyncCallback callback, object state, int persistentId);
      ReforgeTalentPriceByIdResponse End_GetReforgeTalentPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddReforgeTalentPriceEvent(ReforgeTalentPrices reforgeTalentPriceEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddReforgeTalentPriceEvent(AsyncCallback callback, object state, ReforgeTalentPrices reforgeTalentPriceEvent);
      RequestResult End_AddReforgeTalentPriceEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditReforgeTalentPriceEvent(ReforgeTalentPrices reforgeTalentPriceEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditReforgeTalentPriceEvent(AsyncCallback callback, object state, ReforgeTalentPrices reforgeTalentPriceEvent);
      RequestResult End_EditReforgeTalentPriceEvent(IAsyncResult asyncResult);
      #endif
      RerollShopGroupPricesResponse GetRerollShopGroupPrices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupPrices(AsyncCallback callback, object state);
      RerollShopGroupPricesResponse End_GetRerollShopGroupPrices(IAsyncResult asyncResult);
      #endif
      RerollShopGroupPriceByIdResponse GetRerollShopGroupPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupPriceById(AsyncCallback callback, object state, int persistentId);
      RerollShopGroupPriceByIdResponse End_GetRerollShopGroupPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopGroupPricesEvent(RerollShopGroupPriceEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopGroupPricesEvent(AsyncCallback callback, object state, RerollShopGroupPriceEvent groupEvent);
      RequestResult End_AddRerollShopGroupPricesEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopGroupPricesEvent(RerollShopGroupPriceEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopGroupPricesEvent(AsyncCallback callback, object state, RerollShopGroupPriceEvent groupEvent);
      RequestResult End_EditRerollShopGroupPricesEvent(IAsyncResult asyncResult);
      #endif
      RerollShopGroupCurrenciesResponse GetRerollShopGroupCurrencies();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupCurrencies(AsyncCallback callback, object state);
      RerollShopGroupCurrenciesResponse End_GetRerollShopGroupCurrencies(IAsyncResult asyncResult);
      #endif
      RerollShopGroupCurrenciesByIdResponse GetRerollShopGroupCurrenciesById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupCurrenciesById(AsyncCallback callback, object state, int persistentId);
      RerollShopGroupCurrenciesByIdResponse End_GetRerollShopGroupCurrenciesById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopGroupCurrenciesEvent(RerollShopGroupCurrenciesEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopGroupCurrenciesEvent(AsyncCallback callback, object state, RerollShopGroupCurrenciesEvent groupEvent);
      RequestResult End_AddRerollShopGroupCurrenciesEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopGroupCurrenciesEvent(RerollShopGroupCurrenciesEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopGroupCurrenciesEvent(AsyncCallback callback, object state, RerollShopGroupCurrenciesEvent groupEvent);
      RequestResult End_EditRerollShopGroupCurrenciesEvent(IAsyncResult asyncResult);
      #endif
      RerollShopSlotPricesResponse GetRerollShopSlotPrices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopSlotPrices(AsyncCallback callback, object state);
      RerollShopSlotPricesResponse End_GetRerollShopSlotPrices(IAsyncResult asyncResult);
      #endif
      RerollShopSlotPriceByIdResponse GetRerollShopSlotPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopSlotPriceById(AsyncCallback callback, object state, int persistentId);
      RerollShopSlotPriceByIdResponse End_GetRerollShopSlotPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopSlotPricesEvent(RerollShopSlotPriceEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopSlotPricesEvent(AsyncCallback callback, object state, RerollShopSlotPriceEvent groupEvent);
      RequestResult End_AddRerollShopSlotPricesEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopSlotPricesEvent(RerollShopSlotPriceEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopSlotPricesEvent(AsyncCallback callback, object state, RerollShopSlotPriceEvent groupEvent);
      RequestResult End_EditRerollShopSlotPricesEvent(IAsyncResult asyncResult);
      #endif
      RerollShopGroupProbabilitiesResponse GetRerollShopGroupProbabilities();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupProbabilities(AsyncCallback callback, object state);
      RerollShopGroupProbabilitiesResponse End_GetRerollShopGroupProbabilities(IAsyncResult asyncResult);
      #endif
      RerollShopGroupProbabilityByIdResponse GetRerollShopGroupProbabilityById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupProbabilityById(AsyncCallback callback, object state, int persistentId);
      RerollShopGroupProbabilityByIdResponse End_GetRerollShopGroupProbabilityById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopGroupProbabilityEvent(RerollShopGroupProbabilityEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopGroupProbabilityEvent(AsyncCallback callback, object state, RerollShopGroupProbabilityEvent groupEvent);
      RequestResult End_AddRerollShopGroupProbabilityEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopGroupProbabilityEvent(RerollShopGroupProbabilityEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopGroupProbabilityEvent(AsyncCallback callback, object state, RerollShopGroupProbabilityEvent groupEvent);
      RequestResult End_EditRerollShopGroupProbabilityEvent(IAsyncResult asyncResult);
      #endif
      RerollShopSlotAmountsResponse GetRerollShopSlotAmount();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopSlotAmount(AsyncCallback callback, object state);
      RerollShopSlotAmountsResponse End_GetRerollShopSlotAmount(IAsyncResult asyncResult);
      #endif
      RerollShopSlotAmountByIdResponse GetRerollShopSlotAmountById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopSlotAmountById(AsyncCallback callback, object state, int persistentId);
      RerollShopSlotAmountByIdResponse End_GetRerollShopSlotAmountById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopSlotAmountsEvent(RerollShopSlotAmountEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopSlotAmountsEvent(AsyncCallback callback, object state, RerollShopSlotAmountEvent groupEvent);
      RequestResult End_AddRerollShopSlotAmountsEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopSlotAmountsEvent(RerollShopSlotAmountEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopSlotAmountsEvent(AsyncCallback callback, object state, RerollShopSlotAmountEvent groupEvent);
      RequestResult End_EditRerollShopSlotAmountsEvent(IAsyncResult asyncResult);
      #endif
      FirstBuyGoldPricesResponse GetFirstBuyPrices();
      #if SILVERLIGHT
      IAsyncResult Begin_GetFirstBuyPrices(AsyncCallback callback, object state);
      FirstBuyGoldPricesResponse End_GetFirstBuyPrices(IAsyncResult asyncResult);
      #endif
      FirstBuyGoldPriceByIdResponse GetFirstBuyPriceById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFirstBuyPriceById(AsyncCallback callback, object state, int persistentId);
      FirstBuyGoldPriceByIdResponse End_GetFirstBuyPriceById(IAsyncResult asyncResult);
      #endif
      RequestResult AddFirstBuyPricesEvent(FirstBuyGoldPriceEvent firstBuyEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddFirstBuyPricesEvent(AsyncCallback callback, object state, FirstBuyGoldPriceEvent firstBuyEvent);
      RequestResult End_AddFirstBuyPricesEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditFirstBuyPricesEvent(FirstBuyGoldPriceEvent firstBuyEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditFirstBuyPricesEvent(AsyncCallback callback, object state, FirstBuyGoldPriceEvent firstBuyEvent);
      RequestResult End_EditFirstBuyPricesEvent(IAsyncResult asyncResult);
      #endif
      RerollShopPremiumNotInactiveResponse GetRerollShopPremiumNotInactive();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopPremiumNotInactive(AsyncCallback callback, object state);
      RerollShopPremiumNotInactiveResponse End_GetRerollShopPremiumNotInactive(IAsyncResult asyncResult);
      #endif
      RerollShopPremiumNotInactiveByIdResponse GetRerollShopPremiumNotInactiveById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopPremiumNotInactiveById(AsyncCallback callback, object state, int persistentId);
      RerollShopPremiumNotInactiveByIdResponse End_GetRerollShopPremiumNotInactiveById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopPremiumNotInactiveEvent(RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopPremiumNotInactiveEvent(AsyncCallback callback, object state, RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent);
      RequestResult End_AddRerollShopPremiumNotInactiveEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopPremiumNotInactiveEvent(RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopPremiumNotInactiveEvent(AsyncCallback callback, object state, RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent);
      RequestResult End_EditRerollShopPremiumNotInactiveEvent(IAsyncResult asyncResult);
      #endif
      RerollShopGroupSlotsResponse GetRerollShopGroupSlots();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupSlots(AsyncCallback callback, object state);
      RerollShopGroupSlotsResponse End_GetRerollShopGroupSlots(IAsyncResult asyncResult);
      #endif
      RerollShopGroupSlotsByIdResponse GetRerollShopGroupSlotsById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopGroupSlotsById(AsyncCallback callback, object state, int persistentId);
      RerollShopGroupSlotsByIdResponse End_GetRerollShopGroupSlotsById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopGroupSlotsEvent(RerollShopGroupSlotsEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopGroupSlotsEvent(AsyncCallback callback, object state, RerollShopGroupSlotsEvent groupEvent);
      RequestResult End_AddRerollShopGroupSlotsEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopGroupSlotsEvent(RerollShopGroupSlotsEvent groupEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopGroupSlotsEvent(AsyncCallback callback, object state, RerollShopGroupSlotsEvent groupEvent);
      RequestResult End_EditRerollShopGroupSlotsEvent(IAsyncResult asyncResult);
      #endif
      RerollShopBannersResponse GetRerollShopBanners();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopBanners(AsyncCallback callback, object state);
      RerollShopBannersResponse End_GetRerollShopBanners(IAsyncResult asyncResult);
      #endif
      RerollShopBannerByIdResponse GetRerollShopBannerById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopBannerById(AsyncCallback callback, object state, int persistentId);
      RerollShopBannerByIdResponse End_GetRerollShopBannerById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopBanner(RerollShopBanner banner);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopBanner(AsyncCallback callback, object state, RerollShopBanner banner);
      RequestResult End_AddRerollShopBanner(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopBanner(RerollShopBanner banner);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopBanner(AsyncCallback callback, object state, RerollShopBanner banner);
      RequestResult End_EditRerollShopBanner(IAsyncResult asyncResult);
      #endif
      RerollShopTooltipsResponse GetRerollShopTooltips();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopTooltips(AsyncCallback callback, object state);
      RerollShopTooltipsResponse End_GetRerollShopTooltips(IAsyncResult asyncResult);
      #endif
      RerollShopTooltipByIdResponse GetRerollShopTooltipById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRerollShopTooltipById(AsyncCallback callback, object state, int persistentId);
      RerollShopTooltipByIdResponse End_GetRerollShopTooltipById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRerollShopTooltip(RerollShopTooltip tooltip);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRerollShopTooltip(AsyncCallback callback, object state, RerollShopTooltip tooltip);
      RequestResult End_AddRerollShopTooltip(IAsyncResult asyncResult);
      #endif
      RequestResult EditRerollShopTooltip(RerollShopTooltip tooltip);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRerollShopTooltip(AsyncCallback callback, object state, RerollShopTooltip tooltip);
      RequestResult End_EditRerollShopTooltip(IAsyncResult asyncResult);
      #endif
      RollEventsResponse GetRollEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRollEvents(AsyncCallback callback, object state);
      RollEventsResponse End_GetRollEvents(IAsyncResult asyncResult);
      #endif
      RollEventByIdResponse GetRollEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRollEventById(AsyncCallback callback, object state, int persistentId);
      RollEventByIdResponse End_GetRollEventById(IAsyncResult asyncResult);
      #endif
      RequestResult AddRollEvent(RollEvent rollEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddRollEvent(AsyncCallback callback, object state, RollEvent rollEvent);
      RequestResult End_AddRollEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditRollEvent(RollEvent rollEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditRollEvent(AsyncCallback callback, object state, RollEvent rollEvent);
      RequestResult End_EditRollEvent(IAsyncResult asyncResult);
      #endif
      QuestEventsResponse GetQuestEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetQuestEvents(AsyncCallback callback, object state);
      QuestEventsResponse End_GetQuestEvents(IAsyncResult asyncResult);
      #endif
      QuestEventByIdResponse GetQuestEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetQuestEventById(AsyncCallback callback, object state, int persistentId);
      QuestEventByIdResponse End_GetQuestEventById(IAsyncResult asyncResult);
      #endif
      RequestResult AddQuestEvent(QuestEvent questEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddQuestEvent(AsyncCallback callback, object state, QuestEvent questEvent);
      RequestResult End_AddQuestEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditQuestEvent(QuestEvent questEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditQuestEvent(AsyncCallback callback, object state, QuestEvent questEvent);
      RequestResult End_EditQuestEvent(IAsyncResult asyncResult);
      #endif
      TradeEventsResponse GetTradeEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTradeEvents(AsyncCallback callback, object state);
      TradeEventsResponse End_GetTradeEvents(IAsyncResult asyncResult);
      #endif
      TradeEventByIdResponse GetTradeEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetTradeEventById(AsyncCallback callback, object state, int persistentId);
      TradeEventByIdResponse End_GetTradeEventById(IAsyncResult asyncResult);
      #endif
      RequestResult AddTradeEvent(TradeEventModel tradeEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddTradeEvent(AsyncCallback callback, object state, TradeEventModel tradeEvent);
      RequestResult End_AddTradeEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditTradeEvent(TradeEventModel tradeEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditTradeEvent(AsyncCallback callback, object state, TradeEventModel tradeEvent);
      RequestResult End_EditTradeEvent(IAsyncResult asyncResult);
      #endif
      SeasonEventsResponse GetSeasonEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSeasonEvents(AsyncCallback callback, object state);
      SeasonEventsResponse End_GetSeasonEvents(IAsyncResult asyncResult);
      #endif
      SeasonEventByIdResponse GetSeasonEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetSeasonEventById(AsyncCallback callback, object state, int persistentId);
      SeasonEventByIdResponse End_GetSeasonEventById(IAsyncResult asyncResult);
      #endif
      RequestResult AddSeasonEvent(SeasonEvent seasonEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddSeasonEvent(AsyncCallback callback, object state, SeasonEvent seasonEvent);
      RequestResult End_AddSeasonEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditSeasonEvent(SeasonEvent seasonEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditSeasonEvent(AsyncCallback callback, object state, SeasonEvent seasonEvent);
      RequestResult End_EditSeasonEvent(IAsyncResult asyncResult);
      #endif
      DonateEventsResponse GetDonateEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetDonateEvents(AsyncCallback callback, object state);
      DonateEventsResponse End_GetDonateEvents(IAsyncResult asyncResult);
      #endif
      DonateEventByIdResponse GetDonateEventById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetDonateEventById(AsyncCallback callback, object state, int persistentId);
      DonateEventByIdResponse End_GetDonateEventById(IAsyncResult asyncResult);
      #endif
      RequestResult AddDonateEvent(DonateEvent donateEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_AddDonateEvent(AsyncCallback callback, object state, DonateEvent donateEvent);
      RequestResult End_AddDonateEvent(IAsyncResult asyncResult);
      #endif
      RequestResult EditDonateEvent(DonateEvent donateEvent);
      #if SILVERLIGHT
      IAsyncResult Begin_EditDonateEvent(AsyncCallback callback, object state, DonateEvent donateEvent);
      RequestResult End_EditDonateEvent(IAsyncResult asyncResult);
      #endif
      GWEventsModelResponse GetGWEvents();
      #if SILVERLIGHT
      IAsyncResult Begin_GetGWEvents(AsyncCallback callback, object state);
      GWEventsModelResponse End_GetGWEvents(IAsyncResult asyncResult);
      #endif
      GWEventsModelByIdResponse GetGWEventsModelById(int persistentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGWEventsModelById(AsyncCallback callback, object state, int persistentId);
      GWEventsModelByIdResponse End_GetGWEventsModelById(IAsyncResult asyncResult);
      #endif
      RequestResult EditGWEvent(GWEventModel gwEventModel, string gmLogin);
      #if SILVERLIGHT
      IAsyncResult Begin_EditGWEvent(AsyncCallback callback, object state, GWEventModel gwEventModel, string gmLogin);
      RequestResult End_EditGWEvent(IAsyncResult asyncResult);
      #endif
      FriendInfoResponse GetAccountFriends(long auid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAccountFriends(AsyncCallback callback, object state, long auid);
      FriendInfoResponse End_GetAccountFriends(IAsyncResult asyncResult);
      #endif
      RequestResult RemoveFriend(long auid, long friendAuid);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveFriend(AsyncCallback callback, object state, long auid, long friendAuid);
      RequestResult End_RemoveFriend(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountBySNUid(AsyncCallback callback, object state, string snid, string snuid)
      {
        return send_GetAccountBySNUid(callback, state, snid, snuid);
      }

      public AccountInfoResponse End_GetAccountBySNUid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountBySNUid();
      }

      #endif

      public AccountInfoResponse GetAccountBySNUid(string snid, string snuid)
      {
        #if !SILVERLIGHT
        send_GetAccountBySNUid(snid, snuid);
        return recv_GetAccountBySNUid();

        #else
        var asyncResult = Begin_GetAccountBySNUid(null, null, snid, snuid);
        return End_GetAccountBySNUid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountBySNUid(AsyncCallback callback, object state, string snid, string snuid)
      #else
      public void send_GetAccountBySNUid(string snid, string snuid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountBySNUid", TMessageType.Call, seqid_));
        GetAccountBySNUid_args args = new GetAccountBySNUid_args();
        args.Snid = snid;
        args.Snuid = snuid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AccountInfoResponse recv_GetAccountBySNUid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountBySNUid_result result = new GetAccountBySNUid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountBySNUid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountByAuid(AsyncCallback callback, object state, long auid)
      {
        return send_GetAccountByAuid(callback, state, auid);
      }

      public AccountInfoResponse End_GetAccountByAuid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountByAuid();
      }

      #endif

      public AccountInfoResponse GetAccountByAuid(long auid)
      {
        #if !SILVERLIGHT
        send_GetAccountByAuid(auid);
        return recv_GetAccountByAuid();

        #else
        var asyncResult = Begin_GetAccountByAuid(null, null, auid);
        return End_GetAccountByAuid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountByAuid(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetAccountByAuid(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountByAuid", TMessageType.Call, seqid_));
        GetAccountByAuid_args args = new GetAccountByAuid_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AccountInfoResponse recv_GetAccountByAuid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountByAuid_result result = new GetAccountByAuid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountByAuid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindNicknameExact(AsyncCallback callback, object state, string nickName)
      {
        return send_FindNicknameExact(callback, state, nickName);
      }

      public NickSnidResponse End_FindNicknameExact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindNicknameExact();
      }

      #endif

      public NickSnidResponse FindNicknameExact(string nickName)
      {
        #if !SILVERLIGHT
        send_FindNicknameExact(nickName);
        return recv_FindNicknameExact();

        #else
        var asyncResult = Begin_FindNicknameExact(null, null, nickName);
        return End_FindNicknameExact(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindNicknameExact(AsyncCallback callback, object state, string nickName)
      #else
      public void send_FindNicknameExact(string nickName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindNicknameExact", TMessageType.Call, seqid_));
        FindNicknameExact_args args = new FindNicknameExact_args();
        args.NickName = nickName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NickSnidResponse recv_FindNicknameExact()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindNicknameExact_result result = new FindNicknameExact_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindNicknameExact failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindNicknamesLike(AsyncCallback callback, object state, string nickName, int page_offset, int page_size)
      {
        return send_FindNicknamesLike(callback, state, nickName, page_offset, page_size);
      }

      public NickSnidListResponse End_FindNicknamesLike(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindNicknamesLike();
      }

      #endif

      public NickSnidListResponse FindNicknamesLike(string nickName, int page_offset, int page_size)
      {
        #if !SILVERLIGHT
        send_FindNicknamesLike(nickName, page_offset, page_size);
        return recv_FindNicknamesLike();

        #else
        var asyncResult = Begin_FindNicknamesLike(null, null, nickName, page_offset, page_size);
        return End_FindNicknamesLike(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindNicknamesLike(AsyncCallback callback, object state, string nickName, int page_offset, int page_size)
      #else
      public void send_FindNicknamesLike(string nickName, int page_offset, int page_size)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindNicknamesLike", TMessageType.Call, seqid_));
        FindNicknamesLike_args args = new FindNicknamesLike_args();
        args.NickName = nickName;
        args.Page_offset = page_offset;
        args.Page_size = page_size;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NickSnidListResponse recv_FindNicknamesLike()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindNicknamesLike_result result = new FindNicknamesLike_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindNicknamesLike failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSocialNetworks(AsyncCallback callback, object state)
      {
        return send_GetSocialNetworks(callback, state);
      }

      public SocialNetworksResponse End_GetSocialNetworks(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSocialNetworks();
      }

      #endif

      public SocialNetworksResponse GetSocialNetworks()
      {
        #if !SILVERLIGHT
        send_GetSocialNetworks();
        return recv_GetSocialNetworks();

        #else
        var asyncResult = Begin_GetSocialNetworks(null, null);
        return End_GetSocialNetworks(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSocialNetworks(AsyncCallback callback, object state)
      #else
      public void send_GetSocialNetworks()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSocialNetworks", TMessageType.Call, seqid_));
        GetSocialNetworks_args args = new GetSocialNetworks_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SocialNetworksResponse recv_GetSocialNetworks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSocialNetworks_result result = new GetSocialNetworks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSocialNetworks failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetLocaleInfoBySNUid(AsyncCallback callback, object state, string snid, string snuid)
      {
        return send_GetLocaleInfoBySNUid(callback, state, snid, snuid);
      }

      public LocaleInfoResponse End_GetLocaleInfoBySNUid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLocaleInfoBySNUid();
      }

      #endif

      public LocaleInfoResponse GetLocaleInfoBySNUid(string snid, string snuid)
      {
        #if !SILVERLIGHT
        send_GetLocaleInfoBySNUid(snid, snuid);
        return recv_GetLocaleInfoBySNUid();

        #else
        var asyncResult = Begin_GetLocaleInfoBySNUid(null, null, snid, snuid);
        return End_GetLocaleInfoBySNUid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLocaleInfoBySNUid(AsyncCallback callback, object state, string snid, string snuid)
      #else
      public void send_GetLocaleInfoBySNUid(string snid, string snuid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetLocaleInfoBySNUid", TMessageType.Call, seqid_));
        GetLocaleInfoBySNUid_args args = new GetLocaleInfoBySNUid_args();
        args.Snid = snid;
        args.Snuid = snuid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LocaleInfoResponse recv_GetLocaleInfoBySNUid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLocaleInfoBySNUid_result result = new GetLocaleInfoBySNUid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLocaleInfoBySNUid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetLocaleInfoByAuid(AsyncCallback callback, object state, long auid)
      {
        return send_GetLocaleInfoByAuid(callback, state, auid);
      }

      public LocaleInfoResponse End_GetLocaleInfoByAuid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLocaleInfoByAuid();
      }

      #endif

      public LocaleInfoResponse GetLocaleInfoByAuid(long auid)
      {
        #if !SILVERLIGHT
        send_GetLocaleInfoByAuid(auid);
        return recv_GetLocaleInfoByAuid();

        #else
        var asyncResult = Begin_GetLocaleInfoByAuid(null, null, auid);
        return End_GetLocaleInfoByAuid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLocaleInfoByAuid(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetLocaleInfoByAuid(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetLocaleInfoByAuid", TMessageType.Call, seqid_));
        GetLocaleInfoByAuid_args args = new GetLocaleInfoByAuid_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LocaleInfoResponse recv_GetLocaleInfoByAuid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLocaleInfoByAuid_result result = new GetLocaleInfoByAuid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLocaleInfoByAuid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindPlayerByNickname(AsyncCallback callback, object state, string nickname)
      {
        return send_FindPlayerByNickname(callback, state, nickname);
      }

      public NickSnidResponse End_FindPlayerByNickname(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindPlayerByNickname();
      }

      #endif

      public NickSnidResponse FindPlayerByNickname(string nickname)
      {
        #if !SILVERLIGHT
        send_FindPlayerByNickname(nickname);
        return recv_FindPlayerByNickname();

        #else
        var asyncResult = Begin_FindPlayerByNickname(null, null, nickname);
        return End_FindPlayerByNickname(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindPlayerByNickname(AsyncCallback callback, object state, string nickname)
      #else
      public void send_FindPlayerByNickname(string nickname)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindPlayerByNickname", TMessageType.Call, seqid_));
        FindPlayerByNickname_args args = new FindPlayerByNickname_args();
        args.Nickname = nickname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NickSnidResponse recv_FindPlayerByNickname()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindPlayerByNickname_result result = new FindPlayerByNickname_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindPlayerByNickname failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindPlayerByEmail(AsyncCallback callback, object state, string email)
      {
        return send_FindPlayerByEmail(callback, state, email);
      }

      public NickSnidResponse End_FindPlayerByEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindPlayerByEmail();
      }

      #endif

      public NickSnidResponse FindPlayerByEmail(string email)
      {
        #if !SILVERLIGHT
        send_FindPlayerByEmail(email);
        return recv_FindPlayerByEmail();

        #else
        var asyncResult = Begin_FindPlayerByEmail(null, null, email);
        return End_FindPlayerByEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindPlayerByEmail(AsyncCallback callback, object state, string email)
      #else
      public void send_FindPlayerByEmail(string email)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindPlayerByEmail", TMessageType.Call, seqid_));
        FindPlayerByEmail_args args = new FindPlayerByEmail_args();
        args.Email = email;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NickSnidResponse recv_FindPlayerByEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindPlayerByEmail_result result = new FindPlayerByEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindPlayerByEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerChangeEmail(AsyncCallback callback, object state, string email, string newEmail, string newPass)
      {
        return send_PlayerChangeEmail(callback, state, email, newEmail, newPass);
      }

      public NickSnidResponse End_PlayerChangeEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerChangeEmail();
      }

      #endif

      public NickSnidResponse PlayerChangeEmail(string email, string newEmail, string newPass)
      {
        #if !SILVERLIGHT
        send_PlayerChangeEmail(email, newEmail, newPass);
        return recv_PlayerChangeEmail();

        #else
        var asyncResult = Begin_PlayerChangeEmail(null, null, email, newEmail, newPass);
        return End_PlayerChangeEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerChangeEmail(AsyncCallback callback, object state, string email, string newEmail, string newPass)
      #else
      public void send_PlayerChangeEmail(string email, string newEmail, string newPass)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerChangeEmail", TMessageType.Call, seqid_));
        PlayerChangeEmail_args args = new PlayerChangeEmail_args();
        args.Email = email;
        args.NewEmail = newEmail;
        args.NewPass = newPass;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NickSnidResponse recv_PlayerChangeEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerChangeEmail_result result = new PlayerChangeEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerChangeEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlayerRemoveNickname(AsyncCallback callback, object state, string email, string nickname)
      {
        return send_PlayerRemoveNickname(callback, state, email, nickname);
      }

      public NickSnidResponse End_PlayerRemoveNickname(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlayerRemoveNickname();
      }

      #endif

      public NickSnidResponse PlayerRemoveNickname(string email, string nickname)
      {
        #if !SILVERLIGHT
        send_PlayerRemoveNickname(email, nickname);
        return recv_PlayerRemoveNickname();

        #else
        var asyncResult = Begin_PlayerRemoveNickname(null, null, email, nickname);
        return End_PlayerRemoveNickname(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlayerRemoveNickname(AsyncCallback callback, object state, string email, string nickname)
      #else
      public void send_PlayerRemoveNickname(string email, string nickname)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlayerRemoveNickname", TMessageType.Call, seqid_));
        PlayerRemoveNickname_args args = new PlayerRemoveNickname_args();
        args.Email = email;
        args.Nickname = nickname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NickSnidResponse recv_PlayerRemoveNickname()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlayerRemoveNickname_result result = new PlayerRemoveNickname_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlayerRemoveNickname failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountQuestsForTalentsByAuid(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountQuestsForTalentsByAuid(callback, state, login);
      }

      public QuestsForTalentsInfoResponse End_GetAccountQuestsForTalentsByAuid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountQuestsForTalentsByAuid();
      }

      #endif

      public QuestsForTalentsInfoResponse GetAccountQuestsForTalentsByAuid(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountQuestsForTalentsByAuid(login);
        return recv_GetAccountQuestsForTalentsByAuid();

        #else
        var asyncResult = Begin_GetAccountQuestsForTalentsByAuid(null, null, login);
        return End_GetAccountQuestsForTalentsByAuid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountQuestsForTalentsByAuid(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountQuestsForTalentsByAuid(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountQuestsForTalentsByAuid", TMessageType.Call, seqid_));
        GetAccountQuestsForTalentsByAuid_args args = new GetAccountQuestsForTalentsByAuid_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QuestsForTalentsInfoResponse recv_GetAccountQuestsForTalentsByAuid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountQuestsForTalentsByAuid_result result = new GetAccountQuestsForTalentsByAuid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountQuestsForTalentsByAuid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditQuestForTalent(AsyncCallback callback, object state, string login, QuestForTalentEdit questForTalentEdit, string gmLogin, string extra_comment)
      {
        return send_EditQuestForTalent(callback, state, login, questForTalentEdit, gmLogin, extra_comment);
      }

      public RequestResult End_EditQuestForTalent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditQuestForTalent();
      }

      #endif

      public RequestResult EditQuestForTalent(string login, QuestForTalentEdit questForTalentEdit, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_EditQuestForTalent(login, questForTalentEdit, gmLogin, extra_comment);
        return recv_EditQuestForTalent();

        #else
        var asyncResult = Begin_EditQuestForTalent(null, null, login, questForTalentEdit, gmLogin, extra_comment);
        return End_EditQuestForTalent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditQuestForTalent(AsyncCallback callback, object state, string login, QuestForTalentEdit questForTalentEdit, string gmLogin, string extra_comment)
      #else
      public void send_EditQuestForTalent(string login, QuestForTalentEdit questForTalentEdit, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditQuestForTalent", TMessageType.Call, seqid_));
        EditQuestForTalent_args args = new EditQuestForTalent_args();
        args.Login = login;
        args.QuestForTalentEdit = questForTalentEdit;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditQuestForTalent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditQuestForTalent_result result = new EditQuestForTalent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditQuestForTalent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditAccount(AsyncCallback callback, object state, string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      {
        return send_EditAccount(callback, state, login, accountEdit, gmLogin, extra_comment);
      }

      public RequestResult End_EditAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditAccount();
      }

      #endif

      public RequestResult EditAccount(string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_EditAccount(login, accountEdit, gmLogin, extra_comment);
        return recv_EditAccount();

        #else
        var asyncResult = Begin_EditAccount(null, null, login, accountEdit, gmLogin, extra_comment);
        return End_EditAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditAccount(AsyncCallback callback, object state, string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      #else
      public void send_EditAccount(string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditAccount", TMessageType.Call, seqid_));
        EditAccount_args args = new EditAccount_args();
        args.Login = login;
        args.AccountEdit = accountEdit;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditAccount_result result = new EditAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditAccountResources(AsyncCallback callback, object state, string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      {
        return send_EditAccountResources(callback, state, login, accountEdit, gmLogin, extra_comment);
      }

      public RequestResult End_EditAccountResources(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditAccountResources();
      }

      #endif

      public RequestResult EditAccountResources(string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_EditAccountResources(login, accountEdit, gmLogin, extra_comment);
        return recv_EditAccountResources();

        #else
        var asyncResult = Begin_EditAccountResources(null, null, login, accountEdit, gmLogin, extra_comment);
        return End_EditAccountResources(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditAccountResources(AsyncCallback callback, object state, string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      #else
      public void send_EditAccountResources(string login, AccountEdit accountEdit, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditAccountResources", TMessageType.Call, seqid_));
        EditAccountResources_args args = new EditAccountResources_args();
        args.Login = login;
        args.AccountEdit = accountEdit;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditAccountResources()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditAccountResources_result result = new EditAccountResources_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditAccountResources failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountLibrary(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountLibrary(callback, state, login);
      }

      public LibraryResponse End_GetAccountLibrary(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountLibrary();
      }

      #endif

      public LibraryResponse GetAccountLibrary(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountLibrary(login);
        return recv_GetAccountLibrary();

        #else
        var asyncResult = Begin_GetAccountLibrary(null, null, login);
        return End_GetAccountLibrary(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountLibrary(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountLibrary(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountLibrary", TMessageType.Call, seqid_));
        GetAccountLibrary_args args = new GetAccountLibrary_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LibraryResponse recv_GetAccountLibrary()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountLibrary_result result = new GetAccountLibrary_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountLibrary failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGameSession(AsyncCallback callback, object state, int sessionid)
      {
        return send_GetGameSession(callback, state, sessionid);
      }

      public GameSessionShortInfo End_GetGameSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGameSession();
      }

      #endif

      public GameSessionShortInfo GetGameSession(int sessionid)
      {
        #if !SILVERLIGHT
        send_GetGameSession(sessionid);
        return recv_GetGameSession();

        #else
        var asyncResult = Begin_GetGameSession(null, null, sessionid);
        return End_GetGameSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGameSession(AsyncCallback callback, object state, int sessionid)
      #else
      public void send_GetGameSession(int sessionid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGameSession", TMessageType.Call, seqid_));
        GetGameSession_args args = new GetGameSession_args();
        args.Sessionid = sessionid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GameSessionShortInfo recv_GetGameSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGameSession_result result = new GetGameSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGameSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBruteForceAccount(AsyncCallback callback, object state, string email)
      {
        return send_GetBruteForceAccount(callback, state, email);
      }

      public BruteForceAccountShortInfo End_GetBruteForceAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBruteForceAccount();
      }

      #endif

      public BruteForceAccountShortInfo GetBruteForceAccount(string email)
      {
        #if !SILVERLIGHT
        send_GetBruteForceAccount(email);
        return recv_GetBruteForceAccount();

        #else
        var asyncResult = Begin_GetBruteForceAccount(null, null, email);
        return End_GetBruteForceAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBruteForceAccount(AsyncCallback callback, object state, string email)
      #else
      public void send_GetBruteForceAccount(string email)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBruteForceAccount", TMessageType.Call, seqid_));
        GetBruteForceAccount_args args = new GetBruteForceAccount_args();
        args.Email = email;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BruteForceAccountShortInfo recv_GetBruteForceAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBruteForceAccount_result result = new GetBruteForceAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBruteForceAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnBanBruteForceAccount(AsyncCallback callback, object state, string email)
      {
        return send_UnBanBruteForceAccount(callback, state, email);
      }

      public RequestResult End_UnBanBruteForceAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnBanBruteForceAccount();
      }

      #endif

      public RequestResult UnBanBruteForceAccount(string email)
      {
        #if !SILVERLIGHT
        send_UnBanBruteForceAccount(email);
        return recv_UnBanBruteForceAccount();

        #else
        var asyncResult = Begin_UnBanBruteForceAccount(null, null, email);
        return End_UnBanBruteForceAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnBanBruteForceAccount(AsyncCallback callback, object state, string email)
      #else
      public void send_UnBanBruteForceAccount(string email)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnBanBruteForceAccount", TMessageType.Call, seqid_));
        UnBanBruteForceAccount_args args = new UnBanBruteForceAccount_args();
        args.Email = email;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UnBanBruteForceAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnBanBruteForceAccount_result result = new UnBanBruteForceAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnBanBruteForceAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBannedIp(AsyncCallback callback, object state, int limit, int skip)
      {
        return send_GetBannedIp(callback, state, limit, skip);
      }

      public BannedIpFullListInfo End_GetBannedIp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBannedIp();
      }

      #endif

      public BannedIpFullListInfo GetBannedIp(int limit, int skip)
      {
        #if !SILVERLIGHT
        send_GetBannedIp(limit, skip);
        return recv_GetBannedIp();

        #else
        var asyncResult = Begin_GetBannedIp(null, null, limit, skip);
        return End_GetBannedIp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBannedIp(AsyncCallback callback, object state, int limit, int skip)
      #else
      public void send_GetBannedIp(int limit, int skip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBannedIp", TMessageType.Call, seqid_));
        GetBannedIp_args args = new GetBannedIp_args();
        args.Limit = limit;
        args.Skip = skip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BannedIpFullListInfo recv_GetBannedIp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBannedIp_result result = new GetBannedIp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBannedIp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnBanIp(AsyncCallback callback, object state, string ip)
      {
        return send_UnBanIp(callback, state, ip);
      }

      public RequestResult End_UnBanIp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnBanIp();
      }

      #endif

      public RequestResult UnBanIp(string ip)
      {
        #if !SILVERLIGHT
        send_UnBanIp(ip);
        return recv_UnBanIp();

        #else
        var asyncResult = Begin_UnBanIp(null, null, ip);
        return End_UnBanIp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnBanIp(AsyncCallback callback, object state, string ip)
      #else
      public void send_UnBanIp(string ip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnBanIp", TMessageType.Call, seqid_));
        UnBanIp_args args = new UnBanIp_args();
        args.Ip = ip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UnBanIp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnBanIp_result result = new UnBanIp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnBanIp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditFreeChanges(AsyncCallback callback, object state, string login, string gmLogin, int nickChanges, int fractionChanges)
      {
        return send_EditFreeChanges(callback, state, login, gmLogin, nickChanges, fractionChanges);
      }

      public RequestResult End_EditFreeChanges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditFreeChanges();
      }

      #endif

      public RequestResult EditFreeChanges(string login, string gmLogin, int nickChanges, int fractionChanges)
      {
        #if !SILVERLIGHT
        send_EditFreeChanges(login, gmLogin, nickChanges, fractionChanges);
        return recv_EditFreeChanges();

        #else
        var asyncResult = Begin_EditFreeChanges(null, null, login, gmLogin, nickChanges, fractionChanges);
        return End_EditFreeChanges(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditFreeChanges(AsyncCallback callback, object state, string login, string gmLogin, int nickChanges, int fractionChanges)
      #else
      public void send_EditFreeChanges(string login, string gmLogin, int nickChanges, int fractionChanges)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditFreeChanges", TMessageType.Call, seqid_));
        EditFreeChanges_args args = new EditFreeChanges_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.NickChanges = nickChanges;
        args.FractionChanges = fractionChanges;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditFreeChanges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditFreeChanges_result result = new EditFreeChanges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditFreeChanges failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddResources(AsyncCallback callback, object state, long auid, string ResourceType, int amount)
      {
        return send_AddResources(callback, state, auid, ResourceType, amount);
      }

      public RequestResult End_AddResources(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddResources();
      }

      #endif

      public RequestResult AddResources(long auid, string ResourceType, int amount)
      {
        #if !SILVERLIGHT
        send_AddResources(auid, ResourceType, amount);
        return recv_AddResources();

        #else
        var asyncResult = Begin_AddResources(null, null, auid, ResourceType, amount);
        return End_AddResources(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddResources(AsyncCallback callback, object state, long auid, string ResourceType, int amount)
      #else
      public void send_AddResources(long auid, string ResourceType, int amount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddResources", TMessageType.Call, seqid_));
        AddResources_args args = new AddResources_args();
        args.Auid = auid;
        args.ResourceType = ResourceType;
        args.Amount = amount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddResources()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddResources_result result = new AddResources_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddResources failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountHeroes(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountHeroes(callback, state, login);
      }

      public HeroesResponse End_GetAccountHeroes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountHeroes();
      }

      #endif

      public HeroesResponse GetAccountHeroes(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountHeroes(login);
        return recv_GetAccountHeroes();

        #else
        var asyncResult = Begin_GetAccountHeroes(null, null, login);
        return End_GetAccountHeroes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountHeroes(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountHeroes(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountHeroes", TMessageType.Call, seqid_));
        GetAccountHeroes_args args = new GetAccountHeroes_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HeroesResponse recv_GetAccountHeroes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountHeroes_result result = new GetAccountHeroes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountHeroes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnlockHero(AsyncCallback callback, object state, string login, int heroClassId, string gmLogin, string extra_comment)
      {
        return send_UnlockHero(callback, state, login, heroClassId, gmLogin, extra_comment);
      }

      public RequestResult End_UnlockHero(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnlockHero();
      }

      #endif

      public RequestResult UnlockHero(string login, int heroClassId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_UnlockHero(login, heroClassId, gmLogin, extra_comment);
        return recv_UnlockHero();

        #else
        var asyncResult = Begin_UnlockHero(null, null, login, heroClassId, gmLogin, extra_comment);
        return End_UnlockHero(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnlockHero(AsyncCallback callback, object state, string login, int heroClassId, string gmLogin, string extra_comment)
      #else
      public void send_UnlockHero(string login, int heroClassId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnlockHero", TMessageType.Call, seqid_));
        UnlockHero_args args = new UnlockHero_args();
        args.Login = login;
        args.HeroClassId = heroClassId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UnlockHero()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnlockHero_result result = new UnlockHero_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnlockHero failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditHero(AsyncCallback callback, object state, string login, HeroInfo heroEdit, string gmLogin)
      {
        return send_EditHero(callback, state, login, heroEdit, gmLogin);
      }

      public RequestResult End_EditHero(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditHero();
      }

      #endif

      public RequestResult EditHero(string login, HeroInfo heroEdit, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditHero(login, heroEdit, gmLogin);
        return recv_EditHero();

        #else
        var asyncResult = Begin_EditHero(null, null, login, heroEdit, gmLogin);
        return End_EditHero(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditHero(AsyncCallback callback, object state, string login, HeroInfo heroEdit, string gmLogin)
      #else
      public void send_EditHero(string login, HeroInfo heroEdit, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditHero", TMessageType.Call, seqid_));
        EditHero_args args = new EditHero_args();
        args.Login = login;
        args.HeroEdit = heroEdit;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditHero()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditHero_result result = new EditHero_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditHero failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LockHero(AsyncCallback callback, object state, string login, long heroInstanceId, string gmLogin)
      {
        return send_LockHero(callback, state, login, heroInstanceId, gmLogin);
      }

      public RequestResult End_LockHero(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_LockHero();
      }

      #endif

      public RequestResult LockHero(string login, long heroInstanceId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_LockHero(login, heroInstanceId, gmLogin);
        return recv_LockHero();

        #else
        var asyncResult = Begin_LockHero(null, null, login, heroInstanceId, gmLogin);
        return End_LockHero(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LockHero(AsyncCallback callback, object state, string login, long heroInstanceId, string gmLogin)
      #else
      public void send_LockHero(string login, long heroInstanceId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LockHero", TMessageType.Call, seqid_));
        LockHero_args args = new LockHero_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_LockHero()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LockHero_result result = new LockHero_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LockHero failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditSeasonAwards(AsyncCallback callback, object state, string login, SeasonAwards awardEdit, string gmLogin)
      {
        return send_EditSeasonAwards(callback, state, login, awardEdit, gmLogin);
      }

      public RequestResult End_EditSeasonAwards(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditSeasonAwards();
      }

      #endif

      public RequestResult EditSeasonAwards(string login, SeasonAwards awardEdit, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditSeasonAwards(login, awardEdit, gmLogin);
        return recv_EditSeasonAwards();

        #else
        var asyncResult = Begin_EditSeasonAwards(null, null, login, awardEdit, gmLogin);
        return End_EditSeasonAwards(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditSeasonAwards(AsyncCallback callback, object state, string login, SeasonAwards awardEdit, string gmLogin)
      #else
      public void send_EditSeasonAwards(string login, SeasonAwards awardEdit, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditSeasonAwards", TMessageType.Call, seqid_));
        EditSeasonAwards_args args = new EditSeasonAwards_args();
        args.Login = login;
        args.AwardEdit = awardEdit;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditSeasonAwards()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditSeasonAwards_result result = new EditSeasonAwards_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditSeasonAwards failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditSeasonInfo(AsyncCallback callback, object state, string login, long heroInstanceId, SeasonInfo seasonEdit, string gmLogin)
      {
        return send_EditSeasonInfo(callback, state, login, heroInstanceId, seasonEdit, gmLogin);
      }

      public RequestResult End_EditSeasonInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditSeasonInfo();
      }

      #endif

      public RequestResult EditSeasonInfo(string login, long heroInstanceId, SeasonInfo seasonEdit, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditSeasonInfo(login, heroInstanceId, seasonEdit, gmLogin);
        return recv_EditSeasonInfo();

        #else
        var asyncResult = Begin_EditSeasonInfo(null, null, login, heroInstanceId, seasonEdit, gmLogin);
        return End_EditSeasonInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditSeasonInfo(AsyncCallback callback, object state, string login, long heroInstanceId, SeasonInfo seasonEdit, string gmLogin)
      #else
      public void send_EditSeasonInfo(string login, long heroInstanceId, SeasonInfo seasonEdit, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditSeasonInfo", TMessageType.Call, seqid_));
        EditSeasonInfo_args args = new EditSeasonInfo_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.SeasonEdit = seasonEdit;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditSeasonInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditSeasonInfo_result result = new EditSeasonInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditSeasonInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetHeroTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId)
      {
        return send_GetHeroTalentSet(callback, state, login, heroInstanceId);
      }

      public TalentSetResponse End_GetHeroTalentSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHeroTalentSet();
      }

      #endif

      public TalentSetResponse GetHeroTalentSet(string login, long heroInstanceId)
      {
        #if !SILVERLIGHT
        send_GetHeroTalentSet(login, heroInstanceId);
        return recv_GetHeroTalentSet();

        #else
        var asyncResult = Begin_GetHeroTalentSet(null, null, login, heroInstanceId);
        return End_GetHeroTalentSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHeroTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId)
      #else
      public void send_GetHeroTalentSet(string login, long heroInstanceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetHeroTalentSet", TMessageType.Call, seqid_));
        GetHeroTalentSet_args args = new GetHeroTalentSet_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TalentSetResponse recv_GetHeroTalentSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHeroTalentSet_result result = new GetHeroTalentSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHeroTalentSet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetHeroSeasonsInfo(AsyncCallback callback, object state, string login, long heroInstanceId)
      {
        return send_GetHeroSeasonsInfo(callback, state, login, heroInstanceId);
      }

      public SeasonInfoResponse End_GetHeroSeasonsInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHeroSeasonsInfo();
      }

      #endif

      public SeasonInfoResponse GetHeroSeasonsInfo(string login, long heroInstanceId)
      {
        #if !SILVERLIGHT
        send_GetHeroSeasonsInfo(login, heroInstanceId);
        return recv_GetHeroSeasonsInfo();

        #else
        var asyncResult = Begin_GetHeroSeasonsInfo(null, null, login, heroInstanceId);
        return End_GetHeroSeasonsInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHeroSeasonsInfo(AsyncCallback callback, object state, string login, long heroInstanceId)
      #else
      public void send_GetHeroSeasonsInfo(string login, long heroInstanceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetHeroSeasonsInfo", TMessageType.Call, seqid_));
        GetHeroSeasonsInfo_args args = new GetHeroSeasonsInfo_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SeasonInfoResponse recv_GetHeroSeasonsInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHeroSeasonsInfo_result result = new GetHeroSeasonsInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHeroSeasonsInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddTalent(AsyncCallback callback, object state, string login, int talentClassId, string gmLogin, string extra_comment)
      {
        return send_AddTalent(callback, state, login, talentClassId, gmLogin, extra_comment);
      }

      public RequestResult End_AddTalent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddTalent();
      }

      #endif

      public RequestResult AddTalent(string login, int talentClassId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_AddTalent(login, talentClassId, gmLogin, extra_comment);
        return recv_AddTalent();

        #else
        var asyncResult = Begin_AddTalent(null, null, login, talentClassId, gmLogin, extra_comment);
        return End_AddTalent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddTalent(AsyncCallback callback, object state, string login, int talentClassId, string gmLogin, string extra_comment)
      #else
      public void send_AddTalent(string login, int talentClassId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddTalent", TMessageType.Call, seqid_));
        AddTalent_args args = new AddTalent_args();
        args.Login = login;
        args.TalentClassId = talentClassId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddTalent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddTalent_result result = new AddTalent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTalent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddTalents(AsyncCallback callback, object state, string login, List<int> talentIds, string gmLogin, string extra_comment)
      {
        return send_AddTalents(callback, state, login, talentIds, gmLogin, extra_comment);
      }

      public RequestResult End_AddTalents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddTalents();
      }

      #endif

      public RequestResult AddTalents(string login, List<int> talentIds, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_AddTalents(login, talentIds, gmLogin, extra_comment);
        return recv_AddTalents();

        #else
        var asyncResult = Begin_AddTalents(null, null, login, talentIds, gmLogin, extra_comment);
        return End_AddTalents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddTalents(AsyncCallback callback, object state, string login, List<int> talentIds, string gmLogin, string extra_comment)
      #else
      public void send_AddTalents(string login, List<int> talentIds, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddTalents", TMessageType.Call, seqid_));
        AddTalents_args args = new AddTalents_args();
        args.Login = login;
        args.TalentIds = talentIds;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddTalents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddTalents_result result = new AddTalents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTalents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditTalent(AsyncCallback callback, object state, string login, TalentInfo talentEdit, string gmLogin)
      {
        return send_EditTalent(callback, state, login, talentEdit, gmLogin);
      }

      public RequestResult End_EditTalent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditTalent();
      }

      #endif

      public RequestResult EditTalent(string login, TalentInfo talentEdit, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditTalent(login, talentEdit, gmLogin);
        return recv_EditTalent();

        #else
        var asyncResult = Begin_EditTalent(null, null, login, talentEdit, gmLogin);
        return End_EditTalent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditTalent(AsyncCallback callback, object state, string login, TalentInfo talentEdit, string gmLogin)
      #else
      public void send_EditTalent(string login, TalentInfo talentEdit, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditTalent", TMessageType.Call, seqid_));
        EditTalent_args args = new EditTalent_args();
        args.Login = login;
        args.TalentEdit = talentEdit;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditTalent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditTalent_result result = new EditTalent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditTalent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteTalent(AsyncCallback callback, object state, string login, long talentInstanceId, string gmLogin)
      {
        return send_DeleteTalent(callback, state, login, talentInstanceId, gmLogin);
      }

      public RequestResult End_DeleteTalent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteTalent();
      }

      #endif

      public RequestResult DeleteTalent(string login, long talentInstanceId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_DeleteTalent(login, talentInstanceId, gmLogin);
        return recv_DeleteTalent();

        #else
        var asyncResult = Begin_DeleteTalent(null, null, login, talentInstanceId, gmLogin);
        return End_DeleteTalent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteTalent(AsyncCallback callback, object state, string login, long talentInstanceId, string gmLogin)
      #else
      public void send_DeleteTalent(string login, long talentInstanceId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteTalent", TMessageType.Call, seqid_));
        DeleteTalent_args args = new DeleteTalent_args();
        args.Login = login;
        args.TalentInstanceId = talentInstanceId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteTalent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteTalent_result result = new DeleteTalent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteTalent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MoveTalentFromTalentSetToLibrary(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, string gmLogin)
      {
        return send_MoveTalentFromTalentSetToLibrary(callback, state, login, heroInstanceId, talentInstanceId, gmLogin);
      }

      public RequestResult End_MoveTalentFromTalentSetToLibrary(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MoveTalentFromTalentSetToLibrary();
      }

      #endif

      public RequestResult MoveTalentFromTalentSetToLibrary(string login, long heroInstanceId, long talentInstanceId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_MoveTalentFromTalentSetToLibrary(login, heroInstanceId, talentInstanceId, gmLogin);
        return recv_MoveTalentFromTalentSetToLibrary();

        #else
        var asyncResult = Begin_MoveTalentFromTalentSetToLibrary(null, null, login, heroInstanceId, talentInstanceId, gmLogin);
        return End_MoveTalentFromTalentSetToLibrary(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MoveTalentFromTalentSetToLibrary(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, string gmLogin)
      #else
      public void send_MoveTalentFromTalentSetToLibrary(string login, long heroInstanceId, long talentInstanceId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MoveTalentFromTalentSetToLibrary", TMessageType.Call, seqid_));
        MoveTalentFromTalentSetToLibrary_args args = new MoveTalentFromTalentSetToLibrary_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.TalentInstanceId = talentInstanceId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_MoveTalentFromTalentSetToLibrary()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MoveTalentFromTalentSetToLibrary_result result = new MoveTalentFromTalentSetToLibrary_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MoveTalentFromTalentSetToLibrary failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MoveTalentFromLibraryToTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, int slot, string gmLogin)
      {
        return send_MoveTalentFromLibraryToTalentSet(callback, state, login, heroInstanceId, talentInstanceId, slot, gmLogin);
      }

      public RequestResult End_MoveTalentFromLibraryToTalentSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MoveTalentFromLibraryToTalentSet();
      }

      #endif

      public RequestResult MoveTalentFromLibraryToTalentSet(string login, long heroInstanceId, long talentInstanceId, int slot, string gmLogin)
      {
        #if !SILVERLIGHT
        send_MoveTalentFromLibraryToTalentSet(login, heroInstanceId, talentInstanceId, slot, gmLogin);
        return recv_MoveTalentFromLibraryToTalentSet();

        #else
        var asyncResult = Begin_MoveTalentFromLibraryToTalentSet(null, null, login, heroInstanceId, talentInstanceId, slot, gmLogin);
        return End_MoveTalentFromLibraryToTalentSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MoveTalentFromLibraryToTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, int slot, string gmLogin)
      #else
      public void send_MoveTalentFromLibraryToTalentSet(string login, long heroInstanceId, long talentInstanceId, int slot, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MoveTalentFromLibraryToTalentSet", TMessageType.Call, seqid_));
        MoveTalentFromLibraryToTalentSet_args args = new MoveTalentFromLibraryToTalentSet_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.TalentInstanceId = talentInstanceId;
        args.Slot = slot;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_MoveTalentFromLibraryToTalentSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MoveTalentFromLibraryToTalentSet_result result = new MoveTalentFromLibraryToTalentSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MoveTalentFromLibraryToTalentSet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveTalentFromTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, int talentSetId, string gmLogin)
      {
        return send_RemoveTalentFromTalentSet(callback, state, login, heroInstanceId, talentInstanceId, talentSetId, gmLogin);
      }

      public RequestResult End_RemoveTalentFromTalentSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveTalentFromTalentSet();
      }

      #endif

      public RequestResult RemoveTalentFromTalentSet(string login, long heroInstanceId, long talentInstanceId, int talentSetId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_RemoveTalentFromTalentSet(login, heroInstanceId, talentInstanceId, talentSetId, gmLogin);
        return recv_RemoveTalentFromTalentSet();

        #else
        var asyncResult = Begin_RemoveTalentFromTalentSet(null, null, login, heroInstanceId, talentInstanceId, talentSetId, gmLogin);
        return End_RemoveTalentFromTalentSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveTalentFromTalentSet(AsyncCallback callback, object state, string login, long heroInstanceId, long talentInstanceId, int talentSetId, string gmLogin)
      #else
      public void send_RemoveTalentFromTalentSet(string login, long heroInstanceId, long talentInstanceId, int talentSetId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveTalentFromTalentSet", TMessageType.Call, seqid_));
        RemoveTalentFromTalentSet_args args = new RemoveTalentFromTalentSet_args();
        args.Login = login;
        args.HeroInstanceId = heroInstanceId;
        args.TalentInstanceId = talentInstanceId;
        args.TalentSetId = talentSetId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveTalentFromTalentSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveTalentFromTalentSet_result result = new RemoveTalentFromTalentSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveTalentFromTalentSet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountSkins(AsyncCallback callback, object state, long auid)
      {
        return send_GetAccountSkins(callback, state, auid);
      }

      public SkinsResponse End_GetAccountSkins(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountSkins();
      }

      #endif

      public SkinsResponse GetAccountSkins(long auid)
      {
        #if !SILVERLIGHT
        send_GetAccountSkins(auid);
        return recv_GetAccountSkins();

        #else
        var asyncResult = Begin_GetAccountSkins(null, null, auid);
        return End_GetAccountSkins(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountSkins(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetAccountSkins(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountSkins", TMessageType.Call, seqid_));
        GetAccountSkins_args args = new GetAccountSkins_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkinsResponse recv_GetAccountSkins()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountSkins_result result = new GetAccountSkins_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountSkins failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddSkin(AsyncCallback callback, object state, long auid, string skinPersistentId, string gmLogin, string extra_comment)
      {
        return send_AddSkin(callback, state, auid, skinPersistentId, gmLogin, extra_comment);
      }

      public RequestResult End_AddSkin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddSkin();
      }

      #endif

      public RequestResult AddSkin(long auid, string skinPersistentId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_AddSkin(auid, skinPersistentId, gmLogin, extra_comment);
        return recv_AddSkin();

        #else
        var asyncResult = Begin_AddSkin(null, null, auid, skinPersistentId, gmLogin, extra_comment);
        return End_AddSkin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddSkin(AsyncCallback callback, object state, long auid, string skinPersistentId, string gmLogin, string extra_comment)
      #else
      public void send_AddSkin(long auid, string skinPersistentId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddSkin", TMessageType.Call, seqid_));
        AddSkin_args args = new AddSkin_args();
        args.Auid = auid;
        args.SkinPersistentId = skinPersistentId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddSkin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSkin_result result = new AddSkin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSkin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteSkin(AsyncCallback callback, object state, long auid, string skinPersistentId, string gmLogin, string extra_comment)
      {
        return send_DeleteSkin(callback, state, auid, skinPersistentId, gmLogin, extra_comment);
      }

      public RequestResult End_DeleteSkin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteSkin();
      }

      #endif

      public RequestResult DeleteSkin(long auid, string skinPersistentId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_DeleteSkin(auid, skinPersistentId, gmLogin, extra_comment);
        return recv_DeleteSkin();

        #else
        var asyncResult = Begin_DeleteSkin(null, null, auid, skinPersistentId, gmLogin, extra_comment);
        return End_DeleteSkin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteSkin(AsyncCallback callback, object state, long auid, string skinPersistentId, string gmLogin, string extra_comment)
      #else
      public void send_DeleteSkin(long auid, string skinPersistentId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteSkin", TMessageType.Call, seqid_));
        DeleteSkin_args args = new DeleteSkin_args();
        args.Auid = auid;
        args.SkinPersistentId = skinPersistentId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteSkin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteSkin_result result = new DeleteSkin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteSkin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountTalentUpgradeEntities(AsyncCallback callback, object state, long auid)
      {
        return send_GetAccountTalentUpgradeEntities(callback, state, auid);
      }

      public TalentUpgradeEntitiesResponse End_GetAccountTalentUpgradeEntities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountTalentUpgradeEntities();
      }

      #endif

      public TalentUpgradeEntitiesResponse GetAccountTalentUpgradeEntities(long auid)
      {
        #if !SILVERLIGHT
        send_GetAccountTalentUpgradeEntities(auid);
        return recv_GetAccountTalentUpgradeEntities();

        #else
        var asyncResult = Begin_GetAccountTalentUpgradeEntities(null, null, auid);
        return End_GetAccountTalentUpgradeEntities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountTalentUpgradeEntities(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetAccountTalentUpgradeEntities(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountTalentUpgradeEntities", TMessageType.Call, seqid_));
        GetAccountTalentUpgradeEntities_args args = new GetAccountTalentUpgradeEntities_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TalentUpgradeEntitiesResponse recv_GetAccountTalentUpgradeEntities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountTalentUpgradeEntities_result result = new GetAccountTalentUpgradeEntities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountTalentUpgradeEntities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteTalentUpgradeEntity(AsyncCallback callback, object state, long auid, long instanceId, string gmLogin, string extra_comment)
      {
        return send_DeleteTalentUpgradeEntity(callback, state, auid, instanceId, gmLogin, extra_comment);
      }

      public RequestResult End_DeleteTalentUpgradeEntity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteTalentUpgradeEntity();
      }

      #endif

      public RequestResult DeleteTalentUpgradeEntity(long auid, long instanceId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_DeleteTalentUpgradeEntity(auid, instanceId, gmLogin, extra_comment);
        return recv_DeleteTalentUpgradeEntity();

        #else
        var asyncResult = Begin_DeleteTalentUpgradeEntity(null, null, auid, instanceId, gmLogin, extra_comment);
        return End_DeleteTalentUpgradeEntity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteTalentUpgradeEntity(AsyncCallback callback, object state, long auid, long instanceId, string gmLogin, string extra_comment)
      #else
      public void send_DeleteTalentUpgradeEntity(long auid, long instanceId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteTalentUpgradeEntity", TMessageType.Call, seqid_));
        DeleteTalentUpgradeEntity_args args = new DeleteTalentUpgradeEntity_args();
        args.Auid = auid;
        args.InstanceId = instanceId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteTalentUpgradeEntity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteTalentUpgradeEntity_result result = new DeleteTalentUpgradeEntity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteTalentUpgradeEntity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountBuildings(AsyncCallback callback, object state, long auid)
      {
        return send_GetAccountBuildings(callback, state, auid);
      }

      public BuildingsInfoResponse End_GetAccountBuildings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountBuildings();
      }

      #endif

      public BuildingsInfoResponse GetAccountBuildings(long auid)
      {
        #if !SILVERLIGHT
        send_GetAccountBuildings(auid);
        return recv_GetAccountBuildings();

        #else
        var asyncResult = Begin_GetAccountBuildings(null, null, auid);
        return End_GetAccountBuildings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountBuildings(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetAccountBuildings(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountBuildings", TMessageType.Call, seqid_));
        GetAccountBuildings_args args = new GetAccountBuildings_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BuildingsInfoResponse recv_GetAccountBuildings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountBuildings_result result = new GetAccountBuildings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountBuildings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MoveBuildingToStorage(AsyncCallback callback, object state, long auid, long buildingInstanceId, string gmLogin)
      {
        return send_MoveBuildingToStorage(callback, state, auid, buildingInstanceId, gmLogin);
      }

      public RequestResult End_MoveBuildingToStorage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MoveBuildingToStorage();
      }

      #endif

      public RequestResult MoveBuildingToStorage(long auid, long buildingInstanceId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_MoveBuildingToStorage(auid, buildingInstanceId, gmLogin);
        return recv_MoveBuildingToStorage();

        #else
        var asyncResult = Begin_MoveBuildingToStorage(null, null, auid, buildingInstanceId, gmLogin);
        return End_MoveBuildingToStorage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MoveBuildingToStorage(AsyncCallback callback, object state, long auid, long buildingInstanceId, string gmLogin)
      #else
      public void send_MoveBuildingToStorage(long auid, long buildingInstanceId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MoveBuildingToStorage", TMessageType.Call, seqid_));
        MoveBuildingToStorage_args args = new MoveBuildingToStorage_args();
        args.Auid = auid;
        args.BuildingInstanceId = buildingInstanceId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_MoveBuildingToStorage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MoveBuildingToStorage_result result = new MoveBuildingToStorage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MoveBuildingToStorage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddBuilding(AsyncCallback callback, object state, long auid, int buildingClassId, int level, string gmLogin, string extra_comment)
      {
        return send_AddBuilding(callback, state, auid, buildingClassId, level, gmLogin, extra_comment);
      }

      public RequestResult End_AddBuilding(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddBuilding();
      }

      #endif

      public RequestResult AddBuilding(long auid, int buildingClassId, int level, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_AddBuilding(auid, buildingClassId, level, gmLogin, extra_comment);
        return recv_AddBuilding();

        #else
        var asyncResult = Begin_AddBuilding(null, null, auid, buildingClassId, level, gmLogin, extra_comment);
        return End_AddBuilding(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddBuilding(AsyncCallback callback, object state, long auid, int buildingClassId, int level, string gmLogin, string extra_comment)
      #else
      public void send_AddBuilding(long auid, int buildingClassId, int level, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddBuilding", TMessageType.Call, seqid_));
        AddBuilding_args args = new AddBuilding_args();
        args.Auid = auid;
        args.BuildingClassId = buildingClassId;
        args.Level = level;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddBuilding()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddBuilding_result result = new AddBuilding_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddBuilding failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteBuilding(AsyncCallback callback, object state, long auid, long buildingInstanceId, string gmLogin)
      {
        return send_DeleteBuilding(callback, state, auid, buildingInstanceId, gmLogin);
      }

      public RequestResult End_DeleteBuilding(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteBuilding();
      }

      #endif

      public RequestResult DeleteBuilding(long auid, long buildingInstanceId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_DeleteBuilding(auid, buildingInstanceId, gmLogin);
        return recv_DeleteBuilding();

        #else
        var asyncResult = Begin_DeleteBuilding(null, null, auid, buildingInstanceId, gmLogin);
        return End_DeleteBuilding(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteBuilding(AsyncCallback callback, object state, long auid, long buildingInstanceId, string gmLogin)
      #else
      public void send_DeleteBuilding(long auid, long buildingInstanceId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteBuilding", TMessageType.Call, seqid_));
        DeleteBuilding_args args = new DeleteBuilding_args();
        args.Auid = auid;
        args.BuildingInstanceId = buildingInstanceId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteBuilding()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteBuilding_result result = new DeleteBuilding_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteBuilding failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GiveLamp(AsyncCallback callback, object state, string login, LampInfo lampInfo, string gmLogin, string extra_comment)
      {
        return send_GiveLamp(callback, state, login, lampInfo, gmLogin, extra_comment);
      }

      public RequestResult End_GiveLamp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GiveLamp();
      }

      #endif

      public RequestResult GiveLamp(string login, LampInfo lampInfo, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_GiveLamp(login, lampInfo, gmLogin, extra_comment);
        return recv_GiveLamp();

        #else
        var asyncResult = Begin_GiveLamp(null, null, login, lampInfo, gmLogin, extra_comment);
        return End_GiveLamp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GiveLamp(AsyncCallback callback, object state, string login, LampInfo lampInfo, string gmLogin, string extra_comment)
      #else
      public void send_GiveLamp(string login, LampInfo lampInfo, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GiveLamp", TMessageType.Call, seqid_));
        GiveLamp_args args = new GiveLamp_args();
        args.Login = login;
        args.LampInfo = lampInfo;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_GiveLamp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GiveLamp_result result = new GiveLamp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GiveLamp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetLampInfo(AsyncCallback callback, object state, string login)
      {
        return send_GetLampInfo(callback, state, login);
      }

      public LampInfoResponse End_GetLampInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLampInfo();
      }

      #endif

      public LampInfoResponse GetLampInfo(string login)
      {
        #if !SILVERLIGHT
        send_GetLampInfo(login);
        return recv_GetLampInfo();

        #else
        var asyncResult = Begin_GetLampInfo(null, null, login);
        return End_GetLampInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLampInfo(AsyncCallback callback, object state, string login)
      #else
      public void send_GetLampInfo(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetLampInfo", TMessageType.Call, seqid_));
        GetLampInfo_args args = new GetLampInfo_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LampInfoResponse recv_GetLampInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLampInfo_result result = new GetLampInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLampInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GiveUpgradeHeroTalents(AsyncCallback callback, object state, string login, UpgradeHeroTalentsInfo lampInfo, string gmLogin, string extra_comment)
      {
        return send_GiveUpgradeHeroTalents(callback, state, login, lampInfo, gmLogin, extra_comment);
      }

      public RequestResult End_GiveUpgradeHeroTalents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GiveUpgradeHeroTalents();
      }

      #endif

      public RequestResult GiveUpgradeHeroTalents(string login, UpgradeHeroTalentsInfo lampInfo, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_GiveUpgradeHeroTalents(login, lampInfo, gmLogin, extra_comment);
        return recv_GiveUpgradeHeroTalents();

        #else
        var asyncResult = Begin_GiveUpgradeHeroTalents(null, null, login, lampInfo, gmLogin, extra_comment);
        return End_GiveUpgradeHeroTalents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GiveUpgradeHeroTalents(AsyncCallback callback, object state, string login, UpgradeHeroTalentsInfo lampInfo, string gmLogin, string extra_comment)
      #else
      public void send_GiveUpgradeHeroTalents(string login, UpgradeHeroTalentsInfo lampInfo, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GiveUpgradeHeroTalents", TMessageType.Call, seqid_));
        GiveUpgradeHeroTalents_args args = new GiveUpgradeHeroTalents_args();
        args.Login = login;
        args.LampInfo = lampInfo;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_GiveUpgradeHeroTalents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GiveUpgradeHeroTalents_result result = new GiveUpgradeHeroTalents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GiveUpgradeHeroTalents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetUpgradeHeroTalentsInfo(AsyncCallback callback, object state, string login)
      {
        return send_GetUpgradeHeroTalentsInfo(callback, state, login);
      }

      public UpgradeHeroTalentsInfoResponse End_GetUpgradeHeroTalentsInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetUpgradeHeroTalentsInfo();
      }

      #endif

      public UpgradeHeroTalentsInfoResponse GetUpgradeHeroTalentsInfo(string login)
      {
        #if !SILVERLIGHT
        send_GetUpgradeHeroTalentsInfo(login);
        return recv_GetUpgradeHeroTalentsInfo();

        #else
        var asyncResult = Begin_GetUpgradeHeroTalentsInfo(null, null, login);
        return End_GetUpgradeHeroTalentsInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetUpgradeHeroTalentsInfo(AsyncCallback callback, object state, string login)
      #else
      public void send_GetUpgradeHeroTalentsInfo(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetUpgradeHeroTalentsInfo", TMessageType.Call, seqid_));
        GetUpgradeHeroTalentsInfo_args args = new GetUpgradeHeroTalentsInfo_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UpgradeHeroTalentsInfoResponse recv_GetUpgradeHeroTalentsInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetUpgradeHeroTalentsInfo_result result = new GetUpgradeHeroTalentsInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUpgradeHeroTalentsInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DisjointSN(AsyncCallback callback, object state, long auid, string snid)
      {
        return send_DisjointSN(callback, state, auid, snid);
      }

      public RequestResult End_DisjointSN(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DisjointSN();
      }

      #endif

      public RequestResult DisjointSN(long auid, string snid)
      {
        #if !SILVERLIGHT
        send_DisjointSN(auid, snid);
        return recv_DisjointSN();

        #else
        var asyncResult = Begin_DisjointSN(null, null, auid, snid);
        return End_DisjointSN(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DisjointSN(AsyncCallback callback, object state, long auid, string snid)
      #else
      public void send_DisjointSN(long auid, string snid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DisjointSN", TMessageType.Call, seqid_));
        DisjointSN_args args = new DisjointSN_args();
        args.Auid = auid;
        args.Snid = snid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DisjointSN()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DisjointSN_result result = new DisjointSN_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DisjointSN failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangeFSN(AsyncCallback callback, object state, long auid, string snid)
      {
        return send_ChangeFSN(callback, state, auid, snid);
      }

      public RequestResult End_ChangeFSN(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ChangeFSN();
      }

      #endif

      public RequestResult ChangeFSN(long auid, string snid)
      {
        #if !SILVERLIGHT
        send_ChangeFSN(auid, snid);
        return recv_ChangeFSN();

        #else
        var asyncResult = Begin_ChangeFSN(null, null, auid, snid);
        return End_ChangeFSN(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangeFSN(AsyncCallback callback, object state, long auid, string snid)
      #else
      public void send_ChangeFSN(long auid, string snid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangeFSN", TMessageType.Call, seqid_));
        ChangeFSN_args args = new ChangeFSN_args();
        args.Auid = auid;
        args.Snid = snid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ChangeFSN()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangeFSN_result result = new ChangeFSN_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangeFSN failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteSAAccount(AsyncCallback callback, object state, long auid)
      {
        return send_DeleteSAAccount(callback, state, auid);
      }

      public RequestResult End_DeleteSAAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteSAAccount();
      }

      #endif

      public RequestResult DeleteSAAccount(long auid)
      {
        #if !SILVERLIGHT
        send_DeleteSAAccount(auid);
        return recv_DeleteSAAccount();

        #else
        var asyncResult = Begin_DeleteSAAccount(null, null, auid);
        return End_DeleteSAAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteSAAccount(AsyncCallback callback, object state, long auid)
      #else
      public void send_DeleteSAAccount(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteSAAccount", TMessageType.Call, seqid_));
        DeleteSAAccount_args args = new DeleteSAAccount_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteSAAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteSAAccount_result result = new DeleteSAAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteSAAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountTournamentInfo(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountTournamentInfo(callback, state, login);
      }

      public TournamentInfoResponse End_GetAccountTournamentInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountTournamentInfo();
      }

      #endif

      public TournamentInfoResponse GetAccountTournamentInfo(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountTournamentInfo(login);
        return recv_GetAccountTournamentInfo();

        #else
        var asyncResult = Begin_GetAccountTournamentInfo(null, null, login);
        return End_GetAccountTournamentInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountTournamentInfo(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountTournamentInfo(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountTournamentInfo", TMessageType.Call, seqid_));
        GetAccountTournamentInfo_args args = new GetAccountTournamentInfo_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TournamentInfoResponse recv_GetAccountTournamentInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountTournamentInfo_result result = new GetAccountTournamentInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountTournamentInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditTournamentInfo(AsyncCallback callback, object state, string login, TournamentInfo tournamentInfo, string gmLogin)
      {
        return send_EditTournamentInfo(callback, state, login, tournamentInfo, gmLogin);
      }

      public RequestResult End_EditTournamentInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditTournamentInfo();
      }

      #endif

      public RequestResult EditTournamentInfo(string login, TournamentInfo tournamentInfo, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditTournamentInfo(login, tournamentInfo, gmLogin);
        return recv_EditTournamentInfo();

        #else
        var asyncResult = Begin_EditTournamentInfo(null, null, login, tournamentInfo, gmLogin);
        return End_EditTournamentInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditTournamentInfo(AsyncCallback callback, object state, string login, TournamentInfo tournamentInfo, string gmLogin)
      #else
      public void send_EditTournamentInfo(string login, TournamentInfo tournamentInfo, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditTournamentInfo", TMessageType.Call, seqid_));
        EditTournamentInfo_args args = new EditTournamentInfo_args();
        args.Login = login;
        args.TournamentInfo = tournamentInfo;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditTournamentInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditTournamentInfo_result result = new EditTournamentInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditTournamentInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GiveTournamentTicket(AsyncCallback callback, object state, string login)
      {
        return send_GiveTournamentTicket(callback, state, login);
      }

      public GiveTournamentTicketResponse End_GiveTournamentTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GiveTournamentTicket();
      }

      #endif

      public GiveTournamentTicketResponse GiveTournamentTicket(string login)
      {
        #if !SILVERLIGHT
        send_GiveTournamentTicket(login);
        return recv_GiveTournamentTicket();

        #else
        var asyncResult = Begin_GiveTournamentTicket(null, null, login);
        return End_GiveTournamentTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GiveTournamentTicket(AsyncCallback callback, object state, string login)
      #else
      public void send_GiveTournamentTicket(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GiveTournamentTicket", TMessageType.Call, seqid_));
        GiveTournamentTicket_args args = new GiveTournamentTicket_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GiveTournamentTicketResponse recv_GiveTournamentTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GiveTournamentTicket_result result = new GiveTournamentTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GiveTournamentTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountTournamentGames(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountTournamentGames(callback, state, login);
      }

      public TournamentGamesInfoResponse End_GetAccountTournamentGames(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountTournamentGames();
      }

      #endif

      public TournamentGamesInfoResponse GetAccountTournamentGames(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountTournamentGames(login);
        return recv_GetAccountTournamentGames();

        #else
        var asyncResult = Begin_GetAccountTournamentGames(null, null, login);
        return End_GetAccountTournamentGames(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountTournamentGames(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountTournamentGames(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountTournamentGames", TMessageType.Call, seqid_));
        GetAccountTournamentGames_args args = new GetAccountTournamentGames_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TournamentGamesInfoResponse recv_GetAccountTournamentGames()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountTournamentGames_result result = new GetAccountTournamentGames_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountTournamentGames failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGuildById(AsyncCallback callback, object state, long guildid)
      {
        return send_GetGuildById(callback, state, guildid);
      }

      public GuildInfoResponse End_GetGuildById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGuildById();
      }

      #endif

      public GuildInfoResponse GetGuildById(long guildid)
      {
        #if !SILVERLIGHT
        send_GetGuildById(guildid);
        return recv_GetGuildById();

        #else
        var asyncResult = Begin_GetGuildById(null, null, guildid);
        return End_GetGuildById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGuildById(AsyncCallback callback, object state, long guildid)
      #else
      public void send_GetGuildById(long guildid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGuildById", TMessageType.Call, seqid_));
        GetGuildById_args args = new GetGuildById_args();
        args.Guildid = guildid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GuildInfoResponse recv_GetGuildById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGuildById_result result = new GetGuildById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGuildById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGuildByName(AsyncCallback callback, object state, string shortname, string fullname)
      {
        return send_GetGuildByName(callback, state, shortname, fullname);
      }

      public GuildInfoResponse End_GetGuildByName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGuildByName();
      }

      #endif

      public GuildInfoResponse GetGuildByName(string shortname, string fullname)
      {
        #if !SILVERLIGHT
        send_GetGuildByName(shortname, fullname);
        return recv_GetGuildByName();

        #else
        var asyncResult = Begin_GetGuildByName(null, null, shortname, fullname);
        return End_GetGuildByName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGuildByName(AsyncCallback callback, object state, string shortname, string fullname)
      #else
      public void send_GetGuildByName(string shortname, string fullname)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGuildByName", TMessageType.Call, seqid_));
        GetGuildByName_args args = new GetGuildByName_args();
        args.Shortname = shortname;
        args.Fullname = fullname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GuildInfoResponse recv_GetGuildByName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGuildByName_result result = new GetGuildByName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGuildByName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGuildMemberById(AsyncCallback callback, object state, long guildid, long auid)
      {
        return send_GetGuildMemberById(callback, state, guildid, auid);
      }

      public GuildMemberInfoResponse End_GetGuildMemberById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGuildMemberById();
      }

      #endif

      public GuildMemberInfoResponse GetGuildMemberById(long guildid, long auid)
      {
        #if !SILVERLIGHT
        send_GetGuildMemberById(guildid, auid);
        return recv_GetGuildMemberById();

        #else
        var asyncResult = Begin_GetGuildMemberById(null, null, guildid, auid);
        return End_GetGuildMemberById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGuildMemberById(AsyncCallback callback, object state, long guildid, long auid)
      #else
      public void send_GetGuildMemberById(long guildid, long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGuildMemberById", TMessageType.Call, seqid_));
        GetGuildMemberById_args args = new GetGuildMemberById_args();
        args.Guildid = guildid;
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GuildMemberInfoResponse recv_GetGuildMemberById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGuildMemberById_result result = new GetGuildMemberById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGuildMemberById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditGuild(AsyncCallback callback, object state, GuildEditInfo info, string gmlogin)
      {
        return send_EditGuild(callback, state, info, gmlogin);
      }

      public RequestResult End_EditGuild(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditGuild();
      }

      #endif

      public RequestResult EditGuild(GuildEditInfo info, string gmlogin)
      {
        #if !SILVERLIGHT
        send_EditGuild(info, gmlogin);
        return recv_EditGuild();

        #else
        var asyncResult = Begin_EditGuild(null, null, info, gmlogin);
        return End_EditGuild(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditGuild(AsyncCallback callback, object state, GuildEditInfo info, string gmlogin)
      #else
      public void send_EditGuild(GuildEditInfo info, string gmlogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditGuild", TMessageType.Call, seqid_));
        EditGuild_args args = new EditGuild_args();
        args.Info = info;
        args.Gmlogin = gmlogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditGuild()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditGuild_result result = new EditGuild_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditGuild failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangeGuildLeader(AsyncCallback callback, object state, long guildid, long auid, string gmLogin)
      {
        return send_ChangeGuildLeader(callback, state, guildid, auid, gmLogin);
      }

      public RequestResult End_ChangeGuildLeader(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ChangeGuildLeader();
      }

      #endif

      public RequestResult ChangeGuildLeader(long guildid, long auid, string gmLogin)
      {
        #if !SILVERLIGHT
        send_ChangeGuildLeader(guildid, auid, gmLogin);
        return recv_ChangeGuildLeader();

        #else
        var asyncResult = Begin_ChangeGuildLeader(null, null, guildid, auid, gmLogin);
        return End_ChangeGuildLeader(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangeGuildLeader(AsyncCallback callback, object state, long guildid, long auid, string gmLogin)
      #else
      public void send_ChangeGuildLeader(long guildid, long auid, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangeGuildLeader", TMessageType.Call, seqid_));
        ChangeGuildLeader_args args = new ChangeGuildLeader_args();
        args.Guildid = guildid;
        args.Auid = auid;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ChangeGuildLeader()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangeGuildLeader_result result = new ChangeGuildLeader_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangeGuildLeader failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveGuildMembers(AsyncCallback callback, object state, long guildid, List<long> auids, string gmLogin)
      {
        return send_RemoveGuildMembers(callback, state, guildid, auids, gmLogin);
      }

      public RequestResult End_RemoveGuildMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveGuildMembers();
      }

      #endif

      public RequestResult RemoveGuildMembers(long guildid, List<long> auids, string gmLogin)
      {
        #if !SILVERLIGHT
        send_RemoveGuildMembers(guildid, auids, gmLogin);
        return recv_RemoveGuildMembers();

        #else
        var asyncResult = Begin_RemoveGuildMembers(null, null, guildid, auids, gmLogin);
        return End_RemoveGuildMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveGuildMembers(AsyncCallback callback, object state, long guildid, List<long> auids, string gmLogin)
      #else
      public void send_RemoveGuildMembers(long guildid, List<long> auids, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveGuildMembers", TMessageType.Call, seqid_));
        RemoveGuildMembers_args args = new RemoveGuildMembers_args();
        args.Guildid = guildid;
        args.Auids = auids;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveGuildMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveGuildMembers_result result = new RemoveGuildMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveGuildMembers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ViewGuildMembers(AsyncCallback callback, object state, long guildid)
      {
        return send_ViewGuildMembers(callback, state, guildid);
      }

      public RequestResult End_ViewGuildMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ViewGuildMembers();
      }

      #endif

      public RequestResult ViewGuildMembers(long guildid)
      {
        #if !SILVERLIGHT
        send_ViewGuildMembers(guildid);
        return recv_ViewGuildMembers();

        #else
        var asyncResult = Begin_ViewGuildMembers(null, null, guildid);
        return End_ViewGuildMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ViewGuildMembers(AsyncCallback callback, object state, long guildid)
      #else
      public void send_ViewGuildMembers(long guildid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ViewGuildMembers", TMessageType.Call, seqid_));
        ViewGuildMembers_args args = new ViewGuildMembers_args();
        args.Guildid = guildid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ViewGuildMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ViewGuildMembers_result result = new ViewGuildMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ViewGuildMembers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditGuildMember(AsyncCallback callback, object state, long guildid, GuildMemberInfo member, string gmLogin)
      {
        return send_EditGuildMember(callback, state, guildid, member, gmLogin);
      }

      public RequestResult End_EditGuildMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditGuildMember();
      }

      #endif

      public RequestResult EditGuildMember(long guildid, GuildMemberInfo member, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditGuildMember(guildid, member, gmLogin);
        return recv_EditGuildMember();

        #else
        var asyncResult = Begin_EditGuildMember(null, null, guildid, member, gmLogin);
        return End_EditGuildMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditGuildMember(AsyncCallback callback, object state, long guildid, GuildMemberInfo member, string gmLogin)
      #else
      public void send_EditGuildMember(long guildid, GuildMemberInfo member, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditGuildMember", TMessageType.Call, seqid_));
        EditGuildMember_args args = new EditGuildMember_args();
        args.Guildid = guildid;
        args.Member = member;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditGuildMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditGuildMember_result result = new EditGuildMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditGuildMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetGuildIcon(AsyncCallback callback, object state, long guildid, byte[] image)
      {
        return send_SetGuildIcon(callback, state, guildid, image);
      }

      public RequestResult End_SetGuildIcon(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetGuildIcon();
      }

      #endif

      public RequestResult SetGuildIcon(long guildid, byte[] image)
      {
        #if !SILVERLIGHT
        send_SetGuildIcon(guildid, image);
        return recv_SetGuildIcon();

        #else
        var asyncResult = Begin_SetGuildIcon(null, null, guildid, image);
        return End_SetGuildIcon(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetGuildIcon(AsyncCallback callback, object state, long guildid, byte[] image)
      #else
      public void send_SetGuildIcon(long guildid, byte[] image)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetGuildIcon", TMessageType.Call, seqid_));
        SetGuildIcon_args args = new SetGuildIcon_args();
        args.Guildid = guildid;
        args.Image = image;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_SetGuildIcon()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetGuildIcon_result result = new SetGuildIcon_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetGuildIcon failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SwitchToNewGuildIcon(AsyncCallback callback, object state, long guildid, string gmLogin)
      {
        return send_SwitchToNewGuildIcon(callback, state, guildid, gmLogin);
      }

      public RequestResult End_SwitchToNewGuildIcon(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SwitchToNewGuildIcon();
      }

      #endif

      public RequestResult SwitchToNewGuildIcon(long guildid, string gmLogin)
      {
        #if !SILVERLIGHT
        send_SwitchToNewGuildIcon(guildid, gmLogin);
        return recv_SwitchToNewGuildIcon();

        #else
        var asyncResult = Begin_SwitchToNewGuildIcon(null, null, guildid, gmLogin);
        return End_SwitchToNewGuildIcon(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SwitchToNewGuildIcon(AsyncCallback callback, object state, long guildid, string gmLogin)
      #else
      public void send_SwitchToNewGuildIcon(long guildid, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SwitchToNewGuildIcon", TMessageType.Call, seqid_));
        SwitchToNewGuildIcon_args args = new SwitchToNewGuildIcon_args();
        args.Guildid = guildid;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_SwitchToNewGuildIcon()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SwitchToNewGuildIcon_result result = new SwitchToNewGuildIcon_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SwitchToNewGuildIcon failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TryToPayForGuildIconChange(AsyncCallback callback, object state, long leaderauid, int changeiter)
      {
        return send_TryToPayForGuildIconChange(callback, state, leaderauid, changeiter);
      }

      public ServerActionResponse End_TryToPayForGuildIconChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TryToPayForGuildIconChange();
      }

      #endif

      public ServerActionResponse TryToPayForGuildIconChange(long leaderauid, int changeiter)
      {
        #if !SILVERLIGHT
        send_TryToPayForGuildIconChange(leaderauid, changeiter);
        return recv_TryToPayForGuildIconChange();

        #else
        var asyncResult = Begin_TryToPayForGuildIconChange(null, null, leaderauid, changeiter);
        return End_TryToPayForGuildIconChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TryToPayForGuildIconChange(AsyncCallback callback, object state, long leaderauid, int changeiter)
      #else
      public void send_TryToPayForGuildIconChange(long leaderauid, int changeiter)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TryToPayForGuildIconChange", TMessageType.Call, seqid_));
        TryToPayForGuildIconChange_args args = new TryToPayForGuildIconChange_args();
        args.Leaderauid = leaderauid;
        args.Changeiter = changeiter;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServerActionResponse recv_TryToPayForGuildIconChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TryToPayForGuildIconChange_result result = new TryToPayForGuildIconChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TryToPayForGuildIconChange failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AcquireGuildLock(AsyncCallback callback, object state, long guildid, string gmlogin)
      {
        return send_AcquireGuildLock(callback, state, guildid, gmlogin);
      }

      public RequestResult End_AcquireGuildLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AcquireGuildLock();
      }

      #endif

      public RequestResult AcquireGuildLock(long guildid, string gmlogin)
      {
        #if !SILVERLIGHT
        send_AcquireGuildLock(guildid, gmlogin);
        return recv_AcquireGuildLock();

        #else
        var asyncResult = Begin_AcquireGuildLock(null, null, guildid, gmlogin);
        return End_AcquireGuildLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AcquireGuildLock(AsyncCallback callback, object state, long guildid, string gmlogin)
      #else
      public void send_AcquireGuildLock(long guildid, string gmlogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AcquireGuildLock", TMessageType.Call, seqid_));
        AcquireGuildLock_args args = new AcquireGuildLock_args();
        args.Guildid = guildid;
        args.Gmlogin = gmlogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AcquireGuildLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AcquireGuildLock_result result = new AcquireGuildLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AcquireGuildLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReleaseGuildLock(AsyncCallback callback, object state, long guildid, string gmlogin)
      {
        return send_ReleaseGuildLock(callback, state, guildid, gmlogin);
      }

      public RequestResult End_ReleaseGuildLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ReleaseGuildLock();
      }

      #endif

      public RequestResult ReleaseGuildLock(long guildid, string gmlogin)
      {
        #if !SILVERLIGHT
        send_ReleaseGuildLock(guildid, gmlogin);
        return recv_ReleaseGuildLock();

        #else
        var asyncResult = Begin_ReleaseGuildLock(null, null, guildid, gmlogin);
        return End_ReleaseGuildLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReleaseGuildLock(AsyncCallback callback, object state, long guildid, string gmlogin)
      #else
      public void send_ReleaseGuildLock(long guildid, string gmlogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReleaseGuildLock", TMessageType.Call, seqid_));
        ReleaseGuildLock_args args = new ReleaseGuildLock_args();
        args.Guildid = guildid;
        args.Gmlogin = gmlogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ReleaseGuildLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReleaseGuildLock_result result = new ReleaseGuildLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReleaseGuildLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_StopGuildSiege(AsyncCallback callback, object state, long targetguildid, string gmlogin)
      {
        return send_StopGuildSiege(callback, state, targetguildid, gmlogin);
      }

      public RequestResult End_StopGuildSiege(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_StopGuildSiege();
      }

      #endif

      public RequestResult StopGuildSiege(long targetguildid, string gmlogin)
      {
        #if !SILVERLIGHT
        send_StopGuildSiege(targetguildid, gmlogin);
        return recv_StopGuildSiege();

        #else
        var asyncResult = Begin_StopGuildSiege(null, null, targetguildid, gmlogin);
        return End_StopGuildSiege(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_StopGuildSiege(AsyncCallback callback, object state, long targetguildid, string gmlogin)
      #else
      public void send_StopGuildSiege(long targetguildid, string gmlogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("StopGuildSiege", TMessageType.Call, seqid_));
        StopGuildSiege_args args = new StopGuildSiege_args();
        args.Targetguildid = targetguildid;
        args.Gmlogin = gmlogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_StopGuildSiege()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        StopGuildSiege_result result = new StopGuildSiege_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "StopGuildSiege failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddGuildSuzerain(AsyncCallback callback, object state, long guildid, long suzerainguildid, string gmlogin)
      {
        return send_AddGuildSuzerain(callback, state, guildid, suzerainguildid, gmlogin);
      }

      public RequestResult End_AddGuildSuzerain(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddGuildSuzerain();
      }

      #endif

      public RequestResult AddGuildSuzerain(long guildid, long suzerainguildid, string gmlogin)
      {
        #if !SILVERLIGHT
        send_AddGuildSuzerain(guildid, suzerainguildid, gmlogin);
        return recv_AddGuildSuzerain();

        #else
        var asyncResult = Begin_AddGuildSuzerain(null, null, guildid, suzerainguildid, gmlogin);
        return End_AddGuildSuzerain(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddGuildSuzerain(AsyncCallback callback, object state, long guildid, long suzerainguildid, string gmlogin)
      #else
      public void send_AddGuildSuzerain(long guildid, long suzerainguildid, string gmlogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddGuildSuzerain", TMessageType.Call, seqid_));
        AddGuildSuzerain_args args = new AddGuildSuzerain_args();
        args.Guildid = guildid;
        args.Suzerainguildid = suzerainguildid;
        args.Gmlogin = gmlogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddGuildSuzerain()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddGuildSuzerain_result result = new AddGuildSuzerain_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddGuildSuzerain failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveGuildSuzerain(AsyncCallback callback, object state, long guildid, string gmlogin)
      {
        return send_RemoveGuildSuzerain(callback, state, guildid, gmlogin);
      }

      public RequestResult End_RemoveGuildSuzerain(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveGuildSuzerain();
      }

      #endif

      public RequestResult RemoveGuildSuzerain(long guildid, string gmlogin)
      {
        #if !SILVERLIGHT
        send_RemoveGuildSuzerain(guildid, gmlogin);
        return recv_RemoveGuildSuzerain();

        #else
        var asyncResult = Begin_RemoveGuildSuzerain(null, null, guildid, gmlogin);
        return End_RemoveGuildSuzerain(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveGuildSuzerain(AsyncCallback callback, object state, long guildid, string gmlogin)
      #else
      public void send_RemoveGuildSuzerain(long guildid, string gmlogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveGuildSuzerain", TMessageType.Call, seqid_));
        RemoveGuildSuzerain_args args = new RemoveGuildSuzerain_args();
        args.Guildid = guildid;
        args.Gmlogin = gmlogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveGuildSuzerain()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveGuildSuzerain_result result = new RemoveGuildSuzerain_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveGuildSuzerain failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFullGuildDump(AsyncCallback callback, object state, long guildid, bool zip)
      {
        return send_GetFullGuildDump(callback, state, guildid, zip);
      }

      public StringDataResponse End_GetFullGuildDump(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFullGuildDump();
      }

      #endif

      public StringDataResponse GetFullGuildDump(long guildid, bool zip)
      {
        #if !SILVERLIGHT
        send_GetFullGuildDump(guildid, zip);
        return recv_GetFullGuildDump();

        #else
        var asyncResult = Begin_GetFullGuildDump(null, null, guildid, zip);
        return End_GetFullGuildDump(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFullGuildDump(AsyncCallback callback, object state, long guildid, bool zip)
      #else
      public void send_GetFullGuildDump(long guildid, bool zip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFullGuildDump", TMessageType.Call, seqid_));
        GetFullGuildDump_args args = new GetFullGuildDump_args();
        args.Guildid = guildid;
        args.Zip = zip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StringDataResponse recv_GetFullGuildDump()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFullGuildDump_result result = new GetFullGuildDump_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFullGuildDump failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFreeGuildBankTalents(AsyncCallback callback, object state, long guildid)
      {
        return send_GetFreeGuildBankTalents(callback, state, guildid);
      }

      public GuildBankTalentsResponse End_GetFreeGuildBankTalents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFreeGuildBankTalents();
      }

      #endif

      public GuildBankTalentsResponse GetFreeGuildBankTalents(long guildid)
      {
        #if !SILVERLIGHT
        send_GetFreeGuildBankTalents(guildid);
        return recv_GetFreeGuildBankTalents();

        #else
        var asyncResult = Begin_GetFreeGuildBankTalents(null, null, guildid);
        return End_GetFreeGuildBankTalents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFreeGuildBankTalents(AsyncCallback callback, object state, long guildid)
      #else
      public void send_GetFreeGuildBankTalents(long guildid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFreeGuildBankTalents", TMessageType.Call, seqid_));
        GetFreeGuildBankTalents_args args = new GetFreeGuildBankTalents_args();
        args.Guildid = guildid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GuildBankTalentsResponse recv_GetFreeGuildBankTalents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFreeGuildBankTalents_result result = new GetFreeGuildBankTalents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFreeGuildBankTalents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTakenGuildBankTalents(AsyncCallback callback, object state, long guildid)
      {
        return send_GetTakenGuildBankTalents(callback, state, guildid);
      }

      public GuildBankTalentsResponse End_GetTakenGuildBankTalents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTakenGuildBankTalents();
      }

      #endif

      public GuildBankTalentsResponse GetTakenGuildBankTalents(long guildid)
      {
        #if !SILVERLIGHT
        send_GetTakenGuildBankTalents(guildid);
        return recv_GetTakenGuildBankTalents();

        #else
        var asyncResult = Begin_GetTakenGuildBankTalents(null, null, guildid);
        return End_GetTakenGuildBankTalents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTakenGuildBankTalents(AsyncCallback callback, object state, long guildid)
      #else
      public void send_GetTakenGuildBankTalents(long guildid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTakenGuildBankTalents", TMessageType.Call, seqid_));
        GetTakenGuildBankTalents_args args = new GetTakenGuildBankTalents_args();
        args.Guildid = guildid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GuildBankTalentsResponse recv_GetTakenGuildBankTalents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTakenGuildBankTalents_result result = new GetTakenGuildBankTalents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTakenGuildBankTalents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReturnTalentToOwner(AsyncCallback callback, object state, long guildid, long talentId, string gmLogin)
      {
        return send_ReturnTalentToOwner(callback, state, guildid, talentId, gmLogin);
      }

      public RequestResult End_ReturnTalentToOwner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ReturnTalentToOwner();
      }

      #endif

      public RequestResult ReturnTalentToOwner(long guildid, long talentId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_ReturnTalentToOwner(guildid, talentId, gmLogin);
        return recv_ReturnTalentToOwner();

        #else
        var asyncResult = Begin_ReturnTalentToOwner(null, null, guildid, talentId, gmLogin);
        return End_ReturnTalentToOwner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReturnTalentToOwner(AsyncCallback callback, object state, long guildid, long talentId, string gmLogin)
      #else
      public void send_ReturnTalentToOwner(long guildid, long talentId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReturnTalentToOwner", TMessageType.Call, seqid_));
        ReturnTalentToOwner_args args = new ReturnTalentToOwner_args();
        args.Guildid = guildid;
        args.TalentId = talentId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ReturnTalentToOwner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReturnTalentToOwner_result result = new ReturnTalentToOwner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReturnTalentToOwner failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReturnTalentToGuildBank(AsyncCallback callback, object state, long guildid, long talentId, string gmLogin)
      {
        return send_ReturnTalentToGuildBank(callback, state, guildid, talentId, gmLogin);
      }

      public RequestResult End_ReturnTalentToGuildBank(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ReturnTalentToGuildBank();
      }

      #endif

      public RequestResult ReturnTalentToGuildBank(long guildid, long talentId, string gmLogin)
      {
        #if !SILVERLIGHT
        send_ReturnTalentToGuildBank(guildid, talentId, gmLogin);
        return recv_ReturnTalentToGuildBank();

        #else
        var asyncResult = Begin_ReturnTalentToGuildBank(null, null, guildid, talentId, gmLogin);
        return End_ReturnTalentToGuildBank(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReturnTalentToGuildBank(AsyncCallback callback, object state, long guildid, long talentId, string gmLogin)
      #else
      public void send_ReturnTalentToGuildBank(long guildid, long talentId, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReturnTalentToGuildBank", TMessageType.Call, seqid_));
        ReturnTalentToGuildBank_args args = new ReturnTalentToGuildBank_args();
        args.Guildid = guildid;
        args.TalentId = talentId;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ReturnTalentToGuildBank()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReturnTalentToGuildBank_result result = new ReturnTalentToGuildBank_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReturnTalentToGuildBank failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SendMessageToUser(AsyncCallback callback, object state, string login, long auid, string messageTitle, string messageText, string gmLogin, string extra_comment)
      {
        return send_SendMessageToUser(callback, state, login, auid, messageTitle, messageText, gmLogin, extra_comment);
      }

      public RequestResult End_SendMessageToUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SendMessageToUser();
      }

      #endif

      public RequestResult SendMessageToUser(string login, long auid, string messageTitle, string messageText, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_SendMessageToUser(login, auid, messageTitle, messageText, gmLogin, extra_comment);
        return recv_SendMessageToUser();

        #else
        var asyncResult = Begin_SendMessageToUser(null, null, login, auid, messageTitle, messageText, gmLogin, extra_comment);
        return End_SendMessageToUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SendMessageToUser(AsyncCallback callback, object state, string login, long auid, string messageTitle, string messageText, string gmLogin, string extra_comment)
      #else
      public void send_SendMessageToUser(string login, long auid, string messageTitle, string messageText, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SendMessageToUser", TMessageType.Call, seqid_));
        SendMessageToUser_args args = new SendMessageToUser_args();
        args.Login = login;
        args.Auid = auid;
        args.MessageTitle = messageTitle;
        args.MessageText = messageText;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_SendMessageToUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SendMessageToUser_result result = new SendMessageToUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SendMessageToUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountAdminMessages(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountAdminMessages(callback, state, login);
      }

      public AdminMessagesResponse End_GetAccountAdminMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountAdminMessages();
      }

      #endif

      public AdminMessagesResponse GetAccountAdminMessages(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountAdminMessages(login);
        return recv_GetAccountAdminMessages();

        #else
        var asyncResult = Begin_GetAccountAdminMessages(null, null, login);
        return End_GetAccountAdminMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountAdminMessages(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountAdminMessages(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountAdminMessages", TMessageType.Call, seqid_));
        GetAccountAdminMessages_args args = new GetAccountAdminMessages_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AdminMessagesResponse recv_GetAccountAdminMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountAdminMessages_result result = new GetAccountAdminMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountAdminMessages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UserOperation(AsyncCallback callback, object state, long auid, UserOperationType type, int minutes, string reason, List<int> claims, string gmLogin, List<long> claimAuids, int points)
      {
        return send_UserOperation(callback, state, auid, type, minutes, reason, claims, gmLogin, claimAuids, points);
      }

      public RequestResult End_UserOperation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UserOperation();
      }

      #endif

      public RequestResult UserOperation(long auid, UserOperationType type, int minutes, string reason, List<int> claims, string gmLogin, List<long> claimAuids, int points)
      {
        #if !SILVERLIGHT
        send_UserOperation(auid, type, minutes, reason, claims, gmLogin, claimAuids, points);
        return recv_UserOperation();

        #else
        var asyncResult = Begin_UserOperation(null, null, auid, type, minutes, reason, claims, gmLogin, claimAuids, points);
        return End_UserOperation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UserOperation(AsyncCallback callback, object state, long auid, UserOperationType type, int minutes, string reason, List<int> claims, string gmLogin, List<long> claimAuids, int points)
      #else
      public void send_UserOperation(long auid, UserOperationType type, int minutes, string reason, List<int> claims, string gmLogin, List<long> claimAuids, int points)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UserOperation", TMessageType.Call, seqid_));
        UserOperation_args args = new UserOperation_args();
        args.Auid = auid;
        args.Type = type;
        args.Minutes = minutes;
        args.Reason = reason;
        args.Claims = claims;
        args.GmLogin = gmLogin;
        args.ClaimAuids = claimAuids;
        args.Points = points;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UserOperation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UserOperation_result result = new UserOperation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UserOperation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResetUserAccount(AsyncCallback callback, object state, string login, string gmLogin)
      {
        return send_ResetUserAccount(callback, state, login, gmLogin);
      }

      public RequestResult End_ResetUserAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ResetUserAccount();
      }

      #endif

      public RequestResult ResetUserAccount(string login, string gmLogin)
      {
        #if !SILVERLIGHT
        send_ResetUserAccount(login, gmLogin);
        return recv_ResetUserAccount();

        #else
        var asyncResult = Begin_ResetUserAccount(null, null, login, gmLogin);
        return End_ResetUserAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResetUserAccount(AsyncCallback callback, object state, string login, string gmLogin)
      #else
      public void send_ResetUserAccount(string login, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResetUserAccount", TMessageType.Call, seqid_));
        ResetUserAccount_args args = new ResetUserAccount_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ResetUserAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResetUserAccount_result result = new ResetUserAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ResetUserAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteUserAccount(AsyncCallback callback, object state, string login, string gmLogin)
      {
        return send_DeleteUserAccount(callback, state, login, gmLogin);
      }

      public RequestResult End_DeleteUserAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteUserAccount();
      }

      #endif

      public RequestResult DeleteUserAccount(string login, string gmLogin)
      {
        #if !SILVERLIGHT
        send_DeleteUserAccount(login, gmLogin);
        return recv_DeleteUserAccount();

        #else
        var asyncResult = Begin_DeleteUserAccount(null, null, login, gmLogin);
        return End_DeleteUserAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteUserAccount(AsyncCallback callback, object state, string login, string gmLogin)
      #else
      public void send_DeleteUserAccount(string login, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteUserAccount", TMessageType.Call, seqid_));
        DeleteUserAccount_args args = new DeleteUserAccount_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteUserAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteUserAccount_result result = new DeleteUserAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteUserAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_KickUser(AsyncCallback callback, object state, string login, string gmLogin)
      {
        return send_KickUser(callback, state, login, gmLogin);
      }

      public RequestResult End_KickUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_KickUser();
      }

      #endif

      public RequestResult KickUser(string login, string gmLogin)
      {
        #if !SILVERLIGHT
        send_KickUser(login, gmLogin);
        return recv_KickUser();

        #else
        var asyncResult = Begin_KickUser(null, null, login, gmLogin);
        return End_KickUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_KickUser(AsyncCallback callback, object state, string login, string gmLogin)
      #else
      public void send_KickUser(string login, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("KickUser", TMessageType.Call, seqid_));
        KickUser_args args = new KickUser_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_KickUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        KickUser_result result = new KickUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "KickUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditNickname(AsyncCallback callback, object state, string login, string gmLogin, string nickname)
      {
        return send_EditNickname(callback, state, login, gmLogin, nickname);
      }

      public StringDataResponse End_EditNickname(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditNickname();
      }

      #endif

      public StringDataResponse EditNickname(string login, string gmLogin, string nickname)
      {
        #if !SILVERLIGHT
        send_EditNickname(login, gmLogin, nickname);
        return recv_EditNickname();

        #else
        var asyncResult = Begin_EditNickname(null, null, login, gmLogin, nickname);
        return End_EditNickname(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditNickname(AsyncCallback callback, object state, string login, string gmLogin, string nickname)
      #else
      public void send_EditNickname(string login, string gmLogin, string nickname)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditNickname", TMessageType.Call, seqid_));
        EditNickname_args args = new EditNickname_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Nickname = nickname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StringDataResponse recv_EditNickname()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditNickname_result result = new EditNickname_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditNickname failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PayEditNickname(AsyncCallback callback, object state, string login, string nickname)
      {
        return send_PayEditNickname(callback, state, login, nickname);
      }

      public ServerActionResponse End_PayEditNickname(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PayEditNickname();
      }

      #endif

      public ServerActionResponse PayEditNickname(string login, string nickname)
      {
        #if !SILVERLIGHT
        send_PayEditNickname(login, nickname);
        return recv_PayEditNickname();

        #else
        var asyncResult = Begin_PayEditNickname(null, null, login, nickname);
        return End_PayEditNickname(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PayEditNickname(AsyncCallback callback, object state, string login, string nickname)
      #else
      public void send_PayEditNickname(string login, string nickname)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PayEditNickname", TMessageType.Call, seqid_));
        PayEditNickname_args args = new PayEditNickname_args();
        args.Login = login;
        args.Nickname = nickname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServerActionResponse recv_PayEditNickname()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PayEditNickname_result result = new PayEditNickname_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PayEditNickname failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PayChangeFraction(AsyncCallback callback, object state, string login, int fraction)
      {
        return send_PayChangeFraction(callback, state, login, fraction);
      }

      public ServerActionResponse End_PayChangeFraction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PayChangeFraction();
      }

      #endif

      public ServerActionResponse PayChangeFraction(string login, int fraction)
      {
        #if !SILVERLIGHT
        send_PayChangeFraction(login, fraction);
        return recv_PayChangeFraction();

        #else
        var asyncResult = Begin_PayChangeFraction(null, null, login, fraction);
        return End_PayChangeFraction(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PayChangeFraction(AsyncCallback callback, object state, string login, int fraction)
      #else
      public void send_PayChangeFraction(string login, int fraction)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PayChangeFraction", TMessageType.Call, seqid_));
        PayChangeFraction_args args = new PayChangeFraction_args();
        args.Login = login;
        args.Fraction = fraction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServerActionResponse recv_PayChangeFraction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PayChangeFraction_result result = new PayChangeFraction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PayChangeFraction failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPrices(AsyncCallback callback, object state, string login, PayServiceType servicetype, string extra_comment)
      {
        return send_GetPrices(callback, state, login, servicetype, extra_comment);
      }

      public PriceServiceDataResponse End_GetPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPrices();
      }

      #endif

      public PriceServiceDataResponse GetPrices(string login, PayServiceType servicetype, string extra_comment)
      {
        #if !SILVERLIGHT
        send_GetPrices(login, servicetype, extra_comment);
        return recv_GetPrices();

        #else
        var asyncResult = Begin_GetPrices(null, null, login, servicetype, extra_comment);
        return End_GetPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPrices(AsyncCallback callback, object state, string login, PayServiceType servicetype, string extra_comment)
      #else
      public void send_GetPrices(string login, PayServiceType servicetype, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPrices", TMessageType.Call, seqid_));
        GetPrices_args args = new GetPrices_args();
        args.Login = login;
        args.Servicetype = servicetype;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PriceServiceDataResponse recv_GetPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPrices_result result = new GetPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BuyService(AsyncCallback callback, object state, string login, PayServiceType servicetype, int paramValue)
      {
        return send_BuyService(callback, state, login, servicetype, paramValue);
      }

      public ServerActionResponse End_BuyService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BuyService();
      }

      #endif

      public ServerActionResponse BuyService(string login, PayServiceType servicetype, int paramValue)
      {
        #if !SILVERLIGHT
        send_BuyService(login, servicetype, paramValue);
        return recv_BuyService();

        #else
        var asyncResult = Begin_BuyService(null, null, login, servicetype, paramValue);
        return End_BuyService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BuyService(AsyncCallback callback, object state, string login, PayServiceType servicetype, int paramValue)
      #else
      public void send_BuyService(string login, PayServiceType servicetype, int paramValue)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BuyService", TMessageType.Call, seqid_));
        BuyService_args args = new BuyService_args();
        args.Login = login;
        args.Servicetype = servicetype;
        args.ParamValue = paramValue;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServerActionResponse recv_BuyService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BuyService_result result = new BuyService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BuyService failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PayService(AsyncCallback callback, object state, string login, PayServiceType servicetype, int paramValue, string gmLogin)
      {
        return send_PayService(callback, state, login, servicetype, paramValue, gmLogin);
      }

      public RequestResult End_PayService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PayService();
      }

      #endif

      public RequestResult PayService(string login, PayServiceType servicetype, int paramValue, string gmLogin)
      {
        #if !SILVERLIGHT
        send_PayService(login, servicetype, paramValue, gmLogin);
        return recv_PayService();

        #else
        var asyncResult = Begin_PayService(null, null, login, servicetype, paramValue, gmLogin);
        return End_PayService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PayService(AsyncCallback callback, object state, string login, PayServiceType servicetype, int paramValue, string gmLogin)
      #else
      public void send_PayService(string login, PayServiceType servicetype, int paramValue, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PayService", TMessageType.Call, seqid_));
        PayService_args args = new PayService_args();
        args.Login = login;
        args.Servicetype = servicetype;
        args.ParamValue = paramValue;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_PayService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PayService_result result = new PayService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PayService failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BuyTournamentTicket(AsyncCallback callback, object state, string login, PayTicketType pttype)
      {
        return send_BuyTournamentTicket(callback, state, login, pttype);
      }

      public RequestResult End_BuyTournamentTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BuyTournamentTicket();
      }

      #endif

      public RequestResult BuyTournamentTicket(string login, PayTicketType pttype)
      {
        #if !SILVERLIGHT
        send_BuyTournamentTicket(login, pttype);
        return recv_BuyTournamentTicket();

        #else
        var asyncResult = Begin_BuyTournamentTicket(null, null, login, pttype);
        return End_BuyTournamentTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BuyTournamentTicket(AsyncCallback callback, object state, string login, PayTicketType pttype)
      #else
      public void send_BuyTournamentTicket(string login, PayTicketType pttype)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BuyTournamentTicket", TMessageType.Call, seqid_));
        BuyTournamentTicket_args args = new BuyTournamentTicket_args();
        args.Login = login;
        args.Pttype = pttype;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_BuyTournamentTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BuyTournamentTicket_result result = new BuyTournamentTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BuyTournamentTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateBroadcast(AsyncCallback callback, object state, BroadcastInfo createInfo, string gmLogin)
      {
        return send_CreateBroadcast(callback, state, createInfo, gmLogin);
      }

      public BroadcastCreateResponse End_CreateBroadcast(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateBroadcast();
      }

      #endif

      public BroadcastCreateResponse CreateBroadcast(BroadcastInfo createInfo, string gmLogin)
      {
        #if !SILVERLIGHT
        send_CreateBroadcast(createInfo, gmLogin);
        return recv_CreateBroadcast();

        #else
        var asyncResult = Begin_CreateBroadcast(null, null, createInfo, gmLogin);
        return End_CreateBroadcast(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateBroadcast(AsyncCallback callback, object state, BroadcastInfo createInfo, string gmLogin)
      #else
      public void send_CreateBroadcast(BroadcastInfo createInfo, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateBroadcast", TMessageType.Call, seqid_));
        CreateBroadcast_args args = new CreateBroadcast_args();
        args.CreateInfo = createInfo;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BroadcastCreateResponse recv_CreateBroadcast()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateBroadcast_result result = new CreateBroadcast_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateBroadcast failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBroadcastLocales(AsyncCallback callback, object state)
      {
        return send_GetBroadcastLocales(callback, state);
      }

      public BroadcastLocalesResponse End_GetBroadcastLocales(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBroadcastLocales();
      }

      #endif

      public BroadcastLocalesResponse GetBroadcastLocales()
      {
        #if !SILVERLIGHT
        send_GetBroadcastLocales();
        return recv_GetBroadcastLocales();

        #else
        var asyncResult = Begin_GetBroadcastLocales(null, null);
        return End_GetBroadcastLocales(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBroadcastLocales(AsyncCallback callback, object state)
      #else
      public void send_GetBroadcastLocales()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBroadcastLocales", TMessageType.Call, seqid_));
        GetBroadcastLocales_args args = new GetBroadcastLocales_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BroadcastLocalesResponse recv_GetBroadcastLocales()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBroadcastLocales_result result = new GetBroadcastLocales_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBroadcastLocales failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditBroadcast(AsyncCallback callback, object state, BroadcastInfo editInfo, string gmLogin)
      {
        return send_EditBroadcast(callback, state, editInfo, gmLogin);
      }

      public RequestResult End_EditBroadcast(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditBroadcast();
      }

      #endif

      public RequestResult EditBroadcast(BroadcastInfo editInfo, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditBroadcast(editInfo, gmLogin);
        return recv_EditBroadcast();

        #else
        var asyncResult = Begin_EditBroadcast(null, null, editInfo, gmLogin);
        return End_EditBroadcast(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditBroadcast(AsyncCallback callback, object state, BroadcastInfo editInfo, string gmLogin)
      #else
      public void send_EditBroadcast(BroadcastInfo editInfo, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditBroadcast", TMessageType.Call, seqid_));
        EditBroadcast_args args = new EditBroadcast_args();
        args.EditInfo = editInfo;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditBroadcast()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditBroadcast_result result = new EditBroadcast_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditBroadcast failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteBroadcast(AsyncCallback callback, object state, int id, string gmLogin)
      {
        return send_DeleteBroadcast(callback, state, id, gmLogin);
      }

      public RequestResult End_DeleteBroadcast(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteBroadcast();
      }

      #endif

      public RequestResult DeleteBroadcast(int id, string gmLogin)
      {
        #if !SILVERLIGHT
        send_DeleteBroadcast(id, gmLogin);
        return recv_DeleteBroadcast();

        #else
        var asyncResult = Begin_DeleteBroadcast(null, null, id, gmLogin);
        return End_DeleteBroadcast(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteBroadcast(AsyncCallback callback, object state, int id, string gmLogin)
      #else
      public void send_DeleteBroadcast(int id, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteBroadcast", TMessageType.Call, seqid_));
        DeleteBroadcast_args args = new DeleteBroadcast_args();
        args.Id = id;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteBroadcast()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteBroadcast_result result = new DeleteBroadcast_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteBroadcast failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBroadcastList(AsyncCallback callback, object state, int skipLines, int takeLines)
      {
        return send_GetBroadcastList(callback, state, skipLines, takeLines);
      }

      public BroadcastListResponse End_GetBroadcastList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBroadcastList();
      }

      #endif

      public BroadcastListResponse GetBroadcastList(int skipLines, int takeLines)
      {
        #if !SILVERLIGHT
        send_GetBroadcastList(skipLines, takeLines);
        return recv_GetBroadcastList();

        #else
        var asyncResult = Begin_GetBroadcastList(null, null, skipLines, takeLines);
        return End_GetBroadcastList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBroadcastList(AsyncCallback callback, object state, int skipLines, int takeLines)
      #else
      public void send_GetBroadcastList(int skipLines, int takeLines)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBroadcastList", TMessageType.Call, seqid_));
        GetBroadcastList_args args = new GetBroadcastList_args();
        args.SkipLines = skipLines;
        args.TakeLines = takeLines;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BroadcastListResponse recv_GetBroadcastList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBroadcastList_result result = new GetBroadcastList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBroadcastList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_StartMessageRotation(AsyncCallback callback, object state, int id, string gmLogin)
      {
        return send_StartMessageRotation(callback, state, id, gmLogin);
      }

      public RequestResult End_StartMessageRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_StartMessageRotation();
      }

      #endif

      public RequestResult StartMessageRotation(int id, string gmLogin)
      {
        #if !SILVERLIGHT
        send_StartMessageRotation(id, gmLogin);
        return recv_StartMessageRotation();

        #else
        var asyncResult = Begin_StartMessageRotation(null, null, id, gmLogin);
        return End_StartMessageRotation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_StartMessageRotation(AsyncCallback callback, object state, int id, string gmLogin)
      #else
      public void send_StartMessageRotation(int id, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("StartMessageRotation", TMessageType.Call, seqid_));
        StartMessageRotation_args args = new StartMessageRotation_args();
        args.Id = id;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_StartMessageRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        StartMessageRotation_result result = new StartMessageRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "StartMessageRotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_StopMessageRotation(AsyncCallback callback, object state, int id, string gmLogin)
      {
        return send_StopMessageRotation(callback, state, id, gmLogin);
      }

      public RequestResult End_StopMessageRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_StopMessageRotation();
      }

      #endif

      public RequestResult StopMessageRotation(int id, string gmLogin)
      {
        #if !SILVERLIGHT
        send_StopMessageRotation(id, gmLogin);
        return recv_StopMessageRotation();

        #else
        var asyncResult = Begin_StopMessageRotation(null, null, id, gmLogin);
        return End_StopMessageRotation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_StopMessageRotation(AsyncCallback callback, object state, int id, string gmLogin)
      #else
      public void send_StopMessageRotation(int id, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("StopMessageRotation", TMessageType.Call, seqid_));
        StopMessageRotation_args args = new StopMessageRotation_args();
        args.Id = id;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_StopMessageRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        StopMessageRotation_result result = new StopMessageRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "StopMessageRotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSocServerVersion(AsyncCallback callback, object state)
      {
        return send_GetSocServerVersion(callback, state);
      }

      public SocServerVersionResponse End_GetSocServerVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSocServerVersion();
      }

      #endif

      public SocServerVersionResponse GetSocServerVersion()
      {
        #if !SILVERLIGHT
        send_GetSocServerVersion();
        return recv_GetSocServerVersion();

        #else
        var asyncResult = Begin_GetSocServerVersion(null, null);
        return End_GetSocServerVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSocServerVersion(AsyncCallback callback, object state)
      #else
      public void send_GetSocServerVersion()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSocServerVersion", TMessageType.Call, seqid_));
        GetSocServerVersion_args args = new GetSocServerVersion_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SocServerVersionResponse recv_GetSocServerVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSocServerVersion_result result = new GetSocServerVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSocServerVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFullUserDump(AsyncCallback callback, object state, string login, bool zip)
      {
        return send_GetFullUserDump(callback, state, login, zip);
      }

      public StringDataResponse End_GetFullUserDump(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFullUserDump();
      }

      #endif

      public StringDataResponse GetFullUserDump(string login, bool zip)
      {
        #if !SILVERLIGHT
        send_GetFullUserDump(login, zip);
        return recv_GetFullUserDump();

        #else
        var asyncResult = Begin_GetFullUserDump(null, null, login, zip);
        return End_GetFullUserDump(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFullUserDump(AsyncCallback callback, object state, string login, bool zip)
      #else
      public void send_GetFullUserDump(string login, bool zip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFullUserDump", TMessageType.Call, seqid_));
        GetFullUserDump_args args = new GetFullUserDump_args();
        args.Login = login;
        args.Zip = zip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StringDataResponse recv_GetFullUserDump()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFullUserDump_result result = new GetFullUserDump_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFullUserDump failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ApplyFullUserDump(AsyncCallback callback, object state, string login, string dumpdata)
      {
        return send_ApplyFullUserDump(callback, state, login, dumpdata);
      }

      public RequestResult End_ApplyFullUserDump(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ApplyFullUserDump();
      }

      #endif

      public RequestResult ApplyFullUserDump(string login, string dumpdata)
      {
        #if !SILVERLIGHT
        send_ApplyFullUserDump(login, dumpdata);
        return recv_ApplyFullUserDump();

        #else
        var asyncResult = Begin_ApplyFullUserDump(null, null, login, dumpdata);
        return End_ApplyFullUserDump(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ApplyFullUserDump(AsyncCallback callback, object state, string login, string dumpdata)
      #else
      public void send_ApplyFullUserDump(string login, string dumpdata)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ApplyFullUserDump", TMessageType.Call, seqid_));
        ApplyFullUserDump_args args = new ApplyFullUserDump_args();
        args.Login = login;
        args.Dumpdata = dumpdata;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ApplyFullUserDump()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ApplyFullUserDump_result result = new ApplyFullUserDump_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ApplyFullUserDump failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveFakeAuid(AsyncCallback callback, object state, string login)
      {
        return send_RemoveFakeAuid(callback, state, login);
      }

      public RequestResult End_RemoveFakeAuid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveFakeAuid();
      }

      #endif

      public RequestResult RemoveFakeAuid(string login)
      {
        #if !SILVERLIGHT
        send_RemoveFakeAuid(login);
        return recv_RemoveFakeAuid();

        #else
        var asyncResult = Begin_RemoveFakeAuid(null, null, login);
        return End_RemoveFakeAuid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveFakeAuid(AsyncCallback callback, object state, string login)
      #else
      public void send_RemoveFakeAuid(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveFakeAuid", TMessageType.Call, seqid_));
        RemoveFakeAuid_args args = new RemoveFakeAuid_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveFakeAuid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveFakeAuid_result result = new RemoveFakeAuid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveFakeAuid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBackups(AsyncCallback callback, object state)
      {
        return send_GetBackups(callback, state);
      }

      public UserDumpsDataResponse End_GetBackups(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBackups();
      }

      #endif

      public UserDumpsDataResponse GetBackups()
      {
        #if !SILVERLIGHT
        send_GetBackups();
        return recv_GetBackups();

        #else
        var asyncResult = Begin_GetBackups(null, null);
        return End_GetBackups(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBackups(AsyncCallback callback, object state)
      #else
      public void send_GetBackups()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBackups", TMessageType.Call, seqid_));
        GetBackups_args args = new GetBackups_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserDumpsDataResponse recv_GetBackups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBackups_result result = new GetBackups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBackups failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBrokenUserDump(AsyncCallback callback, object state, string login, string date, bool zip)
      {
        return send_GetBrokenUserDump(callback, state, login, date, zip);
      }

      public StringDataResponse End_GetBrokenUserDump(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBrokenUserDump();
      }

      #endif

      public StringDataResponse GetBrokenUserDump(string login, string date, bool zip)
      {
        #if !SILVERLIGHT
        send_GetBrokenUserDump(login, date, zip);
        return recv_GetBrokenUserDump();

        #else
        var asyncResult = Begin_GetBrokenUserDump(null, null, login, date, zip);
        return End_GetBrokenUserDump(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBrokenUserDump(AsyncCallback callback, object state, string login, string date, bool zip)
      #else
      public void send_GetBrokenUserDump(string login, string date, bool zip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBrokenUserDump", TMessageType.Call, seqid_));
        GetBrokenUserDump_args args = new GetBrokenUserDump_args();
        args.Login = login;
        args.Date = date;
        args.Zip = zip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StringDataResponse recv_GetBrokenUserDump()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBrokenUserDump_result result = new GetBrokenUserDump_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBrokenUserDump failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetBrokenUserDumpByNickname(AsyncCallback callback, object state, string nickname, string date, bool zip)
      {
        return send_GetBrokenUserDumpByNickname(callback, state, nickname, date, zip);
      }

      public StringDataResponse End_GetBrokenUserDumpByNickname(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBrokenUserDumpByNickname();
      }

      #endif

      public StringDataResponse GetBrokenUserDumpByNickname(string nickname, string date, bool zip)
      {
        #if !SILVERLIGHT
        send_GetBrokenUserDumpByNickname(nickname, date, zip);
        return recv_GetBrokenUserDumpByNickname();

        #else
        var asyncResult = Begin_GetBrokenUserDumpByNickname(null, null, nickname, date, zip);
        return End_GetBrokenUserDumpByNickname(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBrokenUserDumpByNickname(AsyncCallback callback, object state, string nickname, string date, bool zip)
      #else
      public void send_GetBrokenUserDumpByNickname(string nickname, string date, bool zip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetBrokenUserDumpByNickname", TMessageType.Call, seqid_));
        GetBrokenUserDumpByNickname_args args = new GetBrokenUserDumpByNickname_args();
        args.Nickname = nickname;
        args.Date = date;
        args.Zip = zip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StringDataResponse recv_GetBrokenUserDumpByNickname()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBrokenUserDumpByNickname_result result = new GetBrokenUserDumpByNickname_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBrokenUserDumpByNickname failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CheckAccountValidity(AsyncCallback callback, object state, string login)
      {
        return send_CheckAccountValidity(callback, state, login);
      }

      public StringDataResponse End_CheckAccountValidity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckAccountValidity();
      }

      #endif

      public StringDataResponse CheckAccountValidity(string login)
      {
        #if !SILVERLIGHT
        send_CheckAccountValidity(login);
        return recv_CheckAccountValidity();

        #else
        var asyncResult = Begin_CheckAccountValidity(null, null, login);
        return End_CheckAccountValidity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckAccountValidity(AsyncCallback callback, object state, string login)
      #else
      public void send_CheckAccountValidity(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CheckAccountValidity", TMessageType.Call, seqid_));
        CheckAccountValidity_args args = new CheckAccountValidity_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StringDataResponse recv_CheckAccountValidity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckAccountValidity_result result = new CheckAccountValidity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckAccountValidity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FixAccount(AsyncCallback callback, object state, string login, string gmLogin)
      {
        return send_FixAccount(callback, state, login, gmLogin);
      }

      public RequestResult End_FixAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FixAccount();
      }

      #endif

      public RequestResult FixAccount(string login, string gmLogin)
      {
        #if !SILVERLIGHT
        send_FixAccount(login, gmLogin);
        return recv_FixAccount();

        #else
        var asyncResult = Begin_FixAccount(null, null, login, gmLogin);
        return End_FixAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FixAccount(AsyncCallback callback, object state, string login, string gmLogin)
      #else
      public void send_FixAccount(string login, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FixAccount", TMessageType.Call, seqid_));
        FixAccount_args args = new FixAccount_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_FixAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FixAccount_result result = new FixAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FixAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ActivateEmail(AsyncCallback callback, object state, string email, string gmLogin)
      {
        return send_ActivateEmail(callback, state, email, gmLogin);
      }

      public RequestResult End_ActivateEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ActivateEmail();
      }

      #endif

      public RequestResult ActivateEmail(string email, string gmLogin)
      {
        #if !SILVERLIGHT
        send_ActivateEmail(email, gmLogin);
        return recv_ActivateEmail();

        #else
        var asyncResult = Begin_ActivateEmail(null, null, email, gmLogin);
        return End_ActivateEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ActivateEmail(AsyncCallback callback, object state, string email, string gmLogin)
      #else
      public void send_ActivateEmail(string email, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ActivateEmail", TMessageType.Call, seqid_));
        ActivateEmail_args args = new ActivateEmail_args();
        args.Email = email;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ActivateEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ActivateEmail_result result = new ActivateEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ActivateEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FlushServerId(AsyncCallback callback, object state, string login, string gmLogin)
      {
        return send_FlushServerId(callback, state, login, gmLogin);
      }

      public RequestResult End_FlushServerId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FlushServerId();
      }

      #endif

      public RequestResult FlushServerId(string login, string gmLogin)
      {
        #if !SILVERLIGHT
        send_FlushServerId(login, gmLogin);
        return recv_FlushServerId();

        #else
        var asyncResult = Begin_FlushServerId(null, null, login, gmLogin);
        return End_FlushServerId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FlushServerId(AsyncCallback callback, object state, string login, string gmLogin)
      #else
      public void send_FlushServerId(string login, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FlushServerId", TMessageType.Call, seqid_));
        FlushServerId_args args = new FlushServerId_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_FlushServerId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FlushServerId_result result = new FlushServerId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FlushServerId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddUserRestriction(AsyncCallback callback, object state, string snid, string snuid, string cbtAccessKey)
      {
        return send_AddUserRestriction(callback, state, snid, snuid, cbtAccessKey);
      }

      public RequestResult End_AddUserRestriction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddUserRestriction();
      }

      #endif

      public RequestResult AddUserRestriction(string snid, string snuid, string cbtAccessKey)
      {
        #if !SILVERLIGHT
        send_AddUserRestriction(snid, snuid, cbtAccessKey);
        return recv_AddUserRestriction();

        #else
        var asyncResult = Begin_AddUserRestriction(null, null, snid, snuid, cbtAccessKey);
        return End_AddUserRestriction(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddUserRestriction(AsyncCallback callback, object state, string snid, string snuid, string cbtAccessKey)
      #else
      public void send_AddUserRestriction(string snid, string snuid, string cbtAccessKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddUserRestriction", TMessageType.Call, seqid_));
        AddUserRestriction_args args = new AddUserRestriction_args();
        args.Snid = snid;
        args.Snuid = snuid;
        args.CbtAccessKey = cbtAccessKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddUserRestriction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddUserRestriction_result result = new AddUserRestriction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddUserRestriction failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditAccountDbValue(AsyncCallback callback, object state, string login, string gmLogin, string key, string value)
      {
        return send_EditAccountDbValue(callback, state, login, gmLogin, key, value);
      }

      public RequestResult End_EditAccountDbValue(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditAccountDbValue();
      }

      #endif

      public RequestResult EditAccountDbValue(string login, string gmLogin, string key, string value)
      {
        #if !SILVERLIGHT
        send_EditAccountDbValue(login, gmLogin, key, value);
        return recv_EditAccountDbValue();

        #else
        var asyncResult = Begin_EditAccountDbValue(null, null, login, gmLogin, key, value);
        return End_EditAccountDbValue(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditAccountDbValue(AsyncCallback callback, object state, string login, string gmLogin, string key, string value)
      #else
      public void send_EditAccountDbValue(string login, string gmLogin, string key, string value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditAccountDbValue", TMessageType.Call, seqid_));
        EditAccountDbValue_args args = new EditAccountDbValue_args();
        args.Login = login;
        args.GmLogin = gmLogin;
        args.Key = key;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditAccountDbValue()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditAccountDbValue_result result = new EditAccountDbValue_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditAccountDbValue failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RegisterPayment(AsyncCallback callback, object state, long auid, int amount, string source, string txnid)
      {
        return send_RegisterPayment(callback, state, auid, amount, source, txnid);
      }

      public RegisterPaymentResponse End_RegisterPayment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterPayment();
      }

      #endif

      public RegisterPaymentResponse RegisterPayment(long auid, int amount, string source, string txnid)
      {
        #if !SILVERLIGHT
        send_RegisterPayment(auid, amount, source, txnid);
        return recv_RegisterPayment();

        #else
        var asyncResult = Begin_RegisterPayment(null, null, auid, amount, source, txnid);
        return End_RegisterPayment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterPayment(AsyncCallback callback, object state, long auid, int amount, string source, string txnid)
      #else
      public void send_RegisterPayment(long auid, int amount, string source, string txnid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterPayment", TMessageType.Call, seqid_));
        RegisterPayment_args args = new RegisterPayment_args();
        args.Auid = auid;
        args.Amount = amount;
        args.Source = source;
        args.Txnid = txnid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RegisterPaymentResponse recv_RegisterPayment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterPayment_result result = new RegisterPayment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterPayment failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPaymentBonusActions(AsyncCallback callback, object state, long auid)
      {
        return send_GetPaymentBonusActions(callback, state, auid);
      }

      public GetPaymentBonusActionsResponse End_GetPaymentBonusActions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPaymentBonusActions();
      }

      #endif

      public GetPaymentBonusActionsResponse GetPaymentBonusActions(long auid)
      {
        #if !SILVERLIGHT
        send_GetPaymentBonusActions(auid);
        return recv_GetPaymentBonusActions();

        #else
        var asyncResult = Begin_GetPaymentBonusActions(null, null, auid);
        return End_GetPaymentBonusActions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPaymentBonusActions(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetPaymentBonusActions(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPaymentBonusActions", TMessageType.Call, seqid_));
        GetPaymentBonusActions_args args = new GetPaymentBonusActions_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GetPaymentBonusActionsResponse recv_GetPaymentBonusActions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPaymentBonusActions_result result = new GetPaymentBonusActions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPaymentBonusActions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReplenishUserGold(AsyncCallback callback, object state, long auid, int amount, string payment_system)
      {
        return send_ReplenishUserGold(callback, state, auid, amount, payment_system);
      }

      public RequestResult End_ReplenishUserGold(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ReplenishUserGold();
      }

      #endif

      public RequestResult ReplenishUserGold(long auid, int amount, string payment_system)
      {
        #if !SILVERLIGHT
        send_ReplenishUserGold(auid, amount, payment_system);
        return recv_ReplenishUserGold();

        #else
        var asyncResult = Begin_ReplenishUserGold(null, null, auid, amount, payment_system);
        return End_ReplenishUserGold(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReplenishUserGold(AsyncCallback callback, object state, long auid, int amount, string payment_system)
      #else
      public void send_ReplenishUserGold(long auid, int amount, string payment_system)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReplenishUserGold", TMessageType.Call, seqid_));
        ReplenishUserGold_args args = new ReplenishUserGold_args();
        args.Auid = auid;
        args.Amount = amount;
        args.Payment_system = payment_system;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ReplenishUserGold()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReplenishUserGold_result result = new ReplenishUserGold_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReplenishUserGold failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateUserGold(AsyncCallback callback, object state, long auid)
      {
        return send_UpdateUserGold(callback, state, auid);
      }

      public RequestResult End_UpdateUserGold(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateUserGold();
      }

      #endif

      public RequestResult UpdateUserGold(long auid)
      {
        #if !SILVERLIGHT
        send_UpdateUserGold(auid);
        return recv_UpdateUserGold();

        #else
        var asyncResult = Begin_UpdateUserGold(null, null, auid);
        return End_UpdateUserGold(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateUserGold(AsyncCallback callback, object state, long auid)
      #else
      public void send_UpdateUserGold(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateUserGold", TMessageType.Call, seqid_));
        UpdateUserGold_args args = new UpdateUserGold_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UpdateUserGold()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateUserGold_result result = new UpdateUserGold_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateUserGold failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetQuests(AsyncCallback callback, object state, long auid)
      {
        return send_GetQuests(callback, state, auid);
      }

      public QuestsInfoResponse End_GetQuests(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetQuests();
      }

      #endif

      public QuestsInfoResponse GetQuests(long auid)
      {
        #if !SILVERLIGHT
        send_GetQuests(auid);
        return recv_GetQuests();

        #else
        var asyncResult = Begin_GetQuests(null, null, auid);
        return End_GetQuests(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetQuests(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetQuests(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetQuests", TMessageType.Call, seqid_));
        GetQuests_args args = new GetQuests_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QuestsInfoResponse recv_GetQuests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetQuests_result result = new GetQuests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetQuests failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangeQuest(AsyncCallback callback, object state, long auid, int questid, QuestChangeAction action, string gmLogin)
      {
        return send_ChangeQuest(callback, state, auid, questid, action, gmLogin);
      }

      public ServerActionResponse End_ChangeQuest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ChangeQuest();
      }

      #endif

      public ServerActionResponse ChangeQuest(long auid, int questid, QuestChangeAction action, string gmLogin)
      {
        #if !SILVERLIGHT
        send_ChangeQuest(auid, questid, action, gmLogin);
        return recv_ChangeQuest();

        #else
        var asyncResult = Begin_ChangeQuest(null, null, auid, questid, action, gmLogin);
        return End_ChangeQuest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangeQuest(AsyncCallback callback, object state, long auid, int questid, QuestChangeAction action, string gmLogin)
      #else
      public void send_ChangeQuest(long auid, int questid, QuestChangeAction action, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangeQuest", TMessageType.Call, seqid_));
        ChangeQuest_args args = new ChangeQuest_args();
        args.Auid = auid;
        args.Questid = questid;
        args.Action = action;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServerActionResponse recv_ChangeQuest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangeQuest_result result = new ChangeQuest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangeQuest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateGeoshowFlag(AsyncCallback callback, object state, long auid, bool isAllowed)
      {
        return send_UpdateGeoshowFlag(callback, state, auid, isAllowed);
      }

      public RequestResult End_UpdateGeoshowFlag(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateGeoshowFlag();
      }

      #endif

      public RequestResult UpdateGeoshowFlag(long auid, bool isAllowed)
      {
        #if !SILVERLIGHT
        send_UpdateGeoshowFlag(auid, isAllowed);
        return recv_UpdateGeoshowFlag();

        #else
        var asyncResult = Begin_UpdateGeoshowFlag(null, null, auid, isAllowed);
        return End_UpdateGeoshowFlag(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateGeoshowFlag(AsyncCallback callback, object state, long auid, bool isAllowed)
      #else
      public void send_UpdateGeoshowFlag(long auid, bool isAllowed)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateGeoshowFlag", TMessageType.Call, seqid_));
        UpdateGeoshowFlag_args args = new UpdateGeoshowFlag_args();
        args.Auid = auid;
        args.IsAllowed = isAllowed;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UpdateGeoshowFlag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateGeoshowFlag_result result = new UpdateGeoshowFlag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateGeoshowFlag failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ApplyDLC(AsyncCallback callback, object state, long auid, string dlcid)
      {
        return send_ApplyDLC(callback, state, auid, dlcid);
      }

      public RequestResult End_ApplyDLC(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ApplyDLC();
      }

      #endif

      public RequestResult ApplyDLC(long auid, string dlcid)
      {
        #if !SILVERLIGHT
        send_ApplyDLC(auid, dlcid);
        return recv_ApplyDLC();

        #else
        var asyncResult = Begin_ApplyDLC(null, null, auid, dlcid);
        return End_ApplyDLC(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ApplyDLC(AsyncCallback callback, object state, long auid, string dlcid)
      #else
      public void send_ApplyDLC(long auid, string dlcid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ApplyDLC", TMessageType.Call, seqid_));
        ApplyDLC_args args = new ApplyDLC_args();
        args.Auid = auid;
        args.Dlcid = dlcid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ApplyDLC()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ApplyDLC_result result = new ApplyDLC_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ApplyDLC failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDynamicQuestInfo(AsyncCallback callback, object state)
      {
        return send_GetDynamicQuestInfo(callback, state);
      }

      public DynamicQuestInfoResponse End_GetDynamicQuestInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDynamicQuestInfo();
      }

      #endif

      public DynamicQuestInfoResponse GetDynamicQuestInfo()
      {
        #if !SILVERLIGHT
        send_GetDynamicQuestInfo();
        return recv_GetDynamicQuestInfo();

        #else
        var asyncResult = Begin_GetDynamicQuestInfo(null, null);
        return End_GetDynamicQuestInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDynamicQuestInfo(AsyncCallback callback, object state)
      #else
      public void send_GetDynamicQuestInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDynamicQuestInfo", TMessageType.Call, seqid_));
        GetDynamicQuestInfo_args args = new GetDynamicQuestInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DynamicQuestInfoResponse recv_GetDynamicQuestInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDynamicQuestInfo_result result = new GetDynamicQuestInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDynamicQuestInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDynamicQuestById(AsyncCallback callback, object state, int index)
      {
        return send_GetDynamicQuestById(callback, state, index);
      }

      public DynamicQuestByIdResponse End_GetDynamicQuestById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDynamicQuestById();
      }

      #endif

      public DynamicQuestByIdResponse GetDynamicQuestById(int index)
      {
        #if !SILVERLIGHT
        send_GetDynamicQuestById(index);
        return recv_GetDynamicQuestById();

        #else
        var asyncResult = Begin_GetDynamicQuestById(null, null, index);
        return End_GetDynamicQuestById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDynamicQuestById(AsyncCallback callback, object state, int index)
      #else
      public void send_GetDynamicQuestById(int index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDynamicQuestById", TMessageType.Call, seqid_));
        GetDynamicQuestById_args args = new GetDynamicQuestById_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DynamicQuestByIdResponse recv_GetDynamicQuestById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDynamicQuestById_result result = new GetDynamicQuestById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDynamicQuestById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddDynamicQuest(AsyncCallback callback, object state, string questData, string locale, string gmLogin)
      {
        return send_AddDynamicQuest(callback, state, questData, locale, gmLogin);
      }

      public AddDynamicQuestResponse End_AddDynamicQuest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddDynamicQuest();
      }

      #endif

      public AddDynamicQuestResponse AddDynamicQuest(string questData, string locale, string gmLogin)
      {
        #if !SILVERLIGHT
        send_AddDynamicQuest(questData, locale, gmLogin);
        return recv_AddDynamicQuest();

        #else
        var asyncResult = Begin_AddDynamicQuest(null, null, questData, locale, gmLogin);
        return End_AddDynamicQuest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddDynamicQuest(AsyncCallback callback, object state, string questData, string locale, string gmLogin)
      #else
      public void send_AddDynamicQuest(string questData, string locale, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddDynamicQuest", TMessageType.Call, seqid_));
        AddDynamicQuest_args args = new AddDynamicQuest_args();
        args.QuestData = questData;
        args.Locale = locale;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AddDynamicQuestResponse recv_AddDynamicQuest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddDynamicQuest_result result = new AddDynamicQuest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddDynamicQuest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveDynamicQuest(AsyncCallback callback, object state, int index, string locale)
      {
        return send_RemoveDynamicQuest(callback, state, index, locale);
      }

      public RequestResult End_RemoveDynamicQuest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveDynamicQuest();
      }

      #endif

      public RequestResult RemoveDynamicQuest(int index, string locale)
      {
        #if !SILVERLIGHT
        send_RemoveDynamicQuest(index, locale);
        return recv_RemoveDynamicQuest();

        #else
        var asyncResult = Begin_RemoveDynamicQuest(null, null, index, locale);
        return End_RemoveDynamicQuest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveDynamicQuest(AsyncCallback callback, object state, int index, string locale)
      #else
      public void send_RemoveDynamicQuest(int index, string locale)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveDynamicQuest", TMessageType.Call, seqid_));
        RemoveDynamicQuest_args args = new RemoveDynamicQuest_args();
        args.Index = index;
        args.Locale = locale;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveDynamicQuest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveDynamicQuest_result result = new RemoveDynamicQuest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveDynamicQuest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditDynamicQuest(AsyncCallback callback, object state, int index, string locale, string questData)
      {
        return send_EditDynamicQuest(callback, state, index, locale, questData);
      }

      public RequestResult End_EditDynamicQuest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditDynamicQuest();
      }

      #endif

      public RequestResult EditDynamicQuest(int index, string locale, string questData)
      {
        #if !SILVERLIGHT
        send_EditDynamicQuest(index, locale, questData);
        return recv_EditDynamicQuest();

        #else
        var asyncResult = Begin_EditDynamicQuest(null, null, index, locale, questData);
        return End_EditDynamicQuest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditDynamicQuest(AsyncCallback callback, object state, int index, string locale, string questData)
      #else
      public void send_EditDynamicQuest(int index, string locale, string questData)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditDynamicQuest", TMessageType.Call, seqid_));
        EditDynamicQuest_args args = new EditDynamicQuest_args();
        args.Index = index;
        args.Locale = locale;
        args.QuestData = questData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditDynamicQuest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditDynamicQuest_result result = new EditDynamicQuest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditDynamicQuest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDynamicQuestPullsInfo(AsyncCallback callback, object state)
      {
        return send_GetDynamicQuestPullsInfo(callback, state);
      }

      public DynamicQuestPullsInfoResponse End_GetDynamicQuestPullsInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDynamicQuestPullsInfo();
      }

      #endif

      public DynamicQuestPullsInfoResponse GetDynamicQuestPullsInfo()
      {
        #if !SILVERLIGHT
        send_GetDynamicQuestPullsInfo();
        return recv_GetDynamicQuestPullsInfo();

        #else
        var asyncResult = Begin_GetDynamicQuestPullsInfo(null, null);
        return End_GetDynamicQuestPullsInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDynamicQuestPullsInfo(AsyncCallback callback, object state)
      #else
      public void send_GetDynamicQuestPullsInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDynamicQuestPullsInfo", TMessageType.Call, seqid_));
        GetDynamicQuestPullsInfo_args args = new GetDynamicQuestPullsInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DynamicQuestPullsInfoResponse recv_GetDynamicQuestPullsInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDynamicQuestPullsInfo_result result = new GetDynamicQuestPullsInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDynamicQuestPullsInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDynamicQuestPullById(AsyncCallback callback, object state, int pullId)
      {
        return send_GetDynamicQuestPullById(callback, state, pullId);
      }

      public DynamicQuestPullByIdResponse End_GetDynamicQuestPullById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDynamicQuestPullById();
      }

      #endif

      public DynamicQuestPullByIdResponse GetDynamicQuestPullById(int pullId)
      {
        #if !SILVERLIGHT
        send_GetDynamicQuestPullById(pullId);
        return recv_GetDynamicQuestPullById();

        #else
        var asyncResult = Begin_GetDynamicQuestPullById(null, null, pullId);
        return End_GetDynamicQuestPullById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDynamicQuestPullById(AsyncCallback callback, object state, int pullId)
      #else
      public void send_GetDynamicQuestPullById(int pullId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDynamicQuestPullById", TMessageType.Call, seqid_));
        GetDynamicQuestPullById_args args = new GetDynamicQuestPullById_args();
        args.PullId = pullId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DynamicQuestPullByIdResponse recv_GetDynamicQuestPullById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDynamicQuestPullById_result result = new GetDynamicQuestPullById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDynamicQuestPullById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAuidsLists(AsyncCallback callback, object state)
      {
        return send_GetAuidsLists(callback, state);
      }

      public AuidsListResponse End_GetAuidsLists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAuidsLists();
      }

      #endif

      public AuidsListResponse GetAuidsLists()
      {
        #if !SILVERLIGHT
        send_GetAuidsLists();
        return recv_GetAuidsLists();

        #else
        var asyncResult = Begin_GetAuidsLists(null, null);
        return End_GetAuidsLists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAuidsLists(AsyncCallback callback, object state)
      #else
      public void send_GetAuidsLists()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAuidsLists", TMessageType.Call, seqid_));
        GetAuidsLists_args args = new GetAuidsLists_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AuidsListResponse recv_GetAuidsLists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAuidsLists_result result = new GetAuidsLists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAuidsLists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAuidsListById(AsyncCallback callback, object state, int index)
      {
        return send_GetAuidsListById(callback, state, index);
      }

      public AuidsListByIdResponse End_GetAuidsListById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAuidsListById();
      }

      #endif

      public AuidsListByIdResponse GetAuidsListById(int index)
      {
        #if !SILVERLIGHT
        send_GetAuidsListById(index);
        return recv_GetAuidsListById();

        #else
        var asyncResult = Begin_GetAuidsListById(null, null, index);
        return End_GetAuidsListById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAuidsListById(AsyncCallback callback, object state, int index)
      #else
      public void send_GetAuidsListById(int index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAuidsListById", TMessageType.Call, seqid_));
        GetAuidsListById_args args = new GetAuidsListById_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AuidsListByIdResponse recv_GetAuidsListById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAuidsListById_result result = new GetAuidsListById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAuidsListById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddAuidsList(AsyncCallback callback, object state, AuidsList auidsList, string gmLogin)
      {
        return send_AddAuidsList(callback, state, auidsList, gmLogin);
      }

      public RequestResult End_AddAuidsList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddAuidsList();
      }

      #endif

      public RequestResult AddAuidsList(AuidsList auidsList, string gmLogin)
      {
        #if !SILVERLIGHT
        send_AddAuidsList(auidsList, gmLogin);
        return recv_AddAuidsList();

        #else
        var asyncResult = Begin_AddAuidsList(null, null, auidsList, gmLogin);
        return End_AddAuidsList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddAuidsList(AsyncCallback callback, object state, AuidsList auidsList, string gmLogin)
      #else
      public void send_AddAuidsList(AuidsList auidsList, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddAuidsList", TMessageType.Call, seqid_));
        AddAuidsList_args args = new AddAuidsList_args();
        args.AuidsList = auidsList;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddAuidsList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddAuidsList_result result = new AddAuidsList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddAuidsList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditAuidsList(AsyncCallback callback, object state, AuidsList auidsList, string gmLogin)
      {
        return send_EditAuidsList(callback, state, auidsList, gmLogin);
      }

      public RequestResult End_EditAuidsList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditAuidsList();
      }

      #endif

      public RequestResult EditAuidsList(AuidsList auidsList, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditAuidsList(auidsList, gmLogin);
        return recv_EditAuidsList();

        #else
        var asyncResult = Begin_EditAuidsList(null, null, auidsList, gmLogin);
        return End_EditAuidsList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditAuidsList(AsyncCallback callback, object state, AuidsList auidsList, string gmLogin)
      #else
      public void send_EditAuidsList(AuidsList auidsList, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditAuidsList", TMessageType.Call, seqid_));
        EditAuidsList_args args = new EditAuidsList_args();
        args.AuidsList = auidsList;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditAuidsList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditAuidsList_result result = new EditAuidsList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditAuidsList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveAuidsList(AsyncCallback callback, object state, int index)
      {
        return send_RemoveAuidsList(callback, state, index);
      }

      public RequestResult End_RemoveAuidsList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveAuidsList();
      }

      #endif

      public RequestResult RemoveAuidsList(int index)
      {
        #if !SILVERLIGHT
        send_RemoveAuidsList(index);
        return recv_RemoveAuidsList();

        #else
        var asyncResult = Begin_RemoveAuidsList(null, null, index);
        return End_RemoveAuidsList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveAuidsList(AsyncCallback callback, object state, int index)
      #else
      public void send_RemoveAuidsList(int index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveAuidsList", TMessageType.Call, seqid_));
        RemoveAuidsList_args args = new RemoveAuidsList_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveAuidsList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveAuidsList_result result = new RemoveAuidsList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveAuidsList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddDynamicQuestPull(AsyncCallback callback, object state, DynamicQuestPull questPull, string gmLogin)
      {
        return send_AddDynamicQuestPull(callback, state, questPull, gmLogin);
      }

      public RequestResult End_AddDynamicQuestPull(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddDynamicQuestPull();
      }

      #endif

      public RequestResult AddDynamicQuestPull(DynamicQuestPull questPull, string gmLogin)
      {
        #if !SILVERLIGHT
        send_AddDynamicQuestPull(questPull, gmLogin);
        return recv_AddDynamicQuestPull();

        #else
        var asyncResult = Begin_AddDynamicQuestPull(null, null, questPull, gmLogin);
        return End_AddDynamicQuestPull(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddDynamicQuestPull(AsyncCallback callback, object state, DynamicQuestPull questPull, string gmLogin)
      #else
      public void send_AddDynamicQuestPull(DynamicQuestPull questPull, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddDynamicQuestPull", TMessageType.Call, seqid_));
        AddDynamicQuestPull_args args = new AddDynamicQuestPull_args();
        args.QuestPull = questPull;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddDynamicQuestPull()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddDynamicQuestPull_result result = new AddDynamicQuestPull_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddDynamicQuestPull failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditDynamicQuestPull(AsyncCallback callback, object state, DynamicQuestPull questPull, string gmLogin)
      {
        return send_EditDynamicQuestPull(callback, state, questPull, gmLogin);
      }

      public RequestResult End_EditDynamicQuestPull(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditDynamicQuestPull();
      }

      #endif

      public RequestResult EditDynamicQuestPull(DynamicQuestPull questPull, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditDynamicQuestPull(questPull, gmLogin);
        return recv_EditDynamicQuestPull();

        #else
        var asyncResult = Begin_EditDynamicQuestPull(null, null, questPull, gmLogin);
        return End_EditDynamicQuestPull(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditDynamicQuestPull(AsyncCallback callback, object state, DynamicQuestPull questPull, string gmLogin)
      #else
      public void send_EditDynamicQuestPull(DynamicQuestPull questPull, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditDynamicQuestPull", TMessageType.Call, seqid_));
        EditDynamicQuestPull_args args = new EditDynamicQuestPull_args();
        args.QuestPull = questPull;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditDynamicQuestPull()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditDynamicQuestPull_result result = new EditDynamicQuestPull_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditDynamicQuestPull failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveDynamicQuestPull(AsyncCallback callback, object state, int index, string locale, string gmLogin)
      {
        return send_RemoveDynamicQuestPull(callback, state, index, locale, gmLogin);
      }

      public RequestResult End_RemoveDynamicQuestPull(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveDynamicQuestPull();
      }

      #endif

      public RequestResult RemoveDynamicQuestPull(int index, string locale, string gmLogin)
      {
        #if !SILVERLIGHT
        send_RemoveDynamicQuestPull(index, locale, gmLogin);
        return recv_RemoveDynamicQuestPull();

        #else
        var asyncResult = Begin_RemoveDynamicQuestPull(null, null, index, locale, gmLogin);
        return End_RemoveDynamicQuestPull(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveDynamicQuestPull(AsyncCallback callback, object state, int index, string locale, string gmLogin)
      #else
      public void send_RemoveDynamicQuestPull(int index, string locale, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveDynamicQuestPull", TMessageType.Call, seqid_));
        RemoveDynamicQuestPull_args args = new RemoveDynamicQuestPull_args();
        args.Index = index;
        args.Locale = locale;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveDynamicQuestPull()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveDynamicQuestPull_result result = new RemoveDynamicQuestPull_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveDynamicQuestPull failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddDynamicQuestsToPull(AsyncCallback callback, object state, int pullId, List<int> questIds, string locale, string gmLogin)
      {
        return send_AddDynamicQuestsToPull(callback, state, pullId, questIds, locale, gmLogin);
      }

      public RequestResult End_AddDynamicQuestsToPull(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddDynamicQuestsToPull();
      }

      #endif

      public RequestResult AddDynamicQuestsToPull(int pullId, List<int> questIds, string locale, string gmLogin)
      {
        #if !SILVERLIGHT
        send_AddDynamicQuestsToPull(pullId, questIds, locale, gmLogin);
        return recv_AddDynamicQuestsToPull();

        #else
        var asyncResult = Begin_AddDynamicQuestsToPull(null, null, pullId, questIds, locale, gmLogin);
        return End_AddDynamicQuestsToPull(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddDynamicQuestsToPull(AsyncCallback callback, object state, int pullId, List<int> questIds, string locale, string gmLogin)
      #else
      public void send_AddDynamicQuestsToPull(int pullId, List<int> questIds, string locale, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddDynamicQuestsToPull", TMessageType.Call, seqid_));
        AddDynamicQuestsToPull_args args = new AddDynamicQuestsToPull_args();
        args.PullId = pullId;
        args.QuestIds = questIds;
        args.Locale = locale;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddDynamicQuestsToPull()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddDynamicQuestsToPull_result result = new AddDynamicQuestsToPull_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddDynamicQuestsToPull failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveDynamicQuestsFromPull(AsyncCallback callback, object state, int pullId, List<int> questIds, string locale, string gmLogin)
      {
        return send_RemoveDynamicQuestsFromPull(callback, state, pullId, questIds, locale, gmLogin);
      }

      public RequestResult End_RemoveDynamicQuestsFromPull(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveDynamicQuestsFromPull();
      }

      #endif

      public RequestResult RemoveDynamicQuestsFromPull(int pullId, List<int> questIds, string locale, string gmLogin)
      {
        #if !SILVERLIGHT
        send_RemoveDynamicQuestsFromPull(pullId, questIds, locale, gmLogin);
        return recv_RemoveDynamicQuestsFromPull();

        #else
        var asyncResult = Begin_RemoveDynamicQuestsFromPull(null, null, pullId, questIds, locale, gmLogin);
        return End_RemoveDynamicQuestsFromPull(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveDynamicQuestsFromPull(AsyncCallback callback, object state, int pullId, List<int> questIds, string locale, string gmLogin)
      #else
      public void send_RemoveDynamicQuestsFromPull(int pullId, List<int> questIds, string locale, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveDynamicQuestsFromPull", TMessageType.Call, seqid_));
        RemoveDynamicQuestsFromPull_args args = new RemoveDynamicQuestsFromPull_args();
        args.PullId = pullId;
        args.QuestIds = questIds;
        args.Locale = locale;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveDynamicQuestsFromPull()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveDynamicQuestsFromPull_result result = new RemoveDynamicQuestsFromPull_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveDynamicQuestsFromPull failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountFlags(AsyncCallback callback, object state, string login)
      {
        return send_GetAccountFlags(callback, state, login);
      }

      public FlagResponse End_GetAccountFlags(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountFlags();
      }

      #endif

      public FlagResponse GetAccountFlags(string login)
      {
        #if !SILVERLIGHT
        send_GetAccountFlags(login);
        return recv_GetAccountFlags();

        #else
        var asyncResult = Begin_GetAccountFlags(null, null, login);
        return End_GetAccountFlags(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountFlags(AsyncCallback callback, object state, string login)
      #else
      public void send_GetAccountFlags(string login)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountFlags", TMessageType.Call, seqid_));
        GetAccountFlags_args args = new GetAccountFlags_args();
        args.Login = login;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FlagResponse recv_GetAccountFlags()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountFlags_result result = new GetAccountFlags_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountFlags failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnlockFlag(AsyncCallback callback, object state, string login, string flagPersistentId, string gmLogin, string extra_comment)
      {
        return send_UnlockFlag(callback, state, login, flagPersistentId, gmLogin, extra_comment);
      }

      public RequestResult End_UnlockFlag(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnlockFlag();
      }

      #endif

      public RequestResult UnlockFlag(string login, string flagPersistentId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_UnlockFlag(login, flagPersistentId, gmLogin, extra_comment);
        return recv_UnlockFlag();

        #else
        var asyncResult = Begin_UnlockFlag(null, null, login, flagPersistentId, gmLogin, extra_comment);
        return End_UnlockFlag(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnlockFlag(AsyncCallback callback, object state, string login, string flagPersistentId, string gmLogin, string extra_comment)
      #else
      public void send_UnlockFlag(string login, string flagPersistentId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnlockFlag", TMessageType.Call, seqid_));
        UnlockFlag_args args = new UnlockFlag_args();
        args.Login = login;
        args.FlagPersistentId = flagPersistentId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_UnlockFlag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnlockFlag_result result = new UnlockFlag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnlockFlag failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LockFlag(AsyncCallback callback, object state, string login, string flagPersistentId, string gmLogin, string extra_comment)
      {
        return send_LockFlag(callback, state, login, flagPersistentId, gmLogin, extra_comment);
      }

      public RequestResult End_LockFlag(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_LockFlag();
      }

      #endif

      public RequestResult LockFlag(string login, string flagPersistentId, string gmLogin, string extra_comment)
      {
        #if !SILVERLIGHT
        send_LockFlag(login, flagPersistentId, gmLogin, extra_comment);
        return recv_LockFlag();

        #else
        var asyncResult = Begin_LockFlag(null, null, login, flagPersistentId, gmLogin, extra_comment);
        return End_LockFlag(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LockFlag(AsyncCallback callback, object state, string login, string flagPersistentId, string gmLogin, string extra_comment)
      #else
      public void send_LockFlag(string login, string flagPersistentId, string gmLogin, string extra_comment)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LockFlag", TMessageType.Call, seqid_));
        LockFlag_args args = new LockFlag_args();
        args.Login = login;
        args.FlagPersistentId = flagPersistentId;
        args.GmLogin = gmLogin;
        args.Extra_comment = extra_comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_LockFlag()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LockFlag_result result = new LockFlag_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LockFlag failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BindToGeolocation(AsyncCallback callback, object state, long auid, string country, string region, string city, string gmLogin)
      {
        return send_BindToGeolocation(callback, state, auid, country, region, city, gmLogin);
      }

      public RequestResult End_BindToGeolocation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BindToGeolocation();
      }

      #endif

      public RequestResult BindToGeolocation(long auid, string country, string region, string city, string gmLogin)
      {
        #if !SILVERLIGHT
        send_BindToGeolocation(auid, country, region, city, gmLogin);
        return recv_BindToGeolocation();

        #else
        var asyncResult = Begin_BindToGeolocation(null, null, auid, country, region, city, gmLogin);
        return End_BindToGeolocation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BindToGeolocation(AsyncCallback callback, object state, long auid, string country, string region, string city, string gmLogin)
      #else
      public void send_BindToGeolocation(long auid, string country, string region, string city, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BindToGeolocation", TMessageType.Call, seqid_));
        BindToGeolocation_args args = new BindToGeolocation_args();
        args.Auid = auid;
        args.Country = country;
        args.Region = region;
        args.City = city;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_BindToGeolocation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BindToGeolocation_result result = new BindToGeolocation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BindToGeolocation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTalentsEvents(AsyncCallback callback, object state)
      {
        return send_GetTalentsEvents(callback, state);
      }

      public TalentsEventsResponse End_GetTalentsEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTalentsEvents();
      }

      #endif

      public TalentsEventsResponse GetTalentsEvents()
      {
        #if !SILVERLIGHT
        send_GetTalentsEvents();
        return recv_GetTalentsEvents();

        #else
        var asyncResult = Begin_GetTalentsEvents(null, null);
        return End_GetTalentsEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTalentsEvents(AsyncCallback callback, object state)
      #else
      public void send_GetTalentsEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTalentsEvents", TMessageType.Call, seqid_));
        GetTalentsEvents_args args = new GetTalentsEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TalentsEventsResponse recv_GetTalentsEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTalentsEvents_result result = new GetTalentsEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTalentsEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetResourceEvents(AsyncCallback callback, object state)
      {
        return send_GetResourceEvents(callback, state);
      }

      public ResourceEventsResponse End_GetResourceEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetResourceEvents();
      }

      #endif

      public ResourceEventsResponse GetResourceEvents()
      {
        #if !SILVERLIGHT
        send_GetResourceEvents();
        return recv_GetResourceEvents();

        #else
        var asyncResult = Begin_GetResourceEvents(null, null);
        return End_GetResourceEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetResourceEvents(AsyncCallback callback, object state)
      #else
      public void send_GetResourceEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetResourceEvents", TMessageType.Call, seqid_));
        GetResourceEvents_args args = new GetResourceEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResourceEventsResponse recv_GetResourceEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetResourceEvents_result result = new GetResourceEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetResourceEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddMassOperation(AsyncCallback callback, object state, MassOperationInfo massOperation, string gmLogin)
      {
        return send_AddMassOperation(callback, state, massOperation, gmLogin);
      }

      public RequestResult End_AddMassOperation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddMassOperation();
      }

      #endif

      public RequestResult AddMassOperation(MassOperationInfo massOperation, string gmLogin)
      {
        #if !SILVERLIGHT
        send_AddMassOperation(massOperation, gmLogin);
        return recv_AddMassOperation();

        #else
        var asyncResult = Begin_AddMassOperation(null, null, massOperation, gmLogin);
        return End_AddMassOperation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddMassOperation(AsyncCallback callback, object state, MassOperationInfo massOperation, string gmLogin)
      #else
      public void send_AddMassOperation(MassOperationInfo massOperation, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddMassOperation", TMessageType.Call, seqid_));
        AddMassOperation_args args = new AddMassOperation_args();
        args.MassOperation = massOperation;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddMassOperation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddMassOperation_result result = new AddMassOperation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddMassOperation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMassOperationsInfo(AsyncCallback callback, object state)
      {
        return send_GetMassOperationsInfo(callback, state);
      }

      public MassOperationsResultResponse End_GetMassOperationsInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMassOperationsInfo();
      }

      #endif

      public MassOperationsResultResponse GetMassOperationsInfo()
      {
        #if !SILVERLIGHT
        send_GetMassOperationsInfo();
        return recv_GetMassOperationsInfo();

        #else
        var asyncResult = Begin_GetMassOperationsInfo(null, null);
        return End_GetMassOperationsInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMassOperationsInfo(AsyncCallback callback, object state)
      #else
      public void send_GetMassOperationsInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMassOperationsInfo", TMessageType.Call, seqid_));
        GetMassOperationsInfo_args args = new GetMassOperationsInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MassOperationsResultResponse recv_GetMassOperationsInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMassOperationsInfo_result result = new GetMassOperationsInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMassOperationsInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteMassOperationInfo(AsyncCallback callback, object state, int operaionId)
      {
        return send_DeleteMassOperationInfo(callback, state, operaionId);
      }

      public RequestResult End_DeleteMassOperationInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteMassOperationInfo();
      }

      #endif

      public RequestResult DeleteMassOperationInfo(int operaionId)
      {
        #if !SILVERLIGHT
        send_DeleteMassOperationInfo(operaionId);
        return recv_DeleteMassOperationInfo();

        #else
        var asyncResult = Begin_DeleteMassOperationInfo(null, null, operaionId);
        return End_DeleteMassOperationInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteMassOperationInfo(AsyncCallback callback, object state, int operaionId)
      #else
      public void send_DeleteMassOperationInfo(int operaionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteMassOperationInfo", TMessageType.Call, seqid_));
        DeleteMassOperationInfo_args args = new DeleteMassOperationInfo_args();
        args.OperaionId = operaionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteMassOperationInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteMassOperationInfo_result result = new DeleteMassOperationInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteMassOperationInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAvailableEvents(AsyncCallback callback, object state)
      {
        return send_GetAvailableEvents(callback, state);
      }

      public CommonEventsListResponse End_GetAvailableEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvailableEvents();
      }

      #endif

      public CommonEventsListResponse GetAvailableEvents()
      {
        #if !SILVERLIGHT
        send_GetAvailableEvents();
        return recv_GetAvailableEvents();

        #else
        var asyncResult = Begin_GetAvailableEvents(null, null);
        return End_GetAvailableEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvailableEvents(AsyncCallback callback, object state)
      #else
      public void send_GetAvailableEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvailableEvents", TMessageType.Call, seqid_));
        GetAvailableEvents_args args = new GetAvailableEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CommonEventsListResponse recv_GetAvailableEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvailableEvents_result result = new GetAvailableEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvailableEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangeEventStateById(AsyncCallback callback, object state, int persistentId, bool state)
      {
        return send_ChangeEventStateById(callback, state, persistentId, state);
      }

      public RequestResult End_ChangeEventStateById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ChangeEventStateById();
      }

      #endif

      public RequestResult ChangeEventStateById(int persistentId, bool state)
      {
        #if !SILVERLIGHT
        send_ChangeEventStateById(persistentId, state);
        return recv_ChangeEventStateById();

        #else
        var asyncResult = Begin_ChangeEventStateById(null, null, persistentId, state);
        return End_ChangeEventStateById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangeEventStateById(AsyncCallback callback, object state, int persistentId, bool state)
      #else
      public void send_ChangeEventStateById(int persistentId, bool state)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangeEventStateById", TMessageType.Call, seqid_));
        ChangeEventStateById_args args = new ChangeEventStateById_args();
        args.PersistentId = persistentId;
        args.State = state;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_ChangeEventStateById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangeEventStateById_result result = new ChangeEventStateById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangeEventStateById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_DeleteEventById(callback, state, persistentId);
      }

      public RequestResult End_DeleteEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteEventById();
      }

      #endif

      public RequestResult DeleteEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_DeleteEventById(persistentId);
        return recv_DeleteEventById();

        #else
        var asyncResult = Begin_DeleteEventById(null, null, persistentId);
        return End_DeleteEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_DeleteEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteEventById", TMessageType.Call, seqid_));
        DeleteEventById_args args = new DeleteEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_DeleteEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteEventById_result result = new DeleteEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTechsInfos(AsyncCallback callback, object state)
      {
        return send_GetTechsInfos(callback, state);
      }

      public TechsInfosResponse End_GetTechsInfos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTechsInfos();
      }

      #endif

      public TechsInfosResponse GetTechsInfos()
      {
        #if !SILVERLIGHT
        send_GetTechsInfos();
        return recv_GetTechsInfos();

        #else
        var asyncResult = Begin_GetTechsInfos(null, null);
        return End_GetTechsInfos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTechsInfos(AsyncCallback callback, object state)
      #else
      public void send_GetTechsInfos()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTechsInfos", TMessageType.Call, seqid_));
        GetTechsInfos_args args = new GetTechsInfos_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TechsInfosResponse recv_GetTechsInfos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTechsInfos_result result = new GetTechsInfos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTechsInfos failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTechsInfoById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetTechsInfoById(callback, state, persistentId);
      }

      public TechsInfoByIdResponse End_GetTechsInfoById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTechsInfoById();
      }

      #endif

      public TechsInfoByIdResponse GetTechsInfoById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetTechsInfoById(persistentId);
        return recv_GetTechsInfoById();

        #else
        var asyncResult = Begin_GetTechsInfoById(null, null, persistentId);
        return End_GetTechsInfoById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTechsInfoById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetTechsInfoById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTechsInfoById", TMessageType.Call, seqid_));
        GetTechsInfoById_args args = new GetTechsInfoById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TechsInfoByIdResponse recv_GetTechsInfoById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTechsInfoById_result result = new GetTechsInfoById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTechsInfoById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddTechs(AsyncCallback callback, object state, TechsInfo techInfo)
      {
        return send_AddTechs(callback, state, techInfo);
      }

      public RequestResult End_AddTechs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddTechs();
      }

      #endif

      public RequestResult AddTechs(TechsInfo techInfo)
      {
        #if !SILVERLIGHT
        send_AddTechs(techInfo);
        return recv_AddTechs();

        #else
        var asyncResult = Begin_AddTechs(null, null, techInfo);
        return End_AddTechs(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddTechs(AsyncCallback callback, object state, TechsInfo techInfo)
      #else
      public void send_AddTechs(TechsInfo techInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddTechs", TMessageType.Call, seqid_));
        AddTechs_args args = new AddTechs_args();
        args.TechInfo = techInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddTechs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddTechs_result result = new AddTechs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTechs failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditTechs(AsyncCallback callback, object state, TechsInfo techInfo)
      {
        return send_EditTechs(callback, state, techInfo);
      }

      public RequestResult End_EditTechs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditTechs();
      }

      #endif

      public RequestResult EditTechs(TechsInfo techInfo)
      {
        #if !SILVERLIGHT
        send_EditTechs(techInfo);
        return recv_EditTechs();

        #else
        var asyncResult = Begin_EditTechs(null, null, techInfo);
        return End_EditTechs(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditTechs(AsyncCallback callback, object state, TechsInfo techInfo)
      #else
      public void send_EditTechs(TechsInfo techInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditTechs", TMessageType.Call, seqid_));
        EditTechs_args args = new EditTechs_args();
        args.TechInfo = techInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditTechs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditTechs_result result = new EditTechs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditTechs failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCustomEvents(AsyncCallback callback, object state)
      {
        return send_GetCustomEvents(callback, state);
      }

      public CustomEventsResponse End_GetCustomEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCustomEvents();
      }

      #endif

      public CustomEventsResponse GetCustomEvents()
      {
        #if !SILVERLIGHT
        send_GetCustomEvents();
        return recv_GetCustomEvents();

        #else
        var asyncResult = Begin_GetCustomEvents(null, null);
        return End_GetCustomEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCustomEvents(AsyncCallback callback, object state)
      #else
      public void send_GetCustomEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCustomEvents", TMessageType.Call, seqid_));
        GetCustomEvents_args args = new GetCustomEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CustomEventsResponse recv_GetCustomEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCustomEvents_result result = new GetCustomEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCustomEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCustomEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetCustomEventById(callback, state, persistentId);
      }

      public CustomEventByIdResponse End_GetCustomEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCustomEventById();
      }

      #endif

      public CustomEventByIdResponse GetCustomEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetCustomEventById(persistentId);
        return recv_GetCustomEventById();

        #else
        var asyncResult = Begin_GetCustomEventById(null, null, persistentId);
        return End_GetCustomEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCustomEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetCustomEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCustomEventById", TMessageType.Call, seqid_));
        GetCustomEventById_args args = new GetCustomEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CustomEventByIdResponse recv_GetCustomEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCustomEventById_result result = new GetCustomEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCustomEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddCustomEvent(AsyncCallback callback, object state, CustomEvent customEvent)
      {
        return send_AddCustomEvent(callback, state, customEvent);
      }

      public RequestResult End_AddCustomEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddCustomEvent();
      }

      #endif

      public RequestResult AddCustomEvent(CustomEvent customEvent)
      {
        #if !SILVERLIGHT
        send_AddCustomEvent(customEvent);
        return recv_AddCustomEvent();

        #else
        var asyncResult = Begin_AddCustomEvent(null, null, customEvent);
        return End_AddCustomEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddCustomEvent(AsyncCallback callback, object state, CustomEvent customEvent)
      #else
      public void send_AddCustomEvent(CustomEvent customEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddCustomEvent", TMessageType.Call, seqid_));
        AddCustomEvent_args args = new AddCustomEvent_args();
        args.CustomEvent = customEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddCustomEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddCustomEvent_result result = new AddCustomEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddCustomEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditCustomEvent(AsyncCallback callback, object state, CustomEvent customEvent)
      {
        return send_EditCustomEvent(callback, state, customEvent);
      }

      public RequestResult End_EditCustomEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditCustomEvent();
      }

      #endif

      public RequestResult EditCustomEvent(CustomEvent customEvent)
      {
        #if !SILVERLIGHT
        send_EditCustomEvent(customEvent);
        return recv_EditCustomEvent();

        #else
        var asyncResult = Begin_EditCustomEvent(null, null, customEvent);
        return End_EditCustomEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditCustomEvent(AsyncCallback callback, object state, CustomEvent customEvent)
      #else
      public void send_EditCustomEvent(CustomEvent customEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditCustomEvent", TMessageType.Call, seqid_));
        EditCustomEvent_args args = new EditCustomEvent_args();
        args.CustomEvent = customEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditCustomEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditCustomEvent_result result = new EditCustomEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditCustomEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCustomMaps(AsyncCallback callback, object state)
      {
        return send_GetCustomMaps(callback, state);
      }

      public CustomMapsResponse End_GetCustomMaps(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCustomMaps();
      }

      #endif

      public CustomMapsResponse GetCustomMaps()
      {
        #if !SILVERLIGHT
        send_GetCustomMaps();
        return recv_GetCustomMaps();

        #else
        var asyncResult = Begin_GetCustomMaps(null, null);
        return End_GetCustomMaps(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCustomMaps(AsyncCallback callback, object state)
      #else
      public void send_GetCustomMaps()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCustomMaps", TMessageType.Call, seqid_));
        GetCustomMaps_args args = new GetCustomMaps_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CustomMapsResponse recv_GetCustomMaps()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCustomMaps_result result = new GetCustomMaps_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCustomMaps failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCustomMapById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetCustomMapById(callback, state, persistentId);
      }

      public CustomMapByIdResponse End_GetCustomMapById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCustomMapById();
      }

      #endif

      public CustomMapByIdResponse GetCustomMapById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetCustomMapById(persistentId);
        return recv_GetCustomMapById();

        #else
        var asyncResult = Begin_GetCustomMapById(null, null, persistentId);
        return End_GetCustomMapById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCustomMapById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetCustomMapById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCustomMapById", TMessageType.Call, seqid_));
        GetCustomMapById_args args = new GetCustomMapById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CustomMapByIdResponse recv_GetCustomMapById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCustomMapById_result result = new GetCustomMapById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCustomMapById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddCustomMap(AsyncCallback callback, object state, CustomMap customMap)
      {
        return send_AddCustomMap(callback, state, customMap);
      }

      public RequestResult End_AddCustomMap(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddCustomMap();
      }

      #endif

      public RequestResult AddCustomMap(CustomMap customMap)
      {
        #if !SILVERLIGHT
        send_AddCustomMap(customMap);
        return recv_AddCustomMap();

        #else
        var asyncResult = Begin_AddCustomMap(null, null, customMap);
        return End_AddCustomMap(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddCustomMap(AsyncCallback callback, object state, CustomMap customMap)
      #else
      public void send_AddCustomMap(CustomMap customMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddCustomMap", TMessageType.Call, seqid_));
        AddCustomMap_args args = new AddCustomMap_args();
        args.CustomMap = customMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddCustomMap()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddCustomMap_result result = new AddCustomMap_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddCustomMap failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditCustomMap(AsyncCallback callback, object state, CustomMap customMap)
      {
        return send_EditCustomMap(callback, state, customMap);
      }

      public RequestResult End_EditCustomMap(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditCustomMap();
      }

      #endif

      public RequestResult EditCustomMap(CustomMap customMap)
      {
        #if !SILVERLIGHT
        send_EditCustomMap(customMap);
        return recv_EditCustomMap();

        #else
        var asyncResult = Begin_EditCustomMap(null, null, customMap);
        return End_EditCustomMap(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditCustomMap(AsyncCallback callback, object state, CustomMap customMap)
      #else
      public void send_EditCustomMap(CustomMap customMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditCustomMap", TMessageType.Call, seqid_));
        EditCustomMap_args args = new EditCustomMap_args();
        args.CustomMap = customMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditCustomMap()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditCustomMap_result result = new EditCustomMap_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditCustomMap failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTalentDropRarities(AsyncCallback callback, object state)
      {
        return send_GetTalentDropRarities(callback, state);
      }

      public TalentDropRaritiesResponse End_GetTalentDropRarities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTalentDropRarities();
      }

      #endif

      public TalentDropRaritiesResponse GetTalentDropRarities()
      {
        #if !SILVERLIGHT
        send_GetTalentDropRarities();
        return recv_GetTalentDropRarities();

        #else
        var asyncResult = Begin_GetTalentDropRarities(null, null);
        return End_GetTalentDropRarities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTalentDropRarities(AsyncCallback callback, object state)
      #else
      public void send_GetTalentDropRarities()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTalentDropRarities", TMessageType.Call, seqid_));
        GetTalentDropRarities_args args = new GetTalentDropRarities_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TalentDropRaritiesResponse recv_GetTalentDropRarities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTalentDropRarities_result result = new GetTalentDropRarities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTalentDropRarities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTalentDropRarityById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetTalentDropRarityById(callback, state, persistentId);
      }

      public TalentDropRarityByIdResponse End_GetTalentDropRarityById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTalentDropRarityById();
      }

      #endif

      public TalentDropRarityByIdResponse GetTalentDropRarityById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetTalentDropRarityById(persistentId);
        return recv_GetTalentDropRarityById();

        #else
        var asyncResult = Begin_GetTalentDropRarityById(null, null, persistentId);
        return End_GetTalentDropRarityById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTalentDropRarityById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetTalentDropRarityById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTalentDropRarityById", TMessageType.Call, seqid_));
        GetTalentDropRarityById_args args = new GetTalentDropRarityById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TalentDropRarityByIdResponse recv_GetTalentDropRarityById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTalentDropRarityById_result result = new GetTalentDropRarityById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTalentDropRarityById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddTalentDropRarities(AsyncCallback callback, object state, TalentDropRarityEvent dropRarity)
      {
        return send_AddTalentDropRarities(callback, state, dropRarity);
      }

      public RequestResult End_AddTalentDropRarities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddTalentDropRarities();
      }

      #endif

      public RequestResult AddTalentDropRarities(TalentDropRarityEvent dropRarity)
      {
        #if !SILVERLIGHT
        send_AddTalentDropRarities(dropRarity);
        return recv_AddTalentDropRarities();

        #else
        var asyncResult = Begin_AddTalentDropRarities(null, null, dropRarity);
        return End_AddTalentDropRarities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddTalentDropRarities(AsyncCallback callback, object state, TalentDropRarityEvent dropRarity)
      #else
      public void send_AddTalentDropRarities(TalentDropRarityEvent dropRarity)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddTalentDropRarities", TMessageType.Call, seqid_));
        AddTalentDropRarities_args args = new AddTalentDropRarities_args();
        args.DropRarity = dropRarity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddTalentDropRarities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddTalentDropRarities_result result = new AddTalentDropRarities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTalentDropRarities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditTalentDropRarities(AsyncCallback callback, object state, TalentDropRarityEvent dropRarity)
      {
        return send_EditTalentDropRarities(callback, state, dropRarity);
      }

      public RequestResult End_EditTalentDropRarities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditTalentDropRarities();
      }

      #endif

      public RequestResult EditTalentDropRarities(TalentDropRarityEvent dropRarity)
      {
        #if !SILVERLIGHT
        send_EditTalentDropRarities(dropRarity);
        return recv_EditTalentDropRarities();

        #else
        var asyncResult = Begin_EditTalentDropRarities(null, null, dropRarity);
        return End_EditTalentDropRarities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditTalentDropRarities(AsyncCallback callback, object state, TalentDropRarityEvent dropRarity)
      #else
      public void send_EditTalentDropRarities(TalentDropRarityEvent dropRarity)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditTalentDropRarities", TMessageType.Call, seqid_));
        EditTalentDropRarities_args args = new EditTalentDropRarities_args();
        args.DropRarity = dropRarity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditTalentDropRarities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditTalentDropRarities_result result = new EditTalentDropRarities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditTalentDropRarities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetNewsBanners(AsyncCallback callback, object state)
      {
        return send_GetNewsBanners(callback, state);
      }

      public NewsBannersResponse End_GetNewsBanners(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNewsBanners();
      }

      #endif

      public NewsBannersResponse GetNewsBanners()
      {
        #if !SILVERLIGHT
        send_GetNewsBanners();
        return recv_GetNewsBanners();

        #else
        var asyncResult = Begin_GetNewsBanners(null, null);
        return End_GetNewsBanners(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNewsBanners(AsyncCallback callback, object state)
      #else
      public void send_GetNewsBanners()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetNewsBanners", TMessageType.Call, seqid_));
        GetNewsBanners_args args = new GetNewsBanners_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NewsBannersResponse recv_GetNewsBanners()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNewsBanners_result result = new GetNewsBanners_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNewsBanners failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetNewsBannerById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetNewsBannerById(callback, state, persistentId);
      }

      public NewsBannerByIdResponse End_GetNewsBannerById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNewsBannerById();
      }

      #endif

      public NewsBannerByIdResponse GetNewsBannerById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetNewsBannerById(persistentId);
        return recv_GetNewsBannerById();

        #else
        var asyncResult = Begin_GetNewsBannerById(null, null, persistentId);
        return End_GetNewsBannerById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNewsBannerById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetNewsBannerById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetNewsBannerById", TMessageType.Call, seqid_));
        GetNewsBannerById_args args = new GetNewsBannerById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public NewsBannerByIdResponse recv_GetNewsBannerById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNewsBannerById_result result = new GetNewsBannerById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNewsBannerById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddNewsBanner(AsyncCallback callback, object state, NewsBanner banner)
      {
        return send_AddNewsBanner(callback, state, banner);
      }

      public RequestResult End_AddNewsBanner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddNewsBanner();
      }

      #endif

      public RequestResult AddNewsBanner(NewsBanner banner)
      {
        #if !SILVERLIGHT
        send_AddNewsBanner(banner);
        return recv_AddNewsBanner();

        #else
        var asyncResult = Begin_AddNewsBanner(null, null, banner);
        return End_AddNewsBanner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddNewsBanner(AsyncCallback callback, object state, NewsBanner banner)
      #else
      public void send_AddNewsBanner(NewsBanner banner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddNewsBanner", TMessageType.Call, seqid_));
        AddNewsBanner_args args = new AddNewsBanner_args();
        args.Banner = banner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddNewsBanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddNewsBanner_result result = new AddNewsBanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddNewsBanner failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditNewsBanner(AsyncCallback callback, object state, NewsBanner banner)
      {
        return send_EditNewsBanner(callback, state, banner);
      }

      public RequestResult End_EditNewsBanner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditNewsBanner();
      }

      #endif

      public RequestResult EditNewsBanner(NewsBanner banner)
      {
        #if !SILVERLIGHT
        send_EditNewsBanner(banner);
        return recv_EditNewsBanner();

        #else
        var asyncResult = Begin_EditNewsBanner(null, null, banner);
        return End_EditNewsBanner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditNewsBanner(AsyncCallback callback, object state, NewsBanner banner)
      #else
      public void send_EditNewsBanner(NewsBanner banner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditNewsBanner", TMessageType.Call, seqid_));
        EditNewsBanner_args args = new EditNewsBanner_args();
        args.Banner = banner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditNewsBanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditNewsBanner_result result = new EditNewsBanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditNewsBanner failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSkinPrices(AsyncCallback callback, object state)
      {
        return send_GetSkinPrices(callback, state);
      }

      public SkinGoldPricesResponse End_GetSkinPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSkinPrices();
      }

      #endif

      public SkinGoldPricesResponse GetSkinPrices()
      {
        #if !SILVERLIGHT
        send_GetSkinPrices();
        return recv_GetSkinPrices();

        #else
        var asyncResult = Begin_GetSkinPrices(null, null);
        return End_GetSkinPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSkinPrices(AsyncCallback callback, object state)
      #else
      public void send_GetSkinPrices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSkinPrices", TMessageType.Call, seqid_));
        GetSkinPrices_args args = new GetSkinPrices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkinGoldPricesResponse recv_GetSkinPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSkinPrices_result result = new GetSkinPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSkinPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSkinPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetSkinPriceById(callback, state, persistentId);
      }

      public SkinGoldPriceByIdResponse End_GetSkinPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSkinPriceById();
      }

      #endif

      public SkinGoldPriceByIdResponse GetSkinPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetSkinPriceById(persistentId);
        return recv_GetSkinPriceById();

        #else
        var asyncResult = Begin_GetSkinPriceById(null, null, persistentId);
        return End_GetSkinPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSkinPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetSkinPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSkinPriceById", TMessageType.Call, seqid_));
        GetSkinPriceById_args args = new GetSkinPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SkinGoldPriceByIdResponse recv_GetSkinPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSkinPriceById_result result = new GetSkinPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSkinPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddSkinPricesEvent(AsyncCallback callback, object state, SkinGoldPriceEvent skinEvent)
      {
        return send_AddSkinPricesEvent(callback, state, skinEvent);
      }

      public RequestResult End_AddSkinPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddSkinPricesEvent();
      }

      #endif

      public RequestResult AddSkinPricesEvent(SkinGoldPriceEvent skinEvent)
      {
        #if !SILVERLIGHT
        send_AddSkinPricesEvent(skinEvent);
        return recv_AddSkinPricesEvent();

        #else
        var asyncResult = Begin_AddSkinPricesEvent(null, null, skinEvent);
        return End_AddSkinPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddSkinPricesEvent(AsyncCallback callback, object state, SkinGoldPriceEvent skinEvent)
      #else
      public void send_AddSkinPricesEvent(SkinGoldPriceEvent skinEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddSkinPricesEvent", TMessageType.Call, seqid_));
        AddSkinPricesEvent_args args = new AddSkinPricesEvent_args();
        args.SkinEvent = skinEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddSkinPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSkinPricesEvent_result result = new AddSkinPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSkinPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditSkinPricesEvent(AsyncCallback callback, object state, SkinGoldPriceEvent skinEvent)
      {
        return send_EditSkinPricesEvent(callback, state, skinEvent);
      }

      public RequestResult End_EditSkinPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditSkinPricesEvent();
      }

      #endif

      public RequestResult EditSkinPricesEvent(SkinGoldPriceEvent skinEvent)
      {
        #if !SILVERLIGHT
        send_EditSkinPricesEvent(skinEvent);
        return recv_EditSkinPricesEvent();

        #else
        var asyncResult = Begin_EditSkinPricesEvent(null, null, skinEvent);
        return End_EditSkinPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditSkinPricesEvent(AsyncCallback callback, object state, SkinGoldPriceEvent skinEvent)
      #else
      public void send_EditSkinPricesEvent(SkinGoldPriceEvent skinEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditSkinPricesEvent", TMessageType.Call, seqid_));
        EditSkinPricesEvent_args args = new EditSkinPricesEvent_args();
        args.SkinEvent = skinEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditSkinPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditSkinPricesEvent_result result = new EditSkinPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditSkinPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetHeroPrices(AsyncCallback callback, object state)
      {
        return send_GetHeroPrices(callback, state);
      }

      public HeroPricesResponse End_GetHeroPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHeroPrices();
      }

      #endif

      public HeroPricesResponse GetHeroPrices()
      {
        #if !SILVERLIGHT
        send_GetHeroPrices();
        return recv_GetHeroPrices();

        #else
        var asyncResult = Begin_GetHeroPrices(null, null);
        return End_GetHeroPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHeroPrices(AsyncCallback callback, object state)
      #else
      public void send_GetHeroPrices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetHeroPrices", TMessageType.Call, seqid_));
        GetHeroPrices_args args = new GetHeroPrices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HeroPricesResponse recv_GetHeroPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHeroPrices_result result = new GetHeroPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHeroPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetHeroPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetHeroPriceById(callback, state, persistentId);
      }

      public HeroPriceByIdResponse End_GetHeroPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHeroPriceById();
      }

      #endif

      public HeroPriceByIdResponse GetHeroPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetHeroPriceById(persistentId);
        return recv_GetHeroPriceById();

        #else
        var asyncResult = Begin_GetHeroPriceById(null, null, persistentId);
        return End_GetHeroPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHeroPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetHeroPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetHeroPriceById", TMessageType.Call, seqid_));
        GetHeroPriceById_args args = new GetHeroPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HeroPriceByIdResponse recv_GetHeroPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHeroPriceById_result result = new GetHeroPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHeroPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddHeroPricesEvent(AsyncCallback callback, object state, HeroPriceEvent skinEvent)
      {
        return send_AddHeroPricesEvent(callback, state, skinEvent);
      }

      public RequestResult End_AddHeroPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddHeroPricesEvent();
      }

      #endif

      public RequestResult AddHeroPricesEvent(HeroPriceEvent skinEvent)
      {
        #if !SILVERLIGHT
        send_AddHeroPricesEvent(skinEvent);
        return recv_AddHeroPricesEvent();

        #else
        var asyncResult = Begin_AddHeroPricesEvent(null, null, skinEvent);
        return End_AddHeroPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddHeroPricesEvent(AsyncCallback callback, object state, HeroPriceEvent skinEvent)
      #else
      public void send_AddHeroPricesEvent(HeroPriceEvent skinEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddHeroPricesEvent", TMessageType.Call, seqid_));
        AddHeroPricesEvent_args args = new AddHeroPricesEvent_args();
        args.SkinEvent = skinEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddHeroPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddHeroPricesEvent_result result = new AddHeroPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddHeroPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditHeroPricesEvent(AsyncCallback callback, object state, HeroPriceEvent skinEvent)
      {
        return send_EditHeroPricesEvent(callback, state, skinEvent);
      }

      public RequestResult End_EditHeroPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditHeroPricesEvent();
      }

      #endif

      public RequestResult EditHeroPricesEvent(HeroPriceEvent skinEvent)
      {
        #if !SILVERLIGHT
        send_EditHeroPricesEvent(skinEvent);
        return recv_EditHeroPricesEvent();

        #else
        var asyncResult = Begin_EditHeroPricesEvent(null, null, skinEvent);
        return End_EditHeroPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditHeroPricesEvent(AsyncCallback callback, object state, HeroPriceEvent skinEvent)
      #else
      public void send_EditHeroPricesEvent(HeroPriceEvent skinEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditHeroPricesEvent", TMessageType.Call, seqid_));
        EditHeroPricesEvent_args args = new EditHeroPricesEvent_args();
        args.SkinEvent = skinEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditHeroPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditHeroPricesEvent_result result = new EditHeroPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditHeroPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTransmutationTalentsPerPerl(AsyncCallback callback, object state)
      {
        return send_GetTransmutationTalentsPerPerl(callback, state);
      }

      public TransmutationTalentsPerPerlResponse End_GetTransmutationTalentsPerPerl(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTransmutationTalentsPerPerl();
      }

      #endif

      public TransmutationTalentsPerPerlResponse GetTransmutationTalentsPerPerl()
      {
        #if !SILVERLIGHT
        send_GetTransmutationTalentsPerPerl();
        return recv_GetTransmutationTalentsPerPerl();

        #else
        var asyncResult = Begin_GetTransmutationTalentsPerPerl(null, null);
        return End_GetTransmutationTalentsPerPerl(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTransmutationTalentsPerPerl(AsyncCallback callback, object state)
      #else
      public void send_GetTransmutationTalentsPerPerl()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransmutationTalentsPerPerl", TMessageType.Call, seqid_));
        GetTransmutationTalentsPerPerl_args args = new GetTransmutationTalentsPerPerl_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransmutationTalentsPerPerlResponse recv_GetTransmutationTalentsPerPerl()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTransmutationTalentsPerPerl_result result = new GetTransmutationTalentsPerPerl_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTransmutationTalentsPerPerl failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTransmutationTalentsPerPerlById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetTransmutationTalentsPerPerlById(callback, state, persistentId);
      }

      public TransmutationTalentsPerPerlByIdResponse End_GetTransmutationTalentsPerPerlById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTransmutationTalentsPerPerlById();
      }

      #endif

      public TransmutationTalentsPerPerlByIdResponse GetTransmutationTalentsPerPerlById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetTransmutationTalentsPerPerlById(persistentId);
        return recv_GetTransmutationTalentsPerPerlById();

        #else
        var asyncResult = Begin_GetTransmutationTalentsPerPerlById(null, null, persistentId);
        return End_GetTransmutationTalentsPerPerlById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTransmutationTalentsPerPerlById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetTransmutationTalentsPerPerlById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransmutationTalentsPerPerlById", TMessageType.Call, seqid_));
        GetTransmutationTalentsPerPerlById_args args = new GetTransmutationTalentsPerPerlById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransmutationTalentsPerPerlByIdResponse recv_GetTransmutationTalentsPerPerlById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTransmutationTalentsPerPerlById_result result = new GetTransmutationTalentsPerPerlById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTransmutationTalentsPerPerlById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddTalentPerPerlEvent(AsyncCallback callback, object state, TransmutationTalentsPerPerl talentsPerPerlEvent)
      {
        return send_AddTalentPerPerlEvent(callback, state, talentsPerPerlEvent);
      }

      public RequestResult End_AddTalentPerPerlEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddTalentPerPerlEvent();
      }

      #endif

      public RequestResult AddTalentPerPerlEvent(TransmutationTalentsPerPerl talentsPerPerlEvent)
      {
        #if !SILVERLIGHT
        send_AddTalentPerPerlEvent(talentsPerPerlEvent);
        return recv_AddTalentPerPerlEvent();

        #else
        var asyncResult = Begin_AddTalentPerPerlEvent(null, null, talentsPerPerlEvent);
        return End_AddTalentPerPerlEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddTalentPerPerlEvent(AsyncCallback callback, object state, TransmutationTalentsPerPerl talentsPerPerlEvent)
      #else
      public void send_AddTalentPerPerlEvent(TransmutationTalentsPerPerl talentsPerPerlEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddTalentPerPerlEvent", TMessageType.Call, seqid_));
        AddTalentPerPerlEvent_args args = new AddTalentPerPerlEvent_args();
        args.TalentsPerPerlEvent = talentsPerPerlEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddTalentPerPerlEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddTalentPerPerlEvent_result result = new AddTalentPerPerlEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTalentPerPerlEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditTalentPerPerlEvent(AsyncCallback callback, object state, TransmutationTalentsPerPerl talentsPerPerlEvent)
      {
        return send_EditTalentPerPerlEvent(callback, state, talentsPerPerlEvent);
      }

      public RequestResult End_EditTalentPerPerlEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditTalentPerPerlEvent();
      }

      #endif

      public RequestResult EditTalentPerPerlEvent(TransmutationTalentsPerPerl talentsPerPerlEvent)
      {
        #if !SILVERLIGHT
        send_EditTalentPerPerlEvent(talentsPerPerlEvent);
        return recv_EditTalentPerPerlEvent();

        #else
        var asyncResult = Begin_EditTalentPerPerlEvent(null, null, talentsPerPerlEvent);
        return End_EditTalentPerPerlEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditTalentPerPerlEvent(AsyncCallback callback, object state, TransmutationTalentsPerPerl talentsPerPerlEvent)
      #else
      public void send_EditTalentPerPerlEvent(TransmutationTalentsPerPerl talentsPerPerlEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditTalentPerPerlEvent", TMessageType.Call, seqid_));
        EditTalentPerPerlEvent_args args = new EditTalentPerPerlEvent_args();
        args.TalentsPerPerlEvent = talentsPerPerlEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditTalentPerPerlEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditTalentPerPerlEvent_result result = new EditTalentPerPerlEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditTalentPerPerlEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopSlots(AsyncCallback callback, object state)
      {
        return send_GetRerollShopSlots(callback, state);
      }

      public RerollShopSlotsResponse End_GetRerollShopSlots(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopSlots();
      }

      #endif

      public RerollShopSlotsResponse GetRerollShopSlots()
      {
        #if !SILVERLIGHT
        send_GetRerollShopSlots();
        return recv_GetRerollShopSlots();

        #else
        var asyncResult = Begin_GetRerollShopSlots(null, null);
        return End_GetRerollShopSlots(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopSlots(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopSlots()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopSlots", TMessageType.Call, seqid_));
        GetRerollShopSlots_args args = new GetRerollShopSlots_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopSlotsResponse recv_GetRerollShopSlots()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopSlots_result result = new GetRerollShopSlots_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopSlots failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopSlotsById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopSlotsById(callback, state, persistentId);
      }

      public RerollShopSlotsByIdResponse End_GetRerollShopSlotsById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopSlotsById();
      }

      #endif

      public RerollShopSlotsByIdResponse GetRerollShopSlotsById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopSlotsById(persistentId);
        return recv_GetRerollShopSlotsById();

        #else
        var asyncResult = Begin_GetRerollShopSlotsById(null, null, persistentId);
        return End_GetRerollShopSlotsById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopSlotsById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopSlotsById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopSlotsById", TMessageType.Call, seqid_));
        GetRerollShopSlotsById_args args = new GetRerollShopSlotsById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopSlotsByIdResponse recv_GetRerollShopSlotsById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopSlotsById_result result = new GetRerollShopSlotsById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopSlotsById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopSlotsEvent(AsyncCallback callback, object state, RerollShopSlots rerollShopSlotsEvent)
      {
        return send_AddRerollShopSlotsEvent(callback, state, rerollShopSlotsEvent);
      }

      public RequestResult End_AddRerollShopSlotsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopSlotsEvent();
      }

      #endif

      public RequestResult AddRerollShopSlotsEvent(RerollShopSlots rerollShopSlotsEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopSlotsEvent(rerollShopSlotsEvent);
        return recv_AddRerollShopSlotsEvent();

        #else
        var asyncResult = Begin_AddRerollShopSlotsEvent(null, null, rerollShopSlotsEvent);
        return End_AddRerollShopSlotsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopSlotsEvent(AsyncCallback callback, object state, RerollShopSlots rerollShopSlotsEvent)
      #else
      public void send_AddRerollShopSlotsEvent(RerollShopSlots rerollShopSlotsEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopSlotsEvent", TMessageType.Call, seqid_));
        AddRerollShopSlotsEvent_args args = new AddRerollShopSlotsEvent_args();
        args.RerollShopSlotsEvent = rerollShopSlotsEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopSlotsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopSlotsEvent_result result = new AddRerollShopSlotsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopSlotsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopSlotsEvent(AsyncCallback callback, object state, RerollShopSlots rerollShopSlotsEvent)
      {
        return send_EditRerollShopSlotsEvent(callback, state, rerollShopSlotsEvent);
      }

      public RequestResult End_EditRerollShopSlotsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopSlotsEvent();
      }

      #endif

      public RequestResult EditRerollShopSlotsEvent(RerollShopSlots rerollShopSlotsEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopSlotsEvent(rerollShopSlotsEvent);
        return recv_EditRerollShopSlotsEvent();

        #else
        var asyncResult = Begin_EditRerollShopSlotsEvent(null, null, rerollShopSlotsEvent);
        return End_EditRerollShopSlotsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopSlotsEvent(AsyncCallback callback, object state, RerollShopSlots rerollShopSlotsEvent)
      #else
      public void send_EditRerollShopSlotsEvent(RerollShopSlots rerollShopSlotsEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopSlotsEvent", TMessageType.Call, seqid_));
        EditRerollShopSlotsEvent_args args = new EditRerollShopSlotsEvent_args();
        args.RerollShopSlotsEvent = rerollShopSlotsEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopSlotsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopSlotsEvent_result result = new EditRerollShopSlotsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopSlotsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopPrices(AsyncCallback callback, object state)
      {
        return send_GetRerollShopPrices(callback, state);
      }

      public RerollShopPricesResponse End_GetRerollShopPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopPrices();
      }

      #endif

      public RerollShopPricesResponse GetRerollShopPrices()
      {
        #if !SILVERLIGHT
        send_GetRerollShopPrices();
        return recv_GetRerollShopPrices();

        #else
        var asyncResult = Begin_GetRerollShopPrices(null, null);
        return End_GetRerollShopPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopPrices(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopPrices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopPrices", TMessageType.Call, seqid_));
        GetRerollShopPrices_args args = new GetRerollShopPrices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopPricesResponse recv_GetRerollShopPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopPrices_result result = new GetRerollShopPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopPriceById(callback, state, persistentId);
      }

      public RerollShopPriceByIdResponse End_GetRerollShopPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopPriceById();
      }

      #endif

      public RerollShopPriceByIdResponse GetRerollShopPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopPriceById(persistentId);
        return recv_GetRerollShopPriceById();

        #else
        var asyncResult = Begin_GetRerollShopPriceById(null, null, persistentId);
        return End_GetRerollShopPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopPriceById", TMessageType.Call, seqid_));
        GetRerollShopPriceById_args args = new GetRerollShopPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopPriceByIdResponse recv_GetRerollShopPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopPriceById_result result = new GetRerollShopPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopPriceEvent(AsyncCallback callback, object state, RerollShopPrice rerollShopPriceEvent)
      {
        return send_AddRerollShopPriceEvent(callback, state, rerollShopPriceEvent);
      }

      public RequestResult End_AddRerollShopPriceEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopPriceEvent();
      }

      #endif

      public RequestResult AddRerollShopPriceEvent(RerollShopPrice rerollShopPriceEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopPriceEvent(rerollShopPriceEvent);
        return recv_AddRerollShopPriceEvent();

        #else
        var asyncResult = Begin_AddRerollShopPriceEvent(null, null, rerollShopPriceEvent);
        return End_AddRerollShopPriceEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopPriceEvent(AsyncCallback callback, object state, RerollShopPrice rerollShopPriceEvent)
      #else
      public void send_AddRerollShopPriceEvent(RerollShopPrice rerollShopPriceEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopPriceEvent", TMessageType.Call, seqid_));
        AddRerollShopPriceEvent_args args = new AddRerollShopPriceEvent_args();
        args.RerollShopPriceEvent = rerollShopPriceEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopPriceEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopPriceEvent_result result = new AddRerollShopPriceEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopPriceEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopPriceEvent(AsyncCallback callback, object state, RerollShopPrice rerollShopPriceEvent)
      {
        return send_EditRerollShopPriceEvent(callback, state, rerollShopPriceEvent);
      }

      public RequestResult End_EditRerollShopPriceEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopPriceEvent();
      }

      #endif

      public RequestResult EditRerollShopPriceEvent(RerollShopPrice rerollShopPriceEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopPriceEvent(rerollShopPriceEvent);
        return recv_EditRerollShopPriceEvent();

        #else
        var asyncResult = Begin_EditRerollShopPriceEvent(null, null, rerollShopPriceEvent);
        return End_EditRerollShopPriceEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopPriceEvent(AsyncCallback callback, object state, RerollShopPrice rerollShopPriceEvent)
      #else
      public void send_EditRerollShopPriceEvent(RerollShopPrice rerollShopPriceEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopPriceEvent", TMessageType.Call, seqid_));
        EditRerollShopPriceEvent_args args = new EditRerollShopPriceEvent_args();
        args.RerollShopPriceEvent = rerollShopPriceEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopPriceEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopPriceEvent_result result = new EditRerollShopPriceEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopPriceEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetReforgeTalentPrice(AsyncCallback callback, object state)
      {
        return send_GetReforgeTalentPrice(callback, state);
      }

      public ReforgeTalentPriceResponse End_GetReforgeTalentPrice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetReforgeTalentPrice();
      }

      #endif

      public ReforgeTalentPriceResponse GetReforgeTalentPrice()
      {
        #if !SILVERLIGHT
        send_GetReforgeTalentPrice();
        return recv_GetReforgeTalentPrice();

        #else
        var asyncResult = Begin_GetReforgeTalentPrice(null, null);
        return End_GetReforgeTalentPrice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetReforgeTalentPrice(AsyncCallback callback, object state)
      #else
      public void send_GetReforgeTalentPrice()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetReforgeTalentPrice", TMessageType.Call, seqid_));
        GetReforgeTalentPrice_args args = new GetReforgeTalentPrice_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ReforgeTalentPriceResponse recv_GetReforgeTalentPrice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetReforgeTalentPrice_result result = new GetReforgeTalentPrice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetReforgeTalentPrice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetReforgeTalentPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetReforgeTalentPriceById(callback, state, persistentId);
      }

      public ReforgeTalentPriceByIdResponse End_GetReforgeTalentPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetReforgeTalentPriceById();
      }

      #endif

      public ReforgeTalentPriceByIdResponse GetReforgeTalentPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetReforgeTalentPriceById(persistentId);
        return recv_GetReforgeTalentPriceById();

        #else
        var asyncResult = Begin_GetReforgeTalentPriceById(null, null, persistentId);
        return End_GetReforgeTalentPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetReforgeTalentPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetReforgeTalentPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetReforgeTalentPriceById", TMessageType.Call, seqid_));
        GetReforgeTalentPriceById_args args = new GetReforgeTalentPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ReforgeTalentPriceByIdResponse recv_GetReforgeTalentPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetReforgeTalentPriceById_result result = new GetReforgeTalentPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetReforgeTalentPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddReforgeTalentPriceEvent(AsyncCallback callback, object state, ReforgeTalentPrices reforgeTalentPriceEvent)
      {
        return send_AddReforgeTalentPriceEvent(callback, state, reforgeTalentPriceEvent);
      }

      public RequestResult End_AddReforgeTalentPriceEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddReforgeTalentPriceEvent();
      }

      #endif

      public RequestResult AddReforgeTalentPriceEvent(ReforgeTalentPrices reforgeTalentPriceEvent)
      {
        #if !SILVERLIGHT
        send_AddReforgeTalentPriceEvent(reforgeTalentPriceEvent);
        return recv_AddReforgeTalentPriceEvent();

        #else
        var asyncResult = Begin_AddReforgeTalentPriceEvent(null, null, reforgeTalentPriceEvent);
        return End_AddReforgeTalentPriceEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddReforgeTalentPriceEvent(AsyncCallback callback, object state, ReforgeTalentPrices reforgeTalentPriceEvent)
      #else
      public void send_AddReforgeTalentPriceEvent(ReforgeTalentPrices reforgeTalentPriceEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddReforgeTalentPriceEvent", TMessageType.Call, seqid_));
        AddReforgeTalentPriceEvent_args args = new AddReforgeTalentPriceEvent_args();
        args.ReforgeTalentPriceEvent = reforgeTalentPriceEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddReforgeTalentPriceEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddReforgeTalentPriceEvent_result result = new AddReforgeTalentPriceEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddReforgeTalentPriceEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditReforgeTalentPriceEvent(AsyncCallback callback, object state, ReforgeTalentPrices reforgeTalentPriceEvent)
      {
        return send_EditReforgeTalentPriceEvent(callback, state, reforgeTalentPriceEvent);
      }

      public RequestResult End_EditReforgeTalentPriceEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditReforgeTalentPriceEvent();
      }

      #endif

      public RequestResult EditReforgeTalentPriceEvent(ReforgeTalentPrices reforgeTalentPriceEvent)
      {
        #if !SILVERLIGHT
        send_EditReforgeTalentPriceEvent(reforgeTalentPriceEvent);
        return recv_EditReforgeTalentPriceEvent();

        #else
        var asyncResult = Begin_EditReforgeTalentPriceEvent(null, null, reforgeTalentPriceEvent);
        return End_EditReforgeTalentPriceEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditReforgeTalentPriceEvent(AsyncCallback callback, object state, ReforgeTalentPrices reforgeTalentPriceEvent)
      #else
      public void send_EditReforgeTalentPriceEvent(ReforgeTalentPrices reforgeTalentPriceEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditReforgeTalentPriceEvent", TMessageType.Call, seqid_));
        EditReforgeTalentPriceEvent_args args = new EditReforgeTalentPriceEvent_args();
        args.ReforgeTalentPriceEvent = reforgeTalentPriceEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditReforgeTalentPriceEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditReforgeTalentPriceEvent_result result = new EditReforgeTalentPriceEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditReforgeTalentPriceEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupPrices(AsyncCallback callback, object state)
      {
        return send_GetRerollShopGroupPrices(callback, state);
      }

      public RerollShopGroupPricesResponse End_GetRerollShopGroupPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupPrices();
      }

      #endif

      public RerollShopGroupPricesResponse GetRerollShopGroupPrices()
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupPrices();
        return recv_GetRerollShopGroupPrices();

        #else
        var asyncResult = Begin_GetRerollShopGroupPrices(null, null);
        return End_GetRerollShopGroupPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupPrices(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopGroupPrices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupPrices", TMessageType.Call, seqid_));
        GetRerollShopGroupPrices_args args = new GetRerollShopGroupPrices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupPricesResponse recv_GetRerollShopGroupPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupPrices_result result = new GetRerollShopGroupPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopGroupPriceById(callback, state, persistentId);
      }

      public RerollShopGroupPriceByIdResponse End_GetRerollShopGroupPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupPriceById();
      }

      #endif

      public RerollShopGroupPriceByIdResponse GetRerollShopGroupPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupPriceById(persistentId);
        return recv_GetRerollShopGroupPriceById();

        #else
        var asyncResult = Begin_GetRerollShopGroupPriceById(null, null, persistentId);
        return End_GetRerollShopGroupPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopGroupPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupPriceById", TMessageType.Call, seqid_));
        GetRerollShopGroupPriceById_args args = new GetRerollShopGroupPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupPriceByIdResponse recv_GetRerollShopGroupPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupPriceById_result result = new GetRerollShopGroupPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopGroupPricesEvent(AsyncCallback callback, object state, RerollShopGroupPriceEvent groupEvent)
      {
        return send_AddRerollShopGroupPricesEvent(callback, state, groupEvent);
      }

      public RequestResult End_AddRerollShopGroupPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopGroupPricesEvent();
      }

      #endif

      public RequestResult AddRerollShopGroupPricesEvent(RerollShopGroupPriceEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopGroupPricesEvent(groupEvent);
        return recv_AddRerollShopGroupPricesEvent();

        #else
        var asyncResult = Begin_AddRerollShopGroupPricesEvent(null, null, groupEvent);
        return End_AddRerollShopGroupPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopGroupPricesEvent(AsyncCallback callback, object state, RerollShopGroupPriceEvent groupEvent)
      #else
      public void send_AddRerollShopGroupPricesEvent(RerollShopGroupPriceEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopGroupPricesEvent", TMessageType.Call, seqid_));
        AddRerollShopGroupPricesEvent_args args = new AddRerollShopGroupPricesEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopGroupPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopGroupPricesEvent_result result = new AddRerollShopGroupPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopGroupPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopGroupPricesEvent(AsyncCallback callback, object state, RerollShopGroupPriceEvent groupEvent)
      {
        return send_EditRerollShopGroupPricesEvent(callback, state, groupEvent);
      }

      public RequestResult End_EditRerollShopGroupPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopGroupPricesEvent();
      }

      #endif

      public RequestResult EditRerollShopGroupPricesEvent(RerollShopGroupPriceEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopGroupPricesEvent(groupEvent);
        return recv_EditRerollShopGroupPricesEvent();

        #else
        var asyncResult = Begin_EditRerollShopGroupPricesEvent(null, null, groupEvent);
        return End_EditRerollShopGroupPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopGroupPricesEvent(AsyncCallback callback, object state, RerollShopGroupPriceEvent groupEvent)
      #else
      public void send_EditRerollShopGroupPricesEvent(RerollShopGroupPriceEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopGroupPricesEvent", TMessageType.Call, seqid_));
        EditRerollShopGroupPricesEvent_args args = new EditRerollShopGroupPricesEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopGroupPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopGroupPricesEvent_result result = new EditRerollShopGroupPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopGroupPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupCurrencies(AsyncCallback callback, object state)
      {
        return send_GetRerollShopGroupCurrencies(callback, state);
      }

      public RerollShopGroupCurrenciesResponse End_GetRerollShopGroupCurrencies(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupCurrencies();
      }

      #endif

      public RerollShopGroupCurrenciesResponse GetRerollShopGroupCurrencies()
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupCurrencies();
        return recv_GetRerollShopGroupCurrencies();

        #else
        var asyncResult = Begin_GetRerollShopGroupCurrencies(null, null);
        return End_GetRerollShopGroupCurrencies(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupCurrencies(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopGroupCurrencies()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupCurrencies", TMessageType.Call, seqid_));
        GetRerollShopGroupCurrencies_args args = new GetRerollShopGroupCurrencies_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupCurrenciesResponse recv_GetRerollShopGroupCurrencies()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupCurrencies_result result = new GetRerollShopGroupCurrencies_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupCurrencies failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupCurrenciesById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopGroupCurrenciesById(callback, state, persistentId);
      }

      public RerollShopGroupCurrenciesByIdResponse End_GetRerollShopGroupCurrenciesById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupCurrenciesById();
      }

      #endif

      public RerollShopGroupCurrenciesByIdResponse GetRerollShopGroupCurrenciesById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupCurrenciesById(persistentId);
        return recv_GetRerollShopGroupCurrenciesById();

        #else
        var asyncResult = Begin_GetRerollShopGroupCurrenciesById(null, null, persistentId);
        return End_GetRerollShopGroupCurrenciesById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupCurrenciesById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopGroupCurrenciesById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupCurrenciesById", TMessageType.Call, seqid_));
        GetRerollShopGroupCurrenciesById_args args = new GetRerollShopGroupCurrenciesById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupCurrenciesByIdResponse recv_GetRerollShopGroupCurrenciesById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupCurrenciesById_result result = new GetRerollShopGroupCurrenciesById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupCurrenciesById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopGroupCurrenciesEvent(AsyncCallback callback, object state, RerollShopGroupCurrenciesEvent groupEvent)
      {
        return send_AddRerollShopGroupCurrenciesEvent(callback, state, groupEvent);
      }

      public RequestResult End_AddRerollShopGroupCurrenciesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopGroupCurrenciesEvent();
      }

      #endif

      public RequestResult AddRerollShopGroupCurrenciesEvent(RerollShopGroupCurrenciesEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopGroupCurrenciesEvent(groupEvent);
        return recv_AddRerollShopGroupCurrenciesEvent();

        #else
        var asyncResult = Begin_AddRerollShopGroupCurrenciesEvent(null, null, groupEvent);
        return End_AddRerollShopGroupCurrenciesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopGroupCurrenciesEvent(AsyncCallback callback, object state, RerollShopGroupCurrenciesEvent groupEvent)
      #else
      public void send_AddRerollShopGroupCurrenciesEvent(RerollShopGroupCurrenciesEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopGroupCurrenciesEvent", TMessageType.Call, seqid_));
        AddRerollShopGroupCurrenciesEvent_args args = new AddRerollShopGroupCurrenciesEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopGroupCurrenciesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopGroupCurrenciesEvent_result result = new AddRerollShopGroupCurrenciesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopGroupCurrenciesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopGroupCurrenciesEvent(AsyncCallback callback, object state, RerollShopGroupCurrenciesEvent groupEvent)
      {
        return send_EditRerollShopGroupCurrenciesEvent(callback, state, groupEvent);
      }

      public RequestResult End_EditRerollShopGroupCurrenciesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopGroupCurrenciesEvent();
      }

      #endif

      public RequestResult EditRerollShopGroupCurrenciesEvent(RerollShopGroupCurrenciesEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopGroupCurrenciesEvent(groupEvent);
        return recv_EditRerollShopGroupCurrenciesEvent();

        #else
        var asyncResult = Begin_EditRerollShopGroupCurrenciesEvent(null, null, groupEvent);
        return End_EditRerollShopGroupCurrenciesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopGroupCurrenciesEvent(AsyncCallback callback, object state, RerollShopGroupCurrenciesEvent groupEvent)
      #else
      public void send_EditRerollShopGroupCurrenciesEvent(RerollShopGroupCurrenciesEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopGroupCurrenciesEvent", TMessageType.Call, seqid_));
        EditRerollShopGroupCurrenciesEvent_args args = new EditRerollShopGroupCurrenciesEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopGroupCurrenciesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopGroupCurrenciesEvent_result result = new EditRerollShopGroupCurrenciesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopGroupCurrenciesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopSlotPrices(AsyncCallback callback, object state)
      {
        return send_GetRerollShopSlotPrices(callback, state);
      }

      public RerollShopSlotPricesResponse End_GetRerollShopSlotPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopSlotPrices();
      }

      #endif

      public RerollShopSlotPricesResponse GetRerollShopSlotPrices()
      {
        #if !SILVERLIGHT
        send_GetRerollShopSlotPrices();
        return recv_GetRerollShopSlotPrices();

        #else
        var asyncResult = Begin_GetRerollShopSlotPrices(null, null);
        return End_GetRerollShopSlotPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopSlotPrices(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopSlotPrices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopSlotPrices", TMessageType.Call, seqid_));
        GetRerollShopSlotPrices_args args = new GetRerollShopSlotPrices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopSlotPricesResponse recv_GetRerollShopSlotPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopSlotPrices_result result = new GetRerollShopSlotPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopSlotPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopSlotPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopSlotPriceById(callback, state, persistentId);
      }

      public RerollShopSlotPriceByIdResponse End_GetRerollShopSlotPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopSlotPriceById();
      }

      #endif

      public RerollShopSlotPriceByIdResponse GetRerollShopSlotPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopSlotPriceById(persistentId);
        return recv_GetRerollShopSlotPriceById();

        #else
        var asyncResult = Begin_GetRerollShopSlotPriceById(null, null, persistentId);
        return End_GetRerollShopSlotPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopSlotPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopSlotPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopSlotPriceById", TMessageType.Call, seqid_));
        GetRerollShopSlotPriceById_args args = new GetRerollShopSlotPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopSlotPriceByIdResponse recv_GetRerollShopSlotPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopSlotPriceById_result result = new GetRerollShopSlotPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopSlotPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopSlotPricesEvent(AsyncCallback callback, object state, RerollShopSlotPriceEvent groupEvent)
      {
        return send_AddRerollShopSlotPricesEvent(callback, state, groupEvent);
      }

      public RequestResult End_AddRerollShopSlotPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopSlotPricesEvent();
      }

      #endif

      public RequestResult AddRerollShopSlotPricesEvent(RerollShopSlotPriceEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopSlotPricesEvent(groupEvent);
        return recv_AddRerollShopSlotPricesEvent();

        #else
        var asyncResult = Begin_AddRerollShopSlotPricesEvent(null, null, groupEvent);
        return End_AddRerollShopSlotPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopSlotPricesEvent(AsyncCallback callback, object state, RerollShopSlotPriceEvent groupEvent)
      #else
      public void send_AddRerollShopSlotPricesEvent(RerollShopSlotPriceEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopSlotPricesEvent", TMessageType.Call, seqid_));
        AddRerollShopSlotPricesEvent_args args = new AddRerollShopSlotPricesEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopSlotPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopSlotPricesEvent_result result = new AddRerollShopSlotPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopSlotPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopSlotPricesEvent(AsyncCallback callback, object state, RerollShopSlotPriceEvent groupEvent)
      {
        return send_EditRerollShopSlotPricesEvent(callback, state, groupEvent);
      }

      public RequestResult End_EditRerollShopSlotPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopSlotPricesEvent();
      }

      #endif

      public RequestResult EditRerollShopSlotPricesEvent(RerollShopSlotPriceEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopSlotPricesEvent(groupEvent);
        return recv_EditRerollShopSlotPricesEvent();

        #else
        var asyncResult = Begin_EditRerollShopSlotPricesEvent(null, null, groupEvent);
        return End_EditRerollShopSlotPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopSlotPricesEvent(AsyncCallback callback, object state, RerollShopSlotPriceEvent groupEvent)
      #else
      public void send_EditRerollShopSlotPricesEvent(RerollShopSlotPriceEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopSlotPricesEvent", TMessageType.Call, seqid_));
        EditRerollShopSlotPricesEvent_args args = new EditRerollShopSlotPricesEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopSlotPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopSlotPricesEvent_result result = new EditRerollShopSlotPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopSlotPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupProbabilities(AsyncCallback callback, object state)
      {
        return send_GetRerollShopGroupProbabilities(callback, state);
      }

      public RerollShopGroupProbabilitiesResponse End_GetRerollShopGroupProbabilities(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupProbabilities();
      }

      #endif

      public RerollShopGroupProbabilitiesResponse GetRerollShopGroupProbabilities()
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupProbabilities();
        return recv_GetRerollShopGroupProbabilities();

        #else
        var asyncResult = Begin_GetRerollShopGroupProbabilities(null, null);
        return End_GetRerollShopGroupProbabilities(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupProbabilities(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopGroupProbabilities()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupProbabilities", TMessageType.Call, seqid_));
        GetRerollShopGroupProbabilities_args args = new GetRerollShopGroupProbabilities_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupProbabilitiesResponse recv_GetRerollShopGroupProbabilities()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupProbabilities_result result = new GetRerollShopGroupProbabilities_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupProbabilities failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupProbabilityById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopGroupProbabilityById(callback, state, persistentId);
      }

      public RerollShopGroupProbabilityByIdResponse End_GetRerollShopGroupProbabilityById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupProbabilityById();
      }

      #endif

      public RerollShopGroupProbabilityByIdResponse GetRerollShopGroupProbabilityById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupProbabilityById(persistentId);
        return recv_GetRerollShopGroupProbabilityById();

        #else
        var asyncResult = Begin_GetRerollShopGroupProbabilityById(null, null, persistentId);
        return End_GetRerollShopGroupProbabilityById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupProbabilityById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopGroupProbabilityById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupProbabilityById", TMessageType.Call, seqid_));
        GetRerollShopGroupProbabilityById_args args = new GetRerollShopGroupProbabilityById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupProbabilityByIdResponse recv_GetRerollShopGroupProbabilityById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupProbabilityById_result result = new GetRerollShopGroupProbabilityById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupProbabilityById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopGroupProbabilityEvent(AsyncCallback callback, object state, RerollShopGroupProbabilityEvent groupEvent)
      {
        return send_AddRerollShopGroupProbabilityEvent(callback, state, groupEvent);
      }

      public RequestResult End_AddRerollShopGroupProbabilityEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopGroupProbabilityEvent();
      }

      #endif

      public RequestResult AddRerollShopGroupProbabilityEvent(RerollShopGroupProbabilityEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopGroupProbabilityEvent(groupEvent);
        return recv_AddRerollShopGroupProbabilityEvent();

        #else
        var asyncResult = Begin_AddRerollShopGroupProbabilityEvent(null, null, groupEvent);
        return End_AddRerollShopGroupProbabilityEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopGroupProbabilityEvent(AsyncCallback callback, object state, RerollShopGroupProbabilityEvent groupEvent)
      #else
      public void send_AddRerollShopGroupProbabilityEvent(RerollShopGroupProbabilityEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopGroupProbabilityEvent", TMessageType.Call, seqid_));
        AddRerollShopGroupProbabilityEvent_args args = new AddRerollShopGroupProbabilityEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopGroupProbabilityEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopGroupProbabilityEvent_result result = new AddRerollShopGroupProbabilityEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopGroupProbabilityEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopGroupProbabilityEvent(AsyncCallback callback, object state, RerollShopGroupProbabilityEvent groupEvent)
      {
        return send_EditRerollShopGroupProbabilityEvent(callback, state, groupEvent);
      }

      public RequestResult End_EditRerollShopGroupProbabilityEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopGroupProbabilityEvent();
      }

      #endif

      public RequestResult EditRerollShopGroupProbabilityEvent(RerollShopGroupProbabilityEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopGroupProbabilityEvent(groupEvent);
        return recv_EditRerollShopGroupProbabilityEvent();

        #else
        var asyncResult = Begin_EditRerollShopGroupProbabilityEvent(null, null, groupEvent);
        return End_EditRerollShopGroupProbabilityEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopGroupProbabilityEvent(AsyncCallback callback, object state, RerollShopGroupProbabilityEvent groupEvent)
      #else
      public void send_EditRerollShopGroupProbabilityEvent(RerollShopGroupProbabilityEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopGroupProbabilityEvent", TMessageType.Call, seqid_));
        EditRerollShopGroupProbabilityEvent_args args = new EditRerollShopGroupProbabilityEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopGroupProbabilityEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopGroupProbabilityEvent_result result = new EditRerollShopGroupProbabilityEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopGroupProbabilityEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopSlotAmount(AsyncCallback callback, object state)
      {
        return send_GetRerollShopSlotAmount(callback, state);
      }

      public RerollShopSlotAmountsResponse End_GetRerollShopSlotAmount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopSlotAmount();
      }

      #endif

      public RerollShopSlotAmountsResponse GetRerollShopSlotAmount()
      {
        #if !SILVERLIGHT
        send_GetRerollShopSlotAmount();
        return recv_GetRerollShopSlotAmount();

        #else
        var asyncResult = Begin_GetRerollShopSlotAmount(null, null);
        return End_GetRerollShopSlotAmount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopSlotAmount(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopSlotAmount()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopSlotAmount", TMessageType.Call, seqid_));
        GetRerollShopSlotAmount_args args = new GetRerollShopSlotAmount_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopSlotAmountsResponse recv_GetRerollShopSlotAmount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopSlotAmount_result result = new GetRerollShopSlotAmount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopSlotAmount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopSlotAmountById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopSlotAmountById(callback, state, persistentId);
      }

      public RerollShopSlotAmountByIdResponse End_GetRerollShopSlotAmountById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopSlotAmountById();
      }

      #endif

      public RerollShopSlotAmountByIdResponse GetRerollShopSlotAmountById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopSlotAmountById(persistentId);
        return recv_GetRerollShopSlotAmountById();

        #else
        var asyncResult = Begin_GetRerollShopSlotAmountById(null, null, persistentId);
        return End_GetRerollShopSlotAmountById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopSlotAmountById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopSlotAmountById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopSlotAmountById", TMessageType.Call, seqid_));
        GetRerollShopSlotAmountById_args args = new GetRerollShopSlotAmountById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopSlotAmountByIdResponse recv_GetRerollShopSlotAmountById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopSlotAmountById_result result = new GetRerollShopSlotAmountById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopSlotAmountById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopSlotAmountsEvent(AsyncCallback callback, object state, RerollShopSlotAmountEvent groupEvent)
      {
        return send_AddRerollShopSlotAmountsEvent(callback, state, groupEvent);
      }

      public RequestResult End_AddRerollShopSlotAmountsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopSlotAmountsEvent();
      }

      #endif

      public RequestResult AddRerollShopSlotAmountsEvent(RerollShopSlotAmountEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopSlotAmountsEvent(groupEvent);
        return recv_AddRerollShopSlotAmountsEvent();

        #else
        var asyncResult = Begin_AddRerollShopSlotAmountsEvent(null, null, groupEvent);
        return End_AddRerollShopSlotAmountsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopSlotAmountsEvent(AsyncCallback callback, object state, RerollShopSlotAmountEvent groupEvent)
      #else
      public void send_AddRerollShopSlotAmountsEvent(RerollShopSlotAmountEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopSlotAmountsEvent", TMessageType.Call, seqid_));
        AddRerollShopSlotAmountsEvent_args args = new AddRerollShopSlotAmountsEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopSlotAmountsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopSlotAmountsEvent_result result = new AddRerollShopSlotAmountsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopSlotAmountsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopSlotAmountsEvent(AsyncCallback callback, object state, RerollShopSlotAmountEvent groupEvent)
      {
        return send_EditRerollShopSlotAmountsEvent(callback, state, groupEvent);
      }

      public RequestResult End_EditRerollShopSlotAmountsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopSlotAmountsEvent();
      }

      #endif

      public RequestResult EditRerollShopSlotAmountsEvent(RerollShopSlotAmountEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopSlotAmountsEvent(groupEvent);
        return recv_EditRerollShopSlotAmountsEvent();

        #else
        var asyncResult = Begin_EditRerollShopSlotAmountsEvent(null, null, groupEvent);
        return End_EditRerollShopSlotAmountsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopSlotAmountsEvent(AsyncCallback callback, object state, RerollShopSlotAmountEvent groupEvent)
      #else
      public void send_EditRerollShopSlotAmountsEvent(RerollShopSlotAmountEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopSlotAmountsEvent", TMessageType.Call, seqid_));
        EditRerollShopSlotAmountsEvent_args args = new EditRerollShopSlotAmountsEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopSlotAmountsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopSlotAmountsEvent_result result = new EditRerollShopSlotAmountsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopSlotAmountsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFirstBuyPrices(AsyncCallback callback, object state)
      {
        return send_GetFirstBuyPrices(callback, state);
      }

      public FirstBuyGoldPricesResponse End_GetFirstBuyPrices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFirstBuyPrices();
      }

      #endif

      public FirstBuyGoldPricesResponse GetFirstBuyPrices()
      {
        #if !SILVERLIGHT
        send_GetFirstBuyPrices();
        return recv_GetFirstBuyPrices();

        #else
        var asyncResult = Begin_GetFirstBuyPrices(null, null);
        return End_GetFirstBuyPrices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFirstBuyPrices(AsyncCallback callback, object state)
      #else
      public void send_GetFirstBuyPrices()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFirstBuyPrices", TMessageType.Call, seqid_));
        GetFirstBuyPrices_args args = new GetFirstBuyPrices_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FirstBuyGoldPricesResponse recv_GetFirstBuyPrices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFirstBuyPrices_result result = new GetFirstBuyPrices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFirstBuyPrices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFirstBuyPriceById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetFirstBuyPriceById(callback, state, persistentId);
      }

      public FirstBuyGoldPriceByIdResponse End_GetFirstBuyPriceById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFirstBuyPriceById();
      }

      #endif

      public FirstBuyGoldPriceByIdResponse GetFirstBuyPriceById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetFirstBuyPriceById(persistentId);
        return recv_GetFirstBuyPriceById();

        #else
        var asyncResult = Begin_GetFirstBuyPriceById(null, null, persistentId);
        return End_GetFirstBuyPriceById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFirstBuyPriceById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetFirstBuyPriceById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFirstBuyPriceById", TMessageType.Call, seqid_));
        GetFirstBuyPriceById_args args = new GetFirstBuyPriceById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FirstBuyGoldPriceByIdResponse recv_GetFirstBuyPriceById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFirstBuyPriceById_result result = new GetFirstBuyPriceById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFirstBuyPriceById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddFirstBuyPricesEvent(AsyncCallback callback, object state, FirstBuyGoldPriceEvent firstBuyEvent)
      {
        return send_AddFirstBuyPricesEvent(callback, state, firstBuyEvent);
      }

      public RequestResult End_AddFirstBuyPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddFirstBuyPricesEvent();
      }

      #endif

      public RequestResult AddFirstBuyPricesEvent(FirstBuyGoldPriceEvent firstBuyEvent)
      {
        #if !SILVERLIGHT
        send_AddFirstBuyPricesEvent(firstBuyEvent);
        return recv_AddFirstBuyPricesEvent();

        #else
        var asyncResult = Begin_AddFirstBuyPricesEvent(null, null, firstBuyEvent);
        return End_AddFirstBuyPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddFirstBuyPricesEvent(AsyncCallback callback, object state, FirstBuyGoldPriceEvent firstBuyEvent)
      #else
      public void send_AddFirstBuyPricesEvent(FirstBuyGoldPriceEvent firstBuyEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddFirstBuyPricesEvent", TMessageType.Call, seqid_));
        AddFirstBuyPricesEvent_args args = new AddFirstBuyPricesEvent_args();
        args.FirstBuyEvent = firstBuyEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddFirstBuyPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddFirstBuyPricesEvent_result result = new AddFirstBuyPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFirstBuyPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditFirstBuyPricesEvent(AsyncCallback callback, object state, FirstBuyGoldPriceEvent firstBuyEvent)
      {
        return send_EditFirstBuyPricesEvent(callback, state, firstBuyEvent);
      }

      public RequestResult End_EditFirstBuyPricesEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditFirstBuyPricesEvent();
      }

      #endif

      public RequestResult EditFirstBuyPricesEvent(FirstBuyGoldPriceEvent firstBuyEvent)
      {
        #if !SILVERLIGHT
        send_EditFirstBuyPricesEvent(firstBuyEvent);
        return recv_EditFirstBuyPricesEvent();

        #else
        var asyncResult = Begin_EditFirstBuyPricesEvent(null, null, firstBuyEvent);
        return End_EditFirstBuyPricesEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditFirstBuyPricesEvent(AsyncCallback callback, object state, FirstBuyGoldPriceEvent firstBuyEvent)
      #else
      public void send_EditFirstBuyPricesEvent(FirstBuyGoldPriceEvent firstBuyEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditFirstBuyPricesEvent", TMessageType.Call, seqid_));
        EditFirstBuyPricesEvent_args args = new EditFirstBuyPricesEvent_args();
        args.FirstBuyEvent = firstBuyEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditFirstBuyPricesEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditFirstBuyPricesEvent_result result = new EditFirstBuyPricesEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditFirstBuyPricesEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopPremiumNotInactive(AsyncCallback callback, object state)
      {
        return send_GetRerollShopPremiumNotInactive(callback, state);
      }

      public RerollShopPremiumNotInactiveResponse End_GetRerollShopPremiumNotInactive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopPremiumNotInactive();
      }

      #endif

      public RerollShopPremiumNotInactiveResponse GetRerollShopPremiumNotInactive()
      {
        #if !SILVERLIGHT
        send_GetRerollShopPremiumNotInactive();
        return recv_GetRerollShopPremiumNotInactive();

        #else
        var asyncResult = Begin_GetRerollShopPremiumNotInactive(null, null);
        return End_GetRerollShopPremiumNotInactive(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopPremiumNotInactive(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopPremiumNotInactive()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopPremiumNotInactive", TMessageType.Call, seqid_));
        GetRerollShopPremiumNotInactive_args args = new GetRerollShopPremiumNotInactive_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopPremiumNotInactiveResponse recv_GetRerollShopPremiumNotInactive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopPremiumNotInactive_result result = new GetRerollShopPremiumNotInactive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopPremiumNotInactive failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopPremiumNotInactiveById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopPremiumNotInactiveById(callback, state, persistentId);
      }

      public RerollShopPremiumNotInactiveByIdResponse End_GetRerollShopPremiumNotInactiveById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopPremiumNotInactiveById();
      }

      #endif

      public RerollShopPremiumNotInactiveByIdResponse GetRerollShopPremiumNotInactiveById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopPremiumNotInactiveById(persistentId);
        return recv_GetRerollShopPremiumNotInactiveById();

        #else
        var asyncResult = Begin_GetRerollShopPremiumNotInactiveById(null, null, persistentId);
        return End_GetRerollShopPremiumNotInactiveById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopPremiumNotInactiveById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopPremiumNotInactiveById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopPremiumNotInactiveById", TMessageType.Call, seqid_));
        GetRerollShopPremiumNotInactiveById_args args = new GetRerollShopPremiumNotInactiveById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopPremiumNotInactiveByIdResponse recv_GetRerollShopPremiumNotInactiveById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopPremiumNotInactiveById_result result = new GetRerollShopPremiumNotInactiveById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopPremiumNotInactiveById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopPremiumNotInactiveEvent(AsyncCallback callback, object state, RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      {
        return send_AddRerollShopPremiumNotInactiveEvent(callback, state, rerollShopPremiumNotInactiveEvent);
      }

      public RequestResult End_AddRerollShopPremiumNotInactiveEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopPremiumNotInactiveEvent();
      }

      #endif

      public RequestResult AddRerollShopPremiumNotInactiveEvent(RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopPremiumNotInactiveEvent(rerollShopPremiumNotInactiveEvent);
        return recv_AddRerollShopPremiumNotInactiveEvent();

        #else
        var asyncResult = Begin_AddRerollShopPremiumNotInactiveEvent(null, null, rerollShopPremiumNotInactiveEvent);
        return End_AddRerollShopPremiumNotInactiveEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopPremiumNotInactiveEvent(AsyncCallback callback, object state, RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      #else
      public void send_AddRerollShopPremiumNotInactiveEvent(RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopPremiumNotInactiveEvent", TMessageType.Call, seqid_));
        AddRerollShopPremiumNotInactiveEvent_args args = new AddRerollShopPremiumNotInactiveEvent_args();
        args.RerollShopPremiumNotInactiveEvent = rerollShopPremiumNotInactiveEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopPremiumNotInactiveEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopPremiumNotInactiveEvent_result result = new AddRerollShopPremiumNotInactiveEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopPremiumNotInactiveEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopPremiumNotInactiveEvent(AsyncCallback callback, object state, RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      {
        return send_EditRerollShopPremiumNotInactiveEvent(callback, state, rerollShopPremiumNotInactiveEvent);
      }

      public RequestResult End_EditRerollShopPremiumNotInactiveEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopPremiumNotInactiveEvent();
      }

      #endif

      public RequestResult EditRerollShopPremiumNotInactiveEvent(RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopPremiumNotInactiveEvent(rerollShopPremiumNotInactiveEvent);
        return recv_EditRerollShopPremiumNotInactiveEvent();

        #else
        var asyncResult = Begin_EditRerollShopPremiumNotInactiveEvent(null, null, rerollShopPremiumNotInactiveEvent);
        return End_EditRerollShopPremiumNotInactiveEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopPremiumNotInactiveEvent(AsyncCallback callback, object state, RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      #else
      public void send_EditRerollShopPremiumNotInactiveEvent(RerollShopPremiumNotInactiveEvent rerollShopPremiumNotInactiveEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopPremiumNotInactiveEvent", TMessageType.Call, seqid_));
        EditRerollShopPremiumNotInactiveEvent_args args = new EditRerollShopPremiumNotInactiveEvent_args();
        args.RerollShopPremiumNotInactiveEvent = rerollShopPremiumNotInactiveEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopPremiumNotInactiveEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopPremiumNotInactiveEvent_result result = new EditRerollShopPremiumNotInactiveEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopPremiumNotInactiveEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupSlots(AsyncCallback callback, object state)
      {
        return send_GetRerollShopGroupSlots(callback, state);
      }

      public RerollShopGroupSlotsResponse End_GetRerollShopGroupSlots(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupSlots();
      }

      #endif

      public RerollShopGroupSlotsResponse GetRerollShopGroupSlots()
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupSlots();
        return recv_GetRerollShopGroupSlots();

        #else
        var asyncResult = Begin_GetRerollShopGroupSlots(null, null);
        return End_GetRerollShopGroupSlots(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupSlots(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopGroupSlots()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupSlots", TMessageType.Call, seqid_));
        GetRerollShopGroupSlots_args args = new GetRerollShopGroupSlots_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupSlotsResponse recv_GetRerollShopGroupSlots()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupSlots_result result = new GetRerollShopGroupSlots_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupSlots failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopGroupSlotsById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopGroupSlotsById(callback, state, persistentId);
      }

      public RerollShopGroupSlotsByIdResponse End_GetRerollShopGroupSlotsById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopGroupSlotsById();
      }

      #endif

      public RerollShopGroupSlotsByIdResponse GetRerollShopGroupSlotsById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopGroupSlotsById(persistentId);
        return recv_GetRerollShopGroupSlotsById();

        #else
        var asyncResult = Begin_GetRerollShopGroupSlotsById(null, null, persistentId);
        return End_GetRerollShopGroupSlotsById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopGroupSlotsById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopGroupSlotsById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopGroupSlotsById", TMessageType.Call, seqid_));
        GetRerollShopGroupSlotsById_args args = new GetRerollShopGroupSlotsById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopGroupSlotsByIdResponse recv_GetRerollShopGroupSlotsById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopGroupSlotsById_result result = new GetRerollShopGroupSlotsById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopGroupSlotsById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopGroupSlotsEvent(AsyncCallback callback, object state, RerollShopGroupSlotsEvent groupEvent)
      {
        return send_AddRerollShopGroupSlotsEvent(callback, state, groupEvent);
      }

      public RequestResult End_AddRerollShopGroupSlotsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopGroupSlotsEvent();
      }

      #endif

      public RequestResult AddRerollShopGroupSlotsEvent(RerollShopGroupSlotsEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_AddRerollShopGroupSlotsEvent(groupEvent);
        return recv_AddRerollShopGroupSlotsEvent();

        #else
        var asyncResult = Begin_AddRerollShopGroupSlotsEvent(null, null, groupEvent);
        return End_AddRerollShopGroupSlotsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopGroupSlotsEvent(AsyncCallback callback, object state, RerollShopGroupSlotsEvent groupEvent)
      #else
      public void send_AddRerollShopGroupSlotsEvent(RerollShopGroupSlotsEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopGroupSlotsEvent", TMessageType.Call, seqid_));
        AddRerollShopGroupSlotsEvent_args args = new AddRerollShopGroupSlotsEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopGroupSlotsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopGroupSlotsEvent_result result = new AddRerollShopGroupSlotsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopGroupSlotsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopGroupSlotsEvent(AsyncCallback callback, object state, RerollShopGroupSlotsEvent groupEvent)
      {
        return send_EditRerollShopGroupSlotsEvent(callback, state, groupEvent);
      }

      public RequestResult End_EditRerollShopGroupSlotsEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopGroupSlotsEvent();
      }

      #endif

      public RequestResult EditRerollShopGroupSlotsEvent(RerollShopGroupSlotsEvent groupEvent)
      {
        #if !SILVERLIGHT
        send_EditRerollShopGroupSlotsEvent(groupEvent);
        return recv_EditRerollShopGroupSlotsEvent();

        #else
        var asyncResult = Begin_EditRerollShopGroupSlotsEvent(null, null, groupEvent);
        return End_EditRerollShopGroupSlotsEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopGroupSlotsEvent(AsyncCallback callback, object state, RerollShopGroupSlotsEvent groupEvent)
      #else
      public void send_EditRerollShopGroupSlotsEvent(RerollShopGroupSlotsEvent groupEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopGroupSlotsEvent", TMessageType.Call, seqid_));
        EditRerollShopGroupSlotsEvent_args args = new EditRerollShopGroupSlotsEvent_args();
        args.GroupEvent = groupEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopGroupSlotsEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopGroupSlotsEvent_result result = new EditRerollShopGroupSlotsEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopGroupSlotsEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopBanners(AsyncCallback callback, object state)
      {
        return send_GetRerollShopBanners(callback, state);
      }

      public RerollShopBannersResponse End_GetRerollShopBanners(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopBanners();
      }

      #endif

      public RerollShopBannersResponse GetRerollShopBanners()
      {
        #if !SILVERLIGHT
        send_GetRerollShopBanners();
        return recv_GetRerollShopBanners();

        #else
        var asyncResult = Begin_GetRerollShopBanners(null, null);
        return End_GetRerollShopBanners(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopBanners(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopBanners()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopBanners", TMessageType.Call, seqid_));
        GetRerollShopBanners_args args = new GetRerollShopBanners_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopBannersResponse recv_GetRerollShopBanners()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopBanners_result result = new GetRerollShopBanners_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopBanners failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopBannerById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopBannerById(callback, state, persistentId);
      }

      public RerollShopBannerByIdResponse End_GetRerollShopBannerById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopBannerById();
      }

      #endif

      public RerollShopBannerByIdResponse GetRerollShopBannerById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopBannerById(persistentId);
        return recv_GetRerollShopBannerById();

        #else
        var asyncResult = Begin_GetRerollShopBannerById(null, null, persistentId);
        return End_GetRerollShopBannerById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopBannerById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopBannerById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopBannerById", TMessageType.Call, seqid_));
        GetRerollShopBannerById_args args = new GetRerollShopBannerById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopBannerByIdResponse recv_GetRerollShopBannerById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopBannerById_result result = new GetRerollShopBannerById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopBannerById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopBanner(AsyncCallback callback, object state, RerollShopBanner banner)
      {
        return send_AddRerollShopBanner(callback, state, banner);
      }

      public RequestResult End_AddRerollShopBanner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopBanner();
      }

      #endif

      public RequestResult AddRerollShopBanner(RerollShopBanner banner)
      {
        #if !SILVERLIGHT
        send_AddRerollShopBanner(banner);
        return recv_AddRerollShopBanner();

        #else
        var asyncResult = Begin_AddRerollShopBanner(null, null, banner);
        return End_AddRerollShopBanner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopBanner(AsyncCallback callback, object state, RerollShopBanner banner)
      #else
      public void send_AddRerollShopBanner(RerollShopBanner banner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopBanner", TMessageType.Call, seqid_));
        AddRerollShopBanner_args args = new AddRerollShopBanner_args();
        args.Banner = banner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopBanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopBanner_result result = new AddRerollShopBanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopBanner failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopBanner(AsyncCallback callback, object state, RerollShopBanner banner)
      {
        return send_EditRerollShopBanner(callback, state, banner);
      }

      public RequestResult End_EditRerollShopBanner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopBanner();
      }

      #endif

      public RequestResult EditRerollShopBanner(RerollShopBanner banner)
      {
        #if !SILVERLIGHT
        send_EditRerollShopBanner(banner);
        return recv_EditRerollShopBanner();

        #else
        var asyncResult = Begin_EditRerollShopBanner(null, null, banner);
        return End_EditRerollShopBanner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopBanner(AsyncCallback callback, object state, RerollShopBanner banner)
      #else
      public void send_EditRerollShopBanner(RerollShopBanner banner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopBanner", TMessageType.Call, seqid_));
        EditRerollShopBanner_args args = new EditRerollShopBanner_args();
        args.Banner = banner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopBanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopBanner_result result = new EditRerollShopBanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopBanner failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopTooltips(AsyncCallback callback, object state)
      {
        return send_GetRerollShopTooltips(callback, state);
      }

      public RerollShopTooltipsResponse End_GetRerollShopTooltips(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopTooltips();
      }

      #endif

      public RerollShopTooltipsResponse GetRerollShopTooltips()
      {
        #if !SILVERLIGHT
        send_GetRerollShopTooltips();
        return recv_GetRerollShopTooltips();

        #else
        var asyncResult = Begin_GetRerollShopTooltips(null, null);
        return End_GetRerollShopTooltips(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopTooltips(AsyncCallback callback, object state)
      #else
      public void send_GetRerollShopTooltips()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopTooltips", TMessageType.Call, seqid_));
        GetRerollShopTooltips_args args = new GetRerollShopTooltips_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopTooltipsResponse recv_GetRerollShopTooltips()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopTooltips_result result = new GetRerollShopTooltips_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopTooltips failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRerollShopTooltipById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRerollShopTooltipById(callback, state, persistentId);
      }

      public RerollShopTooltipByIdResponse End_GetRerollShopTooltipById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRerollShopTooltipById();
      }

      #endif

      public RerollShopTooltipByIdResponse GetRerollShopTooltipById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRerollShopTooltipById(persistentId);
        return recv_GetRerollShopTooltipById();

        #else
        var asyncResult = Begin_GetRerollShopTooltipById(null, null, persistentId);
        return End_GetRerollShopTooltipById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRerollShopTooltipById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRerollShopTooltipById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRerollShopTooltipById", TMessageType.Call, seqid_));
        GetRerollShopTooltipById_args args = new GetRerollShopTooltipById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RerollShopTooltipByIdResponse recv_GetRerollShopTooltipById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRerollShopTooltipById_result result = new GetRerollShopTooltipById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRerollShopTooltipById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRerollShopTooltip(AsyncCallback callback, object state, RerollShopTooltip tooltip)
      {
        return send_AddRerollShopTooltip(callback, state, tooltip);
      }

      public RequestResult End_AddRerollShopTooltip(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRerollShopTooltip();
      }

      #endif

      public RequestResult AddRerollShopTooltip(RerollShopTooltip tooltip)
      {
        #if !SILVERLIGHT
        send_AddRerollShopTooltip(tooltip);
        return recv_AddRerollShopTooltip();

        #else
        var asyncResult = Begin_AddRerollShopTooltip(null, null, tooltip);
        return End_AddRerollShopTooltip(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRerollShopTooltip(AsyncCallback callback, object state, RerollShopTooltip tooltip)
      #else
      public void send_AddRerollShopTooltip(RerollShopTooltip tooltip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRerollShopTooltip", TMessageType.Call, seqid_));
        AddRerollShopTooltip_args args = new AddRerollShopTooltip_args();
        args.Tooltip = tooltip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRerollShopTooltip()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRerollShopTooltip_result result = new AddRerollShopTooltip_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRerollShopTooltip failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRerollShopTooltip(AsyncCallback callback, object state, RerollShopTooltip tooltip)
      {
        return send_EditRerollShopTooltip(callback, state, tooltip);
      }

      public RequestResult End_EditRerollShopTooltip(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRerollShopTooltip();
      }

      #endif

      public RequestResult EditRerollShopTooltip(RerollShopTooltip tooltip)
      {
        #if !SILVERLIGHT
        send_EditRerollShopTooltip(tooltip);
        return recv_EditRerollShopTooltip();

        #else
        var asyncResult = Begin_EditRerollShopTooltip(null, null, tooltip);
        return End_EditRerollShopTooltip(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRerollShopTooltip(AsyncCallback callback, object state, RerollShopTooltip tooltip)
      #else
      public void send_EditRerollShopTooltip(RerollShopTooltip tooltip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRerollShopTooltip", TMessageType.Call, seqid_));
        EditRerollShopTooltip_args args = new EditRerollShopTooltip_args();
        args.Tooltip = tooltip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRerollShopTooltip()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRerollShopTooltip_result result = new EditRerollShopTooltip_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRerollShopTooltip failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRollEvents(AsyncCallback callback, object state)
      {
        return send_GetRollEvents(callback, state);
      }

      public RollEventsResponse End_GetRollEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRollEvents();
      }

      #endif

      public RollEventsResponse GetRollEvents()
      {
        #if !SILVERLIGHT
        send_GetRollEvents();
        return recv_GetRollEvents();

        #else
        var asyncResult = Begin_GetRollEvents(null, null);
        return End_GetRollEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRollEvents(AsyncCallback callback, object state)
      #else
      public void send_GetRollEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRollEvents", TMessageType.Call, seqid_));
        GetRollEvents_args args = new GetRollEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RollEventsResponse recv_GetRollEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRollEvents_result result = new GetRollEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRollEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRollEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetRollEventById(callback, state, persistentId);
      }

      public RollEventByIdResponse End_GetRollEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRollEventById();
      }

      #endif

      public RollEventByIdResponse GetRollEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetRollEventById(persistentId);
        return recv_GetRollEventById();

        #else
        var asyncResult = Begin_GetRollEventById(null, null, persistentId);
        return End_GetRollEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRollEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetRollEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRollEventById", TMessageType.Call, seqid_));
        GetRollEventById_args args = new GetRollEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RollEventByIdResponse recv_GetRollEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRollEventById_result result = new GetRollEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRollEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddRollEvent(AsyncCallback callback, object state, RollEvent rollEvent)
      {
        return send_AddRollEvent(callback, state, rollEvent);
      }

      public RequestResult End_AddRollEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddRollEvent();
      }

      #endif

      public RequestResult AddRollEvent(RollEvent rollEvent)
      {
        #if !SILVERLIGHT
        send_AddRollEvent(rollEvent);
        return recv_AddRollEvent();

        #else
        var asyncResult = Begin_AddRollEvent(null, null, rollEvent);
        return End_AddRollEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddRollEvent(AsyncCallback callback, object state, RollEvent rollEvent)
      #else
      public void send_AddRollEvent(RollEvent rollEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddRollEvent", TMessageType.Call, seqid_));
        AddRollEvent_args args = new AddRollEvent_args();
        args.RollEvent = rollEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddRollEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddRollEvent_result result = new AddRollEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddRollEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditRollEvent(AsyncCallback callback, object state, RollEvent rollEvent)
      {
        return send_EditRollEvent(callback, state, rollEvent);
      }

      public RequestResult End_EditRollEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditRollEvent();
      }

      #endif

      public RequestResult EditRollEvent(RollEvent rollEvent)
      {
        #if !SILVERLIGHT
        send_EditRollEvent(rollEvent);
        return recv_EditRollEvent();

        #else
        var asyncResult = Begin_EditRollEvent(null, null, rollEvent);
        return End_EditRollEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditRollEvent(AsyncCallback callback, object state, RollEvent rollEvent)
      #else
      public void send_EditRollEvent(RollEvent rollEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditRollEvent", TMessageType.Call, seqid_));
        EditRollEvent_args args = new EditRollEvent_args();
        args.RollEvent = rollEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditRollEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditRollEvent_result result = new EditRollEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditRollEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetQuestEvents(AsyncCallback callback, object state)
      {
        return send_GetQuestEvents(callback, state);
      }

      public QuestEventsResponse End_GetQuestEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetQuestEvents();
      }

      #endif

      public QuestEventsResponse GetQuestEvents()
      {
        #if !SILVERLIGHT
        send_GetQuestEvents();
        return recv_GetQuestEvents();

        #else
        var asyncResult = Begin_GetQuestEvents(null, null);
        return End_GetQuestEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetQuestEvents(AsyncCallback callback, object state)
      #else
      public void send_GetQuestEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetQuestEvents", TMessageType.Call, seqid_));
        GetQuestEvents_args args = new GetQuestEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QuestEventsResponse recv_GetQuestEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetQuestEvents_result result = new GetQuestEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetQuestEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetQuestEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetQuestEventById(callback, state, persistentId);
      }

      public QuestEventByIdResponse End_GetQuestEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetQuestEventById();
      }

      #endif

      public QuestEventByIdResponse GetQuestEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetQuestEventById(persistentId);
        return recv_GetQuestEventById();

        #else
        var asyncResult = Begin_GetQuestEventById(null, null, persistentId);
        return End_GetQuestEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetQuestEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetQuestEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetQuestEventById", TMessageType.Call, seqid_));
        GetQuestEventById_args args = new GetQuestEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QuestEventByIdResponse recv_GetQuestEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetQuestEventById_result result = new GetQuestEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetQuestEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddQuestEvent(AsyncCallback callback, object state, QuestEvent questEvent)
      {
        return send_AddQuestEvent(callback, state, questEvent);
      }

      public RequestResult End_AddQuestEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddQuestEvent();
      }

      #endif

      public RequestResult AddQuestEvent(QuestEvent questEvent)
      {
        #if !SILVERLIGHT
        send_AddQuestEvent(questEvent);
        return recv_AddQuestEvent();

        #else
        var asyncResult = Begin_AddQuestEvent(null, null, questEvent);
        return End_AddQuestEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddQuestEvent(AsyncCallback callback, object state, QuestEvent questEvent)
      #else
      public void send_AddQuestEvent(QuestEvent questEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddQuestEvent", TMessageType.Call, seqid_));
        AddQuestEvent_args args = new AddQuestEvent_args();
        args.QuestEvent = questEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddQuestEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddQuestEvent_result result = new AddQuestEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddQuestEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditQuestEvent(AsyncCallback callback, object state, QuestEvent questEvent)
      {
        return send_EditQuestEvent(callback, state, questEvent);
      }

      public RequestResult End_EditQuestEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditQuestEvent();
      }

      #endif

      public RequestResult EditQuestEvent(QuestEvent questEvent)
      {
        #if !SILVERLIGHT
        send_EditQuestEvent(questEvent);
        return recv_EditQuestEvent();

        #else
        var asyncResult = Begin_EditQuestEvent(null, null, questEvent);
        return End_EditQuestEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditQuestEvent(AsyncCallback callback, object state, QuestEvent questEvent)
      #else
      public void send_EditQuestEvent(QuestEvent questEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditQuestEvent", TMessageType.Call, seqid_));
        EditQuestEvent_args args = new EditQuestEvent_args();
        args.QuestEvent = questEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditQuestEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditQuestEvent_result result = new EditQuestEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditQuestEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTradeEvents(AsyncCallback callback, object state)
      {
        return send_GetTradeEvents(callback, state);
      }

      public TradeEventsResponse End_GetTradeEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTradeEvents();
      }

      #endif

      public TradeEventsResponse GetTradeEvents()
      {
        #if !SILVERLIGHT
        send_GetTradeEvents();
        return recv_GetTradeEvents();

        #else
        var asyncResult = Begin_GetTradeEvents(null, null);
        return End_GetTradeEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTradeEvents(AsyncCallback callback, object state)
      #else
      public void send_GetTradeEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTradeEvents", TMessageType.Call, seqid_));
        GetTradeEvents_args args = new GetTradeEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TradeEventsResponse recv_GetTradeEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTradeEvents_result result = new GetTradeEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTradeEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTradeEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetTradeEventById(callback, state, persistentId);
      }

      public TradeEventByIdResponse End_GetTradeEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTradeEventById();
      }

      #endif

      public TradeEventByIdResponse GetTradeEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetTradeEventById(persistentId);
        return recv_GetTradeEventById();

        #else
        var asyncResult = Begin_GetTradeEventById(null, null, persistentId);
        return End_GetTradeEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTradeEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetTradeEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTradeEventById", TMessageType.Call, seqid_));
        GetTradeEventById_args args = new GetTradeEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TradeEventByIdResponse recv_GetTradeEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTradeEventById_result result = new GetTradeEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTradeEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddTradeEvent(AsyncCallback callback, object state, TradeEventModel tradeEvent)
      {
        return send_AddTradeEvent(callback, state, tradeEvent);
      }

      public RequestResult End_AddTradeEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddTradeEvent();
      }

      #endif

      public RequestResult AddTradeEvent(TradeEventModel tradeEvent)
      {
        #if !SILVERLIGHT
        send_AddTradeEvent(tradeEvent);
        return recv_AddTradeEvent();

        #else
        var asyncResult = Begin_AddTradeEvent(null, null, tradeEvent);
        return End_AddTradeEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddTradeEvent(AsyncCallback callback, object state, TradeEventModel tradeEvent)
      #else
      public void send_AddTradeEvent(TradeEventModel tradeEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddTradeEvent", TMessageType.Call, seqid_));
        AddTradeEvent_args args = new AddTradeEvent_args();
        args.TradeEvent = tradeEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddTradeEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddTradeEvent_result result = new AddTradeEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTradeEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditTradeEvent(AsyncCallback callback, object state, TradeEventModel tradeEvent)
      {
        return send_EditTradeEvent(callback, state, tradeEvent);
      }

      public RequestResult End_EditTradeEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditTradeEvent();
      }

      #endif

      public RequestResult EditTradeEvent(TradeEventModel tradeEvent)
      {
        #if !SILVERLIGHT
        send_EditTradeEvent(tradeEvent);
        return recv_EditTradeEvent();

        #else
        var asyncResult = Begin_EditTradeEvent(null, null, tradeEvent);
        return End_EditTradeEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditTradeEvent(AsyncCallback callback, object state, TradeEventModel tradeEvent)
      #else
      public void send_EditTradeEvent(TradeEventModel tradeEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditTradeEvent", TMessageType.Call, seqid_));
        EditTradeEvent_args args = new EditTradeEvent_args();
        args.TradeEvent = tradeEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditTradeEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditTradeEvent_result result = new EditTradeEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditTradeEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSeasonEvents(AsyncCallback callback, object state)
      {
        return send_GetSeasonEvents(callback, state);
      }

      public SeasonEventsResponse End_GetSeasonEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSeasonEvents();
      }

      #endif

      public SeasonEventsResponse GetSeasonEvents()
      {
        #if !SILVERLIGHT
        send_GetSeasonEvents();
        return recv_GetSeasonEvents();

        #else
        var asyncResult = Begin_GetSeasonEvents(null, null);
        return End_GetSeasonEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSeasonEvents(AsyncCallback callback, object state)
      #else
      public void send_GetSeasonEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSeasonEvents", TMessageType.Call, seqid_));
        GetSeasonEvents_args args = new GetSeasonEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SeasonEventsResponse recv_GetSeasonEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSeasonEvents_result result = new GetSeasonEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSeasonEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSeasonEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetSeasonEventById(callback, state, persistentId);
      }

      public SeasonEventByIdResponse End_GetSeasonEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSeasonEventById();
      }

      #endif

      public SeasonEventByIdResponse GetSeasonEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetSeasonEventById(persistentId);
        return recv_GetSeasonEventById();

        #else
        var asyncResult = Begin_GetSeasonEventById(null, null, persistentId);
        return End_GetSeasonEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSeasonEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetSeasonEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSeasonEventById", TMessageType.Call, seqid_));
        GetSeasonEventById_args args = new GetSeasonEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SeasonEventByIdResponse recv_GetSeasonEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSeasonEventById_result result = new GetSeasonEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSeasonEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddSeasonEvent(AsyncCallback callback, object state, SeasonEvent seasonEvent)
      {
        return send_AddSeasonEvent(callback, state, seasonEvent);
      }

      public RequestResult End_AddSeasonEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddSeasonEvent();
      }

      #endif

      public RequestResult AddSeasonEvent(SeasonEvent seasonEvent)
      {
        #if !SILVERLIGHT
        send_AddSeasonEvent(seasonEvent);
        return recv_AddSeasonEvent();

        #else
        var asyncResult = Begin_AddSeasonEvent(null, null, seasonEvent);
        return End_AddSeasonEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddSeasonEvent(AsyncCallback callback, object state, SeasonEvent seasonEvent)
      #else
      public void send_AddSeasonEvent(SeasonEvent seasonEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddSeasonEvent", TMessageType.Call, seqid_));
        AddSeasonEvent_args args = new AddSeasonEvent_args();
        args.SeasonEvent = seasonEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddSeasonEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddSeasonEvent_result result = new AddSeasonEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddSeasonEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditSeasonEvent(AsyncCallback callback, object state, SeasonEvent seasonEvent)
      {
        return send_EditSeasonEvent(callback, state, seasonEvent);
      }

      public RequestResult End_EditSeasonEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditSeasonEvent();
      }

      #endif

      public RequestResult EditSeasonEvent(SeasonEvent seasonEvent)
      {
        #if !SILVERLIGHT
        send_EditSeasonEvent(seasonEvent);
        return recv_EditSeasonEvent();

        #else
        var asyncResult = Begin_EditSeasonEvent(null, null, seasonEvent);
        return End_EditSeasonEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditSeasonEvent(AsyncCallback callback, object state, SeasonEvent seasonEvent)
      #else
      public void send_EditSeasonEvent(SeasonEvent seasonEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditSeasonEvent", TMessageType.Call, seqid_));
        EditSeasonEvent_args args = new EditSeasonEvent_args();
        args.SeasonEvent = seasonEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditSeasonEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditSeasonEvent_result result = new EditSeasonEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditSeasonEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDonateEvents(AsyncCallback callback, object state)
      {
        return send_GetDonateEvents(callback, state);
      }

      public DonateEventsResponse End_GetDonateEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDonateEvents();
      }

      #endif

      public DonateEventsResponse GetDonateEvents()
      {
        #if !SILVERLIGHT
        send_GetDonateEvents();
        return recv_GetDonateEvents();

        #else
        var asyncResult = Begin_GetDonateEvents(null, null);
        return End_GetDonateEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDonateEvents(AsyncCallback callback, object state)
      #else
      public void send_GetDonateEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDonateEvents", TMessageType.Call, seqid_));
        GetDonateEvents_args args = new GetDonateEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DonateEventsResponse recv_GetDonateEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDonateEvents_result result = new GetDonateEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDonateEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDonateEventById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetDonateEventById(callback, state, persistentId);
      }

      public DonateEventByIdResponse End_GetDonateEventById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDonateEventById();
      }

      #endif

      public DonateEventByIdResponse GetDonateEventById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetDonateEventById(persistentId);
        return recv_GetDonateEventById();

        #else
        var asyncResult = Begin_GetDonateEventById(null, null, persistentId);
        return End_GetDonateEventById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDonateEventById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetDonateEventById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDonateEventById", TMessageType.Call, seqid_));
        GetDonateEventById_args args = new GetDonateEventById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DonateEventByIdResponse recv_GetDonateEventById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDonateEventById_result result = new GetDonateEventById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDonateEventById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddDonateEvent(AsyncCallback callback, object state, DonateEvent donateEvent)
      {
        return send_AddDonateEvent(callback, state, donateEvent);
      }

      public RequestResult End_AddDonateEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddDonateEvent();
      }

      #endif

      public RequestResult AddDonateEvent(DonateEvent donateEvent)
      {
        #if !SILVERLIGHT
        send_AddDonateEvent(donateEvent);
        return recv_AddDonateEvent();

        #else
        var asyncResult = Begin_AddDonateEvent(null, null, donateEvent);
        return End_AddDonateEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddDonateEvent(AsyncCallback callback, object state, DonateEvent donateEvent)
      #else
      public void send_AddDonateEvent(DonateEvent donateEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddDonateEvent", TMessageType.Call, seqid_));
        AddDonateEvent_args args = new AddDonateEvent_args();
        args.DonateEvent = donateEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_AddDonateEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddDonateEvent_result result = new AddDonateEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddDonateEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditDonateEvent(AsyncCallback callback, object state, DonateEvent donateEvent)
      {
        return send_EditDonateEvent(callback, state, donateEvent);
      }

      public RequestResult End_EditDonateEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditDonateEvent();
      }

      #endif

      public RequestResult EditDonateEvent(DonateEvent donateEvent)
      {
        #if !SILVERLIGHT
        send_EditDonateEvent(donateEvent);
        return recv_EditDonateEvent();

        #else
        var asyncResult = Begin_EditDonateEvent(null, null, donateEvent);
        return End_EditDonateEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditDonateEvent(AsyncCallback callback, object state, DonateEvent donateEvent)
      #else
      public void send_EditDonateEvent(DonateEvent donateEvent)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditDonateEvent", TMessageType.Call, seqid_));
        EditDonateEvent_args args = new EditDonateEvent_args();
        args.DonateEvent = donateEvent;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditDonateEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditDonateEvent_result result = new EditDonateEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditDonateEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGWEvents(AsyncCallback callback, object state)
      {
        return send_GetGWEvents(callback, state);
      }

      public GWEventsModelResponse End_GetGWEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGWEvents();
      }

      #endif

      public GWEventsModelResponse GetGWEvents()
      {
        #if !SILVERLIGHT
        send_GetGWEvents();
        return recv_GetGWEvents();

        #else
        var asyncResult = Begin_GetGWEvents(null, null);
        return End_GetGWEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGWEvents(AsyncCallback callback, object state)
      #else
      public void send_GetGWEvents()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGWEvents", TMessageType.Call, seqid_));
        GetGWEvents_args args = new GetGWEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GWEventsModelResponse recv_GetGWEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGWEvents_result result = new GetGWEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGWEvents failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGWEventsModelById(AsyncCallback callback, object state, int persistentId)
      {
        return send_GetGWEventsModelById(callback, state, persistentId);
      }

      public GWEventsModelByIdResponse End_GetGWEventsModelById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGWEventsModelById();
      }

      #endif

      public GWEventsModelByIdResponse GetGWEventsModelById(int persistentId)
      {
        #if !SILVERLIGHT
        send_GetGWEventsModelById(persistentId);
        return recv_GetGWEventsModelById();

        #else
        var asyncResult = Begin_GetGWEventsModelById(null, null, persistentId);
        return End_GetGWEventsModelById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGWEventsModelById(AsyncCallback callback, object state, int persistentId)
      #else
      public void send_GetGWEventsModelById(int persistentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGWEventsModelById", TMessageType.Call, seqid_));
        GetGWEventsModelById_args args = new GetGWEventsModelById_args();
        args.PersistentId = persistentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GWEventsModelByIdResponse recv_GetGWEventsModelById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGWEventsModelById_result result = new GetGWEventsModelById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGWEventsModelById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EditGWEvent(AsyncCallback callback, object state, GWEventModel gwEventModel, string gmLogin)
      {
        return send_EditGWEvent(callback, state, gwEventModel, gmLogin);
      }

      public RequestResult End_EditGWEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EditGWEvent();
      }

      #endif

      public RequestResult EditGWEvent(GWEventModel gwEventModel, string gmLogin)
      {
        #if !SILVERLIGHT
        send_EditGWEvent(gwEventModel, gmLogin);
        return recv_EditGWEvent();

        #else
        var asyncResult = Begin_EditGWEvent(null, null, gwEventModel, gmLogin);
        return End_EditGWEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EditGWEvent(AsyncCallback callback, object state, GWEventModel gwEventModel, string gmLogin)
      #else
      public void send_EditGWEvent(GWEventModel gwEventModel, string gmLogin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EditGWEvent", TMessageType.Call, seqid_));
        EditGWEvent_args args = new EditGWEvent_args();
        args.GwEventModel = gwEventModel;
        args.GmLogin = gmLogin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_EditGWEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EditGWEvent_result result = new EditGWEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EditGWEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAccountFriends(AsyncCallback callback, object state, long auid)
      {
        return send_GetAccountFriends(callback, state, auid);
      }

      public FriendInfoResponse End_GetAccountFriends(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAccountFriends();
      }

      #endif

      public FriendInfoResponse GetAccountFriends(long auid)
      {
        #if !SILVERLIGHT
        send_GetAccountFriends(auid);
        return recv_GetAccountFriends();

        #else
        var asyncResult = Begin_GetAccountFriends(null, null, auid);
        return End_GetAccountFriends(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAccountFriends(AsyncCallback callback, object state, long auid)
      #else
      public void send_GetAccountFriends(long auid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAccountFriends", TMessageType.Call, seqid_));
        GetAccountFriends_args args = new GetAccountFriends_args();
        args.Auid = auid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FriendInfoResponse recv_GetAccountFriends()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAccountFriends_result result = new GetAccountFriends_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAccountFriends failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveFriend(AsyncCallback callback, object state, long auid, long friendAuid)
      {
        return send_RemoveFriend(callback, state, auid, friendAuid);
      }

      public RequestResult End_RemoveFriend(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveFriend();
      }

      #endif

      public RequestResult RemoveFriend(long auid, long friendAuid)
      {
        #if !SILVERLIGHT
        send_RemoveFriend(auid, friendAuid);
        return recv_RemoveFriend();

        #else
        var asyncResult = Begin_RemoveFriend(null, null, auid, friendAuid);
        return End_RemoveFriend(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveFriend(AsyncCallback callback, object state, long auid, long friendAuid)
      #else
      public void send_RemoveFriend(long auid, long friendAuid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveFriend", TMessageType.Call, seqid_));
        RemoveFriend_args args = new RemoveFriend_args();
        args.Auid = auid;
        args.FriendAuid = friendAuid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RequestResult recv_RemoveFriend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveFriend_result result = new RemoveFriend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveFriend failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetAccountBySNUid"] = GetAccountBySNUid_Process;
        processMap_["GetAccountByAuid"] = GetAccountByAuid_Process;
        processMap_["FindNicknameExact"] = FindNicknameExact_Process;
        processMap_["FindNicknamesLike"] = FindNicknamesLike_Process;
        processMap_["GetSocialNetworks"] = GetSocialNetworks_Process;
        processMap_["GetLocaleInfoBySNUid"] = GetLocaleInfoBySNUid_Process;
        processMap_["GetLocaleInfoByAuid"] = GetLocaleInfoByAuid_Process;
        processMap_["FindPlayerByNickname"] = FindPlayerByNickname_Process;
        processMap_["FindPlayerByEmail"] = FindPlayerByEmail_Process;
        processMap_["PlayerChangeEmail"] = PlayerChangeEmail_Process;
        processMap_["PlayerRemoveNickname"] = PlayerRemoveNickname_Process;
        processMap_["GetAccountQuestsForTalentsByAuid"] = GetAccountQuestsForTalentsByAuid_Process;
        processMap_["EditQuestForTalent"] = EditQuestForTalent_Process;
        processMap_["EditAccount"] = EditAccount_Process;
        processMap_["EditAccountResources"] = EditAccountResources_Process;
        processMap_["GetAccountLibrary"] = GetAccountLibrary_Process;
        processMap_["GetGameSession"] = GetGameSession_Process;
        processMap_["GetBruteForceAccount"] = GetBruteForceAccount_Process;
        processMap_["UnBanBruteForceAccount"] = UnBanBruteForceAccount_Process;
        processMap_["GetBannedIp"] = GetBannedIp_Process;
        processMap_["UnBanIp"] = UnBanIp_Process;
        processMap_["EditFreeChanges"] = EditFreeChanges_Process;
        processMap_["AddResources"] = AddResources_Process;
        processMap_["GetAccountHeroes"] = GetAccountHeroes_Process;
        processMap_["UnlockHero"] = UnlockHero_Process;
        processMap_["EditHero"] = EditHero_Process;
        processMap_["LockHero"] = LockHero_Process;
        processMap_["EditSeasonAwards"] = EditSeasonAwards_Process;
        processMap_["EditSeasonInfo"] = EditSeasonInfo_Process;
        processMap_["GetHeroTalentSet"] = GetHeroTalentSet_Process;
        processMap_["GetHeroSeasonsInfo"] = GetHeroSeasonsInfo_Process;
        processMap_["AddTalent"] = AddTalent_Process;
        processMap_["AddTalents"] = AddTalents_Process;
        processMap_["EditTalent"] = EditTalent_Process;
        processMap_["DeleteTalent"] = DeleteTalent_Process;
        processMap_["MoveTalentFromTalentSetToLibrary"] = MoveTalentFromTalentSetToLibrary_Process;
        processMap_["MoveTalentFromLibraryToTalentSet"] = MoveTalentFromLibraryToTalentSet_Process;
        processMap_["RemoveTalentFromTalentSet"] = RemoveTalentFromTalentSet_Process;
        processMap_["GetAccountSkins"] = GetAccountSkins_Process;
        processMap_["AddSkin"] = AddSkin_Process;
        processMap_["DeleteSkin"] = DeleteSkin_Process;
        processMap_["GetAccountTalentUpgradeEntities"] = GetAccountTalentUpgradeEntities_Process;
        processMap_["DeleteTalentUpgradeEntity"] = DeleteTalentUpgradeEntity_Process;
        processMap_["GetAccountBuildings"] = GetAccountBuildings_Process;
        processMap_["MoveBuildingToStorage"] = MoveBuildingToStorage_Process;
        processMap_["AddBuilding"] = AddBuilding_Process;
        processMap_["DeleteBuilding"] = DeleteBuilding_Process;
        processMap_["GiveLamp"] = GiveLamp_Process;
        processMap_["GetLampInfo"] = GetLampInfo_Process;
        processMap_["GiveUpgradeHeroTalents"] = GiveUpgradeHeroTalents_Process;
        processMap_["GetUpgradeHeroTalentsInfo"] = GetUpgradeHeroTalentsInfo_Process;
        processMap_["DisjointSN"] = DisjointSN_Process;
        processMap_["ChangeFSN"] = ChangeFSN_Process;
        processMap_["DeleteSAAccount"] = DeleteSAAccount_Process;
        processMap_["GetAccountTournamentInfo"] = GetAccountTournamentInfo_Process;
        processMap_["EditTournamentInfo"] = EditTournamentInfo_Process;
        processMap_["GiveTournamentTicket"] = GiveTournamentTicket_Process;
        processMap_["GetAccountTournamentGames"] = GetAccountTournamentGames_Process;
        processMap_["GetGuildById"] = GetGuildById_Process;
        processMap_["GetGuildByName"] = GetGuildByName_Process;
        processMap_["GetGuildMemberById"] = GetGuildMemberById_Process;
        processMap_["EditGuild"] = EditGuild_Process;
        processMap_["ChangeGuildLeader"] = ChangeGuildLeader_Process;
        processMap_["RemoveGuildMembers"] = RemoveGuildMembers_Process;
        processMap_["ViewGuildMembers"] = ViewGuildMembers_Process;
        processMap_["EditGuildMember"] = EditGuildMember_Process;
        processMap_["SetGuildIcon"] = SetGuildIcon_Process;
        processMap_["SwitchToNewGuildIcon"] = SwitchToNewGuildIcon_Process;
        processMap_["TryToPayForGuildIconChange"] = TryToPayForGuildIconChange_Process;
        processMap_["AcquireGuildLock"] = AcquireGuildLock_Process;
        processMap_["ReleaseGuildLock"] = ReleaseGuildLock_Process;
        processMap_["StopGuildSiege"] = StopGuildSiege_Process;
        processMap_["AddGuildSuzerain"] = AddGuildSuzerain_Process;
        processMap_["RemoveGuildSuzerain"] = RemoveGuildSuzerain_Process;
        processMap_["GetFullGuildDump"] = GetFullGuildDump_Process;
        processMap_["GetFreeGuildBankTalents"] = GetFreeGuildBankTalents_Process;
        processMap_["GetTakenGuildBankTalents"] = GetTakenGuildBankTalents_Process;
        processMap_["ReturnTalentToOwner"] = ReturnTalentToOwner_Process;
        processMap_["ReturnTalentToGuildBank"] = ReturnTalentToGuildBank_Process;
        processMap_["SendMessageToUser"] = SendMessageToUser_Process;
        processMap_["GetAccountAdminMessages"] = GetAccountAdminMessages_Process;
        processMap_["UserOperation"] = UserOperation_Process;
        processMap_["ResetUserAccount"] = ResetUserAccount_Process;
        processMap_["DeleteUserAccount"] = DeleteUserAccount_Process;
        processMap_["KickUser"] = KickUser_Process;
        processMap_["EditNickname"] = EditNickname_Process;
        processMap_["PayEditNickname"] = PayEditNickname_Process;
        processMap_["PayChangeFraction"] = PayChangeFraction_Process;
        processMap_["GetPrices"] = GetPrices_Process;
        processMap_["BuyService"] = BuyService_Process;
        processMap_["PayService"] = PayService_Process;
        processMap_["BuyTournamentTicket"] = BuyTournamentTicket_Process;
        processMap_["CreateBroadcast"] = CreateBroadcast_Process;
        processMap_["GetBroadcastLocales"] = GetBroadcastLocales_Process;
        processMap_["EditBroadcast"] = EditBroadcast_Process;
        processMap_["DeleteBroadcast"] = DeleteBroadcast_Process;
        processMap_["GetBroadcastList"] = GetBroadcastList_Process;
        processMap_["StartMessageRotation"] = StartMessageRotation_Process;
        processMap_["StopMessageRotation"] = StopMessageRotation_Process;
        processMap_["GetSocServerVersion"] = GetSocServerVersion_Process;
        processMap_["GetFullUserDump"] = GetFullUserDump_Process;
        processMap_["ApplyFullUserDump"] = ApplyFullUserDump_Process;
        processMap_["RemoveFakeAuid"] = RemoveFakeAuid_Process;
        processMap_["GetBackups"] = GetBackups_Process;
        processMap_["GetBrokenUserDump"] = GetBrokenUserDump_Process;
        processMap_["GetBrokenUserDumpByNickname"] = GetBrokenUserDumpByNickname_Process;
        processMap_["CheckAccountValidity"] = CheckAccountValidity_Process;
        processMap_["FixAccount"] = FixAccount_Process;
        processMap_["ActivateEmail"] = ActivateEmail_Process;
        processMap_["FlushServerId"] = FlushServerId_Process;
        processMap_["AddUserRestriction"] = AddUserRestriction_Process;
        processMap_["EditAccountDbValue"] = EditAccountDbValue_Process;
        processMap_["RegisterPayment"] = RegisterPayment_Process;
        processMap_["GetPaymentBonusActions"] = GetPaymentBonusActions_Process;
        processMap_["ReplenishUserGold"] = ReplenishUserGold_Process;
        processMap_["UpdateUserGold"] = UpdateUserGold_Process;
        processMap_["GetQuests"] = GetQuests_Process;
        processMap_["ChangeQuest"] = ChangeQuest_Process;
        processMap_["UpdateGeoshowFlag"] = UpdateGeoshowFlag_Process;
        processMap_["ApplyDLC"] = ApplyDLC_Process;
        processMap_["GetDynamicQuestInfo"] = GetDynamicQuestInfo_Process;
        processMap_["GetDynamicQuestById"] = GetDynamicQuestById_Process;
        processMap_["AddDynamicQuest"] = AddDynamicQuest_Process;
        processMap_["RemoveDynamicQuest"] = RemoveDynamicQuest_Process;
        processMap_["EditDynamicQuest"] = EditDynamicQuest_Process;
        processMap_["GetDynamicQuestPullsInfo"] = GetDynamicQuestPullsInfo_Process;
        processMap_["GetDynamicQuestPullById"] = GetDynamicQuestPullById_Process;
        processMap_["GetAuidsLists"] = GetAuidsLists_Process;
        processMap_["GetAuidsListById"] = GetAuidsListById_Process;
        processMap_["AddAuidsList"] = AddAuidsList_Process;
        processMap_["EditAuidsList"] = EditAuidsList_Process;
        processMap_["RemoveAuidsList"] = RemoveAuidsList_Process;
        processMap_["AddDynamicQuestPull"] = AddDynamicQuestPull_Process;
        processMap_["EditDynamicQuestPull"] = EditDynamicQuestPull_Process;
        processMap_["RemoveDynamicQuestPull"] = RemoveDynamicQuestPull_Process;
        processMap_["AddDynamicQuestsToPull"] = AddDynamicQuestsToPull_Process;
        processMap_["RemoveDynamicQuestsFromPull"] = RemoveDynamicQuestsFromPull_Process;
        processMap_["GetAccountFlags"] = GetAccountFlags_Process;
        processMap_["UnlockFlag"] = UnlockFlag_Process;
        processMap_["LockFlag"] = LockFlag_Process;
        processMap_["BindToGeolocation"] = BindToGeolocation_Process;
        processMap_["GetTalentsEvents"] = GetTalentsEvents_Process;
        processMap_["GetResourceEvents"] = GetResourceEvents_Process;
        processMap_["AddMassOperation"] = AddMassOperation_Process;
        processMap_["GetMassOperationsInfo"] = GetMassOperationsInfo_Process;
        processMap_["DeleteMassOperationInfo"] = DeleteMassOperationInfo_Process;
        processMap_["GetAvailableEvents"] = GetAvailableEvents_Process;
        processMap_["ChangeEventStateById"] = ChangeEventStateById_Process;
        processMap_["DeleteEventById"] = DeleteEventById_Process;
        processMap_["GetTechsInfos"] = GetTechsInfos_Process;
        processMap_["GetTechsInfoById"] = GetTechsInfoById_Process;
        processMap_["AddTechs"] = AddTechs_Process;
        processMap_["EditTechs"] = EditTechs_Process;
        processMap_["GetCustomEvents"] = GetCustomEvents_Process;
        processMap_["GetCustomEventById"] = GetCustomEventById_Process;
        processMap_["AddCustomEvent"] = AddCustomEvent_Process;
        processMap_["EditCustomEvent"] = EditCustomEvent_Process;
        processMap_["GetCustomMaps"] = GetCustomMaps_Process;
        processMap_["GetCustomMapById"] = GetCustomMapById_Process;
        processMap_["AddCustomMap"] = AddCustomMap_Process;
        processMap_["EditCustomMap"] = EditCustomMap_Process;
        processMap_["GetTalentDropRarities"] = GetTalentDropRarities_Process;
        processMap_["GetTalentDropRarityById"] = GetTalentDropRarityById_Process;
        processMap_["AddTalentDropRarities"] = AddTalentDropRarities_Process;
        processMap_["EditTalentDropRarities"] = EditTalentDropRarities_Process;
        processMap_["GetNewsBanners"] = GetNewsBanners_Process;
        processMap_["GetNewsBannerById"] = GetNewsBannerById_Process;
        processMap_["AddNewsBanner"] = AddNewsBanner_Process;
        processMap_["EditNewsBanner"] = EditNewsBanner_Process;
        processMap_["GetSkinPrices"] = GetSkinPrices_Process;
        processMap_["GetSkinPriceById"] = GetSkinPriceById_Process;
        processMap_["AddSkinPricesEvent"] = AddSkinPricesEvent_Process;
        processMap_["EditSkinPricesEvent"] = EditSkinPricesEvent_Process;
        processMap_["GetHeroPrices"] = GetHeroPrices_Process;
        processMap_["GetHeroPriceById"] = GetHeroPriceById_Process;
        processMap_["AddHeroPricesEvent"] = AddHeroPricesEvent_Process;
        processMap_["EditHeroPricesEvent"] = EditHeroPricesEvent_Process;
        processMap_["GetTransmutationTalentsPerPerl"] = GetTransmutationTalentsPerPerl_Process;
        processMap_["GetTransmutationTalentsPerPerlById"] = GetTransmutationTalentsPerPerlById_Process;
        processMap_["AddTalentPerPerlEvent"] = AddTalentPerPerlEvent_Process;
        processMap_["EditTalentPerPerlEvent"] = EditTalentPerPerlEvent_Process;
        processMap_["GetRerollShopSlots"] = GetRerollShopSlots_Process;
        processMap_["GetRerollShopSlotsById"] = GetRerollShopSlotsById_Process;
        processMap_["AddRerollShopSlotsEvent"] = AddRerollShopSlotsEvent_Process;
        processMap_["EditRerollShopSlotsEvent"] = EditRerollShopSlotsEvent_Process;
        processMap_["GetRerollShopPrices"] = GetRerollShopPrices_Process;
        processMap_["GetRerollShopPriceById"] = GetRerollShopPriceById_Process;
        processMap_["AddRerollShopPriceEvent"] = AddRerollShopPriceEvent_Process;
        processMap_["EditRerollShopPriceEvent"] = EditRerollShopPriceEvent_Process;
        processMap_["GetReforgeTalentPrice"] = GetReforgeTalentPrice_Process;
        processMap_["GetReforgeTalentPriceById"] = GetReforgeTalentPriceById_Process;
        processMap_["AddReforgeTalentPriceEvent"] = AddReforgeTalentPriceEvent_Process;
        processMap_["EditReforgeTalentPriceEvent"] = EditReforgeTalentPriceEvent_Process;
        processMap_["GetRerollShopGroupPrices"] = GetRerollShopGroupPrices_Process;
        processMap_["GetRerollShopGroupPriceById"] = GetRerollShopGroupPriceById_Process;
        processMap_["AddRerollShopGroupPricesEvent"] = AddRerollShopGroupPricesEvent_Process;
        processMap_["EditRerollShopGroupPricesEvent"] = EditRerollShopGroupPricesEvent_Process;
        processMap_["GetRerollShopGroupCurrencies"] = GetRerollShopGroupCurrencies_Process;
        processMap_["GetRerollShopGroupCurrenciesById"] = GetRerollShopGroupCurrenciesById_Process;
        processMap_["AddRerollShopGroupCurrenciesEvent"] = AddRerollShopGroupCurrenciesEvent_Process;
        processMap_["EditRerollShopGroupCurrenciesEvent"] = EditRerollShopGroupCurrenciesEvent_Process;
        processMap_["GetRerollShopSlotPrices"] = GetRerollShopSlotPrices_Process;
        processMap_["GetRerollShopSlotPriceById"] = GetRerollShopSlotPriceById_Process;
        processMap_["AddRerollShopSlotPricesEvent"] = AddRerollShopSlotPricesEvent_Process;
        processMap_["EditRerollShopSlotPricesEvent"] = EditRerollShopSlotPricesEvent_Process;
        processMap_["GetRerollShopGroupProbabilities"] = GetRerollShopGroupProbabilities_Process;
        processMap_["GetRerollShopGroupProbabilityById"] = GetRerollShopGroupProbabilityById_Process;
        processMap_["AddRerollShopGroupProbabilityEvent"] = AddRerollShopGroupProbabilityEvent_Process;
        processMap_["EditRerollShopGroupProbabilityEvent"] = EditRerollShopGroupProbabilityEvent_Process;
        processMap_["GetRerollShopSlotAmount"] = GetRerollShopSlotAmount_Process;
        processMap_["GetRerollShopSlotAmountById"] = GetRerollShopSlotAmountById_Process;
        processMap_["AddRerollShopSlotAmountsEvent"] = AddRerollShopSlotAmountsEvent_Process;
        processMap_["EditRerollShopSlotAmountsEvent"] = EditRerollShopSlotAmountsEvent_Process;
        processMap_["GetFirstBuyPrices"] = GetFirstBuyPrices_Process;
        processMap_["GetFirstBuyPriceById"] = GetFirstBuyPriceById_Process;
        processMap_["AddFirstBuyPricesEvent"] = AddFirstBuyPricesEvent_Process;
        processMap_["EditFirstBuyPricesEvent"] = EditFirstBuyPricesEvent_Process;
        processMap_["GetRerollShopPremiumNotInactive"] = GetRerollShopPremiumNotInactive_Process;
        processMap_["GetRerollShopPremiumNotInactiveById"] = GetRerollShopPremiumNotInactiveById_Process;
        processMap_["AddRerollShopPremiumNotInactiveEvent"] = AddRerollShopPremiumNotInactiveEvent_Process;
        processMap_["EditRerollShopPremiumNotInactiveEvent"] = EditRerollShopPremiumNotInactiveEvent_Process;
        processMap_["GetRerollShopGroupSlots"] = GetRerollShopGroupSlots_Process;
        processMap_["GetRerollShopGroupSlotsById"] = GetRerollShopGroupSlotsById_Process;
        processMap_["AddRerollShopGroupSlotsEvent"] = AddRerollShopGroupSlotsEvent_Process;
        processMap_["EditRerollShopGroupSlotsEvent"] = EditRerollShopGroupSlotsEvent_Process;
        processMap_["GetRerollShopBanners"] = GetRerollShopBanners_Process;
        processMap_["GetRerollShopBannerById"] = GetRerollShopBannerById_Process;
        processMap_["AddRerollShopBanner"] = AddRerollShopBanner_Process;
        processMap_["EditRerollShopBanner"] = EditRerollShopBanner_Process;
        processMap_["GetRerollShopTooltips"] = GetRerollShopTooltips_Process;
        processMap_["GetRerollShopTooltipById"] = GetRerollShopTooltipById_Process;
        processMap_["AddRerollShopTooltip"] = AddRerollShopTooltip_Process;
        processMap_["EditRerollShopTooltip"] = EditRerollShopTooltip_Process;
        processMap_["GetRollEvents"] = GetRollEvents_Process;
        processMap_["GetRollEventById"] = GetRollEventById_Process;
        processMap_["AddRollEvent"] = AddRollEvent_Process;
        processMap_["EditRollEvent"] = EditRollEvent_Process;
        processMap_["GetQuestEvents"] = GetQuestEvents_Process;
        processMap_["GetQuestEventById"] = GetQuestEventById_Process;
        processMap_["AddQuestEvent"] = AddQuestEvent_Process;
        processMap_["EditQuestEvent"] = EditQuestEvent_Process;
        processMap_["GetTradeEvents"] = GetTradeEvents_Process;
        processMap_["GetTradeEventById"] = GetTradeEventById_Process;
        processMap_["AddTradeEvent"] = AddTradeEvent_Process;
        processMap_["EditTradeEvent"] = EditTradeEvent_Process;
        processMap_["GetSeasonEvents"] = GetSeasonEvents_Process;
        processMap_["GetSeasonEventById"] = GetSeasonEventById_Process;
        processMap_["AddSeasonEvent"] = AddSeasonEvent_Process;
        processMap_["EditSeasonEvent"] = EditSeasonEvent_Process;
        processMap_["GetDonateEvents"] = GetDonateEvents_Process;
        processMap_["GetDonateEventById"] = GetDonateEventById_Process;
        processMap_["AddDonateEvent"] = AddDonateEvent_Process;
        processMap_["EditDonateEvent"] = EditDonateEvent_Process;
        processMap_["GetGWEvents"] = GetGWEvents_Process;
        processMap_["GetGWEventsModelById"] = GetGWEventsModelById_Process;
        processMap_["EditGWEvent"] = EditGWEvent_Process;
        processMap_["GetAccountFriends"] = GetAccountFriends_Process;
        processMap_["RemoveFriend"] = RemoveFriend_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetAccountBySNUid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountBySNUid_args args = new GetAccountBySNUid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountBySNUid_result result = new GetAccountBySNUid_result();
        result.Success = iface_.GetAccountBySNUid(args.Snid, args.Snuid);
        oprot.WriteMessageBegin(new TMessage("GetAccountBySNUid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountByAuid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountByAuid_args args = new GetAccountByAuid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountByAuid_result result = new GetAccountByAuid_result();
        result.Success = iface_.GetAccountByAuid(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetAccountByAuid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindNicknameExact_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindNicknameExact_args args = new FindNicknameExact_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindNicknameExact_result result = new FindNicknameExact_result();
        result.Success = iface_.FindNicknameExact(args.NickName);
        oprot.WriteMessageBegin(new TMessage("FindNicknameExact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindNicknamesLike_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindNicknamesLike_args args = new FindNicknamesLike_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindNicknamesLike_result result = new FindNicknamesLike_result();
        result.Success = iface_.FindNicknamesLike(args.NickName, args.Page_offset, args.Page_size);
        oprot.WriteMessageBegin(new TMessage("FindNicknamesLike", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSocialNetworks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSocialNetworks_args args = new GetSocialNetworks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSocialNetworks_result result = new GetSocialNetworks_result();
        result.Success = iface_.GetSocialNetworks();
        oprot.WriteMessageBegin(new TMessage("GetSocialNetworks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLocaleInfoBySNUid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLocaleInfoBySNUid_args args = new GetLocaleInfoBySNUid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLocaleInfoBySNUid_result result = new GetLocaleInfoBySNUid_result();
        result.Success = iface_.GetLocaleInfoBySNUid(args.Snid, args.Snuid);
        oprot.WriteMessageBegin(new TMessage("GetLocaleInfoBySNUid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLocaleInfoByAuid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLocaleInfoByAuid_args args = new GetLocaleInfoByAuid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLocaleInfoByAuid_result result = new GetLocaleInfoByAuid_result();
        result.Success = iface_.GetLocaleInfoByAuid(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetLocaleInfoByAuid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindPlayerByNickname_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindPlayerByNickname_args args = new FindPlayerByNickname_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindPlayerByNickname_result result = new FindPlayerByNickname_result();
        result.Success = iface_.FindPlayerByNickname(args.Nickname);
        oprot.WriteMessageBegin(new TMessage("FindPlayerByNickname", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindPlayerByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindPlayerByEmail_args args = new FindPlayerByEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindPlayerByEmail_result result = new FindPlayerByEmail_result();
        result.Success = iface_.FindPlayerByEmail(args.Email);
        oprot.WriteMessageBegin(new TMessage("FindPlayerByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerChangeEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerChangeEmail_args args = new PlayerChangeEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerChangeEmail_result result = new PlayerChangeEmail_result();
        result.Success = iface_.PlayerChangeEmail(args.Email, args.NewEmail, args.NewPass);
        oprot.WriteMessageBegin(new TMessage("PlayerChangeEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlayerRemoveNickname_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlayerRemoveNickname_args args = new PlayerRemoveNickname_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlayerRemoveNickname_result result = new PlayerRemoveNickname_result();
        result.Success = iface_.PlayerRemoveNickname(args.Email, args.Nickname);
        oprot.WriteMessageBegin(new TMessage("PlayerRemoveNickname", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountQuestsForTalentsByAuid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountQuestsForTalentsByAuid_args args = new GetAccountQuestsForTalentsByAuid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountQuestsForTalentsByAuid_result result = new GetAccountQuestsForTalentsByAuid_result();
        result.Success = iface_.GetAccountQuestsForTalentsByAuid(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountQuestsForTalentsByAuid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditQuestForTalent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditQuestForTalent_args args = new EditQuestForTalent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditQuestForTalent_result result = new EditQuestForTalent_result();
        result.Success = iface_.EditQuestForTalent(args.Login, args.QuestForTalentEdit, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("EditQuestForTalent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditAccount_args args = new EditAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditAccount_result result = new EditAccount_result();
        result.Success = iface_.EditAccount(args.Login, args.AccountEdit, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("EditAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditAccountResources_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditAccountResources_args args = new EditAccountResources_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditAccountResources_result result = new EditAccountResources_result();
        result.Success = iface_.EditAccountResources(args.Login, args.AccountEdit, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("EditAccountResources", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountLibrary_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountLibrary_args args = new GetAccountLibrary_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountLibrary_result result = new GetAccountLibrary_result();
        result.Success = iface_.GetAccountLibrary(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountLibrary", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGameSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGameSession_args args = new GetGameSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGameSession_result result = new GetGameSession_result();
        result.Success = iface_.GetGameSession(args.Sessionid);
        oprot.WriteMessageBegin(new TMessage("GetGameSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBruteForceAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBruteForceAccount_args args = new GetBruteForceAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBruteForceAccount_result result = new GetBruteForceAccount_result();
        result.Success = iface_.GetBruteForceAccount(args.Email);
        oprot.WriteMessageBegin(new TMessage("GetBruteForceAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnBanBruteForceAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnBanBruteForceAccount_args args = new UnBanBruteForceAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnBanBruteForceAccount_result result = new UnBanBruteForceAccount_result();
        result.Success = iface_.UnBanBruteForceAccount(args.Email);
        oprot.WriteMessageBegin(new TMessage("UnBanBruteForceAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBannedIp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBannedIp_args args = new GetBannedIp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBannedIp_result result = new GetBannedIp_result();
        result.Success = iface_.GetBannedIp(args.Limit, args.Skip);
        oprot.WriteMessageBegin(new TMessage("GetBannedIp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnBanIp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnBanIp_args args = new UnBanIp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnBanIp_result result = new UnBanIp_result();
        result.Success = iface_.UnBanIp(args.Ip);
        oprot.WriteMessageBegin(new TMessage("UnBanIp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditFreeChanges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditFreeChanges_args args = new EditFreeChanges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditFreeChanges_result result = new EditFreeChanges_result();
        result.Success = iface_.EditFreeChanges(args.Login, args.GmLogin, args.NickChanges, args.FractionChanges);
        oprot.WriteMessageBegin(new TMessage("EditFreeChanges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddResources_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddResources_args args = new AddResources_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddResources_result result = new AddResources_result();
        result.Success = iface_.AddResources(args.Auid, args.ResourceType, args.Amount);
        oprot.WriteMessageBegin(new TMessage("AddResources", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountHeroes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountHeroes_args args = new GetAccountHeroes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountHeroes_result result = new GetAccountHeroes_result();
        result.Success = iface_.GetAccountHeroes(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountHeroes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnlockHero_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnlockHero_args args = new UnlockHero_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnlockHero_result result = new UnlockHero_result();
        result.Success = iface_.UnlockHero(args.Login, args.HeroClassId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("UnlockHero", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditHero_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditHero_args args = new EditHero_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditHero_result result = new EditHero_result();
        result.Success = iface_.EditHero(args.Login, args.HeroEdit, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditHero", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LockHero_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LockHero_args args = new LockHero_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LockHero_result result = new LockHero_result();
        result.Success = iface_.LockHero(args.Login, args.HeroInstanceId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("LockHero", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditSeasonAwards_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditSeasonAwards_args args = new EditSeasonAwards_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditSeasonAwards_result result = new EditSeasonAwards_result();
        result.Success = iface_.EditSeasonAwards(args.Login, args.AwardEdit, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditSeasonAwards", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditSeasonInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditSeasonInfo_args args = new EditSeasonInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditSeasonInfo_result result = new EditSeasonInfo_result();
        result.Success = iface_.EditSeasonInfo(args.Login, args.HeroInstanceId, args.SeasonEdit, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditSeasonInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHeroTalentSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHeroTalentSet_args args = new GetHeroTalentSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHeroTalentSet_result result = new GetHeroTalentSet_result();
        result.Success = iface_.GetHeroTalentSet(args.Login, args.HeroInstanceId);
        oprot.WriteMessageBegin(new TMessage("GetHeroTalentSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHeroSeasonsInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHeroSeasonsInfo_args args = new GetHeroSeasonsInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHeroSeasonsInfo_result result = new GetHeroSeasonsInfo_result();
        result.Success = iface_.GetHeroSeasonsInfo(args.Login, args.HeroInstanceId);
        oprot.WriteMessageBegin(new TMessage("GetHeroSeasonsInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddTalent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddTalent_args args = new AddTalent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddTalent_result result = new AddTalent_result();
        result.Success = iface_.AddTalent(args.Login, args.TalentClassId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("AddTalent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddTalents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddTalents_args args = new AddTalents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddTalents_result result = new AddTalents_result();
        result.Success = iface_.AddTalents(args.Login, args.TalentIds, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("AddTalents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditTalent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditTalent_args args = new EditTalent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditTalent_result result = new EditTalent_result();
        result.Success = iface_.EditTalent(args.Login, args.TalentEdit, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditTalent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteTalent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteTalent_args args = new DeleteTalent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteTalent_result result = new DeleteTalent_result();
        result.Success = iface_.DeleteTalent(args.Login, args.TalentInstanceId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("DeleteTalent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MoveTalentFromTalentSetToLibrary_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MoveTalentFromTalentSetToLibrary_args args = new MoveTalentFromTalentSetToLibrary_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MoveTalentFromTalentSetToLibrary_result result = new MoveTalentFromTalentSetToLibrary_result();
        result.Success = iface_.MoveTalentFromTalentSetToLibrary(args.Login, args.HeroInstanceId, args.TalentInstanceId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("MoveTalentFromTalentSetToLibrary", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MoveTalentFromLibraryToTalentSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MoveTalentFromLibraryToTalentSet_args args = new MoveTalentFromLibraryToTalentSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MoveTalentFromLibraryToTalentSet_result result = new MoveTalentFromLibraryToTalentSet_result();
        result.Success = iface_.MoveTalentFromLibraryToTalentSet(args.Login, args.HeroInstanceId, args.TalentInstanceId, args.Slot, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("MoveTalentFromLibraryToTalentSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveTalentFromTalentSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveTalentFromTalentSet_args args = new RemoveTalentFromTalentSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveTalentFromTalentSet_result result = new RemoveTalentFromTalentSet_result();
        result.Success = iface_.RemoveTalentFromTalentSet(args.Login, args.HeroInstanceId, args.TalentInstanceId, args.TalentSetId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("RemoveTalentFromTalentSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountSkins_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountSkins_args args = new GetAccountSkins_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountSkins_result result = new GetAccountSkins_result();
        result.Success = iface_.GetAccountSkins(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetAccountSkins", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSkin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSkin_args args = new AddSkin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSkin_result result = new AddSkin_result();
        result.Success = iface_.AddSkin(args.Auid, args.SkinPersistentId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("AddSkin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteSkin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteSkin_args args = new DeleteSkin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteSkin_result result = new DeleteSkin_result();
        result.Success = iface_.DeleteSkin(args.Auid, args.SkinPersistentId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("DeleteSkin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountTalentUpgradeEntities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountTalentUpgradeEntities_args args = new GetAccountTalentUpgradeEntities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountTalentUpgradeEntities_result result = new GetAccountTalentUpgradeEntities_result();
        result.Success = iface_.GetAccountTalentUpgradeEntities(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetAccountTalentUpgradeEntities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteTalentUpgradeEntity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteTalentUpgradeEntity_args args = new DeleteTalentUpgradeEntity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteTalentUpgradeEntity_result result = new DeleteTalentUpgradeEntity_result();
        result.Success = iface_.DeleteTalentUpgradeEntity(args.Auid, args.InstanceId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("DeleteTalentUpgradeEntity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountBuildings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountBuildings_args args = new GetAccountBuildings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountBuildings_result result = new GetAccountBuildings_result();
        result.Success = iface_.GetAccountBuildings(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetAccountBuildings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MoveBuildingToStorage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MoveBuildingToStorage_args args = new MoveBuildingToStorage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MoveBuildingToStorage_result result = new MoveBuildingToStorage_result();
        result.Success = iface_.MoveBuildingToStorage(args.Auid, args.BuildingInstanceId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("MoveBuildingToStorage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddBuilding_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddBuilding_args args = new AddBuilding_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddBuilding_result result = new AddBuilding_result();
        result.Success = iface_.AddBuilding(args.Auid, args.BuildingClassId, args.Level, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("AddBuilding", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteBuilding_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteBuilding_args args = new DeleteBuilding_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteBuilding_result result = new DeleteBuilding_result();
        result.Success = iface_.DeleteBuilding(args.Auid, args.BuildingInstanceId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("DeleteBuilding", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GiveLamp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GiveLamp_args args = new GiveLamp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GiveLamp_result result = new GiveLamp_result();
        result.Success = iface_.GiveLamp(args.Login, args.LampInfo, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("GiveLamp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLampInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLampInfo_args args = new GetLampInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLampInfo_result result = new GetLampInfo_result();
        result.Success = iface_.GetLampInfo(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetLampInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GiveUpgradeHeroTalents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GiveUpgradeHeroTalents_args args = new GiveUpgradeHeroTalents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GiveUpgradeHeroTalents_result result = new GiveUpgradeHeroTalents_result();
        result.Success = iface_.GiveUpgradeHeroTalents(args.Login, args.LampInfo, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("GiveUpgradeHeroTalents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetUpgradeHeroTalentsInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetUpgradeHeroTalentsInfo_args args = new GetUpgradeHeroTalentsInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetUpgradeHeroTalentsInfo_result result = new GetUpgradeHeroTalentsInfo_result();
        result.Success = iface_.GetUpgradeHeroTalentsInfo(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetUpgradeHeroTalentsInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DisjointSN_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DisjointSN_args args = new DisjointSN_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DisjointSN_result result = new DisjointSN_result();
        result.Success = iface_.DisjointSN(args.Auid, args.Snid);
        oprot.WriteMessageBegin(new TMessage("DisjointSN", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangeFSN_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangeFSN_args args = new ChangeFSN_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangeFSN_result result = new ChangeFSN_result();
        result.Success = iface_.ChangeFSN(args.Auid, args.Snid);
        oprot.WriteMessageBegin(new TMessage("ChangeFSN", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteSAAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteSAAccount_args args = new DeleteSAAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteSAAccount_result result = new DeleteSAAccount_result();
        result.Success = iface_.DeleteSAAccount(args.Auid);
        oprot.WriteMessageBegin(new TMessage("DeleteSAAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountTournamentInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountTournamentInfo_args args = new GetAccountTournamentInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountTournamentInfo_result result = new GetAccountTournamentInfo_result();
        result.Success = iface_.GetAccountTournamentInfo(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountTournamentInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditTournamentInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditTournamentInfo_args args = new EditTournamentInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditTournamentInfo_result result = new EditTournamentInfo_result();
        result.Success = iface_.EditTournamentInfo(args.Login, args.TournamentInfo, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditTournamentInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GiveTournamentTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GiveTournamentTicket_args args = new GiveTournamentTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GiveTournamentTicket_result result = new GiveTournamentTicket_result();
        result.Success = iface_.GiveTournamentTicket(args.Login);
        oprot.WriteMessageBegin(new TMessage("GiveTournamentTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountTournamentGames_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountTournamentGames_args args = new GetAccountTournamentGames_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountTournamentGames_result result = new GetAccountTournamentGames_result();
        result.Success = iface_.GetAccountTournamentGames(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountTournamentGames", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGuildById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGuildById_args args = new GetGuildById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGuildById_result result = new GetGuildById_result();
        result.Success = iface_.GetGuildById(args.Guildid);
        oprot.WriteMessageBegin(new TMessage("GetGuildById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGuildByName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGuildByName_args args = new GetGuildByName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGuildByName_result result = new GetGuildByName_result();
        result.Success = iface_.GetGuildByName(args.Shortname, args.Fullname);
        oprot.WriteMessageBegin(new TMessage("GetGuildByName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGuildMemberById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGuildMemberById_args args = new GetGuildMemberById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGuildMemberById_result result = new GetGuildMemberById_result();
        result.Success = iface_.GetGuildMemberById(args.Guildid, args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetGuildMemberById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditGuild_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditGuild_args args = new EditGuild_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditGuild_result result = new EditGuild_result();
        result.Success = iface_.EditGuild(args.Info, args.Gmlogin);
        oprot.WriteMessageBegin(new TMessage("EditGuild", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangeGuildLeader_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangeGuildLeader_args args = new ChangeGuildLeader_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangeGuildLeader_result result = new ChangeGuildLeader_result();
        result.Success = iface_.ChangeGuildLeader(args.Guildid, args.Auid, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("ChangeGuildLeader", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveGuildMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveGuildMembers_args args = new RemoveGuildMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveGuildMembers_result result = new RemoveGuildMembers_result();
        result.Success = iface_.RemoveGuildMembers(args.Guildid, args.Auids, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("RemoveGuildMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ViewGuildMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ViewGuildMembers_args args = new ViewGuildMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ViewGuildMembers_result result = new ViewGuildMembers_result();
        result.Success = iface_.ViewGuildMembers(args.Guildid);
        oprot.WriteMessageBegin(new TMessage("ViewGuildMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditGuildMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditGuildMember_args args = new EditGuildMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditGuildMember_result result = new EditGuildMember_result();
        result.Success = iface_.EditGuildMember(args.Guildid, args.Member, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditGuildMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetGuildIcon_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetGuildIcon_args args = new SetGuildIcon_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetGuildIcon_result result = new SetGuildIcon_result();
        result.Success = iface_.SetGuildIcon(args.Guildid, args.Image);
        oprot.WriteMessageBegin(new TMessage("SetGuildIcon", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SwitchToNewGuildIcon_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SwitchToNewGuildIcon_args args = new SwitchToNewGuildIcon_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SwitchToNewGuildIcon_result result = new SwitchToNewGuildIcon_result();
        result.Success = iface_.SwitchToNewGuildIcon(args.Guildid, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("SwitchToNewGuildIcon", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TryToPayForGuildIconChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TryToPayForGuildIconChange_args args = new TryToPayForGuildIconChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TryToPayForGuildIconChange_result result = new TryToPayForGuildIconChange_result();
        result.Success = iface_.TryToPayForGuildIconChange(args.Leaderauid, args.Changeiter);
        oprot.WriteMessageBegin(new TMessage("TryToPayForGuildIconChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AcquireGuildLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AcquireGuildLock_args args = new AcquireGuildLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AcquireGuildLock_result result = new AcquireGuildLock_result();
        result.Success = iface_.AcquireGuildLock(args.Guildid, args.Gmlogin);
        oprot.WriteMessageBegin(new TMessage("AcquireGuildLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReleaseGuildLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReleaseGuildLock_args args = new ReleaseGuildLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReleaseGuildLock_result result = new ReleaseGuildLock_result();
        result.Success = iface_.ReleaseGuildLock(args.Guildid, args.Gmlogin);
        oprot.WriteMessageBegin(new TMessage("ReleaseGuildLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void StopGuildSiege_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        StopGuildSiege_args args = new StopGuildSiege_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        StopGuildSiege_result result = new StopGuildSiege_result();
        result.Success = iface_.StopGuildSiege(args.Targetguildid, args.Gmlogin);
        oprot.WriteMessageBegin(new TMessage("StopGuildSiege", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddGuildSuzerain_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddGuildSuzerain_args args = new AddGuildSuzerain_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddGuildSuzerain_result result = new AddGuildSuzerain_result();
        result.Success = iface_.AddGuildSuzerain(args.Guildid, args.Suzerainguildid, args.Gmlogin);
        oprot.WriteMessageBegin(new TMessage("AddGuildSuzerain", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveGuildSuzerain_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveGuildSuzerain_args args = new RemoveGuildSuzerain_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveGuildSuzerain_result result = new RemoveGuildSuzerain_result();
        result.Success = iface_.RemoveGuildSuzerain(args.Guildid, args.Gmlogin);
        oprot.WriteMessageBegin(new TMessage("RemoveGuildSuzerain", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFullGuildDump_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFullGuildDump_args args = new GetFullGuildDump_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFullGuildDump_result result = new GetFullGuildDump_result();
        result.Success = iface_.GetFullGuildDump(args.Guildid, args.Zip);
        oprot.WriteMessageBegin(new TMessage("GetFullGuildDump", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFreeGuildBankTalents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFreeGuildBankTalents_args args = new GetFreeGuildBankTalents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFreeGuildBankTalents_result result = new GetFreeGuildBankTalents_result();
        result.Success = iface_.GetFreeGuildBankTalents(args.Guildid);
        oprot.WriteMessageBegin(new TMessage("GetFreeGuildBankTalents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTakenGuildBankTalents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTakenGuildBankTalents_args args = new GetTakenGuildBankTalents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTakenGuildBankTalents_result result = new GetTakenGuildBankTalents_result();
        result.Success = iface_.GetTakenGuildBankTalents(args.Guildid);
        oprot.WriteMessageBegin(new TMessage("GetTakenGuildBankTalents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReturnTalentToOwner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReturnTalentToOwner_args args = new ReturnTalentToOwner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReturnTalentToOwner_result result = new ReturnTalentToOwner_result();
        result.Success = iface_.ReturnTalentToOwner(args.Guildid, args.TalentId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("ReturnTalentToOwner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReturnTalentToGuildBank_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReturnTalentToGuildBank_args args = new ReturnTalentToGuildBank_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReturnTalentToGuildBank_result result = new ReturnTalentToGuildBank_result();
        result.Success = iface_.ReturnTalentToGuildBank(args.Guildid, args.TalentId, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("ReturnTalentToGuildBank", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SendMessageToUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SendMessageToUser_args args = new SendMessageToUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SendMessageToUser_result result = new SendMessageToUser_result();
        result.Success = iface_.SendMessageToUser(args.Login, args.Auid, args.MessageTitle, args.MessageText, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("SendMessageToUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountAdminMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountAdminMessages_args args = new GetAccountAdminMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountAdminMessages_result result = new GetAccountAdminMessages_result();
        result.Success = iface_.GetAccountAdminMessages(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountAdminMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UserOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UserOperation_args args = new UserOperation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UserOperation_result result = new UserOperation_result();
        result.Success = iface_.UserOperation(args.Auid, args.Type, args.Minutes, args.Reason, args.Claims, args.GmLogin, args.ClaimAuids, args.Points);
        oprot.WriteMessageBegin(new TMessage("UserOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResetUserAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResetUserAccount_args args = new ResetUserAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResetUserAccount_result result = new ResetUserAccount_result();
        result.Success = iface_.ResetUserAccount(args.Login, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("ResetUserAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteUserAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteUserAccount_args args = new DeleteUserAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteUserAccount_result result = new DeleteUserAccount_result();
        result.Success = iface_.DeleteUserAccount(args.Login, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("DeleteUserAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void KickUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        KickUser_args args = new KickUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        KickUser_result result = new KickUser_result();
        result.Success = iface_.KickUser(args.Login, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("KickUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditNickname_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditNickname_args args = new EditNickname_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditNickname_result result = new EditNickname_result();
        result.Success = iface_.EditNickname(args.Login, args.GmLogin, args.Nickname);
        oprot.WriteMessageBegin(new TMessage("EditNickname", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PayEditNickname_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PayEditNickname_args args = new PayEditNickname_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PayEditNickname_result result = new PayEditNickname_result();
        result.Success = iface_.PayEditNickname(args.Login, args.Nickname);
        oprot.WriteMessageBegin(new TMessage("PayEditNickname", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PayChangeFraction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PayChangeFraction_args args = new PayChangeFraction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PayChangeFraction_result result = new PayChangeFraction_result();
        result.Success = iface_.PayChangeFraction(args.Login, args.Fraction);
        oprot.WriteMessageBegin(new TMessage("PayChangeFraction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPrices_args args = new GetPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPrices_result result = new GetPrices_result();
        result.Success = iface_.GetPrices(args.Login, args.Servicetype, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("GetPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BuyService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BuyService_args args = new BuyService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BuyService_result result = new BuyService_result();
        result.Success = iface_.BuyService(args.Login, args.Servicetype, args.ParamValue);
        oprot.WriteMessageBegin(new TMessage("BuyService", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PayService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PayService_args args = new PayService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PayService_result result = new PayService_result();
        result.Success = iface_.PayService(args.Login, args.Servicetype, args.ParamValue, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("PayService", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BuyTournamentTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BuyTournamentTicket_args args = new BuyTournamentTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BuyTournamentTicket_result result = new BuyTournamentTicket_result();
        result.Success = iface_.BuyTournamentTicket(args.Login, args.Pttype);
        oprot.WriteMessageBegin(new TMessage("BuyTournamentTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateBroadcast_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateBroadcast_args args = new CreateBroadcast_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateBroadcast_result result = new CreateBroadcast_result();
        result.Success = iface_.CreateBroadcast(args.CreateInfo, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("CreateBroadcast", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBroadcastLocales_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBroadcastLocales_args args = new GetBroadcastLocales_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBroadcastLocales_result result = new GetBroadcastLocales_result();
        result.Success = iface_.GetBroadcastLocales();
        oprot.WriteMessageBegin(new TMessage("GetBroadcastLocales", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditBroadcast_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditBroadcast_args args = new EditBroadcast_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditBroadcast_result result = new EditBroadcast_result();
        result.Success = iface_.EditBroadcast(args.EditInfo, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditBroadcast", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteBroadcast_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteBroadcast_args args = new DeleteBroadcast_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteBroadcast_result result = new DeleteBroadcast_result();
        result.Success = iface_.DeleteBroadcast(args.Id, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("DeleteBroadcast", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBroadcastList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBroadcastList_args args = new GetBroadcastList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBroadcastList_result result = new GetBroadcastList_result();
        result.Success = iface_.GetBroadcastList(args.SkipLines, args.TakeLines);
        oprot.WriteMessageBegin(new TMessage("GetBroadcastList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void StartMessageRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        StartMessageRotation_args args = new StartMessageRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        StartMessageRotation_result result = new StartMessageRotation_result();
        result.Success = iface_.StartMessageRotation(args.Id, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("StartMessageRotation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void StopMessageRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        StopMessageRotation_args args = new StopMessageRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        StopMessageRotation_result result = new StopMessageRotation_result();
        result.Success = iface_.StopMessageRotation(args.Id, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("StopMessageRotation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSocServerVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSocServerVersion_args args = new GetSocServerVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSocServerVersion_result result = new GetSocServerVersion_result();
        result.Success = iface_.GetSocServerVersion();
        oprot.WriteMessageBegin(new TMessage("GetSocServerVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFullUserDump_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFullUserDump_args args = new GetFullUserDump_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFullUserDump_result result = new GetFullUserDump_result();
        result.Success = iface_.GetFullUserDump(args.Login, args.Zip);
        oprot.WriteMessageBegin(new TMessage("GetFullUserDump", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ApplyFullUserDump_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ApplyFullUserDump_args args = new ApplyFullUserDump_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ApplyFullUserDump_result result = new ApplyFullUserDump_result();
        result.Success = iface_.ApplyFullUserDump(args.Login, args.Dumpdata);
        oprot.WriteMessageBegin(new TMessage("ApplyFullUserDump", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveFakeAuid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveFakeAuid_args args = new RemoveFakeAuid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveFakeAuid_result result = new RemoveFakeAuid_result();
        result.Success = iface_.RemoveFakeAuid(args.Login);
        oprot.WriteMessageBegin(new TMessage("RemoveFakeAuid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBackups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBackups_args args = new GetBackups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBackups_result result = new GetBackups_result();
        result.Success = iface_.GetBackups();
        oprot.WriteMessageBegin(new TMessage("GetBackups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBrokenUserDump_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBrokenUserDump_args args = new GetBrokenUserDump_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBrokenUserDump_result result = new GetBrokenUserDump_result();
        result.Success = iface_.GetBrokenUserDump(args.Login, args.Date, args.Zip);
        oprot.WriteMessageBegin(new TMessage("GetBrokenUserDump", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBrokenUserDumpByNickname_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBrokenUserDumpByNickname_args args = new GetBrokenUserDumpByNickname_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBrokenUserDumpByNickname_result result = new GetBrokenUserDumpByNickname_result();
        result.Success = iface_.GetBrokenUserDumpByNickname(args.Nickname, args.Date, args.Zip);
        oprot.WriteMessageBegin(new TMessage("GetBrokenUserDumpByNickname", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckAccountValidity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckAccountValidity_args args = new CheckAccountValidity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckAccountValidity_result result = new CheckAccountValidity_result();
        result.Success = iface_.CheckAccountValidity(args.Login);
        oprot.WriteMessageBegin(new TMessage("CheckAccountValidity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FixAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FixAccount_args args = new FixAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FixAccount_result result = new FixAccount_result();
        result.Success = iface_.FixAccount(args.Login, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("FixAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ActivateEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ActivateEmail_args args = new ActivateEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ActivateEmail_result result = new ActivateEmail_result();
        result.Success = iface_.ActivateEmail(args.Email, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("ActivateEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FlushServerId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FlushServerId_args args = new FlushServerId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FlushServerId_result result = new FlushServerId_result();
        result.Success = iface_.FlushServerId(args.Login, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("FlushServerId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddUserRestriction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddUserRestriction_args args = new AddUserRestriction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddUserRestriction_result result = new AddUserRestriction_result();
        result.Success = iface_.AddUserRestriction(args.Snid, args.Snuid, args.CbtAccessKey);
        oprot.WriteMessageBegin(new TMessage("AddUserRestriction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditAccountDbValue_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditAccountDbValue_args args = new EditAccountDbValue_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditAccountDbValue_result result = new EditAccountDbValue_result();
        result.Success = iface_.EditAccountDbValue(args.Login, args.GmLogin, args.Key, args.Value);
        oprot.WriteMessageBegin(new TMessage("EditAccountDbValue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterPayment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterPayment_args args = new RegisterPayment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterPayment_result result = new RegisterPayment_result();
        result.Success = iface_.RegisterPayment(args.Auid, args.Amount, args.Source, args.Txnid);
        oprot.WriteMessageBegin(new TMessage("RegisterPayment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPaymentBonusActions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPaymentBonusActions_args args = new GetPaymentBonusActions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPaymentBonusActions_result result = new GetPaymentBonusActions_result();
        result.Success = iface_.GetPaymentBonusActions(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetPaymentBonusActions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReplenishUserGold_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReplenishUserGold_args args = new ReplenishUserGold_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReplenishUserGold_result result = new ReplenishUserGold_result();
        result.Success = iface_.ReplenishUserGold(args.Auid, args.Amount, args.Payment_system);
        oprot.WriteMessageBegin(new TMessage("ReplenishUserGold", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateUserGold_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateUserGold_args args = new UpdateUserGold_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateUserGold_result result = new UpdateUserGold_result();
        result.Success = iface_.UpdateUserGold(args.Auid);
        oprot.WriteMessageBegin(new TMessage("UpdateUserGold", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetQuests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetQuests_args args = new GetQuests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetQuests_result result = new GetQuests_result();
        result.Success = iface_.GetQuests(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetQuests", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangeQuest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangeQuest_args args = new ChangeQuest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangeQuest_result result = new ChangeQuest_result();
        result.Success = iface_.ChangeQuest(args.Auid, args.Questid, args.Action, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("ChangeQuest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateGeoshowFlag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateGeoshowFlag_args args = new UpdateGeoshowFlag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateGeoshowFlag_result result = new UpdateGeoshowFlag_result();
        result.Success = iface_.UpdateGeoshowFlag(args.Auid, args.IsAllowed);
        oprot.WriteMessageBegin(new TMessage("UpdateGeoshowFlag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ApplyDLC_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ApplyDLC_args args = new ApplyDLC_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ApplyDLC_result result = new ApplyDLC_result();
        result.Success = iface_.ApplyDLC(args.Auid, args.Dlcid);
        oprot.WriteMessageBegin(new TMessage("ApplyDLC", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDynamicQuestInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDynamicQuestInfo_args args = new GetDynamicQuestInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDynamicQuestInfo_result result = new GetDynamicQuestInfo_result();
        result.Success = iface_.GetDynamicQuestInfo();
        oprot.WriteMessageBegin(new TMessage("GetDynamicQuestInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDynamicQuestById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDynamicQuestById_args args = new GetDynamicQuestById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDynamicQuestById_result result = new GetDynamicQuestById_result();
        result.Success = iface_.GetDynamicQuestById(args.Index);
        oprot.WriteMessageBegin(new TMessage("GetDynamicQuestById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddDynamicQuest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDynamicQuest_args args = new AddDynamicQuest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddDynamicQuest_result result = new AddDynamicQuest_result();
        result.Success = iface_.AddDynamicQuest(args.QuestData, args.Locale, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("AddDynamicQuest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveDynamicQuest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveDynamicQuest_args args = new RemoveDynamicQuest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveDynamicQuest_result result = new RemoveDynamicQuest_result();
        result.Success = iface_.RemoveDynamicQuest(args.Index, args.Locale);
        oprot.WriteMessageBegin(new TMessage("RemoveDynamicQuest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditDynamicQuest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditDynamicQuest_args args = new EditDynamicQuest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditDynamicQuest_result result = new EditDynamicQuest_result();
        result.Success = iface_.EditDynamicQuest(args.Index, args.Locale, args.QuestData);
        oprot.WriteMessageBegin(new TMessage("EditDynamicQuest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDynamicQuestPullsInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDynamicQuestPullsInfo_args args = new GetDynamicQuestPullsInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDynamicQuestPullsInfo_result result = new GetDynamicQuestPullsInfo_result();
        result.Success = iface_.GetDynamicQuestPullsInfo();
        oprot.WriteMessageBegin(new TMessage("GetDynamicQuestPullsInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDynamicQuestPullById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDynamicQuestPullById_args args = new GetDynamicQuestPullById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDynamicQuestPullById_result result = new GetDynamicQuestPullById_result();
        result.Success = iface_.GetDynamicQuestPullById(args.PullId);
        oprot.WriteMessageBegin(new TMessage("GetDynamicQuestPullById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAuidsLists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAuidsLists_args args = new GetAuidsLists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAuidsLists_result result = new GetAuidsLists_result();
        result.Success = iface_.GetAuidsLists();
        oprot.WriteMessageBegin(new TMessage("GetAuidsLists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAuidsListById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAuidsListById_args args = new GetAuidsListById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAuidsListById_result result = new GetAuidsListById_result();
        result.Success = iface_.GetAuidsListById(args.Index);
        oprot.WriteMessageBegin(new TMessage("GetAuidsListById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddAuidsList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddAuidsList_args args = new AddAuidsList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddAuidsList_result result = new AddAuidsList_result();
        result.Success = iface_.AddAuidsList(args.AuidsList, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("AddAuidsList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditAuidsList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditAuidsList_args args = new EditAuidsList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditAuidsList_result result = new EditAuidsList_result();
        result.Success = iface_.EditAuidsList(args.AuidsList, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditAuidsList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveAuidsList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveAuidsList_args args = new RemoveAuidsList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveAuidsList_result result = new RemoveAuidsList_result();
        result.Success = iface_.RemoveAuidsList(args.Index);
        oprot.WriteMessageBegin(new TMessage("RemoveAuidsList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddDynamicQuestPull_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDynamicQuestPull_args args = new AddDynamicQuestPull_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddDynamicQuestPull_result result = new AddDynamicQuestPull_result();
        result.Success = iface_.AddDynamicQuestPull(args.QuestPull, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("AddDynamicQuestPull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditDynamicQuestPull_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditDynamicQuestPull_args args = new EditDynamicQuestPull_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditDynamicQuestPull_result result = new EditDynamicQuestPull_result();
        result.Success = iface_.EditDynamicQuestPull(args.QuestPull, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditDynamicQuestPull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveDynamicQuestPull_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveDynamicQuestPull_args args = new RemoveDynamicQuestPull_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveDynamicQuestPull_result result = new RemoveDynamicQuestPull_result();
        result.Success = iface_.RemoveDynamicQuestPull(args.Index, args.Locale, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("RemoveDynamicQuestPull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddDynamicQuestsToPull_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDynamicQuestsToPull_args args = new AddDynamicQuestsToPull_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddDynamicQuestsToPull_result result = new AddDynamicQuestsToPull_result();
        result.Success = iface_.AddDynamicQuestsToPull(args.PullId, args.QuestIds, args.Locale, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("AddDynamicQuestsToPull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveDynamicQuestsFromPull_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveDynamicQuestsFromPull_args args = new RemoveDynamicQuestsFromPull_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveDynamicQuestsFromPull_result result = new RemoveDynamicQuestsFromPull_result();
        result.Success = iface_.RemoveDynamicQuestsFromPull(args.PullId, args.QuestIds, args.Locale, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("RemoveDynamicQuestsFromPull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountFlags_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountFlags_args args = new GetAccountFlags_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountFlags_result result = new GetAccountFlags_result();
        result.Success = iface_.GetAccountFlags(args.Login);
        oprot.WriteMessageBegin(new TMessage("GetAccountFlags", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnlockFlag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnlockFlag_args args = new UnlockFlag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnlockFlag_result result = new UnlockFlag_result();
        result.Success = iface_.UnlockFlag(args.Login, args.FlagPersistentId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("UnlockFlag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LockFlag_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LockFlag_args args = new LockFlag_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LockFlag_result result = new LockFlag_result();
        result.Success = iface_.LockFlag(args.Login, args.FlagPersistentId, args.GmLogin, args.Extra_comment);
        oprot.WriteMessageBegin(new TMessage("LockFlag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BindToGeolocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BindToGeolocation_args args = new BindToGeolocation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BindToGeolocation_result result = new BindToGeolocation_result();
        result.Success = iface_.BindToGeolocation(args.Auid, args.Country, args.Region, args.City, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("BindToGeolocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTalentsEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTalentsEvents_args args = new GetTalentsEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTalentsEvents_result result = new GetTalentsEvents_result();
        result.Success = iface_.GetTalentsEvents();
        oprot.WriteMessageBegin(new TMessage("GetTalentsEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetResourceEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetResourceEvents_args args = new GetResourceEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetResourceEvents_result result = new GetResourceEvents_result();
        result.Success = iface_.GetResourceEvents();
        oprot.WriteMessageBegin(new TMessage("GetResourceEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddMassOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddMassOperation_args args = new AddMassOperation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddMassOperation_result result = new AddMassOperation_result();
        result.Success = iface_.AddMassOperation(args.MassOperation, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("AddMassOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMassOperationsInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMassOperationsInfo_args args = new GetMassOperationsInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMassOperationsInfo_result result = new GetMassOperationsInfo_result();
        result.Success = iface_.GetMassOperationsInfo();
        oprot.WriteMessageBegin(new TMessage("GetMassOperationsInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteMassOperationInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteMassOperationInfo_args args = new DeleteMassOperationInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteMassOperationInfo_result result = new DeleteMassOperationInfo_result();
        result.Success = iface_.DeleteMassOperationInfo(args.OperaionId);
        oprot.WriteMessageBegin(new TMessage("DeleteMassOperationInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvailableEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvailableEvents_args args = new GetAvailableEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvailableEvents_result result = new GetAvailableEvents_result();
        result.Success = iface_.GetAvailableEvents();
        oprot.WriteMessageBegin(new TMessage("GetAvailableEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangeEventStateById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangeEventStateById_args args = new ChangeEventStateById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangeEventStateById_result result = new ChangeEventStateById_result();
        result.Success = iface_.ChangeEventStateById(args.PersistentId, args.State);
        oprot.WriteMessageBegin(new TMessage("ChangeEventStateById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteEventById_args args = new DeleteEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteEventById_result result = new DeleteEventById_result();
        result.Success = iface_.DeleteEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("DeleteEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTechsInfos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTechsInfos_args args = new GetTechsInfos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTechsInfos_result result = new GetTechsInfos_result();
        result.Success = iface_.GetTechsInfos();
        oprot.WriteMessageBegin(new TMessage("GetTechsInfos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTechsInfoById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTechsInfoById_args args = new GetTechsInfoById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTechsInfoById_result result = new GetTechsInfoById_result();
        result.Success = iface_.GetTechsInfoById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetTechsInfoById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddTechs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddTechs_args args = new AddTechs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddTechs_result result = new AddTechs_result();
        result.Success = iface_.AddTechs(args.TechInfo);
        oprot.WriteMessageBegin(new TMessage("AddTechs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditTechs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditTechs_args args = new EditTechs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditTechs_result result = new EditTechs_result();
        result.Success = iface_.EditTechs(args.TechInfo);
        oprot.WriteMessageBegin(new TMessage("EditTechs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCustomEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCustomEvents_args args = new GetCustomEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCustomEvents_result result = new GetCustomEvents_result();
        result.Success = iface_.GetCustomEvents();
        oprot.WriteMessageBegin(new TMessage("GetCustomEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCustomEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCustomEventById_args args = new GetCustomEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCustomEventById_result result = new GetCustomEventById_result();
        result.Success = iface_.GetCustomEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetCustomEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddCustomEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddCustomEvent_args args = new AddCustomEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddCustomEvent_result result = new AddCustomEvent_result();
        result.Success = iface_.AddCustomEvent(args.CustomEvent);
        oprot.WriteMessageBegin(new TMessage("AddCustomEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditCustomEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditCustomEvent_args args = new EditCustomEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditCustomEvent_result result = new EditCustomEvent_result();
        result.Success = iface_.EditCustomEvent(args.CustomEvent);
        oprot.WriteMessageBegin(new TMessage("EditCustomEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCustomMaps_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCustomMaps_args args = new GetCustomMaps_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCustomMaps_result result = new GetCustomMaps_result();
        result.Success = iface_.GetCustomMaps();
        oprot.WriteMessageBegin(new TMessage("GetCustomMaps", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCustomMapById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCustomMapById_args args = new GetCustomMapById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCustomMapById_result result = new GetCustomMapById_result();
        result.Success = iface_.GetCustomMapById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetCustomMapById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddCustomMap_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddCustomMap_args args = new AddCustomMap_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddCustomMap_result result = new AddCustomMap_result();
        result.Success = iface_.AddCustomMap(args.CustomMap);
        oprot.WriteMessageBegin(new TMessage("AddCustomMap", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditCustomMap_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditCustomMap_args args = new EditCustomMap_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditCustomMap_result result = new EditCustomMap_result();
        result.Success = iface_.EditCustomMap(args.CustomMap);
        oprot.WriteMessageBegin(new TMessage("EditCustomMap", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTalentDropRarities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTalentDropRarities_args args = new GetTalentDropRarities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTalentDropRarities_result result = new GetTalentDropRarities_result();
        result.Success = iface_.GetTalentDropRarities();
        oprot.WriteMessageBegin(new TMessage("GetTalentDropRarities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTalentDropRarityById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTalentDropRarityById_args args = new GetTalentDropRarityById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTalentDropRarityById_result result = new GetTalentDropRarityById_result();
        result.Success = iface_.GetTalentDropRarityById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetTalentDropRarityById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddTalentDropRarities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddTalentDropRarities_args args = new AddTalentDropRarities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddTalentDropRarities_result result = new AddTalentDropRarities_result();
        result.Success = iface_.AddTalentDropRarities(args.DropRarity);
        oprot.WriteMessageBegin(new TMessage("AddTalentDropRarities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditTalentDropRarities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditTalentDropRarities_args args = new EditTalentDropRarities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditTalentDropRarities_result result = new EditTalentDropRarities_result();
        result.Success = iface_.EditTalentDropRarities(args.DropRarity);
        oprot.WriteMessageBegin(new TMessage("EditTalentDropRarities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNewsBanners_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNewsBanners_args args = new GetNewsBanners_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNewsBanners_result result = new GetNewsBanners_result();
        result.Success = iface_.GetNewsBanners();
        oprot.WriteMessageBegin(new TMessage("GetNewsBanners", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNewsBannerById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNewsBannerById_args args = new GetNewsBannerById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNewsBannerById_result result = new GetNewsBannerById_result();
        result.Success = iface_.GetNewsBannerById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetNewsBannerById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddNewsBanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddNewsBanner_args args = new AddNewsBanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddNewsBanner_result result = new AddNewsBanner_result();
        result.Success = iface_.AddNewsBanner(args.Banner);
        oprot.WriteMessageBegin(new TMessage("AddNewsBanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditNewsBanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditNewsBanner_args args = new EditNewsBanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditNewsBanner_result result = new EditNewsBanner_result();
        result.Success = iface_.EditNewsBanner(args.Banner);
        oprot.WriteMessageBegin(new TMessage("EditNewsBanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSkinPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSkinPrices_args args = new GetSkinPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSkinPrices_result result = new GetSkinPrices_result();
        result.Success = iface_.GetSkinPrices();
        oprot.WriteMessageBegin(new TMessage("GetSkinPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSkinPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSkinPriceById_args args = new GetSkinPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSkinPriceById_result result = new GetSkinPriceById_result();
        result.Success = iface_.GetSkinPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetSkinPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSkinPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSkinPricesEvent_args args = new AddSkinPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSkinPricesEvent_result result = new AddSkinPricesEvent_result();
        result.Success = iface_.AddSkinPricesEvent(args.SkinEvent);
        oprot.WriteMessageBegin(new TMessage("AddSkinPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditSkinPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditSkinPricesEvent_args args = new EditSkinPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditSkinPricesEvent_result result = new EditSkinPricesEvent_result();
        result.Success = iface_.EditSkinPricesEvent(args.SkinEvent);
        oprot.WriteMessageBegin(new TMessage("EditSkinPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHeroPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHeroPrices_args args = new GetHeroPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHeroPrices_result result = new GetHeroPrices_result();
        result.Success = iface_.GetHeroPrices();
        oprot.WriteMessageBegin(new TMessage("GetHeroPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHeroPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHeroPriceById_args args = new GetHeroPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHeroPriceById_result result = new GetHeroPriceById_result();
        result.Success = iface_.GetHeroPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetHeroPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddHeroPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddHeroPricesEvent_args args = new AddHeroPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddHeroPricesEvent_result result = new AddHeroPricesEvent_result();
        result.Success = iface_.AddHeroPricesEvent(args.SkinEvent);
        oprot.WriteMessageBegin(new TMessage("AddHeroPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditHeroPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditHeroPricesEvent_args args = new EditHeroPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditHeroPricesEvent_result result = new EditHeroPricesEvent_result();
        result.Success = iface_.EditHeroPricesEvent(args.SkinEvent);
        oprot.WriteMessageBegin(new TMessage("EditHeroPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTransmutationTalentsPerPerl_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTransmutationTalentsPerPerl_args args = new GetTransmutationTalentsPerPerl_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTransmutationTalentsPerPerl_result result = new GetTransmutationTalentsPerPerl_result();
        result.Success = iface_.GetTransmutationTalentsPerPerl();
        oprot.WriteMessageBegin(new TMessage("GetTransmutationTalentsPerPerl", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTransmutationTalentsPerPerlById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTransmutationTalentsPerPerlById_args args = new GetTransmutationTalentsPerPerlById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTransmutationTalentsPerPerlById_result result = new GetTransmutationTalentsPerPerlById_result();
        result.Success = iface_.GetTransmutationTalentsPerPerlById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetTransmutationTalentsPerPerlById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddTalentPerPerlEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddTalentPerPerlEvent_args args = new AddTalentPerPerlEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddTalentPerPerlEvent_result result = new AddTalentPerPerlEvent_result();
        result.Success = iface_.AddTalentPerPerlEvent(args.TalentsPerPerlEvent);
        oprot.WriteMessageBegin(new TMessage("AddTalentPerPerlEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditTalentPerPerlEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditTalentPerPerlEvent_args args = new EditTalentPerPerlEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditTalentPerPerlEvent_result result = new EditTalentPerPerlEvent_result();
        result.Success = iface_.EditTalentPerPerlEvent(args.TalentsPerPerlEvent);
        oprot.WriteMessageBegin(new TMessage("EditTalentPerPerlEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopSlots_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopSlots_args args = new GetRerollShopSlots_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopSlots_result result = new GetRerollShopSlots_result();
        result.Success = iface_.GetRerollShopSlots();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopSlots", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopSlotsById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopSlotsById_args args = new GetRerollShopSlotsById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopSlotsById_result result = new GetRerollShopSlotsById_result();
        result.Success = iface_.GetRerollShopSlotsById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopSlotsById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopSlotsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopSlotsEvent_args args = new AddRerollShopSlotsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopSlotsEvent_result result = new AddRerollShopSlotsEvent_result();
        result.Success = iface_.AddRerollShopSlotsEvent(args.RerollShopSlotsEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopSlotsEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopSlotsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopSlotsEvent_args args = new EditRerollShopSlotsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopSlotsEvent_result result = new EditRerollShopSlotsEvent_result();
        result.Success = iface_.EditRerollShopSlotsEvent(args.RerollShopSlotsEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopSlotsEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopPrices_args args = new GetRerollShopPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopPrices_result result = new GetRerollShopPrices_result();
        result.Success = iface_.GetRerollShopPrices();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopPriceById_args args = new GetRerollShopPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopPriceById_result result = new GetRerollShopPriceById_result();
        result.Success = iface_.GetRerollShopPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopPriceEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopPriceEvent_args args = new AddRerollShopPriceEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopPriceEvent_result result = new AddRerollShopPriceEvent_result();
        result.Success = iface_.AddRerollShopPriceEvent(args.RerollShopPriceEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopPriceEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopPriceEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopPriceEvent_args args = new EditRerollShopPriceEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopPriceEvent_result result = new EditRerollShopPriceEvent_result();
        result.Success = iface_.EditRerollShopPriceEvent(args.RerollShopPriceEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopPriceEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetReforgeTalentPrice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetReforgeTalentPrice_args args = new GetReforgeTalentPrice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetReforgeTalentPrice_result result = new GetReforgeTalentPrice_result();
        result.Success = iface_.GetReforgeTalentPrice();
        oprot.WriteMessageBegin(new TMessage("GetReforgeTalentPrice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetReforgeTalentPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetReforgeTalentPriceById_args args = new GetReforgeTalentPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetReforgeTalentPriceById_result result = new GetReforgeTalentPriceById_result();
        result.Success = iface_.GetReforgeTalentPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetReforgeTalentPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddReforgeTalentPriceEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddReforgeTalentPriceEvent_args args = new AddReforgeTalentPriceEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddReforgeTalentPriceEvent_result result = new AddReforgeTalentPriceEvent_result();
        result.Success = iface_.AddReforgeTalentPriceEvent(args.ReforgeTalentPriceEvent);
        oprot.WriteMessageBegin(new TMessage("AddReforgeTalentPriceEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditReforgeTalentPriceEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditReforgeTalentPriceEvent_args args = new EditReforgeTalentPriceEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditReforgeTalentPriceEvent_result result = new EditReforgeTalentPriceEvent_result();
        result.Success = iface_.EditReforgeTalentPriceEvent(args.ReforgeTalentPriceEvent);
        oprot.WriteMessageBegin(new TMessage("EditReforgeTalentPriceEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupPrices_args args = new GetRerollShopGroupPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupPrices_result result = new GetRerollShopGroupPrices_result();
        result.Success = iface_.GetRerollShopGroupPrices();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupPriceById_args args = new GetRerollShopGroupPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupPriceById_result result = new GetRerollShopGroupPriceById_result();
        result.Success = iface_.GetRerollShopGroupPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopGroupPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopGroupPricesEvent_args args = new AddRerollShopGroupPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopGroupPricesEvent_result result = new AddRerollShopGroupPricesEvent_result();
        result.Success = iface_.AddRerollShopGroupPricesEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopGroupPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopGroupPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopGroupPricesEvent_args args = new EditRerollShopGroupPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopGroupPricesEvent_result result = new EditRerollShopGroupPricesEvent_result();
        result.Success = iface_.EditRerollShopGroupPricesEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopGroupPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupCurrencies_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupCurrencies_args args = new GetRerollShopGroupCurrencies_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupCurrencies_result result = new GetRerollShopGroupCurrencies_result();
        result.Success = iface_.GetRerollShopGroupCurrencies();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupCurrencies", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupCurrenciesById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupCurrenciesById_args args = new GetRerollShopGroupCurrenciesById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupCurrenciesById_result result = new GetRerollShopGroupCurrenciesById_result();
        result.Success = iface_.GetRerollShopGroupCurrenciesById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupCurrenciesById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopGroupCurrenciesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopGroupCurrenciesEvent_args args = new AddRerollShopGroupCurrenciesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopGroupCurrenciesEvent_result result = new AddRerollShopGroupCurrenciesEvent_result();
        result.Success = iface_.AddRerollShopGroupCurrenciesEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopGroupCurrenciesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopGroupCurrenciesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopGroupCurrenciesEvent_args args = new EditRerollShopGroupCurrenciesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopGroupCurrenciesEvent_result result = new EditRerollShopGroupCurrenciesEvent_result();
        result.Success = iface_.EditRerollShopGroupCurrenciesEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopGroupCurrenciesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopSlotPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopSlotPrices_args args = new GetRerollShopSlotPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopSlotPrices_result result = new GetRerollShopSlotPrices_result();
        result.Success = iface_.GetRerollShopSlotPrices();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopSlotPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopSlotPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopSlotPriceById_args args = new GetRerollShopSlotPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopSlotPriceById_result result = new GetRerollShopSlotPriceById_result();
        result.Success = iface_.GetRerollShopSlotPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopSlotPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopSlotPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopSlotPricesEvent_args args = new AddRerollShopSlotPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopSlotPricesEvent_result result = new AddRerollShopSlotPricesEvent_result();
        result.Success = iface_.AddRerollShopSlotPricesEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopSlotPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopSlotPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopSlotPricesEvent_args args = new EditRerollShopSlotPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopSlotPricesEvent_result result = new EditRerollShopSlotPricesEvent_result();
        result.Success = iface_.EditRerollShopSlotPricesEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopSlotPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupProbabilities_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupProbabilities_args args = new GetRerollShopGroupProbabilities_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupProbabilities_result result = new GetRerollShopGroupProbabilities_result();
        result.Success = iface_.GetRerollShopGroupProbabilities();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupProbabilities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupProbabilityById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupProbabilityById_args args = new GetRerollShopGroupProbabilityById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupProbabilityById_result result = new GetRerollShopGroupProbabilityById_result();
        result.Success = iface_.GetRerollShopGroupProbabilityById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupProbabilityById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopGroupProbabilityEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopGroupProbabilityEvent_args args = new AddRerollShopGroupProbabilityEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopGroupProbabilityEvent_result result = new AddRerollShopGroupProbabilityEvent_result();
        result.Success = iface_.AddRerollShopGroupProbabilityEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopGroupProbabilityEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopGroupProbabilityEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopGroupProbabilityEvent_args args = new EditRerollShopGroupProbabilityEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopGroupProbabilityEvent_result result = new EditRerollShopGroupProbabilityEvent_result();
        result.Success = iface_.EditRerollShopGroupProbabilityEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopGroupProbabilityEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopSlotAmount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopSlotAmount_args args = new GetRerollShopSlotAmount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopSlotAmount_result result = new GetRerollShopSlotAmount_result();
        result.Success = iface_.GetRerollShopSlotAmount();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopSlotAmount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopSlotAmountById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopSlotAmountById_args args = new GetRerollShopSlotAmountById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopSlotAmountById_result result = new GetRerollShopSlotAmountById_result();
        result.Success = iface_.GetRerollShopSlotAmountById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopSlotAmountById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopSlotAmountsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopSlotAmountsEvent_args args = new AddRerollShopSlotAmountsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopSlotAmountsEvent_result result = new AddRerollShopSlotAmountsEvent_result();
        result.Success = iface_.AddRerollShopSlotAmountsEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopSlotAmountsEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopSlotAmountsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopSlotAmountsEvent_args args = new EditRerollShopSlotAmountsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopSlotAmountsEvent_result result = new EditRerollShopSlotAmountsEvent_result();
        result.Success = iface_.EditRerollShopSlotAmountsEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopSlotAmountsEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFirstBuyPrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFirstBuyPrices_args args = new GetFirstBuyPrices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFirstBuyPrices_result result = new GetFirstBuyPrices_result();
        result.Success = iface_.GetFirstBuyPrices();
        oprot.WriteMessageBegin(new TMessage("GetFirstBuyPrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFirstBuyPriceById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFirstBuyPriceById_args args = new GetFirstBuyPriceById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFirstBuyPriceById_result result = new GetFirstBuyPriceById_result();
        result.Success = iface_.GetFirstBuyPriceById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetFirstBuyPriceById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddFirstBuyPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddFirstBuyPricesEvent_args args = new AddFirstBuyPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddFirstBuyPricesEvent_result result = new AddFirstBuyPricesEvent_result();
        result.Success = iface_.AddFirstBuyPricesEvent(args.FirstBuyEvent);
        oprot.WriteMessageBegin(new TMessage("AddFirstBuyPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditFirstBuyPricesEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditFirstBuyPricesEvent_args args = new EditFirstBuyPricesEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditFirstBuyPricesEvent_result result = new EditFirstBuyPricesEvent_result();
        result.Success = iface_.EditFirstBuyPricesEvent(args.FirstBuyEvent);
        oprot.WriteMessageBegin(new TMessage("EditFirstBuyPricesEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopPremiumNotInactive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopPremiumNotInactive_args args = new GetRerollShopPremiumNotInactive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopPremiumNotInactive_result result = new GetRerollShopPremiumNotInactive_result();
        result.Success = iface_.GetRerollShopPremiumNotInactive();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopPremiumNotInactive", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopPremiumNotInactiveById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopPremiumNotInactiveById_args args = new GetRerollShopPremiumNotInactiveById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopPremiumNotInactiveById_result result = new GetRerollShopPremiumNotInactiveById_result();
        result.Success = iface_.GetRerollShopPremiumNotInactiveById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopPremiumNotInactiveById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopPremiumNotInactiveEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopPremiumNotInactiveEvent_args args = new AddRerollShopPremiumNotInactiveEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopPremiumNotInactiveEvent_result result = new AddRerollShopPremiumNotInactiveEvent_result();
        result.Success = iface_.AddRerollShopPremiumNotInactiveEvent(args.RerollShopPremiumNotInactiveEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopPremiumNotInactiveEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopPremiumNotInactiveEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopPremiumNotInactiveEvent_args args = new EditRerollShopPremiumNotInactiveEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopPremiumNotInactiveEvent_result result = new EditRerollShopPremiumNotInactiveEvent_result();
        result.Success = iface_.EditRerollShopPremiumNotInactiveEvent(args.RerollShopPremiumNotInactiveEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopPremiumNotInactiveEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupSlots_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupSlots_args args = new GetRerollShopGroupSlots_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupSlots_result result = new GetRerollShopGroupSlots_result();
        result.Success = iface_.GetRerollShopGroupSlots();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupSlots", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopGroupSlotsById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopGroupSlotsById_args args = new GetRerollShopGroupSlotsById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopGroupSlotsById_result result = new GetRerollShopGroupSlotsById_result();
        result.Success = iface_.GetRerollShopGroupSlotsById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopGroupSlotsById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopGroupSlotsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopGroupSlotsEvent_args args = new AddRerollShopGroupSlotsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopGroupSlotsEvent_result result = new AddRerollShopGroupSlotsEvent_result();
        result.Success = iface_.AddRerollShopGroupSlotsEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopGroupSlotsEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopGroupSlotsEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopGroupSlotsEvent_args args = new EditRerollShopGroupSlotsEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopGroupSlotsEvent_result result = new EditRerollShopGroupSlotsEvent_result();
        result.Success = iface_.EditRerollShopGroupSlotsEvent(args.GroupEvent);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopGroupSlotsEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopBanners_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopBanners_args args = new GetRerollShopBanners_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopBanners_result result = new GetRerollShopBanners_result();
        result.Success = iface_.GetRerollShopBanners();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopBanners", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopBannerById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopBannerById_args args = new GetRerollShopBannerById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopBannerById_result result = new GetRerollShopBannerById_result();
        result.Success = iface_.GetRerollShopBannerById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopBannerById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopBanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopBanner_args args = new AddRerollShopBanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopBanner_result result = new AddRerollShopBanner_result();
        result.Success = iface_.AddRerollShopBanner(args.Banner);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopBanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopBanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopBanner_args args = new EditRerollShopBanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopBanner_result result = new EditRerollShopBanner_result();
        result.Success = iface_.EditRerollShopBanner(args.Banner);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopBanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopTooltips_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopTooltips_args args = new GetRerollShopTooltips_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopTooltips_result result = new GetRerollShopTooltips_result();
        result.Success = iface_.GetRerollShopTooltips();
        oprot.WriteMessageBegin(new TMessage("GetRerollShopTooltips", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRerollShopTooltipById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRerollShopTooltipById_args args = new GetRerollShopTooltipById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRerollShopTooltipById_result result = new GetRerollShopTooltipById_result();
        result.Success = iface_.GetRerollShopTooltipById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRerollShopTooltipById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRerollShopTooltip_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRerollShopTooltip_args args = new AddRerollShopTooltip_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRerollShopTooltip_result result = new AddRerollShopTooltip_result();
        result.Success = iface_.AddRerollShopTooltip(args.Tooltip);
        oprot.WriteMessageBegin(new TMessage("AddRerollShopTooltip", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRerollShopTooltip_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRerollShopTooltip_args args = new EditRerollShopTooltip_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRerollShopTooltip_result result = new EditRerollShopTooltip_result();
        result.Success = iface_.EditRerollShopTooltip(args.Tooltip);
        oprot.WriteMessageBegin(new TMessage("EditRerollShopTooltip", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRollEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRollEvents_args args = new GetRollEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRollEvents_result result = new GetRollEvents_result();
        result.Success = iface_.GetRollEvents();
        oprot.WriteMessageBegin(new TMessage("GetRollEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRollEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRollEventById_args args = new GetRollEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRollEventById_result result = new GetRollEventById_result();
        result.Success = iface_.GetRollEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetRollEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddRollEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddRollEvent_args args = new AddRollEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddRollEvent_result result = new AddRollEvent_result();
        result.Success = iface_.AddRollEvent(args.RollEvent);
        oprot.WriteMessageBegin(new TMessage("AddRollEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditRollEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditRollEvent_args args = new EditRollEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditRollEvent_result result = new EditRollEvent_result();
        result.Success = iface_.EditRollEvent(args.RollEvent);
        oprot.WriteMessageBegin(new TMessage("EditRollEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetQuestEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetQuestEvents_args args = new GetQuestEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetQuestEvents_result result = new GetQuestEvents_result();
        result.Success = iface_.GetQuestEvents();
        oprot.WriteMessageBegin(new TMessage("GetQuestEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetQuestEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetQuestEventById_args args = new GetQuestEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetQuestEventById_result result = new GetQuestEventById_result();
        result.Success = iface_.GetQuestEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetQuestEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddQuestEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddQuestEvent_args args = new AddQuestEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddQuestEvent_result result = new AddQuestEvent_result();
        result.Success = iface_.AddQuestEvent(args.QuestEvent);
        oprot.WriteMessageBegin(new TMessage("AddQuestEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditQuestEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditQuestEvent_args args = new EditQuestEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditQuestEvent_result result = new EditQuestEvent_result();
        result.Success = iface_.EditQuestEvent(args.QuestEvent);
        oprot.WriteMessageBegin(new TMessage("EditQuestEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTradeEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTradeEvents_args args = new GetTradeEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTradeEvents_result result = new GetTradeEvents_result();
        result.Success = iface_.GetTradeEvents();
        oprot.WriteMessageBegin(new TMessage("GetTradeEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTradeEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTradeEventById_args args = new GetTradeEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTradeEventById_result result = new GetTradeEventById_result();
        result.Success = iface_.GetTradeEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetTradeEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddTradeEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddTradeEvent_args args = new AddTradeEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddTradeEvent_result result = new AddTradeEvent_result();
        result.Success = iface_.AddTradeEvent(args.TradeEvent);
        oprot.WriteMessageBegin(new TMessage("AddTradeEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditTradeEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditTradeEvent_args args = new EditTradeEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditTradeEvent_result result = new EditTradeEvent_result();
        result.Success = iface_.EditTradeEvent(args.TradeEvent);
        oprot.WriteMessageBegin(new TMessage("EditTradeEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSeasonEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSeasonEvents_args args = new GetSeasonEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSeasonEvents_result result = new GetSeasonEvents_result();
        result.Success = iface_.GetSeasonEvents();
        oprot.WriteMessageBegin(new TMessage("GetSeasonEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSeasonEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSeasonEventById_args args = new GetSeasonEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSeasonEventById_result result = new GetSeasonEventById_result();
        result.Success = iface_.GetSeasonEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetSeasonEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddSeasonEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddSeasonEvent_args args = new AddSeasonEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddSeasonEvent_result result = new AddSeasonEvent_result();
        result.Success = iface_.AddSeasonEvent(args.SeasonEvent);
        oprot.WriteMessageBegin(new TMessage("AddSeasonEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditSeasonEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditSeasonEvent_args args = new EditSeasonEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditSeasonEvent_result result = new EditSeasonEvent_result();
        result.Success = iface_.EditSeasonEvent(args.SeasonEvent);
        oprot.WriteMessageBegin(new TMessage("EditSeasonEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDonateEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDonateEvents_args args = new GetDonateEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDonateEvents_result result = new GetDonateEvents_result();
        result.Success = iface_.GetDonateEvents();
        oprot.WriteMessageBegin(new TMessage("GetDonateEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDonateEventById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDonateEventById_args args = new GetDonateEventById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDonateEventById_result result = new GetDonateEventById_result();
        result.Success = iface_.GetDonateEventById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetDonateEventById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddDonateEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDonateEvent_args args = new AddDonateEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddDonateEvent_result result = new AddDonateEvent_result();
        result.Success = iface_.AddDonateEvent(args.DonateEvent);
        oprot.WriteMessageBegin(new TMessage("AddDonateEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditDonateEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditDonateEvent_args args = new EditDonateEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditDonateEvent_result result = new EditDonateEvent_result();
        result.Success = iface_.EditDonateEvent(args.DonateEvent);
        oprot.WriteMessageBegin(new TMessage("EditDonateEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGWEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGWEvents_args args = new GetGWEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGWEvents_result result = new GetGWEvents_result();
        result.Success = iface_.GetGWEvents();
        oprot.WriteMessageBegin(new TMessage("GetGWEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGWEventsModelById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGWEventsModelById_args args = new GetGWEventsModelById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGWEventsModelById_result result = new GetGWEventsModelById_result();
        result.Success = iface_.GetGWEventsModelById(args.PersistentId);
        oprot.WriteMessageBegin(new TMessage("GetGWEventsModelById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EditGWEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EditGWEvent_args args = new EditGWEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EditGWEvent_result result = new EditGWEvent_result();
        result.Success = iface_.EditGWEvent(args.GwEventModel, args.GmLogin);
        oprot.WriteMessageBegin(new TMessage("EditGWEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAccountFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAccountFriends_args args = new GetAccountFriends_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAccountFriends_result result = new GetAccountFriends_result();
        result.Success = iface_.GetAccountFriends(args.Auid);
        oprot.WriteMessageBegin(new TMessage("GetAccountFriends", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveFriend_args args = new RemoveFriend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveFriend_result result = new RemoveFriend_result();
        result.Success = iface_.RemoveFriend(args.Auid, args.FriendAuid);
        oprot.WriteMessageBegin(new TMessage("RemoveFriend", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountBySNUid_args : TBase
    {
      private string _snid;
      private string _snuid;

      public string Snid
      {
        get
        {
          return _snid;
        }
        set
        {
          __isset.snid = true;
          this._snid = value;
        }
      }

      public string Snuid
      {
        get
        {
          return _snuid;
        }
        set
        {
          __isset.snuid = true;
          this._snuid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snid;
        public bool snuid;
      }

      public GetAccountBySNUid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Snid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Snuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountBySNUid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Snid != null && __isset.snid) {
          field.Name = "snid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snid);
          oprot.WriteFieldEnd();
        }
        if (Snuid != null && __isset.snuid) {
          field.Name = "snuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountBySNUid_args(");
        sb.Append("Snid: ");
        sb.Append(Snid);
        sb.Append(",Snuid: ");
        sb.Append(Snuid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountBySNUid_result : TBase
    {
      private AccountInfoResponse _success;

      public AccountInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountBySNUid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AccountInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountBySNUid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountBySNUid_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountByAuid_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetAccountByAuid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountByAuid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountByAuid_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountByAuid_result : TBase
    {
      private AccountInfoResponse _success;

      public AccountInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountByAuid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AccountInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountByAuid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountByAuid_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindNicknameExact_args : TBase
    {
      private string _nickName;

      public string NickName
      {
        get
        {
          return _nickName;
        }
        set
        {
          __isset.nickName = true;
          this._nickName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nickName;
      }

      public FindNicknameExact_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NickName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindNicknameExact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NickName != null && __isset.nickName) {
          field.Name = "nickName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NickName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindNicknameExact_args(");
        sb.Append("NickName: ");
        sb.Append(NickName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindNicknameExact_result : TBase
    {
      private NickSnidResponse _success;

      public NickSnidResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindNicknameExact_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NickSnidResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindNicknameExact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindNicknameExact_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindNicknamesLike_args : TBase
    {
      private string _nickName;
      private int _page_offset;
      private int _page_size;

      public string NickName
      {
        get
        {
          return _nickName;
        }
        set
        {
          __isset.nickName = true;
          this._nickName = value;
        }
      }

      public int Page_offset
      {
        get
        {
          return _page_offset;
        }
        set
        {
          __isset.page_offset = true;
          this._page_offset = value;
        }
      }

      public int Page_size
      {
        get
        {
          return _page_size;
        }
        set
        {
          __isset.page_size = true;
          this._page_size = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nickName;
        public bool page_offset;
        public bool page_size;
      }

      public FindNicknamesLike_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NickName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Page_offset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Page_size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindNicknamesLike_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NickName != null && __isset.nickName) {
          field.Name = "nickName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NickName);
          oprot.WriteFieldEnd();
        }
        if (__isset.page_offset) {
          field.Name = "page_offset";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Page_offset);
          oprot.WriteFieldEnd();
        }
        if (__isset.page_size) {
          field.Name = "page_size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Page_size);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindNicknamesLike_args(");
        sb.Append("NickName: ");
        sb.Append(NickName);
        sb.Append(",Page_offset: ");
        sb.Append(Page_offset);
        sb.Append(",Page_size: ");
        sb.Append(Page_size);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindNicknamesLike_result : TBase
    {
      private NickSnidListResponse _success;

      public NickSnidListResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindNicknamesLike_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NickSnidListResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindNicknamesLike_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindNicknamesLike_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSocialNetworks_args : TBase
    {

      public GetSocialNetworks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSocialNetworks_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSocialNetworks_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSocialNetworks_result : TBase
    {
      private SocialNetworksResponse _success;

      public SocialNetworksResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSocialNetworks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SocialNetworksResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSocialNetworks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSocialNetworks_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocaleInfoBySNUid_args : TBase
    {
      private string _snid;
      private string _snuid;

      public string Snid
      {
        get
        {
          return _snid;
        }
        set
        {
          __isset.snid = true;
          this._snid = value;
        }
      }

      public string Snuid
      {
        get
        {
          return _snuid;
        }
        set
        {
          __isset.snuid = true;
          this._snuid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snid;
        public bool snuid;
      }

      public GetLocaleInfoBySNUid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Snid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Snuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLocaleInfoBySNUid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Snid != null && __isset.snid) {
          field.Name = "snid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snid);
          oprot.WriteFieldEnd();
        }
        if (Snuid != null && __isset.snuid) {
          field.Name = "snuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLocaleInfoBySNUid_args(");
        sb.Append("Snid: ");
        sb.Append(Snid);
        sb.Append(",Snuid: ");
        sb.Append(Snuid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocaleInfoBySNUid_result : TBase
    {
      private LocaleInfoResponse _success;

      public LocaleInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLocaleInfoBySNUid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LocaleInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLocaleInfoBySNUid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLocaleInfoBySNUid_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocaleInfoByAuid_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetLocaleInfoByAuid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLocaleInfoByAuid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLocaleInfoByAuid_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocaleInfoByAuid_result : TBase
    {
      private LocaleInfoResponse _success;

      public LocaleInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLocaleInfoByAuid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LocaleInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLocaleInfoByAuid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLocaleInfoByAuid_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindPlayerByNickname_args : TBase
    {
      private string _nickname;

      public string Nickname
      {
        get
        {
          return _nickname;
        }
        set
        {
          __isset.nickname = true;
          this._nickname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nickname;
      }

      public FindPlayerByNickname_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Nickname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindPlayerByNickname_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Nickname != null && __isset.nickname) {
          field.Name = "nickname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nickname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindPlayerByNickname_args(");
        sb.Append("Nickname: ");
        sb.Append(Nickname);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindPlayerByNickname_result : TBase
    {
      private NickSnidResponse _success;

      public NickSnidResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindPlayerByNickname_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NickSnidResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindPlayerByNickname_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindPlayerByNickname_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindPlayerByEmail_args : TBase
    {
      private string _email;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
      }

      public FindPlayerByEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindPlayerByEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindPlayerByEmail_args(");
        sb.Append("Email: ");
        sb.Append(Email);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindPlayerByEmail_result : TBase
    {
      private NickSnidResponse _success;

      public NickSnidResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindPlayerByEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NickSnidResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindPlayerByEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindPlayerByEmail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerChangeEmail_args : TBase
    {
      private string _email;
      private string _newEmail;
      private string _newPass;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string NewEmail
      {
        get
        {
          return _newEmail;
        }
        set
        {
          __isset.newEmail = true;
          this._newEmail = value;
        }
      }

      public string NewPass
      {
        get
        {
          return _newPass;
        }
        set
        {
          __isset.newPass = true;
          this._newPass = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool newEmail;
        public bool newPass;
      }

      public PlayerChangeEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NewEmail = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                NewPass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PlayerChangeEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (NewEmail != null && __isset.newEmail) {
          field.Name = "newEmail";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewEmail);
          oprot.WriteFieldEnd();
        }
        if (NewPass != null && __isset.newPass) {
          field.Name = "newPass";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewPass);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PlayerChangeEmail_args(");
        sb.Append("Email: ");
        sb.Append(Email);
        sb.Append(",NewEmail: ");
        sb.Append(NewEmail);
        sb.Append(",NewPass: ");
        sb.Append(NewPass);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerChangeEmail_result : TBase
    {
      private NickSnidResponse _success;

      public NickSnidResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerChangeEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NickSnidResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PlayerChangeEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PlayerChangeEmail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerRemoveNickname_args : TBase
    {
      private string _email;
      private string _nickname;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Nickname
      {
        get
        {
          return _nickname;
        }
        set
        {
          __isset.nickname = true;
          this._nickname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool nickname;
      }

      public PlayerRemoveNickname_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Nickname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PlayerRemoveNickname_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (Nickname != null && __isset.nickname) {
          field.Name = "nickname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nickname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PlayerRemoveNickname_args(");
        sb.Append("Email: ");
        sb.Append(Email);
        sb.Append(",Nickname: ");
        sb.Append(Nickname);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlayerRemoveNickname_result : TBase
    {
      private NickSnidResponse _success;

      public NickSnidResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PlayerRemoveNickname_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NickSnidResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PlayerRemoveNickname_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PlayerRemoveNickname_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountQuestsForTalentsByAuid_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountQuestsForTalentsByAuid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountQuestsForTalentsByAuid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountQuestsForTalentsByAuid_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountQuestsForTalentsByAuid_result : TBase
    {
      private QuestsForTalentsInfoResponse _success;

      public QuestsForTalentsInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountQuestsForTalentsByAuid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QuestsForTalentsInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountQuestsForTalentsByAuid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountQuestsForTalentsByAuid_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditQuestForTalent_args : TBase
    {
      private string _login;
      private QuestForTalentEdit _questForTalentEdit;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public QuestForTalentEdit QuestForTalentEdit
      {
        get
        {
          return _questForTalentEdit;
        }
        set
        {
          __isset.questForTalentEdit = true;
          this._questForTalentEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool questForTalentEdit;
        public bool gmLogin;
        public bool extra_comment;
      }

      public EditQuestForTalent_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QuestForTalentEdit = new QuestForTalentEdit();
                QuestForTalentEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditQuestForTalent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (QuestForTalentEdit != null && __isset.questForTalentEdit) {
          field.Name = "questForTalentEdit";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QuestForTalentEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditQuestForTalent_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",QuestForTalentEdit: ");
        sb.Append(QuestForTalentEdit== null ? "<null>" : QuestForTalentEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditQuestForTalent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditQuestForTalent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditQuestForTalent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditQuestForTalent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAccount_args : TBase
    {
      private string _login;
      private AccountEdit _accountEdit;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public AccountEdit AccountEdit
      {
        get
        {
          return _accountEdit;
        }
        set
        {
          __isset.accountEdit = true;
          this._accountEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool accountEdit;
        public bool gmLogin;
        public bool extra_comment;
      }

      public EditAccount_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AccountEdit = new AccountEdit();
                AccountEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (AccountEdit != null && __isset.accountEdit) {
          field.Name = "accountEdit";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AccountEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAccount_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",AccountEdit: ");
        sb.Append(AccountEdit== null ? "<null>" : AccountEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAccount_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAccountResources_args : TBase
    {
      private string _login;
      private AccountEdit _accountEdit;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public AccountEdit AccountEdit
      {
        get
        {
          return _accountEdit;
        }
        set
        {
          __isset.accountEdit = true;
          this._accountEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool accountEdit;
        public bool gmLogin;
        public bool extra_comment;
      }

      public EditAccountResources_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AccountEdit = new AccountEdit();
                AccountEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAccountResources_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (AccountEdit != null && __isset.accountEdit) {
          field.Name = "accountEdit";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AccountEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAccountResources_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",AccountEdit: ");
        sb.Append(AccountEdit== null ? "<null>" : AccountEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAccountResources_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditAccountResources_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAccountResources_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAccountResources_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountLibrary_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountLibrary_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountLibrary_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountLibrary_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountLibrary_result : TBase
    {
      private LibraryResponse _success;

      public LibraryResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountLibrary_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LibraryResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountLibrary_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountLibrary_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGameSession_args : TBase
    {
      private int _sessionid;

      public int Sessionid
      {
        get
        {
          return _sessionid;
        }
        set
        {
          __isset.sessionid = true;
          this._sessionid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionid;
      }

      public GetGameSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Sessionid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGameSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionid) {
          field.Name = "sessionid";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Sessionid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGameSession_args(");
        sb.Append("Sessionid: ");
        sb.Append(Sessionid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGameSession_result : TBase
    {
      private GameSessionShortInfo _success;

      public GameSessionShortInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGameSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GameSessionShortInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGameSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGameSession_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBruteForceAccount_args : TBase
    {
      private string _email;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
      }

      public GetBruteForceAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBruteForceAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBruteForceAccount_args(");
        sb.Append("Email: ");
        sb.Append(Email);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBruteForceAccount_result : TBase
    {
      private BruteForceAccountShortInfo _success;

      public BruteForceAccountShortInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBruteForceAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BruteForceAccountShortInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBruteForceAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBruteForceAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnBanBruteForceAccount_args : TBase
    {
      private string _email;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
      }

      public UnBanBruteForceAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnBanBruteForceAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnBanBruteForceAccount_args(");
        sb.Append("Email: ");
        sb.Append(Email);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnBanBruteForceAccount_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnBanBruteForceAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnBanBruteForceAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnBanBruteForceAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBannedIp_args : TBase
    {
      private int _limit;
      private int _skip;

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool limit;
        public bool skip;
      }

      public GetBannedIp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Limit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Skip = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBannedIp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.limit) {
          field.Name = "limit";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Limit);
          oprot.WriteFieldEnd();
        }
        if (__isset.skip) {
          field.Name = "skip";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Skip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBannedIp_args(");
        sb.Append("Limit: ");
        sb.Append(Limit);
        sb.Append(",Skip: ");
        sb.Append(Skip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBannedIp_result : TBase
    {
      private BannedIpFullListInfo _success;

      public BannedIpFullListInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBannedIp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BannedIpFullListInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBannedIp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBannedIp_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnBanIp_args : TBase
    {
      private string _ip;

      public string Ip
      {
        get
        {
          return _ip;
        }
        set
        {
          __isset.ip = true;
          this._ip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ip;
      }

      public UnBanIp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ip = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnBanIp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ip != null && __isset.ip) {
          field.Name = "ip";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnBanIp_args(");
        sb.Append("Ip: ");
        sb.Append(Ip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnBanIp_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnBanIp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnBanIp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnBanIp_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditFreeChanges_args : TBase
    {
      private string _login;
      private string _gmLogin;
      private int _nickChanges;
      private int _fractionChanges;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public int NickChanges
      {
        get
        {
          return _nickChanges;
        }
        set
        {
          __isset.nickChanges = true;
          this._nickChanges = value;
        }
      }

      public int FractionChanges
      {
        get
        {
          return _fractionChanges;
        }
        set
        {
          __isset.fractionChanges = true;
          this._fractionChanges = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
        public bool nickChanges;
        public bool fractionChanges;
      }

      public EditFreeChanges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NickChanges = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                FractionChanges = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditFreeChanges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (__isset.nickChanges) {
          field.Name = "nickChanges";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NickChanges);
          oprot.WriteFieldEnd();
        }
        if (__isset.fractionChanges) {
          field.Name = "fractionChanges";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FractionChanges);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditFreeChanges_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",NickChanges: ");
        sb.Append(NickChanges);
        sb.Append(",FractionChanges: ");
        sb.Append(FractionChanges);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditFreeChanges_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditFreeChanges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditFreeChanges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditFreeChanges_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddResources_args : TBase
    {
      private long _auid;
      private string _ResourceType;
      private int _amount;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string ResourceType
      {
        get
        {
          return _ResourceType;
        }
        set
        {
          __isset.ResourceType = true;
          this._ResourceType = value;
        }
      }

      public int Amount
      {
        get
        {
          return _amount;
        }
        set
        {
          __isset.amount = true;
          this._amount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool ResourceType;
        public bool amount;
      }

      public AddResources_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ResourceType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Amount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddResources_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (ResourceType != null && __isset.ResourceType) {
          field.Name = "ResourceType";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ResourceType);
          oprot.WriteFieldEnd();
        }
        if (__isset.amount) {
          field.Name = "amount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Amount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddResources_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",ResourceType: ");
        sb.Append(ResourceType);
        sb.Append(",Amount: ");
        sb.Append(Amount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddResources_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddResources_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddResources_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddResources_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountHeroes_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountHeroes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountHeroes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountHeroes_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountHeroes_result : TBase
    {
      private HeroesResponse _success;

      public HeroesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountHeroes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HeroesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountHeroes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountHeroes_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnlockHero_args : TBase
    {
      private string _login;
      private int _heroClassId;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public int HeroClassId
      {
        get
        {
          return _heroClassId;
        }
        set
        {
          __isset.heroClassId = true;
          this._heroClassId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroClassId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public UnlockHero_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                HeroClassId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnlockHero_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroClassId) {
          field.Name = "heroClassId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(HeroClassId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnlockHero_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroClassId: ");
        sb.Append(HeroClassId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnlockHero_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnlockHero_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnlockHero_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnlockHero_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditHero_args : TBase
    {
      private string _login;
      private HeroInfo _heroEdit;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public HeroInfo HeroEdit
      {
        get
        {
          return _heroEdit;
        }
        set
        {
          __isset.heroEdit = true;
          this._heroEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroEdit;
        public bool gmLogin;
      }

      public EditHero_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                HeroEdit = new HeroInfo();
                HeroEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditHero_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (HeroEdit != null && __isset.heroEdit) {
          field.Name = "heroEdit";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          HeroEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditHero_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroEdit: ");
        sb.Append(HeroEdit== null ? "<null>" : HeroEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditHero_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditHero_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditHero_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditHero_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LockHero_args : TBase
    {
      private string _login;
      private long _heroInstanceId;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
        public bool gmLogin;
      }

      public LockHero_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LockHero_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LockHero_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LockHero_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public LockHero_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LockHero_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LockHero_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSeasonAwards_args : TBase
    {
      private string _login;
      private SeasonAwards _awardEdit;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public SeasonAwards AwardEdit
      {
        get
        {
          return _awardEdit;
        }
        set
        {
          __isset.awardEdit = true;
          this._awardEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool awardEdit;
        public bool gmLogin;
      }

      public EditSeasonAwards_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AwardEdit = new SeasonAwards();
                AwardEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSeasonAwards_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (AwardEdit != null && __isset.awardEdit) {
          field.Name = "awardEdit";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AwardEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSeasonAwards_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",AwardEdit: ");
        sb.Append(AwardEdit== null ? "<null>" : AwardEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSeasonAwards_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditSeasonAwards_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSeasonAwards_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSeasonAwards_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSeasonInfo_args : TBase
    {
      private string _login;
      private long _heroInstanceId;
      private SeasonInfo _seasonEdit;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }

      public SeasonInfo SeasonEdit
      {
        get
        {
          return _seasonEdit;
        }
        set
        {
          __isset.seasonEdit = true;
          this._seasonEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
        public bool seasonEdit;
        public bool gmLogin;
      }

      public EditSeasonInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                SeasonEdit = new SeasonInfo();
                SeasonEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSeasonInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        if (SeasonEdit != null && __isset.seasonEdit) {
          field.Name = "seasonEdit";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          SeasonEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSeasonInfo_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(",SeasonEdit: ");
        sb.Append(SeasonEdit== null ? "<null>" : SeasonEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSeasonInfo_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditSeasonInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSeasonInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSeasonInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroTalentSet_args : TBase
    {
      private string _login;
      private long _heroInstanceId;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
      }

      public GetHeroTalentSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroTalentSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroTalentSet_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroTalentSet_result : TBase
    {
      private TalentSetResponse _success;

      public TalentSetResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHeroTalentSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TalentSetResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroTalentSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroTalentSet_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroSeasonsInfo_args : TBase
    {
      private string _login;
      private long _heroInstanceId;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
      }

      public GetHeroSeasonsInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroSeasonsInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroSeasonsInfo_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroSeasonsInfo_result : TBase
    {
      private SeasonInfoResponse _success;

      public SeasonInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHeroSeasonsInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SeasonInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroSeasonsInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroSeasonsInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalent_args : TBase
    {
      private string _login;
      private int _talentClassId;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public int TalentClassId
      {
        get
        {
          return _talentClassId;
        }
        set
        {
          __isset.talentClassId = true;
          this._talentClassId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool talentClassId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public AddTalent_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                TalentClassId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentClassId) {
          field.Name = "talentClassId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TalentClassId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalent_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",TalentClassId: ");
        sb.Append(TalentClassId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddTalent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalents_args : TBase
    {
      private string _login;
      private List<int> _talentIds;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public List<int> TalentIds
      {
        get
        {
          return _talentIds;
        }
        set
        {
          __isset.talentIds = true;
          this._talentIds = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool talentIds;
        public bool gmLogin;
        public bool extra_comment;
      }

      public AddTalents_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  TalentIds = new List<int>();
                  TList _list482 = iprot.ReadListBegin();
                  for( int _i483 = 0; _i483 < _list482.Count; ++_i483)
                  {
                    int _elem484 = 0;
                    _elem484 = iprot.ReadI32();
                    TalentIds.Add(_elem484);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (TalentIds != null && __isset.talentIds) {
          field.Name = "talentIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, TalentIds.Count));
            foreach (int _iter485 in TalentIds)
            {
              oprot.WriteI32(_iter485);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalents_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",TalentIds: ");
        sb.Append(TalentIds);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalents_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddTalents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalents_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTalent_args : TBase
    {
      private string _login;
      private TalentInfo _talentEdit;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public TalentInfo TalentEdit
      {
        get
        {
          return _talentEdit;
        }
        set
        {
          __isset.talentEdit = true;
          this._talentEdit = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool talentEdit;
        public bool gmLogin;
      }

      public EditTalent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                TalentEdit = new TalentInfo();
                TalentEdit.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTalent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (TalentEdit != null && __isset.talentEdit) {
          field.Name = "talentEdit";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          TalentEdit.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTalent_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",TalentEdit: ");
        sb.Append(TalentEdit== null ? "<null>" : TalentEdit.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTalent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditTalent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTalent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTalent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteTalent_args : TBase
    {
      private string _login;
      private long _talentInstanceId;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long TalentInstanceId
      {
        get
        {
          return _talentInstanceId;
        }
        set
        {
          __isset.talentInstanceId = true;
          this._talentInstanceId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool talentInstanceId;
        public bool gmLogin;
      }

      public DeleteTalent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TalentInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteTalent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentInstanceId) {
          field.Name = "talentInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TalentInstanceId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteTalent_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",TalentInstanceId: ");
        sb.Append(TalentInstanceId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteTalent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteTalent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteTalent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteTalent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentFromTalentSetToLibrary_args : TBase
    {
      private string _login;
      private long _heroInstanceId;
      private long _talentInstanceId;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }

      public long TalentInstanceId
      {
        get
        {
          return _talentInstanceId;
        }
        set
        {
          __isset.talentInstanceId = true;
          this._talentInstanceId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
        public bool talentInstanceId;
        public bool gmLogin;
      }

      public MoveTalentFromTalentSetToLibrary_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TalentInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentFromTalentSetToLibrary_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentInstanceId) {
          field.Name = "talentInstanceId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TalentInstanceId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentFromTalentSetToLibrary_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(",TalentInstanceId: ");
        sb.Append(TalentInstanceId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentFromTalentSetToLibrary_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MoveTalentFromTalentSetToLibrary_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentFromTalentSetToLibrary_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentFromTalentSetToLibrary_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentFromLibraryToTalentSet_args : TBase
    {
      private string _login;
      private long _heroInstanceId;
      private long _talentInstanceId;
      private int _slot;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }

      public long TalentInstanceId
      {
        get
        {
          return _talentInstanceId;
        }
        set
        {
          __isset.talentInstanceId = true;
          this._talentInstanceId = value;
        }
      }

      public int Slot
      {
        get
        {
          return _slot;
        }
        set
        {
          __isset.slot = true;
          this._slot = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
        public bool talentInstanceId;
        public bool slot;
        public bool gmLogin;
      }

      public MoveTalentFromLibraryToTalentSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TalentInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Slot = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentFromLibraryToTalentSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentInstanceId) {
          field.Name = "talentInstanceId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TalentInstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.slot) {
          field.Name = "slot";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Slot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentFromLibraryToTalentSet_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(",TalentInstanceId: ");
        sb.Append(TalentInstanceId);
        sb.Append(",Slot: ");
        sb.Append(Slot);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentFromLibraryToTalentSet_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MoveTalentFromLibraryToTalentSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentFromLibraryToTalentSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentFromLibraryToTalentSet_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveTalentFromTalentSet_args : TBase
    {
      private string _login;
      private long _heroInstanceId;
      private long _talentInstanceId;
      private int _talentSetId;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long HeroInstanceId
      {
        get
        {
          return _heroInstanceId;
        }
        set
        {
          __isset.heroInstanceId = true;
          this._heroInstanceId = value;
        }
      }

      public long TalentInstanceId
      {
        get
        {
          return _talentInstanceId;
        }
        set
        {
          __isset.talentInstanceId = true;
          this._talentInstanceId = value;
        }
      }

      public int TalentSetId
      {
        get
        {
          return _talentSetId;
        }
        set
        {
          __isset.talentSetId = true;
          this._talentSetId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool heroInstanceId;
        public bool talentInstanceId;
        public bool talentSetId;
        public bool gmLogin;
      }

      public RemoveTalentFromTalentSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                HeroInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TalentInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                TalentSetId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveTalentFromTalentSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.heroInstanceId) {
          field.Name = "heroInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(HeroInstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentInstanceId) {
          field.Name = "talentInstanceId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TalentInstanceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentSetId) {
          field.Name = "talentSetId";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TalentSetId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveTalentFromTalentSet_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",HeroInstanceId: ");
        sb.Append(HeroInstanceId);
        sb.Append(",TalentInstanceId: ");
        sb.Append(TalentInstanceId);
        sb.Append(",TalentSetId: ");
        sb.Append(TalentSetId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveTalentFromTalentSet_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveTalentFromTalentSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveTalentFromTalentSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveTalentFromTalentSet_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountSkins_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetAccountSkins_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountSkins_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountSkins_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountSkins_result : TBase
    {
      private SkinsResponse _success;

      public SkinsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountSkins_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkinsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountSkins_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountSkins_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddSkin_args : TBase
    {
      private long _auid;
      private string _skinPersistentId;
      private string _gmLogin;
      private string _extra_comment;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string SkinPersistentId
      {
        get
        {
          return _skinPersistentId;
        }
        set
        {
          __isset.skinPersistentId = true;
          this._skinPersistentId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool skinPersistentId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public AddSkin_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SkinPersistentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSkin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (SkinPersistentId != null && __isset.skinPersistentId) {
          field.Name = "skinPersistentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SkinPersistentId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSkin_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",SkinPersistentId: ");
        sb.Append(SkinPersistentId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddSkin_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddSkin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSkin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSkin_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteSkin_args : TBase
    {
      private long _auid;
      private string _skinPersistentId;
      private string _gmLogin;
      private string _extra_comment;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string SkinPersistentId
      {
        get
        {
          return _skinPersistentId;
        }
        set
        {
          __isset.skinPersistentId = true;
          this._skinPersistentId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool skinPersistentId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public DeleteSkin_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SkinPersistentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteSkin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (SkinPersistentId != null && __isset.skinPersistentId) {
          field.Name = "skinPersistentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SkinPersistentId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteSkin_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",SkinPersistentId: ");
        sb.Append(SkinPersistentId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteSkin_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteSkin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteSkin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteSkin_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountTalentUpgradeEntities_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetAccountTalentUpgradeEntities_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountTalentUpgradeEntities_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountTalentUpgradeEntities_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountTalentUpgradeEntities_result : TBase
    {
      private TalentUpgradeEntitiesResponse _success;

      public TalentUpgradeEntitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountTalentUpgradeEntities_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TalentUpgradeEntitiesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountTalentUpgradeEntities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountTalentUpgradeEntities_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteTalentUpgradeEntity_args : TBase
    {
      private long _auid;
      private long _instanceId;
      private string _gmLogin;
      private string _extra_comment;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public long InstanceId
      {
        get
        {
          return _instanceId;
        }
        set
        {
          __isset.instanceId = true;
          this._instanceId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool instanceId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public DeleteTalentUpgradeEntity_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                InstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteTalentUpgradeEntity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.instanceId) {
          field.Name = "instanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(InstanceId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteTalentUpgradeEntity_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",InstanceId: ");
        sb.Append(InstanceId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteTalentUpgradeEntity_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteTalentUpgradeEntity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteTalentUpgradeEntity_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteTalentUpgradeEntity_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountBuildings_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetAccountBuildings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountBuildings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountBuildings_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountBuildings_result : TBase
    {
      private BuildingsInfoResponse _success;

      public BuildingsInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountBuildings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BuildingsInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountBuildings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountBuildings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveBuildingToStorage_args : TBase
    {
      private long _auid;
      private long _buildingInstanceId;
      private string _gmLogin;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public long BuildingInstanceId
      {
        get
        {
          return _buildingInstanceId;
        }
        set
        {
          __isset.buildingInstanceId = true;
          this._buildingInstanceId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool buildingInstanceId;
        public bool gmLogin;
      }

      public MoveBuildingToStorage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                BuildingInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveBuildingToStorage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.buildingInstanceId) {
          field.Name = "buildingInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BuildingInstanceId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveBuildingToStorage_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",BuildingInstanceId: ");
        sb.Append(BuildingInstanceId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveBuildingToStorage_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MoveBuildingToStorage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveBuildingToStorage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveBuildingToStorage_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddBuilding_args : TBase
    {
      private long _auid;
      private int _buildingClassId;
      private int _level;
      private string _gmLogin;
      private string _extra_comment;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public int BuildingClassId
      {
        get
        {
          return _buildingClassId;
        }
        set
        {
          __isset.buildingClassId = true;
          this._buildingClassId = value;
        }
      }

      public int Level
      {
        get
        {
          return _level;
        }
        set
        {
          __isset.level = true;
          this._level = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool buildingClassId;
        public bool level;
        public bool gmLogin;
        public bool extra_comment;
      }

      public AddBuilding_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                BuildingClassId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Level = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddBuilding_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.buildingClassId) {
          field.Name = "buildingClassId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BuildingClassId);
          oprot.WriteFieldEnd();
        }
        if (__isset.level) {
          field.Name = "level";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Level);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddBuilding_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",BuildingClassId: ");
        sb.Append(BuildingClassId);
        sb.Append(",Level: ");
        sb.Append(Level);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddBuilding_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddBuilding_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddBuilding_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddBuilding_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteBuilding_args : TBase
    {
      private long _auid;
      private long _buildingInstanceId;
      private string _gmLogin;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public long BuildingInstanceId
      {
        get
        {
          return _buildingInstanceId;
        }
        set
        {
          __isset.buildingInstanceId = true;
          this._buildingInstanceId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool buildingInstanceId;
        public bool gmLogin;
      }

      public DeleteBuilding_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                BuildingInstanceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteBuilding_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.buildingInstanceId) {
          field.Name = "buildingInstanceId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BuildingInstanceId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteBuilding_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",BuildingInstanceId: ");
        sb.Append(BuildingInstanceId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteBuilding_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteBuilding_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteBuilding_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteBuilding_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveLamp_args : TBase
    {
      private string _login;
      private LampInfo _lampInfo;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public LampInfo LampInfo
      {
        get
        {
          return _lampInfo;
        }
        set
        {
          __isset.lampInfo = true;
          this._lampInfo = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool lampInfo;
        public bool gmLogin;
        public bool extra_comment;
      }

      public GiveLamp_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LampInfo = new LampInfo();
                LampInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveLamp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (LampInfo != null && __isset.lampInfo) {
          field.Name = "lampInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LampInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveLamp_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",LampInfo: ");
        sb.Append(LampInfo== null ? "<null>" : LampInfo.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveLamp_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GiveLamp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveLamp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveLamp_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLampInfo_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetLampInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLampInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLampInfo_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLampInfo_result : TBase
    {
      private LampInfoResponse _success;

      public LampInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLampInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LampInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLampInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetLampInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveUpgradeHeroTalents_args : TBase
    {
      private string _login;
      private UpgradeHeroTalentsInfo _lampInfo;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public UpgradeHeroTalentsInfo LampInfo
      {
        get
        {
          return _lampInfo;
        }
        set
        {
          __isset.lampInfo = true;
          this._lampInfo = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool lampInfo;
        public bool gmLogin;
        public bool extra_comment;
      }

      public GiveUpgradeHeroTalents_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LampInfo = new UpgradeHeroTalentsInfo();
                LampInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveUpgradeHeroTalents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (LampInfo != null && __isset.lampInfo) {
          field.Name = "lampInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LampInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveUpgradeHeroTalents_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",LampInfo: ");
        sb.Append(LampInfo== null ? "<null>" : LampInfo.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveUpgradeHeroTalents_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GiveUpgradeHeroTalents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveUpgradeHeroTalents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveUpgradeHeroTalents_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUpgradeHeroTalentsInfo_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetUpgradeHeroTalentsInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetUpgradeHeroTalentsInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetUpgradeHeroTalentsInfo_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUpgradeHeroTalentsInfo_result : TBase
    {
      private UpgradeHeroTalentsInfoResponse _success;

      public UpgradeHeroTalentsInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetUpgradeHeroTalentsInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpgradeHeroTalentsInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetUpgradeHeroTalentsInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetUpgradeHeroTalentsInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisjointSN_args : TBase
    {
      private long _auid;
      private string _snid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string Snid
      {
        get
        {
          return _snid;
        }
        set
        {
          __isset.snid = true;
          this._snid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool snid;
      }

      public DisjointSN_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Snid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DisjointSN_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (Snid != null && __isset.snid) {
          field.Name = "snid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DisjointSN_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Snid: ");
        sb.Append(Snid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisjointSN_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DisjointSN_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DisjointSN_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DisjointSN_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeFSN_args : TBase
    {
      private long _auid;
      private string _snid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string Snid
      {
        get
        {
          return _snid;
        }
        set
        {
          __isset.snid = true;
          this._snid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool snid;
      }

      public ChangeFSN_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Snid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeFSN_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (Snid != null && __isset.snid) {
          field.Name = "snid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeFSN_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Snid: ");
        sb.Append(Snid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeFSN_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ChangeFSN_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeFSN_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeFSN_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteSAAccount_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public DeleteSAAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteSAAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteSAAccount_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteSAAccount_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteSAAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteSAAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteSAAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountTournamentInfo_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountTournamentInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountTournamentInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountTournamentInfo_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountTournamentInfo_result : TBase
    {
      private TournamentInfoResponse _success;

      public TournamentInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountTournamentInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TournamentInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountTournamentInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountTournamentInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTournamentInfo_args : TBase
    {
      private string _login;
      private TournamentInfo _tournamentInfo;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public TournamentInfo TournamentInfo
      {
        get
        {
          return _tournamentInfo;
        }
        set
        {
          __isset.tournamentInfo = true;
          this._tournamentInfo = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool tournamentInfo;
        public bool gmLogin;
      }

      public EditTournamentInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                TournamentInfo = new TournamentInfo();
                TournamentInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTournamentInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (TournamentInfo != null && __isset.tournamentInfo) {
          field.Name = "tournamentInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          TournamentInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTournamentInfo_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",TournamentInfo: ");
        sb.Append(TournamentInfo== null ? "<null>" : TournamentInfo.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTournamentInfo_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditTournamentInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTournamentInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTournamentInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveTournamentTicket_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GiveTournamentTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveTournamentTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveTournamentTicket_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveTournamentTicket_result : TBase
    {
      private GiveTournamentTicketResponse _success;

      public GiveTournamentTicketResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GiveTournamentTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GiveTournamentTicketResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveTournamentTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveTournamentTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountTournamentGames_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountTournamentGames_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountTournamentGames_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountTournamentGames_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountTournamentGames_result : TBase
    {
      private TournamentGamesInfoResponse _success;

      public TournamentGamesInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountTournamentGames_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TournamentGamesInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountTournamentGames_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountTournamentGames_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGuildById_args : TBase
    {
      private long _guildid;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
      }

      public GetGuildById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGuildById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGuildById_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGuildById_result : TBase
    {
      private GuildInfoResponse _success;

      public GuildInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGuildById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GuildInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGuildById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGuildById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGuildByName_args : TBase
    {
      private string _shortname;
      private string _fullname;

      public string Shortname
      {
        get
        {
          return _shortname;
        }
        set
        {
          __isset.shortname = true;
          this._shortname = value;
        }
      }

      public string Fullname
      {
        get
        {
          return _fullname;
        }
        set
        {
          __isset.fullname = true;
          this._fullname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool shortname;
        public bool fullname;
      }

      public GetGuildByName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Shortname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Fullname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGuildByName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Shortname != null && __isset.shortname) {
          field.Name = "shortname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Shortname);
          oprot.WriteFieldEnd();
        }
        if (Fullname != null && __isset.fullname) {
          field.Name = "fullname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Fullname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGuildByName_args(");
        sb.Append("Shortname: ");
        sb.Append(Shortname);
        sb.Append(",Fullname: ");
        sb.Append(Fullname);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGuildByName_result : TBase
    {
      private GuildInfoResponse _success;

      public GuildInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGuildByName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GuildInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGuildByName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGuildByName_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGuildMemberById_args : TBase
    {
      private long _guildid;
      private long _auid;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool auid;
      }

      public GetGuildMemberById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGuildMemberById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGuildMemberById_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGuildMemberById_result : TBase
    {
      private GuildMemberInfoResponse _success;

      public GuildMemberInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGuildMemberById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GuildMemberInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGuildMemberById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGuildMemberById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditGuild_args : TBase
    {
      private GuildEditInfo _info;
      private string _gmlogin;

      public GuildEditInfo Info
      {
        get
        {
          return _info;
        }
        set
        {
          __isset.info = true;
          this._info = value;
        }
      }

      public string Gmlogin
      {
        get
        {
          return _gmlogin;
        }
        set
        {
          __isset.gmlogin = true;
          this._gmlogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool info;
        public bool gmlogin;
      }

      public EditGuild_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Info = new GuildEditInfo();
                Info.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Gmlogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditGuild_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Info.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Gmlogin != null && __isset.gmlogin) {
          field.Name = "gmlogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gmlogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditGuild_args(");
        sb.Append("Info: ");
        sb.Append(Info== null ? "<null>" : Info.ToString());
        sb.Append(",Gmlogin: ");
        sb.Append(Gmlogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditGuild_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditGuild_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditGuild_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditGuild_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeGuildLeader_args : TBase
    {
      private long _guildid;
      private long _auid;
      private string _gmLogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool auid;
        public bool gmLogin;
      }

      public ChangeGuildLeader_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeGuildLeader_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeGuildLeader_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Auid: ");
        sb.Append(Auid);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeGuildLeader_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ChangeGuildLeader_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeGuildLeader_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeGuildLeader_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveGuildMembers_args : TBase
    {
      private long _guildid;
      private List<long> _auids;
      private string _gmLogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public List<long> Auids
      {
        get
        {
          return _auids;
        }
        set
        {
          __isset.auids = true;
          this._auids = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool auids;
        public bool gmLogin;
      }

      public RemoveGuildMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Auids = new List<long>();
                  TList _list486 = iprot.ReadListBegin();
                  for( int _i487 = 0; _i487 < _list486.Count; ++_i487)
                  {
                    long _elem488 = 0;
                    _elem488 = iprot.ReadI64();
                    Auids.Add(_elem488);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveGuildMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (Auids != null && __isset.auids) {
          field.Name = "auids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, Auids.Count));
            foreach (long _iter489 in Auids)
            {
              oprot.WriteI64(_iter489);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveGuildMembers_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Auids: ");
        sb.Append(Auids);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveGuildMembers_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveGuildMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveGuildMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveGuildMembers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ViewGuildMembers_args : TBase
    {
      private long _guildid;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
      }

      public ViewGuildMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ViewGuildMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ViewGuildMembers_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ViewGuildMembers_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ViewGuildMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ViewGuildMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ViewGuildMembers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditGuildMember_args : TBase
    {
      private long _guildid;
      private GuildMemberInfo _member;
      private string _gmLogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public GuildMemberInfo Member
      {
        get
        {
          return _member;
        }
        set
        {
          __isset.member = true;
          this._member = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool member;
        public bool gmLogin;
      }

      public EditGuildMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Member = new GuildMemberInfo();
                Member.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditGuildMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (Member != null && __isset.member) {
          field.Name = "member";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Member.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditGuildMember_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Member: ");
        sb.Append(Member== null ? "<null>" : Member.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditGuildMember_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditGuildMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditGuildMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditGuildMember_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetGuildIcon_args : TBase
    {
      private long _guildid;
      private byte[] _image;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public byte[] Image
      {
        get
        {
          return _image;
        }
        set
        {
          __isset.image = true;
          this._image = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool image;
      }

      public SetGuildIcon_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetGuildIcon_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetGuildIcon_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Image: ");
        sb.Append(Image);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetGuildIcon_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetGuildIcon_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetGuildIcon_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetGuildIcon_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SwitchToNewGuildIcon_args : TBase
    {
      private long _guildid;
      private string _gmLogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool gmLogin;
      }

      public SwitchToNewGuildIcon_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SwitchToNewGuildIcon_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SwitchToNewGuildIcon_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SwitchToNewGuildIcon_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SwitchToNewGuildIcon_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SwitchToNewGuildIcon_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SwitchToNewGuildIcon_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TryToPayForGuildIconChange_args : TBase
    {
      private long _leaderauid;
      private int _changeiter;

      public long Leaderauid
      {
        get
        {
          return _leaderauid;
        }
        set
        {
          __isset.leaderauid = true;
          this._leaderauid = value;
        }
      }

      public int Changeiter
      {
        get
        {
          return _changeiter;
        }
        set
        {
          __isset.changeiter = true;
          this._changeiter = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leaderauid;
        public bool changeiter;
      }

      public TryToPayForGuildIconChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Leaderauid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Changeiter = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TryToPayForGuildIconChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.leaderauid) {
          field.Name = "leaderauid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Leaderauid);
          oprot.WriteFieldEnd();
        }
        if (__isset.changeiter) {
          field.Name = "changeiter";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Changeiter);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TryToPayForGuildIconChange_args(");
        sb.Append("Leaderauid: ");
        sb.Append(Leaderauid);
        sb.Append(",Changeiter: ");
        sb.Append(Changeiter);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TryToPayForGuildIconChange_result : TBase
    {
      private ServerActionResponse _success;

      public ServerActionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TryToPayForGuildIconChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerActionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TryToPayForGuildIconChange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TryToPayForGuildIconChange_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AcquireGuildLock_args : TBase
    {
      private long _guildid;
      private string _gmlogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public string Gmlogin
      {
        get
        {
          return _gmlogin;
        }
        set
        {
          __isset.gmlogin = true;
          this._gmlogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool gmlogin;
      }

      public AcquireGuildLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Gmlogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AcquireGuildLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (Gmlogin != null && __isset.gmlogin) {
          field.Name = "gmlogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gmlogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AcquireGuildLock_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Gmlogin: ");
        sb.Append(Gmlogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AcquireGuildLock_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AcquireGuildLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AcquireGuildLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AcquireGuildLock_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReleaseGuildLock_args : TBase
    {
      private long _guildid;
      private string _gmlogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public string Gmlogin
      {
        get
        {
          return _gmlogin;
        }
        set
        {
          __isset.gmlogin = true;
          this._gmlogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool gmlogin;
      }

      public ReleaseGuildLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Gmlogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseGuildLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (Gmlogin != null && __isset.gmlogin) {
          field.Name = "gmlogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gmlogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseGuildLock_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Gmlogin: ");
        sb.Append(Gmlogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReleaseGuildLock_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ReleaseGuildLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseGuildLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseGuildLock_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StopGuildSiege_args : TBase
    {
      private long _targetguildid;
      private string _gmlogin;

      public long Targetguildid
      {
        get
        {
          return _targetguildid;
        }
        set
        {
          __isset.targetguildid = true;
          this._targetguildid = value;
        }
      }

      public string Gmlogin
      {
        get
        {
          return _gmlogin;
        }
        set
        {
          __isset.gmlogin = true;
          this._gmlogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool targetguildid;
        public bool gmlogin;
      }

      public StopGuildSiege_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Targetguildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Gmlogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("StopGuildSiege_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.targetguildid) {
          field.Name = "targetguildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Targetguildid);
          oprot.WriteFieldEnd();
        }
        if (Gmlogin != null && __isset.gmlogin) {
          field.Name = "gmlogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gmlogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("StopGuildSiege_args(");
        sb.Append("Targetguildid: ");
        sb.Append(Targetguildid);
        sb.Append(",Gmlogin: ");
        sb.Append(Gmlogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StopGuildSiege_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public StopGuildSiege_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("StopGuildSiege_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("StopGuildSiege_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddGuildSuzerain_args : TBase
    {
      private long _guildid;
      private long _suzerainguildid;
      private string _gmlogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public long Suzerainguildid
      {
        get
        {
          return _suzerainguildid;
        }
        set
        {
          __isset.suzerainguildid = true;
          this._suzerainguildid = value;
        }
      }

      public string Gmlogin
      {
        get
        {
          return _gmlogin;
        }
        set
        {
          __isset.gmlogin = true;
          this._gmlogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool suzerainguildid;
        public bool gmlogin;
      }

      public AddGuildSuzerain_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Suzerainguildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Gmlogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddGuildSuzerain_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (__isset.suzerainguildid) {
          field.Name = "suzerainguildid";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Suzerainguildid);
          oprot.WriteFieldEnd();
        }
        if (Gmlogin != null && __isset.gmlogin) {
          field.Name = "gmlogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gmlogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddGuildSuzerain_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Suzerainguildid: ");
        sb.Append(Suzerainguildid);
        sb.Append(",Gmlogin: ");
        sb.Append(Gmlogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddGuildSuzerain_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddGuildSuzerain_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddGuildSuzerain_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddGuildSuzerain_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveGuildSuzerain_args : TBase
    {
      private long _guildid;
      private string _gmlogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public string Gmlogin
      {
        get
        {
          return _gmlogin;
        }
        set
        {
          __isset.gmlogin = true;
          this._gmlogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool gmlogin;
      }

      public RemoveGuildSuzerain_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Gmlogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveGuildSuzerain_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (Gmlogin != null && __isset.gmlogin) {
          field.Name = "gmlogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gmlogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveGuildSuzerain_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Gmlogin: ");
        sb.Append(Gmlogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveGuildSuzerain_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveGuildSuzerain_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveGuildSuzerain_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveGuildSuzerain_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullGuildDump_args : TBase
    {
      private long _guildid;
      private bool _zip;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public bool Zip
      {
        get
        {
          return _zip;
        }
        set
        {
          __isset.zip = true;
          this._zip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool zip;
      }

      public GetFullGuildDump_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Zip = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFullGuildDump_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (__isset.zip) {
          field.Name = "zip";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Zip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFullGuildDump_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",Zip: ");
        sb.Append(Zip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullGuildDump_result : TBase
    {
      private StringDataResponse _success;

      public StringDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFullGuildDump_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StringDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFullGuildDump_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFullGuildDump_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFreeGuildBankTalents_args : TBase
    {
      private long _guildid;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
      }

      public GetFreeGuildBankTalents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFreeGuildBankTalents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFreeGuildBankTalents_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFreeGuildBankTalents_result : TBase
    {
      private GuildBankTalentsResponse _success;

      public GuildBankTalentsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFreeGuildBankTalents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GuildBankTalentsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFreeGuildBankTalents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFreeGuildBankTalents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTakenGuildBankTalents_args : TBase
    {
      private long _guildid;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
      }

      public GetTakenGuildBankTalents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTakenGuildBankTalents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTakenGuildBankTalents_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTakenGuildBankTalents_result : TBase
    {
      private GuildBankTalentsResponse _success;

      public GuildBankTalentsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTakenGuildBankTalents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GuildBankTalentsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTakenGuildBankTalents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTakenGuildBankTalents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReturnTalentToOwner_args : TBase
    {
      private long _guildid;
      private long _talentId;
      private string _gmLogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public long TalentId
      {
        get
        {
          return _talentId;
        }
        set
        {
          __isset.talentId = true;
          this._talentId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool talentId;
        public bool gmLogin;
      }

      public ReturnTalentToOwner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TalentId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReturnTalentToOwner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentId) {
          field.Name = "talentId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TalentId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReturnTalentToOwner_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",TalentId: ");
        sb.Append(TalentId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReturnTalentToOwner_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ReturnTalentToOwner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReturnTalentToOwner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReturnTalentToOwner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReturnTalentToGuildBank_args : TBase
    {
      private long _guildid;
      private long _talentId;
      private string _gmLogin;

      public long Guildid
      {
        get
        {
          return _guildid;
        }
        set
        {
          __isset.guildid = true;
          this._guildid = value;
        }
      }

      public long TalentId
      {
        get
        {
          return _talentId;
        }
        set
        {
          __isset.talentId = true;
          this._talentId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool guildid;
        public bool talentId;
        public bool gmLogin;
      }

      public ReturnTalentToGuildBank_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Guildid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TalentId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReturnTalentToGuildBank_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.guildid) {
          field.Name = "guildid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Guildid);
          oprot.WriteFieldEnd();
        }
        if (__isset.talentId) {
          field.Name = "talentId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TalentId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReturnTalentToGuildBank_args(");
        sb.Append("Guildid: ");
        sb.Append(Guildid);
        sb.Append(",TalentId: ");
        sb.Append(TalentId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReturnTalentToGuildBank_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ReturnTalentToGuildBank_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReturnTalentToGuildBank_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReturnTalentToGuildBank_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendMessageToUser_args : TBase
    {
      private string _login;
      private long _auid;
      private string _messageTitle;
      private string _messageText;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string MessageTitle
      {
        get
        {
          return _messageTitle;
        }
        set
        {
          __isset.messageTitle = true;
          this._messageTitle = value;
        }
      }

      public string MessageText
      {
        get
        {
          return _messageText;
        }
        set
        {
          __isset.messageText = true;
          this._messageText = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool auid;
        public bool messageTitle;
        public bool messageText;
        public bool gmLogin;
        public bool extra_comment;
      }

      public SendMessageToUser_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageTitle = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                MessageText = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendMessageToUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (MessageTitle != null && __isset.messageTitle) {
          field.Name = "messageTitle";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageTitle);
          oprot.WriteFieldEnd();
        }
        if (MessageText != null && __isset.messageText) {
          field.Name = "messageText";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageText);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SendMessageToUser_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Auid: ");
        sb.Append(Auid);
        sb.Append(",MessageTitle: ");
        sb.Append(MessageTitle);
        sb.Append(",MessageText: ");
        sb.Append(MessageText);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SendMessageToUser_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SendMessageToUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SendMessageToUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SendMessageToUser_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountAdminMessages_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountAdminMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountAdminMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountAdminMessages_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountAdminMessages_result : TBase
    {
      private AdminMessagesResponse _success;

      public AdminMessagesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountAdminMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AdminMessagesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountAdminMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountAdminMessages_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UserOperation_args : TBase
    {
      private long _auid;
      private UserOperationType _type;
      private int _minutes;
      private string _reason;
      private List<int> _claims;
      private string _gmLogin;
      private List<long> _claimAuids;
      private int _points;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="UserOperationType"/>
      /// </summary>
      public UserOperationType Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public int Minutes
      {
        get
        {
          return _minutes;
        }
        set
        {
          __isset.minutes = true;
          this._minutes = value;
        }
      }

      public string Reason
      {
        get
        {
          return _reason;
        }
        set
        {
          __isset.reason = true;
          this._reason = value;
        }
      }

      public List<int> Claims
      {
        get
        {
          return _claims;
        }
        set
        {
          __isset.claims = true;
          this._claims = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public List<long> ClaimAuids
      {
        get
        {
          return _claimAuids;
        }
        set
        {
          __isset.claimAuids = true;
          this._claimAuids = value;
        }
      }

      public int Points
      {
        get
        {
          return _points;
        }
        set
        {
          __isset.points = true;
          this._points = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool type;
        public bool minutes;
        public bool reason;
        public bool claims;
        public bool gmLogin;
        public bool claimAuids;
        public bool points;
      }

      public UserOperation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Type = (UserOperationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Minutes = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Reason = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Claims = new List<int>();
                  TList _list490 = iprot.ReadListBegin();
                  for( int _i491 = 0; _i491 < _list490.Count; ++_i491)
                  {
                    int _elem492 = 0;
                    _elem492 = iprot.ReadI32();
                    Claims.Add(_elem492);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  ClaimAuids = new List<long>();
                  TList _list493 = iprot.ReadListBegin();
                  for( int _i494 = 0; _i494 < _list493.Count; ++_i494)
                  {
                    long _elem495 = 0;
                    _elem495 = iprot.ReadI64();
                    ClaimAuids.Add(_elem495);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Points = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UserOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.minutes) {
          field.Name = "minutes";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Minutes);
          oprot.WriteFieldEnd();
        }
        if (Reason != null && __isset.reason) {
          field.Name = "reason";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Reason);
          oprot.WriteFieldEnd();
        }
        if (Claims != null && __isset.claims) {
          field.Name = "claims";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Claims.Count));
            foreach (int _iter496 in Claims)
            {
              oprot.WriteI32(_iter496);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (ClaimAuids != null && __isset.claimAuids) {
          field.Name = "claimAuids";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, ClaimAuids.Count));
            foreach (long _iter497 in ClaimAuids)
            {
              oprot.WriteI64(_iter497);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.points) {
          field.Name = "points";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Points);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UserOperation_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Type: ");
        sb.Append(Type);
        sb.Append(",Minutes: ");
        sb.Append(Minutes);
        sb.Append(",Reason: ");
        sb.Append(Reason);
        sb.Append(",Claims: ");
        sb.Append(Claims);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",ClaimAuids: ");
        sb.Append(ClaimAuids);
        sb.Append(",Points: ");
        sb.Append(Points);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UserOperation_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UserOperation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UserOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UserOperation_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetUserAccount_args : TBase
    {
      private string _login;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
      }

      public ResetUserAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetUserAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetUserAccount_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetUserAccount_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ResetUserAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetUserAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetUserAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteUserAccount_args : TBase
    {
      private string _login;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
      }

      public DeleteUserAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteUserAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteUserAccount_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteUserAccount_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteUserAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteUserAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteUserAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class KickUser_args : TBase
    {
      private string _login;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
      }

      public KickUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("KickUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("KickUser_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class KickUser_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public KickUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("KickUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("KickUser_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditNickname_args : TBase
    {
      private string _login;
      private string _gmLogin;
      private string _nickname;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Nickname
      {
        get
        {
          return _nickname;
        }
        set
        {
          __isset.nickname = true;
          this._nickname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
        public bool nickname;
      }

      public EditNickname_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Nickname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditNickname_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Nickname != null && __isset.nickname) {
          field.Name = "nickname";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nickname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditNickname_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Nickname: ");
        sb.Append(Nickname);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditNickname_result : TBase
    {
      private StringDataResponse _success;

      public StringDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditNickname_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StringDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditNickname_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditNickname_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PayEditNickname_args : TBase
    {
      private string _login;
      private string _nickname;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string Nickname
      {
        get
        {
          return _nickname;
        }
        set
        {
          __isset.nickname = true;
          this._nickname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool nickname;
      }

      public PayEditNickname_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Nickname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PayEditNickname_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (Nickname != null && __isset.nickname) {
          field.Name = "nickname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nickname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PayEditNickname_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Nickname: ");
        sb.Append(Nickname);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PayEditNickname_result : TBase
    {
      private ServerActionResponse _success;

      public ServerActionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PayEditNickname_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerActionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PayEditNickname_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PayEditNickname_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PayChangeFraction_args : TBase
    {
      private string _login;
      private int _fraction;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public int Fraction
      {
        get
        {
          return _fraction;
        }
        set
        {
          __isset.fraction = true;
          this._fraction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool fraction;
      }

      public PayChangeFraction_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Fraction = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PayChangeFraction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.fraction) {
          field.Name = "fraction";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Fraction);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PayChangeFraction_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Fraction: ");
        sb.Append(Fraction);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PayChangeFraction_result : TBase
    {
      private ServerActionResponse _success;

      public ServerActionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PayChangeFraction_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerActionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PayChangeFraction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PayChangeFraction_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPrices_args : TBase
    {
      private string _login;
      private PayServiceType _servicetype;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="PayServiceType"/>
      /// </summary>
      public PayServiceType Servicetype
      {
        get
        {
          return _servicetype;
        }
        set
        {
          __isset.servicetype = true;
          this._servicetype = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool servicetype;
        public bool extra_comment;
      }

      public GetPrices_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Servicetype = (PayServiceType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPrices_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.servicetype) {
          field.Name = "servicetype";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Servicetype);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPrices_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Servicetype: ");
        sb.Append(Servicetype);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPrices_result : TBase
    {
      private PriceServiceDataResponse _success;

      public PriceServiceDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PriceServiceDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BuyService_args : TBase
    {
      private string _login;
      private PayServiceType _servicetype;
      private int _paramValue;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="PayServiceType"/>
      /// </summary>
      public PayServiceType Servicetype
      {
        get
        {
          return _servicetype;
        }
        set
        {
          __isset.servicetype = true;
          this._servicetype = value;
        }
      }

      public int ParamValue
      {
        get
        {
          return _paramValue;
        }
        set
        {
          __isset.paramValue = true;
          this._paramValue = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool servicetype;
        public bool paramValue;
      }

      public BuyService_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Servicetype = (PayServiceType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ParamValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BuyService_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.servicetype) {
          field.Name = "servicetype";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Servicetype);
          oprot.WriteFieldEnd();
        }
        if (__isset.paramValue) {
          field.Name = "paramValue";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ParamValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BuyService_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Servicetype: ");
        sb.Append(Servicetype);
        sb.Append(",ParamValue: ");
        sb.Append(ParamValue);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BuyService_result : TBase
    {
      private ServerActionResponse _success;

      public ServerActionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BuyService_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerActionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BuyService_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BuyService_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PayService_args : TBase
    {
      private string _login;
      private PayServiceType _servicetype;
      private int _paramValue;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="PayServiceType"/>
      /// </summary>
      public PayServiceType Servicetype
      {
        get
        {
          return _servicetype;
        }
        set
        {
          __isset.servicetype = true;
          this._servicetype = value;
        }
      }

      public int ParamValue
      {
        get
        {
          return _paramValue;
        }
        set
        {
          __isset.paramValue = true;
          this._paramValue = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool servicetype;
        public bool paramValue;
        public bool gmLogin;
      }

      public PayService_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Servicetype = (PayServiceType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ParamValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PayService_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.servicetype) {
          field.Name = "servicetype";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Servicetype);
          oprot.WriteFieldEnd();
        }
        if (__isset.paramValue) {
          field.Name = "paramValue";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ParamValue);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PayService_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Servicetype: ");
        sb.Append(Servicetype);
        sb.Append(",ParamValue: ");
        sb.Append(ParamValue);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PayService_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PayService_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PayService_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PayService_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BuyTournamentTicket_args : TBase
    {
      private string _login;
      private PayTicketType _pttype;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="PayTicketType"/>
      /// </summary>
      public PayTicketType Pttype
      {
        get
        {
          return _pttype;
        }
        set
        {
          __isset.pttype = true;
          this._pttype = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool pttype;
      }

      public BuyTournamentTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Pttype = (PayTicketType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BuyTournamentTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.pttype) {
          field.Name = "pttype";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Pttype);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BuyTournamentTicket_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Pttype: ");
        sb.Append(Pttype);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BuyTournamentTicket_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BuyTournamentTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BuyTournamentTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BuyTournamentTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateBroadcast_args : TBase
    {
      private BroadcastInfo _createInfo;
      private string _gmLogin;

      public BroadcastInfo CreateInfo
      {
        get
        {
          return _createInfo;
        }
        set
        {
          __isset.createInfo = true;
          this._createInfo = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool createInfo;
        public bool gmLogin;
      }

      public CreateBroadcast_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CreateInfo = new BroadcastInfo();
                CreateInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateBroadcast_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CreateInfo != null && __isset.createInfo) {
          field.Name = "createInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CreateInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateBroadcast_args(");
        sb.Append("CreateInfo: ");
        sb.Append(CreateInfo== null ? "<null>" : CreateInfo.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateBroadcast_result : TBase
    {
      private BroadcastCreateResponse _success;

      public BroadcastCreateResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateBroadcast_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BroadcastCreateResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateBroadcast_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateBroadcast_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBroadcastLocales_args : TBase
    {

      public GetBroadcastLocales_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBroadcastLocales_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBroadcastLocales_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBroadcastLocales_result : TBase
    {
      private BroadcastLocalesResponse _success;

      public BroadcastLocalesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBroadcastLocales_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BroadcastLocalesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBroadcastLocales_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBroadcastLocales_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditBroadcast_args : TBase
    {
      private BroadcastInfo _editInfo;
      private string _gmLogin;

      public BroadcastInfo EditInfo
      {
        get
        {
          return _editInfo;
        }
        set
        {
          __isset.editInfo = true;
          this._editInfo = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool editInfo;
        public bool gmLogin;
      }

      public EditBroadcast_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                EditInfo = new BroadcastInfo();
                EditInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditBroadcast_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EditInfo != null && __isset.editInfo) {
          field.Name = "editInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          EditInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditBroadcast_args(");
        sb.Append("EditInfo: ");
        sb.Append(EditInfo== null ? "<null>" : EditInfo.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditBroadcast_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditBroadcast_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditBroadcast_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditBroadcast_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteBroadcast_args : TBase
    {
      private int _id;
      private string _gmLogin;

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool gmLogin;
      }

      public DeleteBroadcast_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteBroadcast_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteBroadcast_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteBroadcast_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteBroadcast_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteBroadcast_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteBroadcast_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBroadcastList_args : TBase
    {
      private int _skipLines;
      private int _takeLines;

      public int SkipLines
      {
        get
        {
          return _skipLines;
        }
        set
        {
          __isset.skipLines = true;
          this._skipLines = value;
        }
      }

      public int TakeLines
      {
        get
        {
          return _takeLines;
        }
        set
        {
          __isset.takeLines = true;
          this._takeLines = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skipLines;
        public bool takeLines;
      }

      public GetBroadcastList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                SkipLines = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                TakeLines = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBroadcastList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.skipLines) {
          field.Name = "skipLines";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SkipLines);
          oprot.WriteFieldEnd();
        }
        if (__isset.takeLines) {
          field.Name = "takeLines";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TakeLines);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBroadcastList_args(");
        sb.Append("SkipLines: ");
        sb.Append(SkipLines);
        sb.Append(",TakeLines: ");
        sb.Append(TakeLines);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBroadcastList_result : TBase
    {
      private BroadcastListResponse _success;

      public BroadcastListResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBroadcastList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BroadcastListResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBroadcastList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBroadcastList_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StartMessageRotation_args : TBase
    {
      private int _id;
      private string _gmLogin;

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool gmLogin;
      }

      public StartMessageRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("StartMessageRotation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("StartMessageRotation_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StartMessageRotation_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public StartMessageRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("StartMessageRotation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("StartMessageRotation_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StopMessageRotation_args : TBase
    {
      private int _id;
      private string _gmLogin;

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool gmLogin;
      }

      public StopMessageRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("StopMessageRotation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("StopMessageRotation_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StopMessageRotation_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public StopMessageRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("StopMessageRotation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("StopMessageRotation_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSocServerVersion_args : TBase
    {

      public GetSocServerVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSocServerVersion_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSocServerVersion_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSocServerVersion_result : TBase
    {
      private SocServerVersionResponse _success;

      public SocServerVersionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSocServerVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SocServerVersionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSocServerVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSocServerVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullUserDump_args : TBase
    {
      private string _login;
      private bool _zip;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public bool Zip
      {
        get
        {
          return _zip;
        }
        set
        {
          __isset.zip = true;
          this._zip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool zip;
      }

      public GetFullUserDump_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Zip = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFullUserDump_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (__isset.zip) {
          field.Name = "zip";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Zip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFullUserDump_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Zip: ");
        sb.Append(Zip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullUserDump_result : TBase
    {
      private StringDataResponse _success;

      public StringDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFullUserDump_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StringDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFullUserDump_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFullUserDump_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyFullUserDump_args : TBase
    {
      private string _login;
      private string _dumpdata;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string Dumpdata
      {
        get
        {
          return _dumpdata;
        }
        set
        {
          __isset.dumpdata = true;
          this._dumpdata = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool dumpdata;
      }

      public ApplyFullUserDump_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Dumpdata = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ApplyFullUserDump_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (Dumpdata != null && __isset.dumpdata) {
          field.Name = "dumpdata";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dumpdata);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ApplyFullUserDump_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Dumpdata: ");
        sb.Append(Dumpdata);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyFullUserDump_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ApplyFullUserDump_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ApplyFullUserDump_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ApplyFullUserDump_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveFakeAuid_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public RemoveFakeAuid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveFakeAuid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveFakeAuid_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveFakeAuid_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveFakeAuid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveFakeAuid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveFakeAuid_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBackups_args : TBase
    {

      public GetBackups_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBackups_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBackups_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBackups_result : TBase
    {
      private UserDumpsDataResponse _success;

      public UserDumpsDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBackups_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserDumpsDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBackups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBackups_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBrokenUserDump_args : TBase
    {
      private string _login;
      private string _date;
      private bool _zip;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string Date
      {
        get
        {
          return _date;
        }
        set
        {
          __isset.date = true;
          this._date = value;
        }
      }

      public bool Zip
      {
        get
        {
          return _zip;
        }
        set
        {
          __isset.zip = true;
          this._zip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool date;
        public bool zip;
      }

      public GetBrokenUserDump_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Date = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Zip = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBrokenUserDump_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (Date != null && __isset.date) {
          field.Name = "date";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Date);
          oprot.WriteFieldEnd();
        }
        if (__isset.zip) {
          field.Name = "zip";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Zip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBrokenUserDump_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",Date: ");
        sb.Append(Date);
        sb.Append(",Zip: ");
        sb.Append(Zip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBrokenUserDump_result : TBase
    {
      private StringDataResponse _success;

      public StringDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBrokenUserDump_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StringDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBrokenUserDump_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBrokenUserDump_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBrokenUserDumpByNickname_args : TBase
    {
      private string _nickname;
      private string _date;
      private bool _zip;

      public string Nickname
      {
        get
        {
          return _nickname;
        }
        set
        {
          __isset.nickname = true;
          this._nickname = value;
        }
      }

      public string Date
      {
        get
        {
          return _date;
        }
        set
        {
          __isset.date = true;
          this._date = value;
        }
      }

      public bool Zip
      {
        get
        {
          return _zip;
        }
        set
        {
          __isset.zip = true;
          this._zip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nickname;
        public bool date;
        public bool zip;
      }

      public GetBrokenUserDumpByNickname_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Nickname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Date = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Zip = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBrokenUserDumpByNickname_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Nickname != null && __isset.nickname) {
          field.Name = "nickname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nickname);
          oprot.WriteFieldEnd();
        }
        if (Date != null && __isset.date) {
          field.Name = "date";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Date);
          oprot.WriteFieldEnd();
        }
        if (__isset.zip) {
          field.Name = "zip";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Zip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBrokenUserDumpByNickname_args(");
        sb.Append("Nickname: ");
        sb.Append(Nickname);
        sb.Append(",Date: ");
        sb.Append(Date);
        sb.Append(",Zip: ");
        sb.Append(Zip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBrokenUserDumpByNickname_result : TBase
    {
      private StringDataResponse _success;

      public StringDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBrokenUserDumpByNickname_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StringDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetBrokenUserDumpByNickname_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetBrokenUserDumpByNickname_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckAccountValidity_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public CheckAccountValidity_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CheckAccountValidity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CheckAccountValidity_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckAccountValidity_result : TBase
    {
      private StringDataResponse _success;

      public StringDataResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CheckAccountValidity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StringDataResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CheckAccountValidity_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CheckAccountValidity_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FixAccount_args : TBase
    {
      private string _login;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
      }

      public FixAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FixAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FixAccount_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FixAccount_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FixAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FixAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FixAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ActivateEmail_args : TBase
    {
      private string _email;
      private string _gmLogin;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool gmLogin;
      }

      public ActivateEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ActivateEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ActivateEmail_args(");
        sb.Append("Email: ");
        sb.Append(Email);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ActivateEmail_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ActivateEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ActivateEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ActivateEmail_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FlushServerId_args : TBase
    {
      private string _login;
      private string _gmLogin;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
      }

      public FlushServerId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FlushServerId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FlushServerId_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FlushServerId_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FlushServerId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FlushServerId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FlushServerId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddUserRestriction_args : TBase
    {
      private string _snid;
      private string _snuid;
      private string _cbtAccessKey;

      public string Snid
      {
        get
        {
          return _snid;
        }
        set
        {
          __isset.snid = true;
          this._snid = value;
        }
      }

      public string Snuid
      {
        get
        {
          return _snuid;
        }
        set
        {
          __isset.snuid = true;
          this._snuid = value;
        }
      }

      public string CbtAccessKey
      {
        get
        {
          return _cbtAccessKey;
        }
        set
        {
          __isset.cbtAccessKey = true;
          this._cbtAccessKey = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snid;
        public bool snuid;
        public bool cbtAccessKey;
      }

      public AddUserRestriction_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Snid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Snuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CbtAccessKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddUserRestriction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Snid != null && __isset.snid) {
          field.Name = "snid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snid);
          oprot.WriteFieldEnd();
        }
        if (Snuid != null && __isset.snuid) {
          field.Name = "snuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Snuid);
          oprot.WriteFieldEnd();
        }
        if (CbtAccessKey != null && __isset.cbtAccessKey) {
          field.Name = "cbtAccessKey";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CbtAccessKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddUserRestriction_args(");
        sb.Append("Snid: ");
        sb.Append(Snid);
        sb.Append(",Snuid: ");
        sb.Append(Snuid);
        sb.Append(",CbtAccessKey: ");
        sb.Append(CbtAccessKey);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddUserRestriction_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddUserRestriction_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddUserRestriction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddUserRestriction_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAccountDbValue_args : TBase
    {
      private string _login;
      private string _gmLogin;
      private string _key;
      private string _value;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool gmLogin;
        public bool key;
        public bool value;
      }

      public EditAccountDbValue_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAccountDbValue_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAccountDbValue_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Key: ");
        sb.Append(Key);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAccountDbValue_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditAccountDbValue_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAccountDbValue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAccountDbValue_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterPayment_args : TBase
    {
      private long _auid;
      private int _amount;
      private string _source;
      private string _txnid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public int Amount
      {
        get
        {
          return _amount;
        }
        set
        {
          __isset.amount = true;
          this._amount = value;
        }
      }

      public string Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public string Txnid
      {
        get
        {
          return _txnid;
        }
        set
        {
          __isset.txnid = true;
          this._txnid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool amount;
        public bool source;
        public bool txnid;
      }

      public RegisterPayment_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Amount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Source = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Txnid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterPayment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.amount) {
          field.Name = "amount";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Amount);
          oprot.WriteFieldEnd();
        }
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Source);
          oprot.WriteFieldEnd();
        }
        if (Txnid != null && __isset.txnid) {
          field.Name = "txnid";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Txnid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RegisterPayment_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Amount: ");
        sb.Append(Amount);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Txnid: ");
        sb.Append(Txnid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterPayment_result : TBase
    {
      private RegisterPaymentResponse _success;

      public RegisterPaymentResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RegisterPayment_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RegisterPaymentResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterPayment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RegisterPayment_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPaymentBonusActions_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetPaymentBonusActions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPaymentBonusActions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPaymentBonusActions_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPaymentBonusActions_result : TBase
    {
      private GetPaymentBonusActionsResponse _success;

      public GetPaymentBonusActionsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPaymentBonusActions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetPaymentBonusActionsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPaymentBonusActions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPaymentBonusActions_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReplenishUserGold_args : TBase
    {
      private long _auid;
      private int _amount;
      private string _payment_system;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public int Amount
      {
        get
        {
          return _amount;
        }
        set
        {
          __isset.amount = true;
          this._amount = value;
        }
      }

      public string Payment_system
      {
        get
        {
          return _payment_system;
        }
        set
        {
          __isset.payment_system = true;
          this._payment_system = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool amount;
        public bool payment_system;
      }

      public ReplenishUserGold_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Amount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Payment_system = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReplenishUserGold_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.amount) {
          field.Name = "amount";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Amount);
          oprot.WriteFieldEnd();
        }
        if (Payment_system != null && __isset.payment_system) {
          field.Name = "payment_system";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Payment_system);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReplenishUserGold_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Amount: ");
        sb.Append(Amount);
        sb.Append(",Payment_system: ");
        sb.Append(Payment_system);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReplenishUserGold_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ReplenishUserGold_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReplenishUserGold_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReplenishUserGold_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateUserGold_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public UpdateUserGold_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateUserGold_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateUserGold_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateUserGold_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateUserGold_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateUserGold_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateUserGold_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetQuests_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetQuests_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetQuests_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetQuests_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetQuests_result : TBase
    {
      private QuestsInfoResponse _success;

      public QuestsInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetQuests_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QuestsInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetQuests_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetQuests_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeQuest_args : TBase
    {
      private long _auid;
      private int _questid;
      private QuestChangeAction _action;
      private string _gmLogin;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public int Questid
      {
        get
        {
          return _questid;
        }
        set
        {
          __isset.questid = true;
          this._questid = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="QuestChangeAction"/>
      /// </summary>
      public QuestChangeAction Action
      {
        get
        {
          return _action;
        }
        set
        {
          __isset.action = true;
          this._action = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool questid;
        public bool action;
        public bool gmLogin;
      }

      public ChangeQuest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Questid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Action = (QuestChangeAction)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeQuest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.questid) {
          field.Name = "questid";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Questid);
          oprot.WriteFieldEnd();
        }
        if (__isset.action) {
          field.Name = "action";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Action);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeQuest_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Questid: ");
        sb.Append(Questid);
        sb.Append(",Action: ");
        sb.Append(Action);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeQuest_result : TBase
    {
      private ServerActionResponse _success;

      public ServerActionResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ChangeQuest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerActionResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeQuest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeQuest_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateGeoshowFlag_args : TBase
    {
      private long _auid;
      private bool _isAllowed;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public bool IsAllowed
      {
        get
        {
          return _isAllowed;
        }
        set
        {
          __isset.isAllowed = true;
          this._isAllowed = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool isAllowed;
      }

      public UpdateGeoshowFlag_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IsAllowed = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateGeoshowFlag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAllowed) {
          field.Name = "isAllowed";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsAllowed);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateGeoshowFlag_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",IsAllowed: ");
        sb.Append(IsAllowed);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateGeoshowFlag_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateGeoshowFlag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateGeoshowFlag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateGeoshowFlag_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyDLC_args : TBase
    {
      private long _auid;
      private string _dlcid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string Dlcid
      {
        get
        {
          return _dlcid;
        }
        set
        {
          __isset.dlcid = true;
          this._dlcid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool dlcid;
      }

      public ApplyDLC_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Dlcid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ApplyDLC_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (Dlcid != null && __isset.dlcid) {
          field.Name = "dlcid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dlcid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ApplyDLC_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Dlcid: ");
        sb.Append(Dlcid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyDLC_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ApplyDLC_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ApplyDLC_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ApplyDLC_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestInfo_args : TBase
    {

      public GetDynamicQuestInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestInfo_result : TBase
    {
      private DynamicQuestInfoResponse _success;

      public DynamicQuestInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDynamicQuestInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DynamicQuestInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestById_args : TBase
    {
      private int _index;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
      }

      public GetDynamicQuestById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestById_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestById_result : TBase
    {
      private DynamicQuestByIdResponse _success;

      public DynamicQuestByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDynamicQuestById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DynamicQuestByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDynamicQuest_args : TBase
    {
      private string _questData;
      private string _locale;
      private string _gmLogin;

      public string QuestData
      {
        get
        {
          return _questData;
        }
        set
        {
          __isset.questData = true;
          this._questData = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool questData;
        public bool locale;
        public bool gmLogin;
      }

      public AddDynamicQuest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                QuestData = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDynamicQuest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (QuestData != null && __isset.questData) {
          field.Name = "questData";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(QuestData);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDynamicQuest_args(");
        sb.Append("QuestData: ");
        sb.Append(QuestData);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDynamicQuest_result : TBase
    {
      private AddDynamicQuestResponse _success;

      public AddDynamicQuestResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddDynamicQuest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AddDynamicQuestResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDynamicQuest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDynamicQuest_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveDynamicQuest_args : TBase
    {
      private int _index;
      private string _locale;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
        public bool locale;
      }

      public RemoveDynamicQuest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveDynamicQuest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveDynamicQuest_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveDynamicQuest_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveDynamicQuest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveDynamicQuest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveDynamicQuest_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditDynamicQuest_args : TBase
    {
      private int _index;
      private string _locale;
      private string _questData;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }

      public string QuestData
      {
        get
        {
          return _questData;
        }
        set
        {
          __isset.questData = true;
          this._questData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
        public bool locale;
        public bool questData;
      }

      public EditDynamicQuest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                QuestData = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditDynamicQuest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (QuestData != null && __isset.questData) {
          field.Name = "questData";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(QuestData);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditDynamicQuest_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(",QuestData: ");
        sb.Append(QuestData);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditDynamicQuest_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditDynamicQuest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditDynamicQuest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditDynamicQuest_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestPullsInfo_args : TBase
    {

      public GetDynamicQuestPullsInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestPullsInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestPullsInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestPullsInfo_result : TBase
    {
      private DynamicQuestPullsInfoResponse _success;

      public DynamicQuestPullsInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDynamicQuestPullsInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DynamicQuestPullsInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestPullsInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestPullsInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestPullById_args : TBase
    {
      private int _pullId;

      public int PullId
      {
        get
        {
          return _pullId;
        }
        set
        {
          __isset.pullId = true;
          this._pullId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pullId;
      }

      public GetDynamicQuestPullById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PullId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestPullById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.pullId) {
          field.Name = "pullId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PullId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestPullById_args(");
        sb.Append("PullId: ");
        sb.Append(PullId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDynamicQuestPullById_result : TBase
    {
      private DynamicQuestPullByIdResponse _success;

      public DynamicQuestPullByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDynamicQuestPullById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DynamicQuestPullByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDynamicQuestPullById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDynamicQuestPullById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAuidsLists_args : TBase
    {

      public GetAuidsLists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAuidsLists_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAuidsLists_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAuidsLists_result : TBase
    {
      private AuidsListResponse _success;

      public AuidsListResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAuidsLists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AuidsListResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAuidsLists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAuidsLists_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAuidsListById_args : TBase
    {
      private int _index;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
      }

      public GetAuidsListById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAuidsListById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAuidsListById_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAuidsListById_result : TBase
    {
      private AuidsListByIdResponse _success;

      public AuidsListByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAuidsListById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AuidsListByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAuidsListById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAuidsListById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddAuidsList_args : TBase
    {
      private AuidsList _auidsList;
      private string _gmLogin;

      public AuidsList AuidsList
      {
        get
        {
          return _auidsList;
        }
        set
        {
          __isset.auidsList = true;
          this._auidsList = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auidsList;
        public bool gmLogin;
      }

      public AddAuidsList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AuidsList = new AuidsList();
                AuidsList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddAuidsList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuidsList != null && __isset.auidsList) {
          field.Name = "auidsList";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AuidsList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddAuidsList_args(");
        sb.Append("AuidsList: ");
        sb.Append(AuidsList== null ? "<null>" : AuidsList.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddAuidsList_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddAuidsList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddAuidsList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddAuidsList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAuidsList_args : TBase
    {
      private AuidsList _auidsList;
      private string _gmLogin;

      public AuidsList AuidsList
      {
        get
        {
          return _auidsList;
        }
        set
        {
          __isset.auidsList = true;
          this._auidsList = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auidsList;
        public bool gmLogin;
      }

      public EditAuidsList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AuidsList = new AuidsList();
                AuidsList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAuidsList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuidsList != null && __isset.auidsList) {
          field.Name = "auidsList";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AuidsList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAuidsList_args(");
        sb.Append("AuidsList: ");
        sb.Append(AuidsList== null ? "<null>" : AuidsList.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditAuidsList_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditAuidsList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditAuidsList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditAuidsList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveAuidsList_args : TBase
    {
      private int _index;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
      }

      public RemoveAuidsList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAuidsList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAuidsList_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveAuidsList_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveAuidsList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAuidsList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAuidsList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDynamicQuestPull_args : TBase
    {
      private DynamicQuestPull _questPull;
      private string _gmLogin;

      public DynamicQuestPull QuestPull
      {
        get
        {
          return _questPull;
        }
        set
        {
          __isset.questPull = true;
          this._questPull = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool questPull;
        public bool gmLogin;
      }

      public AddDynamicQuestPull_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                QuestPull = new DynamicQuestPull();
                QuestPull.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDynamicQuestPull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (QuestPull != null && __isset.questPull) {
          field.Name = "questPull";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          QuestPull.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDynamicQuestPull_args(");
        sb.Append("QuestPull: ");
        sb.Append(QuestPull== null ? "<null>" : QuestPull.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDynamicQuestPull_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddDynamicQuestPull_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDynamicQuestPull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDynamicQuestPull_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditDynamicQuestPull_args : TBase
    {
      private DynamicQuestPull _questPull;
      private string _gmLogin;

      public DynamicQuestPull QuestPull
      {
        get
        {
          return _questPull;
        }
        set
        {
          __isset.questPull = true;
          this._questPull = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool questPull;
        public bool gmLogin;
      }

      public EditDynamicQuestPull_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                QuestPull = new DynamicQuestPull();
                QuestPull.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditDynamicQuestPull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (QuestPull != null && __isset.questPull) {
          field.Name = "questPull";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          QuestPull.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditDynamicQuestPull_args(");
        sb.Append("QuestPull: ");
        sb.Append(QuestPull== null ? "<null>" : QuestPull.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditDynamicQuestPull_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditDynamicQuestPull_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditDynamicQuestPull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditDynamicQuestPull_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveDynamicQuestPull_args : TBase
    {
      private int _index;
      private string _locale;
      private string _gmLogin;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
        public bool locale;
        public bool gmLogin;
      }

      public RemoveDynamicQuestPull_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveDynamicQuestPull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveDynamicQuestPull_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveDynamicQuestPull_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveDynamicQuestPull_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveDynamicQuestPull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveDynamicQuestPull_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDynamicQuestsToPull_args : TBase
    {
      private int _pullId;
      private List<int> _questIds;
      private string _locale;
      private string _gmLogin;

      public int PullId
      {
        get
        {
          return _pullId;
        }
        set
        {
          __isset.pullId = true;
          this._pullId = value;
        }
      }

      public List<int> QuestIds
      {
        get
        {
          return _questIds;
        }
        set
        {
          __isset.questIds = true;
          this._questIds = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pullId;
        public bool questIds;
        public bool locale;
        public bool gmLogin;
      }

      public AddDynamicQuestsToPull_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PullId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  QuestIds = new List<int>();
                  TList _list498 = iprot.ReadListBegin();
                  for( int _i499 = 0; _i499 < _list498.Count; ++_i499)
                  {
                    int _elem500 = 0;
                    _elem500 = iprot.ReadI32();
                    QuestIds.Add(_elem500);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDynamicQuestsToPull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.pullId) {
          field.Name = "pullId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PullId);
          oprot.WriteFieldEnd();
        }
        if (QuestIds != null && __isset.questIds) {
          field.Name = "questIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, QuestIds.Count));
            foreach (int _iter501 in QuestIds)
            {
              oprot.WriteI32(_iter501);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDynamicQuestsToPull_args(");
        sb.Append("PullId: ");
        sb.Append(PullId);
        sb.Append(",QuestIds: ");
        sb.Append(QuestIds);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDynamicQuestsToPull_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddDynamicQuestsToPull_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDynamicQuestsToPull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDynamicQuestsToPull_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveDynamicQuestsFromPull_args : TBase
    {
      private int _pullId;
      private List<int> _questIds;
      private string _locale;
      private string _gmLogin;

      public int PullId
      {
        get
        {
          return _pullId;
        }
        set
        {
          __isset.pullId = true;
          this._pullId = value;
        }
      }

      public List<int> QuestIds
      {
        get
        {
          return _questIds;
        }
        set
        {
          __isset.questIds = true;
          this._questIds = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pullId;
        public bool questIds;
        public bool locale;
        public bool gmLogin;
      }

      public RemoveDynamicQuestsFromPull_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PullId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  QuestIds = new List<int>();
                  TList _list502 = iprot.ReadListBegin();
                  for( int _i503 = 0; _i503 < _list502.Count; ++_i503)
                  {
                    int _elem504 = 0;
                    _elem504 = iprot.ReadI32();
                    QuestIds.Add(_elem504);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveDynamicQuestsFromPull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.pullId) {
          field.Name = "pullId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PullId);
          oprot.WriteFieldEnd();
        }
        if (QuestIds != null && __isset.questIds) {
          field.Name = "questIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, QuestIds.Count));
            foreach (int _iter505 in QuestIds)
            {
              oprot.WriteI32(_iter505);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveDynamicQuestsFromPull_args(");
        sb.Append("PullId: ");
        sb.Append(PullId);
        sb.Append(",QuestIds: ");
        sb.Append(QuestIds);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveDynamicQuestsFromPull_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveDynamicQuestsFromPull_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveDynamicQuestsFromPull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveDynamicQuestsFromPull_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountFlags_args : TBase
    {
      private string _login;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
      }

      public GetAccountFlags_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountFlags_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountFlags_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountFlags_result : TBase
    {
      private FlagResponse _success;

      public FlagResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountFlags_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FlagResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountFlags_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountFlags_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnlockFlag_args : TBase
    {
      private string _login;
      private string _flagPersistentId;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string FlagPersistentId
      {
        get
        {
          return _flagPersistentId;
        }
        set
        {
          __isset.flagPersistentId = true;
          this._flagPersistentId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool flagPersistentId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public UnlockFlag_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FlagPersistentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnlockFlag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (FlagPersistentId != null && __isset.flagPersistentId) {
          field.Name = "flagPersistentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlagPersistentId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnlockFlag_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",FlagPersistentId: ");
        sb.Append(FlagPersistentId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnlockFlag_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnlockFlag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnlockFlag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnlockFlag_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LockFlag_args : TBase
    {
      private string _login;
      private string _flagPersistentId;
      private string _gmLogin;
      private string _extra_comment;

      public string Login
      {
        get
        {
          return _login;
        }
        set
        {
          __isset.login = true;
          this._login = value;
        }
      }

      public string FlagPersistentId
      {
        get
        {
          return _flagPersistentId;
        }
        set
        {
          __isset.flagPersistentId = true;
          this._flagPersistentId = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }

      public string Extra_comment
      {
        get
        {
          return _extra_comment;
        }
        set
        {
          __isset.extra_comment = true;
          this._extra_comment = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool login;
        public bool flagPersistentId;
        public bool gmLogin;
        public bool extra_comment;
      }

      public LockFlag_args() {
        this._extra_comment = "";
        this.__isset.extra_comment = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FlagPersistentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Extra_comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LockFlag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (FlagPersistentId != null && __isset.flagPersistentId) {
          field.Name = "flagPersistentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlagPersistentId);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        if (Extra_comment != null && __isset.extra_comment) {
          field.Name = "extra_comment";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Extra_comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LockFlag_args(");
        sb.Append("Login: ");
        sb.Append(Login);
        sb.Append(",FlagPersistentId: ");
        sb.Append(FlagPersistentId);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(",Extra_comment: ");
        sb.Append(Extra_comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LockFlag_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public LockFlag_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LockFlag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LockFlag_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BindToGeolocation_args : TBase
    {
      private long _auid;
      private string _country;
      private string _region;
      private string _city;
      private string _gmLogin;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      public string City
      {
        get
        {
          return _city;
        }
        set
        {
          __isset.city = true;
          this._city = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool country;
        public bool region;
        public bool city;
        public bool gmLogin;
      }

      public BindToGeolocation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                City = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BindToGeolocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (City != null && __isset.city) {
          field.Name = "city";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(City);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BindToGeolocation_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",Region: ");
        sb.Append(Region);
        sb.Append(",City: ");
        sb.Append(City);
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BindToGeolocation_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BindToGeolocation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BindToGeolocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BindToGeolocation_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTalentsEvents_args : TBase
    {

      public GetTalentsEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTalentsEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTalentsEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTalentsEvents_result : TBase
    {
      private TalentsEventsResponse _success;

      public TalentsEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTalentsEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TalentsEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTalentsEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTalentsEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetResourceEvents_args : TBase
    {

      public GetResourceEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetResourceEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetResourceEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetResourceEvents_result : TBase
    {
      private ResourceEventsResponse _success;

      public ResourceEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetResourceEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResourceEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetResourceEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetResourceEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddMassOperation_args : TBase
    {
      private MassOperationInfo _massOperation;
      private string _gmLogin;

      public MassOperationInfo MassOperation
      {
        get
        {
          return _massOperation;
        }
        set
        {
          __isset.massOperation = true;
          this._massOperation = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool massOperation;
        public bool gmLogin;
      }

      public AddMassOperation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                MassOperation = new MassOperationInfo();
                MassOperation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddMassOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MassOperation != null && __isset.massOperation) {
          field.Name = "massOperation";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          MassOperation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddMassOperation_args(");
        sb.Append("MassOperation: ");
        sb.Append(MassOperation== null ? "<null>" : MassOperation.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddMassOperation_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddMassOperation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddMassOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddMassOperation_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMassOperationsInfo_args : TBase
    {

      public GetMassOperationsInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMassOperationsInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMassOperationsInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMassOperationsInfo_result : TBase
    {
      private MassOperationsResultResponse _success;

      public MassOperationsResultResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMassOperationsInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MassOperationsResultResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMassOperationsInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMassOperationsInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteMassOperationInfo_args : TBase
    {
      private int _operaionId;

      public int OperaionId
      {
        get
        {
          return _operaionId;
        }
        set
        {
          __isset.operaionId = true;
          this._operaionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool operaionId;
      }

      public DeleteMassOperationInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                OperaionId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteMassOperationInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.operaionId) {
          field.Name = "operaionId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(OperaionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteMassOperationInfo_args(");
        sb.Append("OperaionId: ");
        sb.Append(OperaionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteMassOperationInfo_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteMassOperationInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteMassOperationInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteMassOperationInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvailableEvents_args : TBase
    {

      public GetAvailableEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAvailableEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAvailableEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvailableEvents_result : TBase
    {
      private CommonEventsListResponse _success;

      public CommonEventsListResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvailableEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CommonEventsListResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAvailableEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAvailableEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeEventStateById_args : TBase
    {
      private int _persistentId;
      private bool _state;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }

      public bool State
      {
        get
        {
          return _state;
        }
        set
        {
          __isset.state = true;
          this._state = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
        public bool state;
      }

      public ChangeEventStateById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                State = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeEventStateById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        if (__isset.state) {
          field.Name = "state";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(State);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeEventStateById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(",State: ");
        sb.Append(State);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeEventStateById_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ChangeEventStateById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeEventStateById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeEventStateById_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public DeleteEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteEventById_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTechsInfos_args : TBase
    {

      public GetTechsInfos_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTechsInfos_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTechsInfos_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTechsInfos_result : TBase
    {
      private TechsInfosResponse _success;

      public TechsInfosResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTechsInfos_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TechsInfosResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTechsInfos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTechsInfos_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTechsInfoById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetTechsInfoById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTechsInfoById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTechsInfoById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTechsInfoById_result : TBase
    {
      private TechsInfoByIdResponse _success;

      public TechsInfoByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTechsInfoById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TechsInfoByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTechsInfoById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTechsInfoById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTechs_args : TBase
    {
      private TechsInfo _techInfo;

      public TechsInfo TechInfo
      {
        get
        {
          return _techInfo;
        }
        set
        {
          __isset.techInfo = true;
          this._techInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool techInfo;
      }

      public AddTechs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TechInfo = new TechsInfo();
                TechInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTechs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TechInfo != null && __isset.techInfo) {
          field.Name = "techInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TechInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTechs_args(");
        sb.Append("TechInfo: ");
        sb.Append(TechInfo== null ? "<null>" : TechInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTechs_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddTechs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTechs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTechs_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTechs_args : TBase
    {
      private TechsInfo _techInfo;

      public TechsInfo TechInfo
      {
        get
        {
          return _techInfo;
        }
        set
        {
          __isset.techInfo = true;
          this._techInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool techInfo;
      }

      public EditTechs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TechInfo = new TechsInfo();
                TechInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTechs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TechInfo != null && __isset.techInfo) {
          field.Name = "techInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TechInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTechs_args(");
        sb.Append("TechInfo: ");
        sb.Append(TechInfo== null ? "<null>" : TechInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTechs_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditTechs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTechs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTechs_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomEvents_args : TBase
    {

      public GetCustomEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomEvents_result : TBase
    {
      private CustomEventsResponse _success;

      public CustomEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCustomEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CustomEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetCustomEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomEventById_result : TBase
    {
      private CustomEventByIdResponse _success;

      public CustomEventByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCustomEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CustomEventByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddCustomEvent_args : TBase
    {
      private CustomEvent _customEvent;

      public CustomEvent CustomEvent
      {
        get
        {
          return _customEvent;
        }
        set
        {
          __isset.customEvent = true;
          this._customEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customEvent;
      }

      public AddCustomEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CustomEvent = new CustomEvent();
                CustomEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddCustomEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CustomEvent != null && __isset.customEvent) {
          field.Name = "customEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CustomEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddCustomEvent_args(");
        sb.Append("CustomEvent: ");
        sb.Append(CustomEvent== null ? "<null>" : CustomEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddCustomEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddCustomEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddCustomEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddCustomEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditCustomEvent_args : TBase
    {
      private CustomEvent _customEvent;

      public CustomEvent CustomEvent
      {
        get
        {
          return _customEvent;
        }
        set
        {
          __isset.customEvent = true;
          this._customEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customEvent;
      }

      public EditCustomEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CustomEvent = new CustomEvent();
                CustomEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditCustomEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CustomEvent != null && __isset.customEvent) {
          field.Name = "customEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CustomEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditCustomEvent_args(");
        sb.Append("CustomEvent: ");
        sb.Append(CustomEvent== null ? "<null>" : CustomEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditCustomEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditCustomEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditCustomEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditCustomEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomMaps_args : TBase
    {

      public GetCustomMaps_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomMaps_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomMaps_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomMaps_result : TBase
    {
      private CustomMapsResponse _success;

      public CustomMapsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCustomMaps_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CustomMapsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomMaps_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomMaps_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomMapById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetCustomMapById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomMapById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomMapById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCustomMapById_result : TBase
    {
      private CustomMapByIdResponse _success;

      public CustomMapByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCustomMapById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CustomMapByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCustomMapById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCustomMapById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddCustomMap_args : TBase
    {
      private CustomMap _customMap;

      public CustomMap CustomMap
      {
        get
        {
          return _customMap;
        }
        set
        {
          __isset.customMap = true;
          this._customMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customMap;
      }

      public AddCustomMap_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CustomMap = new CustomMap();
                CustomMap.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddCustomMap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CustomMap != null && __isset.customMap) {
          field.Name = "customMap";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CustomMap.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddCustomMap_args(");
        sb.Append("CustomMap: ");
        sb.Append(CustomMap== null ? "<null>" : CustomMap.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddCustomMap_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddCustomMap_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddCustomMap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddCustomMap_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditCustomMap_args : TBase
    {
      private CustomMap _customMap;

      public CustomMap CustomMap
      {
        get
        {
          return _customMap;
        }
        set
        {
          __isset.customMap = true;
          this._customMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customMap;
      }

      public EditCustomMap_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CustomMap = new CustomMap();
                CustomMap.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditCustomMap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CustomMap != null && __isset.customMap) {
          field.Name = "customMap";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CustomMap.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditCustomMap_args(");
        sb.Append("CustomMap: ");
        sb.Append(CustomMap== null ? "<null>" : CustomMap.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditCustomMap_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditCustomMap_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditCustomMap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditCustomMap_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTalentDropRarities_args : TBase
    {

      public GetTalentDropRarities_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTalentDropRarities_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTalentDropRarities_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTalentDropRarities_result : TBase
    {
      private TalentDropRaritiesResponse _success;

      public TalentDropRaritiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTalentDropRarities_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TalentDropRaritiesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTalentDropRarities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTalentDropRarities_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTalentDropRarityById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetTalentDropRarityById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTalentDropRarityById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTalentDropRarityById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTalentDropRarityById_result : TBase
    {
      private TalentDropRarityByIdResponse _success;

      public TalentDropRarityByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTalentDropRarityById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TalentDropRarityByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTalentDropRarityById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTalentDropRarityById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalentDropRarities_args : TBase
    {
      private TalentDropRarityEvent _dropRarity;

      public TalentDropRarityEvent DropRarity
      {
        get
        {
          return _dropRarity;
        }
        set
        {
          __isset.dropRarity = true;
          this._dropRarity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dropRarity;
      }

      public AddTalentDropRarities_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DropRarity = new TalentDropRarityEvent();
                DropRarity.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalentDropRarities_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DropRarity != null && __isset.dropRarity) {
          field.Name = "dropRarity";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DropRarity.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalentDropRarities_args(");
        sb.Append("DropRarity: ");
        sb.Append(DropRarity== null ? "<null>" : DropRarity.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalentDropRarities_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddTalentDropRarities_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalentDropRarities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalentDropRarities_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTalentDropRarities_args : TBase
    {
      private TalentDropRarityEvent _dropRarity;

      public TalentDropRarityEvent DropRarity
      {
        get
        {
          return _dropRarity;
        }
        set
        {
          __isset.dropRarity = true;
          this._dropRarity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dropRarity;
      }

      public EditTalentDropRarities_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DropRarity = new TalentDropRarityEvent();
                DropRarity.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTalentDropRarities_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DropRarity != null && __isset.dropRarity) {
          field.Name = "dropRarity";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DropRarity.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTalentDropRarities_args(");
        sb.Append("DropRarity: ");
        sb.Append(DropRarity== null ? "<null>" : DropRarity.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTalentDropRarities_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditTalentDropRarities_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTalentDropRarities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTalentDropRarities_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNewsBanners_args : TBase
    {

      public GetNewsBanners_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNewsBanners_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNewsBanners_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNewsBanners_result : TBase
    {
      private NewsBannersResponse _success;

      public NewsBannersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetNewsBanners_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NewsBannersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNewsBanners_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNewsBanners_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNewsBannerById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetNewsBannerById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNewsBannerById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNewsBannerById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNewsBannerById_result : TBase
    {
      private NewsBannerByIdResponse _success;

      public NewsBannerByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetNewsBannerById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NewsBannerByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetNewsBannerById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetNewsBannerById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddNewsBanner_args : TBase
    {
      private NewsBanner _banner;

      public NewsBanner Banner
      {
        get
        {
          return _banner;
        }
        set
        {
          __isset.banner = true;
          this._banner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool banner;
      }

      public AddNewsBanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Banner = new NewsBanner();
                Banner.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddNewsBanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Banner != null && __isset.banner) {
          field.Name = "banner";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Banner.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddNewsBanner_args(");
        sb.Append("Banner: ");
        sb.Append(Banner== null ? "<null>" : Banner.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddNewsBanner_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddNewsBanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddNewsBanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddNewsBanner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditNewsBanner_args : TBase
    {
      private NewsBanner _banner;

      public NewsBanner Banner
      {
        get
        {
          return _banner;
        }
        set
        {
          __isset.banner = true;
          this._banner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool banner;
      }

      public EditNewsBanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Banner = new NewsBanner();
                Banner.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditNewsBanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Banner != null && __isset.banner) {
          field.Name = "banner";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Banner.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditNewsBanner_args(");
        sb.Append("Banner: ");
        sb.Append(Banner== null ? "<null>" : Banner.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditNewsBanner_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditNewsBanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditNewsBanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditNewsBanner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSkinPrices_args : TBase
    {

      public GetSkinPrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSkinPrices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSkinPrices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSkinPrices_result : TBase
    {
      private SkinGoldPricesResponse _success;

      public SkinGoldPricesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSkinPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkinGoldPricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSkinPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSkinPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSkinPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetSkinPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSkinPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSkinPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSkinPriceById_result : TBase
    {
      private SkinGoldPriceByIdResponse _success;

      public SkinGoldPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSkinPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SkinGoldPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSkinPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSkinPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddSkinPricesEvent_args : TBase
    {
      private SkinGoldPriceEvent _skinEvent;

      public SkinGoldPriceEvent SkinEvent
      {
        get
        {
          return _skinEvent;
        }
        set
        {
          __isset.skinEvent = true;
          this._skinEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skinEvent;
      }

      public AddSkinPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SkinEvent = new SkinGoldPriceEvent();
                SkinEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSkinPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SkinEvent != null && __isset.skinEvent) {
          field.Name = "skinEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SkinEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSkinPricesEvent_args(");
        sb.Append("SkinEvent: ");
        sb.Append(SkinEvent== null ? "<null>" : SkinEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddSkinPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddSkinPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSkinPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSkinPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSkinPricesEvent_args : TBase
    {
      private SkinGoldPriceEvent _skinEvent;

      public SkinGoldPriceEvent SkinEvent
      {
        get
        {
          return _skinEvent;
        }
        set
        {
          __isset.skinEvent = true;
          this._skinEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skinEvent;
      }

      public EditSkinPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SkinEvent = new SkinGoldPriceEvent();
                SkinEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSkinPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SkinEvent != null && __isset.skinEvent) {
          field.Name = "skinEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SkinEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSkinPricesEvent_args(");
        sb.Append("SkinEvent: ");
        sb.Append(SkinEvent== null ? "<null>" : SkinEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSkinPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditSkinPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSkinPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSkinPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroPrices_args : TBase
    {

      public GetHeroPrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroPrices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroPrices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroPrices_result : TBase
    {
      private HeroPricesResponse _success;

      public HeroPricesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHeroPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HeroPricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetHeroPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHeroPriceById_result : TBase
    {
      private HeroPriceByIdResponse _success;

      public HeroPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHeroPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HeroPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetHeroPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetHeroPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddHeroPricesEvent_args : TBase
    {
      private HeroPriceEvent _skinEvent;

      public HeroPriceEvent SkinEvent
      {
        get
        {
          return _skinEvent;
        }
        set
        {
          __isset.skinEvent = true;
          this._skinEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skinEvent;
      }

      public AddHeroPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SkinEvent = new HeroPriceEvent();
                SkinEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddHeroPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SkinEvent != null && __isset.skinEvent) {
          field.Name = "skinEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SkinEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddHeroPricesEvent_args(");
        sb.Append("SkinEvent: ");
        sb.Append(SkinEvent== null ? "<null>" : SkinEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddHeroPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddHeroPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddHeroPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddHeroPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditHeroPricesEvent_args : TBase
    {
      private HeroPriceEvent _skinEvent;

      public HeroPriceEvent SkinEvent
      {
        get
        {
          return _skinEvent;
        }
        set
        {
          __isset.skinEvent = true;
          this._skinEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool skinEvent;
      }

      public EditHeroPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SkinEvent = new HeroPriceEvent();
                SkinEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditHeroPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SkinEvent != null && __isset.skinEvent) {
          field.Name = "skinEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SkinEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditHeroPricesEvent_args(");
        sb.Append("SkinEvent: ");
        sb.Append(SkinEvent== null ? "<null>" : SkinEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditHeroPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditHeroPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditHeroPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditHeroPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransmutationTalentsPerPerl_args : TBase
    {

      public GetTransmutationTalentsPerPerl_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTransmutationTalentsPerPerl_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTransmutationTalentsPerPerl_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransmutationTalentsPerPerl_result : TBase
    {
      private TransmutationTalentsPerPerlResponse _success;

      public TransmutationTalentsPerPerlResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTransmutationTalentsPerPerl_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransmutationTalentsPerPerlResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTransmutationTalentsPerPerl_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTransmutationTalentsPerPerl_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransmutationTalentsPerPerlById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetTransmutationTalentsPerPerlById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTransmutationTalentsPerPerlById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTransmutationTalentsPerPerlById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransmutationTalentsPerPerlById_result : TBase
    {
      private TransmutationTalentsPerPerlByIdResponse _success;

      public TransmutationTalentsPerPerlByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTransmutationTalentsPerPerlById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransmutationTalentsPerPerlByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTransmutationTalentsPerPerlById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTransmutationTalentsPerPerlById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalentPerPerlEvent_args : TBase
    {
      private TransmutationTalentsPerPerl _talentsPerPerlEvent;

      public TransmutationTalentsPerPerl TalentsPerPerlEvent
      {
        get
        {
          return _talentsPerPerlEvent;
        }
        set
        {
          __isset.talentsPerPerlEvent = true;
          this._talentsPerPerlEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool talentsPerPerlEvent;
      }

      public AddTalentPerPerlEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TalentsPerPerlEvent = new TransmutationTalentsPerPerl();
                TalentsPerPerlEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalentPerPerlEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TalentsPerPerlEvent != null && __isset.talentsPerPerlEvent) {
          field.Name = "talentsPerPerlEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TalentsPerPerlEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalentPerPerlEvent_args(");
        sb.Append("TalentsPerPerlEvent: ");
        sb.Append(TalentsPerPerlEvent== null ? "<null>" : TalentsPerPerlEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTalentPerPerlEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddTalentPerPerlEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTalentPerPerlEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTalentPerPerlEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTalentPerPerlEvent_args : TBase
    {
      private TransmutationTalentsPerPerl _talentsPerPerlEvent;

      public TransmutationTalentsPerPerl TalentsPerPerlEvent
      {
        get
        {
          return _talentsPerPerlEvent;
        }
        set
        {
          __isset.talentsPerPerlEvent = true;
          this._talentsPerPerlEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool talentsPerPerlEvent;
      }

      public EditTalentPerPerlEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TalentsPerPerlEvent = new TransmutationTalentsPerPerl();
                TalentsPerPerlEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTalentPerPerlEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TalentsPerPerlEvent != null && __isset.talentsPerPerlEvent) {
          field.Name = "talentsPerPerlEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TalentsPerPerlEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTalentPerPerlEvent_args(");
        sb.Append("TalentsPerPerlEvent: ");
        sb.Append(TalentsPerPerlEvent== null ? "<null>" : TalentsPerPerlEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTalentPerPerlEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditTalentPerPerlEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTalentPerPerlEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTalentPerPerlEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlots_args : TBase
    {

      public GetRerollShopSlots_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlots_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlots_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlots_result : TBase
    {
      private RerollShopSlotsResponse _success;

      public RerollShopSlotsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopSlots_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopSlotsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlots_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlots_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotsById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopSlotsById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotsById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotsById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotsById_result : TBase
    {
      private RerollShopSlotsByIdResponse _success;

      public RerollShopSlotsByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopSlotsById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopSlotsByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotsById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotsById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopSlotsEvent_args : TBase
    {
      private RerollShopSlots _rerollShopSlotsEvent;

      public RerollShopSlots RerollShopSlotsEvent
      {
        get
        {
          return _rerollShopSlotsEvent;
        }
        set
        {
          __isset.rerollShopSlotsEvent = true;
          this._rerollShopSlotsEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rerollShopSlotsEvent;
      }

      public AddRerollShopSlotsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RerollShopSlotsEvent = new RerollShopSlots();
                RerollShopSlotsEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopSlotsEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RerollShopSlotsEvent != null && __isset.rerollShopSlotsEvent) {
          field.Name = "rerollShopSlotsEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RerollShopSlotsEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopSlotsEvent_args(");
        sb.Append("RerollShopSlotsEvent: ");
        sb.Append(RerollShopSlotsEvent== null ? "<null>" : RerollShopSlotsEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopSlotsEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopSlotsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopSlotsEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopSlotsEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopSlotsEvent_args : TBase
    {
      private RerollShopSlots _rerollShopSlotsEvent;

      public RerollShopSlots RerollShopSlotsEvent
      {
        get
        {
          return _rerollShopSlotsEvent;
        }
        set
        {
          __isset.rerollShopSlotsEvent = true;
          this._rerollShopSlotsEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rerollShopSlotsEvent;
      }

      public EditRerollShopSlotsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RerollShopSlotsEvent = new RerollShopSlots();
                RerollShopSlotsEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopSlotsEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RerollShopSlotsEvent != null && __isset.rerollShopSlotsEvent) {
          field.Name = "rerollShopSlotsEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RerollShopSlotsEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopSlotsEvent_args(");
        sb.Append("RerollShopSlotsEvent: ");
        sb.Append(RerollShopSlotsEvent== null ? "<null>" : RerollShopSlotsEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopSlotsEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopSlotsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopSlotsEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopSlotsEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPrices_args : TBase
    {

      public GetRerollShopPrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPrices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPrices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPrices_result : TBase
    {
      private RerollShopPricesResponse _success;

      public RerollShopPricesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopPricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPriceById_result : TBase
    {
      private RerollShopPriceByIdResponse _success;

      public RerollShopPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopPriceEvent_args : TBase
    {
      private RerollShopPrice _rerollShopPriceEvent;

      public RerollShopPrice RerollShopPriceEvent
      {
        get
        {
          return _rerollShopPriceEvent;
        }
        set
        {
          __isset.rerollShopPriceEvent = true;
          this._rerollShopPriceEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rerollShopPriceEvent;
      }

      public AddRerollShopPriceEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RerollShopPriceEvent = new RerollShopPrice();
                RerollShopPriceEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopPriceEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RerollShopPriceEvent != null && __isset.rerollShopPriceEvent) {
          field.Name = "rerollShopPriceEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RerollShopPriceEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopPriceEvent_args(");
        sb.Append("RerollShopPriceEvent: ");
        sb.Append(RerollShopPriceEvent== null ? "<null>" : RerollShopPriceEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopPriceEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopPriceEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopPriceEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopPriceEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopPriceEvent_args : TBase
    {
      private RerollShopPrice _rerollShopPriceEvent;

      public RerollShopPrice RerollShopPriceEvent
      {
        get
        {
          return _rerollShopPriceEvent;
        }
        set
        {
          __isset.rerollShopPriceEvent = true;
          this._rerollShopPriceEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rerollShopPriceEvent;
      }

      public EditRerollShopPriceEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RerollShopPriceEvent = new RerollShopPrice();
                RerollShopPriceEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopPriceEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RerollShopPriceEvent != null && __isset.rerollShopPriceEvent) {
          field.Name = "rerollShopPriceEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RerollShopPriceEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopPriceEvent_args(");
        sb.Append("RerollShopPriceEvent: ");
        sb.Append(RerollShopPriceEvent== null ? "<null>" : RerollShopPriceEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopPriceEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopPriceEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopPriceEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopPriceEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReforgeTalentPrice_args : TBase
    {

      public GetReforgeTalentPrice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReforgeTalentPrice_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReforgeTalentPrice_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReforgeTalentPrice_result : TBase
    {
      private ReforgeTalentPriceResponse _success;

      public ReforgeTalentPriceResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetReforgeTalentPrice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReforgeTalentPriceResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReforgeTalentPrice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReforgeTalentPrice_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReforgeTalentPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetReforgeTalentPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReforgeTalentPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReforgeTalentPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReforgeTalentPriceById_result : TBase
    {
      private ReforgeTalentPriceByIdResponse _success;

      public ReforgeTalentPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetReforgeTalentPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReforgeTalentPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReforgeTalentPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReforgeTalentPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddReforgeTalentPriceEvent_args : TBase
    {
      private ReforgeTalentPrices _reforgeTalentPriceEvent;

      public ReforgeTalentPrices ReforgeTalentPriceEvent
      {
        get
        {
          return _reforgeTalentPriceEvent;
        }
        set
        {
          __isset.reforgeTalentPriceEvent = true;
          this._reforgeTalentPriceEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reforgeTalentPriceEvent;
      }

      public AddReforgeTalentPriceEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ReforgeTalentPriceEvent = new ReforgeTalentPrices();
                ReforgeTalentPriceEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddReforgeTalentPriceEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ReforgeTalentPriceEvent != null && __isset.reforgeTalentPriceEvent) {
          field.Name = "reforgeTalentPriceEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ReforgeTalentPriceEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddReforgeTalentPriceEvent_args(");
        sb.Append("ReforgeTalentPriceEvent: ");
        sb.Append(ReforgeTalentPriceEvent== null ? "<null>" : ReforgeTalentPriceEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddReforgeTalentPriceEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddReforgeTalentPriceEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddReforgeTalentPriceEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddReforgeTalentPriceEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditReforgeTalentPriceEvent_args : TBase
    {
      private ReforgeTalentPrices _reforgeTalentPriceEvent;

      public ReforgeTalentPrices ReforgeTalentPriceEvent
      {
        get
        {
          return _reforgeTalentPriceEvent;
        }
        set
        {
          __isset.reforgeTalentPriceEvent = true;
          this._reforgeTalentPriceEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reforgeTalentPriceEvent;
      }

      public EditReforgeTalentPriceEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ReforgeTalentPriceEvent = new ReforgeTalentPrices();
                ReforgeTalentPriceEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditReforgeTalentPriceEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ReforgeTalentPriceEvent != null && __isset.reforgeTalentPriceEvent) {
          field.Name = "reforgeTalentPriceEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ReforgeTalentPriceEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditReforgeTalentPriceEvent_args(");
        sb.Append("ReforgeTalentPriceEvent: ");
        sb.Append(ReforgeTalentPriceEvent== null ? "<null>" : ReforgeTalentPriceEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditReforgeTalentPriceEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditReforgeTalentPriceEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditReforgeTalentPriceEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditReforgeTalentPriceEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupPrices_args : TBase
    {

      public GetRerollShopGroupPrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupPrices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupPrices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupPrices_result : TBase
    {
      private RerollShopGroupPricesResponse _success;

      public RerollShopGroupPricesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupPricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopGroupPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupPriceById_result : TBase
    {
      private RerollShopGroupPriceByIdResponse _success;

      public RerollShopGroupPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupPricesEvent_args : TBase
    {
      private RerollShopGroupPriceEvent _groupEvent;

      public RerollShopGroupPriceEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public AddRerollShopGroupPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupPriceEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupPricesEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopGroupPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupPricesEvent_args : TBase
    {
      private RerollShopGroupPriceEvent _groupEvent;

      public RerollShopGroupPriceEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public EditRerollShopGroupPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupPriceEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupPricesEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopGroupPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupCurrencies_args : TBase
    {

      public GetRerollShopGroupCurrencies_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupCurrencies_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupCurrencies_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupCurrencies_result : TBase
    {
      private RerollShopGroupCurrenciesResponse _success;

      public RerollShopGroupCurrenciesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupCurrencies_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupCurrenciesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupCurrencies_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupCurrencies_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupCurrenciesById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopGroupCurrenciesById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupCurrenciesById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupCurrenciesById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupCurrenciesById_result : TBase
    {
      private RerollShopGroupCurrenciesByIdResponse _success;

      public RerollShopGroupCurrenciesByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupCurrenciesById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupCurrenciesByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupCurrenciesById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupCurrenciesById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupCurrenciesEvent_args : TBase
    {
      private RerollShopGroupCurrenciesEvent _groupEvent;

      public RerollShopGroupCurrenciesEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public AddRerollShopGroupCurrenciesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupCurrenciesEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupCurrenciesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupCurrenciesEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupCurrenciesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopGroupCurrenciesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupCurrenciesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupCurrenciesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupCurrenciesEvent_args : TBase
    {
      private RerollShopGroupCurrenciesEvent _groupEvent;

      public RerollShopGroupCurrenciesEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public EditRerollShopGroupCurrenciesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupCurrenciesEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupCurrenciesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupCurrenciesEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupCurrenciesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopGroupCurrenciesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupCurrenciesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupCurrenciesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotPrices_args : TBase
    {

      public GetRerollShopSlotPrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotPrices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotPrices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotPrices_result : TBase
    {
      private RerollShopSlotPricesResponse _success;

      public RerollShopSlotPricesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopSlotPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopSlotPricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopSlotPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotPriceById_result : TBase
    {
      private RerollShopSlotPriceByIdResponse _success;

      public RerollShopSlotPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopSlotPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopSlotPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopSlotPricesEvent_args : TBase
    {
      private RerollShopSlotPriceEvent _groupEvent;

      public RerollShopSlotPriceEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public AddRerollShopSlotPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopSlotPriceEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopSlotPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopSlotPricesEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopSlotPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopSlotPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopSlotPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopSlotPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopSlotPricesEvent_args : TBase
    {
      private RerollShopSlotPriceEvent _groupEvent;

      public RerollShopSlotPriceEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public EditRerollShopSlotPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopSlotPriceEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopSlotPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopSlotPricesEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopSlotPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopSlotPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopSlotPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopSlotPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupProbabilities_args : TBase
    {

      public GetRerollShopGroupProbabilities_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupProbabilities_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupProbabilities_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupProbabilities_result : TBase
    {
      private RerollShopGroupProbabilitiesResponse _success;

      public RerollShopGroupProbabilitiesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupProbabilities_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupProbabilitiesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupProbabilities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupProbabilities_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupProbabilityById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopGroupProbabilityById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupProbabilityById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupProbabilityById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupProbabilityById_result : TBase
    {
      private RerollShopGroupProbabilityByIdResponse _success;

      public RerollShopGroupProbabilityByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupProbabilityById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupProbabilityByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupProbabilityById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupProbabilityById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupProbabilityEvent_args : TBase
    {
      private RerollShopGroupProbabilityEvent _groupEvent;

      public RerollShopGroupProbabilityEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public AddRerollShopGroupProbabilityEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupProbabilityEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupProbabilityEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupProbabilityEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupProbabilityEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopGroupProbabilityEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupProbabilityEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupProbabilityEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupProbabilityEvent_args : TBase
    {
      private RerollShopGroupProbabilityEvent _groupEvent;

      public RerollShopGroupProbabilityEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public EditRerollShopGroupProbabilityEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupProbabilityEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupProbabilityEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupProbabilityEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupProbabilityEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopGroupProbabilityEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupProbabilityEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupProbabilityEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotAmount_args : TBase
    {

      public GetRerollShopSlotAmount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotAmount_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotAmount_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotAmount_result : TBase
    {
      private RerollShopSlotAmountsResponse _success;

      public RerollShopSlotAmountsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopSlotAmount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopSlotAmountsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotAmount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotAmount_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotAmountById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopSlotAmountById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotAmountById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotAmountById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopSlotAmountById_result : TBase
    {
      private RerollShopSlotAmountByIdResponse _success;

      public RerollShopSlotAmountByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopSlotAmountById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopSlotAmountByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopSlotAmountById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopSlotAmountById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopSlotAmountsEvent_args : TBase
    {
      private RerollShopSlotAmountEvent _groupEvent;

      public RerollShopSlotAmountEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public AddRerollShopSlotAmountsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopSlotAmountEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopSlotAmountsEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopSlotAmountsEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopSlotAmountsEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopSlotAmountsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopSlotAmountsEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopSlotAmountsEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopSlotAmountsEvent_args : TBase
    {
      private RerollShopSlotAmountEvent _groupEvent;

      public RerollShopSlotAmountEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public EditRerollShopSlotAmountsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopSlotAmountEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopSlotAmountsEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopSlotAmountsEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopSlotAmountsEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopSlotAmountsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopSlotAmountsEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopSlotAmountsEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFirstBuyPrices_args : TBase
    {

      public GetFirstBuyPrices_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFirstBuyPrices_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFirstBuyPrices_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFirstBuyPrices_result : TBase
    {
      private FirstBuyGoldPricesResponse _success;

      public FirstBuyGoldPricesResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFirstBuyPrices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FirstBuyGoldPricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFirstBuyPrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFirstBuyPrices_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFirstBuyPriceById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetFirstBuyPriceById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFirstBuyPriceById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFirstBuyPriceById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFirstBuyPriceById_result : TBase
    {
      private FirstBuyGoldPriceByIdResponse _success;

      public FirstBuyGoldPriceByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFirstBuyPriceById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FirstBuyGoldPriceByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetFirstBuyPriceById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetFirstBuyPriceById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddFirstBuyPricesEvent_args : TBase
    {
      private FirstBuyGoldPriceEvent _firstBuyEvent;

      public FirstBuyGoldPriceEvent FirstBuyEvent
      {
        get
        {
          return _firstBuyEvent;
        }
        set
        {
          __isset.firstBuyEvent = true;
          this._firstBuyEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstBuyEvent;
      }

      public AddFirstBuyPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                FirstBuyEvent = new FirstBuyGoldPriceEvent();
                FirstBuyEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddFirstBuyPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FirstBuyEvent != null && __isset.firstBuyEvent) {
          field.Name = "firstBuyEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          FirstBuyEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddFirstBuyPricesEvent_args(");
        sb.Append("FirstBuyEvent: ");
        sb.Append(FirstBuyEvent== null ? "<null>" : FirstBuyEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddFirstBuyPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddFirstBuyPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddFirstBuyPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddFirstBuyPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditFirstBuyPricesEvent_args : TBase
    {
      private FirstBuyGoldPriceEvent _firstBuyEvent;

      public FirstBuyGoldPriceEvent FirstBuyEvent
      {
        get
        {
          return _firstBuyEvent;
        }
        set
        {
          __isset.firstBuyEvent = true;
          this._firstBuyEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstBuyEvent;
      }

      public EditFirstBuyPricesEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                FirstBuyEvent = new FirstBuyGoldPriceEvent();
                FirstBuyEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditFirstBuyPricesEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FirstBuyEvent != null && __isset.firstBuyEvent) {
          field.Name = "firstBuyEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          FirstBuyEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditFirstBuyPricesEvent_args(");
        sb.Append("FirstBuyEvent: ");
        sb.Append(FirstBuyEvent== null ? "<null>" : FirstBuyEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditFirstBuyPricesEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditFirstBuyPricesEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditFirstBuyPricesEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditFirstBuyPricesEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPremiumNotInactive_args : TBase
    {

      public GetRerollShopPremiumNotInactive_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPremiumNotInactive_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPremiumNotInactive_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPremiumNotInactive_result : TBase
    {
      private RerollShopPremiumNotInactiveResponse _success;

      public RerollShopPremiumNotInactiveResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopPremiumNotInactive_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopPremiumNotInactiveResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPremiumNotInactive_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPremiumNotInactive_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPremiumNotInactiveById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopPremiumNotInactiveById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPremiumNotInactiveById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPremiumNotInactiveById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopPremiumNotInactiveById_result : TBase
    {
      private RerollShopPremiumNotInactiveByIdResponse _success;

      public RerollShopPremiumNotInactiveByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopPremiumNotInactiveById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopPremiumNotInactiveByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopPremiumNotInactiveById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopPremiumNotInactiveById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopPremiumNotInactiveEvent_args : TBase
    {
      private RerollShopPremiumNotInactiveEvent _rerollShopPremiumNotInactiveEvent;

      public RerollShopPremiumNotInactiveEvent RerollShopPremiumNotInactiveEvent
      {
        get
        {
          return _rerollShopPremiumNotInactiveEvent;
        }
        set
        {
          __isset.rerollShopPremiumNotInactiveEvent = true;
          this._rerollShopPremiumNotInactiveEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rerollShopPremiumNotInactiveEvent;
      }

      public AddRerollShopPremiumNotInactiveEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RerollShopPremiumNotInactiveEvent = new RerollShopPremiumNotInactiveEvent();
                RerollShopPremiumNotInactiveEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopPremiumNotInactiveEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RerollShopPremiumNotInactiveEvent != null && __isset.rerollShopPremiumNotInactiveEvent) {
          field.Name = "rerollShopPremiumNotInactiveEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RerollShopPremiumNotInactiveEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopPremiumNotInactiveEvent_args(");
        sb.Append("RerollShopPremiumNotInactiveEvent: ");
        sb.Append(RerollShopPremiumNotInactiveEvent== null ? "<null>" : RerollShopPremiumNotInactiveEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopPremiumNotInactiveEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopPremiumNotInactiveEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopPremiumNotInactiveEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopPremiumNotInactiveEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopPremiumNotInactiveEvent_args : TBase
    {
      private RerollShopPremiumNotInactiveEvent _rerollShopPremiumNotInactiveEvent;

      public RerollShopPremiumNotInactiveEvent RerollShopPremiumNotInactiveEvent
      {
        get
        {
          return _rerollShopPremiumNotInactiveEvent;
        }
        set
        {
          __isset.rerollShopPremiumNotInactiveEvent = true;
          this._rerollShopPremiumNotInactiveEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rerollShopPremiumNotInactiveEvent;
      }

      public EditRerollShopPremiumNotInactiveEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RerollShopPremiumNotInactiveEvent = new RerollShopPremiumNotInactiveEvent();
                RerollShopPremiumNotInactiveEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopPremiumNotInactiveEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RerollShopPremiumNotInactiveEvent != null && __isset.rerollShopPremiumNotInactiveEvent) {
          field.Name = "rerollShopPremiumNotInactiveEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RerollShopPremiumNotInactiveEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopPremiumNotInactiveEvent_args(");
        sb.Append("RerollShopPremiumNotInactiveEvent: ");
        sb.Append(RerollShopPremiumNotInactiveEvent== null ? "<null>" : RerollShopPremiumNotInactiveEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopPremiumNotInactiveEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopPremiumNotInactiveEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopPremiumNotInactiveEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopPremiumNotInactiveEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupSlots_args : TBase
    {

      public GetRerollShopGroupSlots_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupSlots_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupSlots_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupSlots_result : TBase
    {
      private RerollShopGroupSlotsResponse _success;

      public RerollShopGroupSlotsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupSlots_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupSlotsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupSlots_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupSlots_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupSlotsById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopGroupSlotsById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupSlotsById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupSlotsById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopGroupSlotsById_result : TBase
    {
      private RerollShopGroupSlotsByIdResponse _success;

      public RerollShopGroupSlotsByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopGroupSlotsById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopGroupSlotsByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopGroupSlotsById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopGroupSlotsById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupSlotsEvent_args : TBase
    {
      private RerollShopGroupSlotsEvent _groupEvent;

      public RerollShopGroupSlotsEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public AddRerollShopGroupSlotsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupSlotsEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupSlotsEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupSlotsEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopGroupSlotsEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopGroupSlotsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopGroupSlotsEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopGroupSlotsEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupSlotsEvent_args : TBase
    {
      private RerollShopGroupSlotsEvent _groupEvent;

      public RerollShopGroupSlotsEvent GroupEvent
      {
        get
        {
          return _groupEvent;
        }
        set
        {
          __isset.groupEvent = true;
          this._groupEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupEvent;
      }

      public EditRerollShopGroupSlotsEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GroupEvent = new RerollShopGroupSlotsEvent();
                GroupEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupSlotsEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupEvent != null && __isset.groupEvent) {
          field.Name = "groupEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GroupEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupSlotsEvent_args(");
        sb.Append("GroupEvent: ");
        sb.Append(GroupEvent== null ? "<null>" : GroupEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopGroupSlotsEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopGroupSlotsEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopGroupSlotsEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopGroupSlotsEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopBanners_args : TBase
    {

      public GetRerollShopBanners_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopBanners_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopBanners_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopBanners_result : TBase
    {
      private RerollShopBannersResponse _success;

      public RerollShopBannersResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopBanners_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopBannersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopBanners_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopBanners_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopBannerById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopBannerById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopBannerById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopBannerById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopBannerById_result : TBase
    {
      private RerollShopBannerByIdResponse _success;

      public RerollShopBannerByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopBannerById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopBannerByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopBannerById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopBannerById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopBanner_args : TBase
    {
      private RerollShopBanner _banner;

      public RerollShopBanner Banner
      {
        get
        {
          return _banner;
        }
        set
        {
          __isset.banner = true;
          this._banner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool banner;
      }

      public AddRerollShopBanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Banner = new RerollShopBanner();
                Banner.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopBanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Banner != null && __isset.banner) {
          field.Name = "banner";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Banner.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopBanner_args(");
        sb.Append("Banner: ");
        sb.Append(Banner== null ? "<null>" : Banner.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopBanner_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopBanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopBanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopBanner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopBanner_args : TBase
    {
      private RerollShopBanner _banner;

      public RerollShopBanner Banner
      {
        get
        {
          return _banner;
        }
        set
        {
          __isset.banner = true;
          this._banner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool banner;
      }

      public EditRerollShopBanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Banner = new RerollShopBanner();
                Banner.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopBanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Banner != null && __isset.banner) {
          field.Name = "banner";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Banner.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopBanner_args(");
        sb.Append("Banner: ");
        sb.Append(Banner== null ? "<null>" : Banner.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopBanner_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopBanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopBanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopBanner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopTooltips_args : TBase
    {

      public GetRerollShopTooltips_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopTooltips_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopTooltips_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopTooltips_result : TBase
    {
      private RerollShopTooltipsResponse _success;

      public RerollShopTooltipsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopTooltips_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopTooltipsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopTooltips_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopTooltips_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopTooltipById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRerollShopTooltipById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopTooltipById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopTooltipById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRerollShopTooltipById_result : TBase
    {
      private RerollShopTooltipByIdResponse _success;

      public RerollShopTooltipByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRerollShopTooltipById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RerollShopTooltipByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRerollShopTooltipById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRerollShopTooltipById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopTooltip_args : TBase
    {
      private RerollShopTooltip _tooltip;

      public RerollShopTooltip Tooltip
      {
        get
        {
          return _tooltip;
        }
        set
        {
          __isset.tooltip = true;
          this._tooltip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool tooltip;
      }

      public AddRerollShopTooltip_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tooltip = new RerollShopTooltip();
                Tooltip.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopTooltip_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tooltip != null && __isset.tooltip) {
          field.Name = "tooltip";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tooltip.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopTooltip_args(");
        sb.Append("Tooltip: ");
        sb.Append(Tooltip== null ? "<null>" : Tooltip.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRerollShopTooltip_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRerollShopTooltip_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRerollShopTooltip_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRerollShopTooltip_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopTooltip_args : TBase
    {
      private RerollShopTooltip _tooltip;

      public RerollShopTooltip Tooltip
      {
        get
        {
          return _tooltip;
        }
        set
        {
          __isset.tooltip = true;
          this._tooltip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool tooltip;
      }

      public EditRerollShopTooltip_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tooltip = new RerollShopTooltip();
                Tooltip.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopTooltip_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tooltip != null && __isset.tooltip) {
          field.Name = "tooltip";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tooltip.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopTooltip_args(");
        sb.Append("Tooltip: ");
        sb.Append(Tooltip== null ? "<null>" : Tooltip.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRerollShopTooltip_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRerollShopTooltip_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRerollShopTooltip_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRerollShopTooltip_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRollEvents_args : TBase
    {

      public GetRollEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRollEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRollEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRollEvents_result : TBase
    {
      private RollEventsResponse _success;

      public RollEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRollEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RollEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRollEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRollEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRollEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetRollEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRollEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRollEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRollEventById_result : TBase
    {
      private RollEventByIdResponse _success;

      public RollEventByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRollEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RollEventByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRollEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRollEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRollEvent_args : TBase
    {
      private RollEvent _rollEvent;

      public RollEvent RollEvent
      {
        get
        {
          return _rollEvent;
        }
        set
        {
          __isset.rollEvent = true;
          this._rollEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rollEvent;
      }

      public AddRollEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RollEvent = new RollEvent();
                RollEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRollEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RollEvent != null && __isset.rollEvent) {
          field.Name = "rollEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RollEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRollEvent_args(");
        sb.Append("RollEvent: ");
        sb.Append(RollEvent== null ? "<null>" : RollEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddRollEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddRollEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddRollEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddRollEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRollEvent_args : TBase
    {
      private RollEvent _rollEvent;

      public RollEvent RollEvent
      {
        get
        {
          return _rollEvent;
        }
        set
        {
          __isset.rollEvent = true;
          this._rollEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rollEvent;
      }

      public EditRollEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RollEvent = new RollEvent();
                RollEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRollEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RollEvent != null && __isset.rollEvent) {
          field.Name = "rollEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RollEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRollEvent_args(");
        sb.Append("RollEvent: ");
        sb.Append(RollEvent== null ? "<null>" : RollEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditRollEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditRollEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditRollEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditRollEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetQuestEvents_args : TBase
    {

      public GetQuestEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetQuestEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetQuestEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetQuestEvents_result : TBase
    {
      private QuestEventsResponse _success;

      public QuestEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetQuestEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QuestEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetQuestEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetQuestEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetQuestEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetQuestEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetQuestEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetQuestEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetQuestEventById_result : TBase
    {
      private QuestEventByIdResponse _success;

      public QuestEventByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetQuestEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QuestEventByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetQuestEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetQuestEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddQuestEvent_args : TBase
    {
      private QuestEvent _questEvent;

      public QuestEvent QuestEvent
      {
        get
        {
          return _questEvent;
        }
        set
        {
          __isset.questEvent = true;
          this._questEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool questEvent;
      }

      public AddQuestEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                QuestEvent = new QuestEvent();
                QuestEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddQuestEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (QuestEvent != null && __isset.questEvent) {
          field.Name = "questEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          QuestEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddQuestEvent_args(");
        sb.Append("QuestEvent: ");
        sb.Append(QuestEvent== null ? "<null>" : QuestEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddQuestEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddQuestEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddQuestEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddQuestEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditQuestEvent_args : TBase
    {
      private QuestEvent _questEvent;

      public QuestEvent QuestEvent
      {
        get
        {
          return _questEvent;
        }
        set
        {
          __isset.questEvent = true;
          this._questEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool questEvent;
      }

      public EditQuestEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                QuestEvent = new QuestEvent();
                QuestEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditQuestEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (QuestEvent != null && __isset.questEvent) {
          field.Name = "questEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          QuestEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditQuestEvent_args(");
        sb.Append("QuestEvent: ");
        sb.Append(QuestEvent== null ? "<null>" : QuestEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditQuestEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditQuestEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditQuestEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditQuestEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTradeEvents_args : TBase
    {

      public GetTradeEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTradeEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTradeEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTradeEvents_result : TBase
    {
      private TradeEventsResponse _success;

      public TradeEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTradeEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TradeEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTradeEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTradeEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTradeEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetTradeEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTradeEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTradeEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTradeEventById_result : TBase
    {
      private TradeEventByIdResponse _success;

      public TradeEventByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTradeEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TradeEventByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTradeEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTradeEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTradeEvent_args : TBase
    {
      private TradeEventModel _tradeEvent;

      public TradeEventModel TradeEvent
      {
        get
        {
          return _tradeEvent;
        }
        set
        {
          __isset.tradeEvent = true;
          this._tradeEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool tradeEvent;
      }

      public AddTradeEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TradeEvent = new TradeEventModel();
                TradeEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTradeEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TradeEvent != null && __isset.tradeEvent) {
          field.Name = "tradeEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TradeEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTradeEvent_args(");
        sb.Append("TradeEvent: ");
        sb.Append(TradeEvent== null ? "<null>" : TradeEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddTradeEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddTradeEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddTradeEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddTradeEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTradeEvent_args : TBase
    {
      private TradeEventModel _tradeEvent;

      public TradeEventModel TradeEvent
      {
        get
        {
          return _tradeEvent;
        }
        set
        {
          __isset.tradeEvent = true;
          this._tradeEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool tradeEvent;
      }

      public EditTradeEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TradeEvent = new TradeEventModel();
                TradeEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTradeEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TradeEvent != null && __isset.tradeEvent) {
          field.Name = "tradeEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TradeEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTradeEvent_args(");
        sb.Append("TradeEvent: ");
        sb.Append(TradeEvent== null ? "<null>" : TradeEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditTradeEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditTradeEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditTradeEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditTradeEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSeasonEvents_args : TBase
    {

      public GetSeasonEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSeasonEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSeasonEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSeasonEvents_result : TBase
    {
      private SeasonEventsResponse _success;

      public SeasonEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSeasonEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SeasonEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSeasonEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSeasonEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSeasonEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetSeasonEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSeasonEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSeasonEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSeasonEventById_result : TBase
    {
      private SeasonEventByIdResponse _success;

      public SeasonEventByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSeasonEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SeasonEventByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSeasonEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSeasonEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddSeasonEvent_args : TBase
    {
      private SeasonEvent _seasonEvent;

      public SeasonEvent SeasonEvent
      {
        get
        {
          return _seasonEvent;
        }
        set
        {
          __isset.seasonEvent = true;
          this._seasonEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seasonEvent;
      }

      public AddSeasonEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SeasonEvent = new SeasonEvent();
                SeasonEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSeasonEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SeasonEvent != null && __isset.seasonEvent) {
          field.Name = "seasonEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SeasonEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSeasonEvent_args(");
        sb.Append("SeasonEvent: ");
        sb.Append(SeasonEvent== null ? "<null>" : SeasonEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddSeasonEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddSeasonEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddSeasonEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddSeasonEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSeasonEvent_args : TBase
    {
      private SeasonEvent _seasonEvent;

      public SeasonEvent SeasonEvent
      {
        get
        {
          return _seasonEvent;
        }
        set
        {
          __isset.seasonEvent = true;
          this._seasonEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seasonEvent;
      }

      public EditSeasonEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SeasonEvent = new SeasonEvent();
                SeasonEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSeasonEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SeasonEvent != null && __isset.seasonEvent) {
          field.Name = "seasonEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SeasonEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSeasonEvent_args(");
        sb.Append("SeasonEvent: ");
        sb.Append(SeasonEvent== null ? "<null>" : SeasonEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditSeasonEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditSeasonEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditSeasonEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditSeasonEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDonateEvents_args : TBase
    {

      public GetDonateEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDonateEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDonateEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDonateEvents_result : TBase
    {
      private DonateEventsResponse _success;

      public DonateEventsResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDonateEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DonateEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDonateEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDonateEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDonateEventById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetDonateEventById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDonateEventById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDonateEventById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDonateEventById_result : TBase
    {
      private DonateEventByIdResponse _success;

      public DonateEventByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDonateEventById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DonateEventByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDonateEventById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDonateEventById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDonateEvent_args : TBase
    {
      private DonateEvent _donateEvent;

      public DonateEvent DonateEvent
      {
        get
        {
          return _donateEvent;
        }
        set
        {
          __isset.donateEvent = true;
          this._donateEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool donateEvent;
      }

      public AddDonateEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DonateEvent = new DonateEvent();
                DonateEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDonateEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DonateEvent != null && __isset.donateEvent) {
          field.Name = "donateEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DonateEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDonateEvent_args(");
        sb.Append("DonateEvent: ");
        sb.Append(DonateEvent== null ? "<null>" : DonateEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddDonateEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddDonateEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDonateEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDonateEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditDonateEvent_args : TBase
    {
      private DonateEvent _donateEvent;

      public DonateEvent DonateEvent
      {
        get
        {
          return _donateEvent;
        }
        set
        {
          __isset.donateEvent = true;
          this._donateEvent = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool donateEvent;
      }

      public EditDonateEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DonateEvent = new DonateEvent();
                DonateEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditDonateEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DonateEvent != null && __isset.donateEvent) {
          field.Name = "donateEvent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DonateEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditDonateEvent_args(");
        sb.Append("DonateEvent: ");
        sb.Append(DonateEvent== null ? "<null>" : DonateEvent.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditDonateEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditDonateEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditDonateEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditDonateEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGWEvents_args : TBase
    {

      public GetGWEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGWEvents_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGWEvents_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGWEvents_result : TBase
    {
      private GWEventsModelResponse _success;

      public GWEventsModelResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGWEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GWEventsModelResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGWEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGWEvents_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGWEventsModelById_args : TBase
    {
      private int _persistentId;

      public int PersistentId
      {
        get
        {
          return _persistentId;
        }
        set
        {
          __isset.persistentId = true;
          this._persistentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool persistentId;
      }

      public GetGWEventsModelById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersistentId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGWEventsModelById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.persistentId) {
          field.Name = "persistentId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersistentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGWEventsModelById_args(");
        sb.Append("PersistentId: ");
        sb.Append(PersistentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGWEventsModelById_result : TBase
    {
      private GWEventsModelByIdResponse _success;

      public GWEventsModelByIdResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGWEventsModelById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GWEventsModelByIdResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGWEventsModelById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGWEventsModelById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditGWEvent_args : TBase
    {
      private GWEventModel _gwEventModel;
      private string _gmLogin;

      public GWEventModel GwEventModel
      {
        get
        {
          return _gwEventModel;
        }
        set
        {
          __isset.gwEventModel = true;
          this._gwEventModel = value;
        }
      }

      public string GmLogin
      {
        get
        {
          return _gmLogin;
        }
        set
        {
          __isset.gmLogin = true;
          this._gmLogin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool gwEventModel;
        public bool gmLogin;
      }

      public EditGWEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                GwEventModel = new GWEventModel();
                GwEventModel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GmLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditGWEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GwEventModel != null && __isset.gwEventModel) {
          field.Name = "gwEventModel";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          GwEventModel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GmLogin != null && __isset.gmLogin) {
          field.Name = "gmLogin";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GmLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditGWEvent_args(");
        sb.Append("GwEventModel: ");
        sb.Append(GwEventModel== null ? "<null>" : GwEventModel.ToString());
        sb.Append(",GmLogin: ");
        sb.Append(GmLogin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EditGWEvent_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EditGWEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EditGWEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EditGWEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountFriends_args : TBase
    {
      private long _auid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
      }

      public GetAccountFriends_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountFriends_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountFriends_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAccountFriends_result : TBase
    {
      private FriendInfoResponse _success;

      public FriendInfoResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAccountFriends_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FriendInfoResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAccountFriends_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAccountFriends_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveFriend_args : TBase
    {
      private long _auid;
      private long _friendAuid;

      public long Auid
      {
        get
        {
          return _auid;
        }
        set
        {
          __isset.auid = true;
          this._auid = value;
        }
      }

      public long FriendAuid
      {
        get
        {
          return _friendAuid;
        }
        set
        {
          __isset.friendAuid = true;
          this._friendAuid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auid;
        public bool friendAuid;
      }

      public RemoveFriend_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Auid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                FriendAuid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveFriend_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.auid) {
          field.Name = "auid";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Auid);
          oprot.WriteFieldEnd();
        }
        if (__isset.friendAuid) {
          field.Name = "friendAuid";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FriendAuid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveFriend_args(");
        sb.Append("Auid: ");
        sb.Append(Auid);
        sb.Append(",FriendAuid: ");
        sb.Append(FriendAuid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveFriend_result : TBase
    {
      private RequestResult _success;

      /// <summary>
      /// 
      /// <seealso cref="RequestResult"/>
      /// </summary>
      public RequestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveFriend_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (RequestResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveFriend_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveFriend_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
