/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildSiegeParticipantInfo : TBase
  {
    private long _guildid;
    private int _guildrating;
    private int _starttimestamp;
    private int _endtimestamp;
    private int _siegepoints;
    private int _guildpointsprice;

    public long Guildid
    {
      get
      {
        return _guildid;
      }
      set
      {
        __isset.guildid = true;
        this._guildid = value;
      }
    }

    public int Guildrating
    {
      get
      {
        return _guildrating;
      }
      set
      {
        __isset.guildrating = true;
        this._guildrating = value;
      }
    }

    public int Starttimestamp
    {
      get
      {
        return _starttimestamp;
      }
      set
      {
        __isset.starttimestamp = true;
        this._starttimestamp = value;
      }
    }

    public int Endtimestamp
    {
      get
      {
        return _endtimestamp;
      }
      set
      {
        __isset.endtimestamp = true;
        this._endtimestamp = value;
      }
    }

    public int Siegepoints
    {
      get
      {
        return _siegepoints;
      }
      set
      {
        __isset.siegepoints = true;
        this._siegepoints = value;
      }
    }

    public int Guildpointsprice
    {
      get
      {
        return _guildpointsprice;
      }
      set
      {
        __isset.guildpointsprice = true;
        this._guildpointsprice = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guildid;
      public bool guildrating;
      public bool starttimestamp;
      public bool endtimestamp;
      public bool siegepoints;
      public bool guildpointsprice;
    }

    public GuildSiegeParticipantInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Guildid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Guildrating = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Starttimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Endtimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Siegepoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Guildpointsprice = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildSiegeParticipantInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.guildid) {
        field.Name = "guildid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Guildid);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildrating) {
        field.Name = "guildrating";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildrating);
        oprot.WriteFieldEnd();
      }
      if (__isset.starttimestamp) {
        field.Name = "starttimestamp";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Starttimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.endtimestamp) {
        field.Name = "endtimestamp";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Endtimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.siegepoints) {
        field.Name = "siegepoints";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Siegepoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildpointsprice) {
        field.Name = "guildpointsprice";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildpointsprice);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildSiegeParticipantInfo(");
      sb.Append("Guildid: ");
      sb.Append(Guildid);
      sb.Append(",Guildrating: ");
      sb.Append(Guildrating);
      sb.Append(",Starttimestamp: ");
      sb.Append(Starttimestamp);
      sb.Append(",Endtimestamp: ");
      sb.Append(Endtimestamp);
      sb.Append(",Siegepoints: ");
      sb.Append(Siegepoints);
      sb.Append(",Guildpointsprice: ");
      sb.Append(Guildpointsprice);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
