/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FlagResponse : TBase
  {
    private RequestResult _result;
    private List<Flag> _ownedFlags;
    private List<Flag> _adminFlags;
    private List<Flag> _notOwnedFlags;

    /// <summary>
    /// 
    /// <seealso cref="RequestResult"/>
    /// </summary>
    public RequestResult Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public List<Flag> OwnedFlags
    {
      get
      {
        return _ownedFlags;
      }
      set
      {
        __isset.ownedFlags = true;
        this._ownedFlags = value;
      }
    }

    public List<Flag> AdminFlags
    {
      get
      {
        return _adminFlags;
      }
      set
      {
        __isset.adminFlags = true;
        this._adminFlags = value;
      }
    }

    public List<Flag> NotOwnedFlags
    {
      get
      {
        return _notOwnedFlags;
      }
      set
      {
        __isset.notOwnedFlags = true;
        this._notOwnedFlags = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool result;
      public bool ownedFlags;
      public bool adminFlags;
      public bool notOwnedFlags;
    }

    public FlagResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Result = (RequestResult)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                OwnedFlags = new List<Flag>();
                TList _list134 = iprot.ReadListBegin();
                for( int _i135 = 0; _i135 < _list134.Count; ++_i135)
                {
                  Flag _elem136 = new Flag();
                  _elem136 = new Flag();
                  _elem136.Read(iprot);
                  OwnedFlags.Add(_elem136);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                AdminFlags = new List<Flag>();
                TList _list137 = iprot.ReadListBegin();
                for( int _i138 = 0; _i138 < _list137.Count; ++_i138)
                {
                  Flag _elem139 = new Flag();
                  _elem139 = new Flag();
                  _elem139.Read(iprot);
                  AdminFlags.Add(_elem139);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                NotOwnedFlags = new List<Flag>();
                TList _list140 = iprot.ReadListBegin();
                for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                {
                  Flag _elem142 = new Flag();
                  _elem142 = new Flag();
                  _elem142.Read(iprot);
                  NotOwnedFlags.Add(_elem142);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FlagResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Result);
        oprot.WriteFieldEnd();
      }
      if (OwnedFlags != null && __isset.ownedFlags) {
        field.Name = "ownedFlags";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, OwnedFlags.Count));
          foreach (Flag _iter143 in OwnedFlags)
          {
            _iter143.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AdminFlags != null && __isset.adminFlags) {
        field.Name = "adminFlags";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AdminFlags.Count));
          foreach (Flag _iter144 in AdminFlags)
          {
            _iter144.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (NotOwnedFlags != null && __isset.notOwnedFlags) {
        field.Name = "notOwnedFlags";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, NotOwnedFlags.Count));
          foreach (Flag _iter145 in NotOwnedFlags)
          {
            _iter145.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FlagResponse(");
      sb.Append("Result: ");
      sb.Append(Result);
      sb.Append(",OwnedFlags: ");
      sb.Append(OwnedFlags);
      sb.Append(",AdminFlags: ");
      sb.Append(AdminFlags);
      sb.Append(",NotOwnedFlags: ");
      sb.Append(NotOwnedFlags);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
