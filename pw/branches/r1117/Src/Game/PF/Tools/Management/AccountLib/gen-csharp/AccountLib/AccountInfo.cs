/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AccountInfo : TBase
  {
    private string _snid;
    private string _snuid;
    private string _login;
    private string _email;
    private string _nickname;
    private bool _online;
    private int _gold;
    private int _silver;
    private int _resource1;
    private int _resource2;
    private int _resource3;
    private int _perl;
    private int _redPerl;
    private long _currentsession;
    private long _registerdate;
    private int _fame;
    private int _reliability;
    private int _fraction;
    private string _location;
    private int _banFlag;
    private long _banned;
    private int _muteFlag;
    private long _muted;
    private bool _isDeveloper;
    private long _auid;
    private Gender _gender;
    private int _nickChanges;
    private int _nickChangesFree;
    private int _fractionChanges;
    private int _fractionChangesFree;
    private long _premiumAccountDate;
    private double _lordRating;
    private double _numberOfWins;
    private int _dodges;
    private long _retiredTime;
    private double _guardRating;
    private double _dailyRating;
    private long _guildid;
    private int _guildBuildingLevel;
    private bool _isSpectator;
    private bool _hasLamp;
    private List<string> _joinedSnids;
    private long _lastPaymentTime;
    private long _lastLampDropTime;
    private bool _isRegularMMAllowed;
    private string _locale;
    private string _muid;
    private string _country;
    private string _region;
    private string _city;
    private string _gmcountry;
    private string _gmregion;
    private string _gmcity;
    private int _cwplayerpoints;
    private int _leaverPoints;
    private bool _isLeaver;
    private bool _isBadBehaviour;
    private bool _canMute;
    private int _PlayerRating;
    private long _PlayerRatingHero;
    private long _PlayerRatingHeroLastPlayed;
    private long _numberOfWinsForPR;
    private int _extraComplaints;
    private long _bruteForceDefenderBan;
    private int _extraSessionComplaints;
    private List<SeasonAwards> _listSeasonsAwards;
    private int _Shard;
    private Dictionary<string, int> _currencies;

    public string Snid
    {
      get
      {
        return _snid;
      }
      set
      {
        __isset.snid = true;
        this._snid = value;
      }
    }

    public string Snuid
    {
      get
      {
        return _snuid;
      }
      set
      {
        __isset.snuid = true;
        this._snuid = value;
      }
    }

    public string Login
    {
      get
      {
        return _login;
      }
      set
      {
        __isset.login = true;
        this._login = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Nickname
    {
      get
      {
        return _nickname;
      }
      set
      {
        __isset.nickname = true;
        this._nickname = value;
      }
    }

    public bool Online
    {
      get
      {
        return _online;
      }
      set
      {
        __isset.online = true;
        this._online = value;
      }
    }

    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public int Silver
    {
      get
      {
        return _silver;
      }
      set
      {
        __isset.silver = true;
        this._silver = value;
      }
    }

    public int Resource1
    {
      get
      {
        return _resource1;
      }
      set
      {
        __isset.resource1 = true;
        this._resource1 = value;
      }
    }

    public int Resource2
    {
      get
      {
        return _resource2;
      }
      set
      {
        __isset.resource2 = true;
        this._resource2 = value;
      }
    }

    public int Resource3
    {
      get
      {
        return _resource3;
      }
      set
      {
        __isset.resource3 = true;
        this._resource3 = value;
      }
    }

    public int Perl
    {
      get
      {
        return _perl;
      }
      set
      {
        __isset.perl = true;
        this._perl = value;
      }
    }

    public int RedPerl
    {
      get
      {
        return _redPerl;
      }
      set
      {
        __isset.redPerl = true;
        this._redPerl = value;
      }
    }

    public long Currentsession
    {
      get
      {
        return _currentsession;
      }
      set
      {
        __isset.currentsession = true;
        this._currentsession = value;
      }
    }

    public long Registerdate
    {
      get
      {
        return _registerdate;
      }
      set
      {
        __isset.registerdate = true;
        this._registerdate = value;
      }
    }

    public int Fame
    {
      get
      {
        return _fame;
      }
      set
      {
        __isset.fame = true;
        this._fame = value;
      }
    }

    public int Reliability
    {
      get
      {
        return _reliability;
      }
      set
      {
        __isset.reliability = true;
        this._reliability = value;
      }
    }

    public int Fraction
    {
      get
      {
        return _fraction;
      }
      set
      {
        __isset.fraction = true;
        this._fraction = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public int BanFlag
    {
      get
      {
        return _banFlag;
      }
      set
      {
        __isset.banFlag = true;
        this._banFlag = value;
      }
    }

    public long Banned
    {
      get
      {
        return _banned;
      }
      set
      {
        __isset.banned = true;
        this._banned = value;
      }
    }

    public int MuteFlag
    {
      get
      {
        return _muteFlag;
      }
      set
      {
        __isset.muteFlag = true;
        this._muteFlag = value;
      }
    }

    public long Muted
    {
      get
      {
        return _muted;
      }
      set
      {
        __isset.muted = true;
        this._muted = value;
      }
    }

    public bool IsDeveloper
    {
      get
      {
        return _isDeveloper;
      }
      set
      {
        __isset.isDeveloper = true;
        this._isDeveloper = value;
      }
    }

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Gender"/>
    /// </summary>
    public Gender Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int NickChanges
    {
      get
      {
        return _nickChanges;
      }
      set
      {
        __isset.nickChanges = true;
        this._nickChanges = value;
      }
    }

    public int NickChangesFree
    {
      get
      {
        return _nickChangesFree;
      }
      set
      {
        __isset.nickChangesFree = true;
        this._nickChangesFree = value;
      }
    }

    public int FractionChanges
    {
      get
      {
        return _fractionChanges;
      }
      set
      {
        __isset.fractionChanges = true;
        this._fractionChanges = value;
      }
    }

    public int FractionChangesFree
    {
      get
      {
        return _fractionChangesFree;
      }
      set
      {
        __isset.fractionChangesFree = true;
        this._fractionChangesFree = value;
      }
    }

    public long PremiumAccountDate
    {
      get
      {
        return _premiumAccountDate;
      }
      set
      {
        __isset.premiumAccountDate = true;
        this._premiumAccountDate = value;
      }
    }

    public double LordRating
    {
      get
      {
        return _lordRating;
      }
      set
      {
        __isset.lordRating = true;
        this._lordRating = value;
      }
    }

    public double NumberOfWins
    {
      get
      {
        return _numberOfWins;
      }
      set
      {
        __isset.numberOfWins = true;
        this._numberOfWins = value;
      }
    }

    public int Dodges
    {
      get
      {
        return _dodges;
      }
      set
      {
        __isset.dodges = true;
        this._dodges = value;
      }
    }

    public long RetiredTime
    {
      get
      {
        return _retiredTime;
      }
      set
      {
        __isset.retiredTime = true;
        this._retiredTime = value;
      }
    }

    public double GuardRating
    {
      get
      {
        return _guardRating;
      }
      set
      {
        __isset.guardRating = true;
        this._guardRating = value;
      }
    }

    public double DailyRating
    {
      get
      {
        return _dailyRating;
      }
      set
      {
        __isset.dailyRating = true;
        this._dailyRating = value;
      }
    }

    public long Guildid
    {
      get
      {
        return _guildid;
      }
      set
      {
        __isset.guildid = true;
        this._guildid = value;
      }
    }

    public int GuildBuildingLevel
    {
      get
      {
        return _guildBuildingLevel;
      }
      set
      {
        __isset.guildBuildingLevel = true;
        this._guildBuildingLevel = value;
      }
    }

    public bool IsSpectator
    {
      get
      {
        return _isSpectator;
      }
      set
      {
        __isset.isSpectator = true;
        this._isSpectator = value;
      }
    }

    public bool HasLamp
    {
      get
      {
        return _hasLamp;
      }
      set
      {
        __isset.hasLamp = true;
        this._hasLamp = value;
      }
    }

    public List<string> JoinedSnids
    {
      get
      {
        return _joinedSnids;
      }
      set
      {
        __isset.joinedSnids = true;
        this._joinedSnids = value;
      }
    }

    public long LastPaymentTime
    {
      get
      {
        return _lastPaymentTime;
      }
      set
      {
        __isset.lastPaymentTime = true;
        this._lastPaymentTime = value;
      }
    }

    public long LastLampDropTime
    {
      get
      {
        return _lastLampDropTime;
      }
      set
      {
        __isset.lastLampDropTime = true;
        this._lastLampDropTime = value;
      }
    }

    public bool IsRegularMMAllowed
    {
      get
      {
        return _isRegularMMAllowed;
      }
      set
      {
        __isset.isRegularMMAllowed = true;
        this._isRegularMMAllowed = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public string Muid
    {
      get
      {
        return _muid;
      }
      set
      {
        __isset.muid = true;
        this._muid = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public string Gmcountry
    {
      get
      {
        return _gmcountry;
      }
      set
      {
        __isset.gmcountry = true;
        this._gmcountry = value;
      }
    }

    public string Gmregion
    {
      get
      {
        return _gmregion;
      }
      set
      {
        __isset.gmregion = true;
        this._gmregion = value;
      }
    }

    public string Gmcity
    {
      get
      {
        return _gmcity;
      }
      set
      {
        __isset.gmcity = true;
        this._gmcity = value;
      }
    }

    public int Cwplayerpoints
    {
      get
      {
        return _cwplayerpoints;
      }
      set
      {
        __isset.cwplayerpoints = true;
        this._cwplayerpoints = value;
      }
    }

    public int LeaverPoints
    {
      get
      {
        return _leaverPoints;
      }
      set
      {
        __isset.leaverPoints = true;
        this._leaverPoints = value;
      }
    }

    public bool IsLeaver
    {
      get
      {
        return _isLeaver;
      }
      set
      {
        __isset.isLeaver = true;
        this._isLeaver = value;
      }
    }

    public bool IsBadBehaviour
    {
      get
      {
        return _isBadBehaviour;
      }
      set
      {
        __isset.isBadBehaviour = true;
        this._isBadBehaviour = value;
      }
    }

    public bool CanMute
    {
      get
      {
        return _canMute;
      }
      set
      {
        __isset.canMute = true;
        this._canMute = value;
      }
    }

    public int PlayerRating
    {
      get
      {
        return _PlayerRating;
      }
      set
      {
        __isset.PlayerRating = true;
        this._PlayerRating = value;
      }
    }

    public long PlayerRatingHero
    {
      get
      {
        return _PlayerRatingHero;
      }
      set
      {
        __isset.PlayerRatingHero = true;
        this._PlayerRatingHero = value;
      }
    }

    public long PlayerRatingHeroLastPlayed
    {
      get
      {
        return _PlayerRatingHeroLastPlayed;
      }
      set
      {
        __isset.PlayerRatingHeroLastPlayed = true;
        this._PlayerRatingHeroLastPlayed = value;
      }
    }

    public long NumberOfWinsForPR
    {
      get
      {
        return _numberOfWinsForPR;
      }
      set
      {
        __isset.numberOfWinsForPR = true;
        this._numberOfWinsForPR = value;
      }
    }

    public int ExtraComplaints
    {
      get
      {
        return _extraComplaints;
      }
      set
      {
        __isset.extraComplaints = true;
        this._extraComplaints = value;
      }
    }

    public long BruteForceDefenderBan
    {
      get
      {
        return _bruteForceDefenderBan;
      }
      set
      {
        __isset.bruteForceDefenderBan = true;
        this._bruteForceDefenderBan = value;
      }
    }

    public int ExtraSessionComplaints
    {
      get
      {
        return _extraSessionComplaints;
      }
      set
      {
        __isset.extraSessionComplaints = true;
        this._extraSessionComplaints = value;
      }
    }

    public List<SeasonAwards> ListSeasonsAwards
    {
      get
      {
        return _listSeasonsAwards;
      }
      set
      {
        __isset.listSeasonsAwards = true;
        this._listSeasonsAwards = value;
      }
    }

    public int Shard
    {
      get
      {
        return _Shard;
      }
      set
      {
        __isset.Shard = true;
        this._Shard = value;
      }
    }

    public Dictionary<string, int> Currencies
    {
      get
      {
        return _currencies;
      }
      set
      {
        __isset.currencies = true;
        this._currencies = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snid;
      public bool snuid;
      public bool login;
      public bool email;
      public bool nickname;
      public bool online;
      public bool gold;
      public bool silver;
      public bool resource1;
      public bool resource2;
      public bool resource3;
      public bool perl;
      public bool redPerl;
      public bool currentsession;
      public bool registerdate;
      public bool fame;
      public bool reliability;
      public bool fraction;
      public bool location;
      public bool banFlag;
      public bool banned;
      public bool muteFlag;
      public bool muted;
      public bool isDeveloper;
      public bool auid;
      public bool gender;
      public bool nickChanges;
      public bool nickChangesFree;
      public bool fractionChanges;
      public bool fractionChangesFree;
      public bool premiumAccountDate;
      public bool lordRating;
      public bool numberOfWins;
      public bool dodges;
      public bool retiredTime;
      public bool guardRating;
      public bool dailyRating;
      public bool guildid;
      public bool guildBuildingLevel;
      public bool isSpectator;
      public bool hasLamp;
      public bool joinedSnids;
      public bool lastPaymentTime;
      public bool lastLampDropTime;
      public bool isRegularMMAllowed;
      public bool locale;
      public bool muid;
      public bool country;
      public bool region;
      public bool city;
      public bool gmcountry;
      public bool gmregion;
      public bool gmcity;
      public bool cwplayerpoints;
      public bool leaverPoints;
      public bool isLeaver;
      public bool isBadBehaviour;
      public bool canMute;
      public bool PlayerRating;
      public bool PlayerRatingHero;
      public bool PlayerRatingHeroLastPlayed;
      public bool numberOfWinsForPR;
      public bool extraComplaints;
      public bool bruteForceDefenderBan;
      public bool extraSessionComplaints;
      public bool listSeasonsAwards;
      public bool Shard;
      public bool currencies;
    }

    public AccountInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Snid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Snuid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Login = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Nickname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Online = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Silver = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Resource1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Resource2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Resource3 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Perl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              RedPerl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              Currentsession = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I64) {
              Registerdate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Fame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              Reliability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Fraction = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              BanFlag = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I64) {
              Banned = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              MuteFlag = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I64) {
              Muted = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Bool) {
              IsDeveloper = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I32) {
              Gender = (Gender)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.I32) {
              NickChanges = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.I32) {
              NickChangesFree = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.I32) {
              FractionChanges = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              FractionChangesFree = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I64) {
              PremiumAccountDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.Double) {
              LordRating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.Double) {
              NumberOfWins = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.I32) {
              Dodges = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.I64) {
              RetiredTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 36:
            if (field.Type == TType.Double) {
              GuardRating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 37:
            if (field.Type == TType.Double) {
              DailyRating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 38:
            if (field.Type == TType.I64) {
              Guildid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 39:
            if (field.Type == TType.I32) {
              GuildBuildingLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Bool) {
              IsSpectator = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.Bool) {
              HasLamp = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.List) {
              {
                JoinedSnids = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  JoinedSnids.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 43:
            if (field.Type == TType.I64) {
              LastPaymentTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 44:
            if (field.Type == TType.I64) {
              LastLampDropTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 45:
            if (field.Type == TType.Bool) {
              IsRegularMMAllowed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 46:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 47:
            if (field.Type == TType.String) {
              Muid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 48:
            if (field.Type == TType.String) {
              Country = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 49:
            if (field.Type == TType.String) {
              Region = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.String) {
              City = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.String) {
              Gmcountry = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 52:
            if (field.Type == TType.String) {
              Gmregion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 53:
            if (field.Type == TType.String) {
              Gmcity = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 54:
            if (field.Type == TType.I32) {
              Cwplayerpoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 55:
            if (field.Type == TType.I32) {
              LeaverPoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 56:
            if (field.Type == TType.Bool) {
              IsLeaver = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 57:
            if (field.Type == TType.Bool) {
              IsBadBehaviour = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 58:
            if (field.Type == TType.Bool) {
              CanMute = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 59:
            if (field.Type == TType.I32) {
              PlayerRating = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I64) {
              PlayerRatingHero = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 61:
            if (field.Type == TType.I64) {
              PlayerRatingHeroLastPlayed = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 62:
            if (field.Type == TType.I64) {
              NumberOfWinsForPR = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 63:
            if (field.Type == TType.I32) {
              ExtraComplaints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 64:
            if (field.Type == TType.I64) {
              BruteForceDefenderBan = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 65:
            if (field.Type == TType.I32) {
              ExtraSessionComplaints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 66:
            if (field.Type == TType.List) {
              {
                ListSeasonsAwards = new List<SeasonAwards>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  SeasonAwards _elem5 = new SeasonAwards();
                  _elem5 = new SeasonAwards();
                  _elem5.Read(iprot);
                  ListSeasonsAwards.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 67:
            if (field.Type == TType.I32) {
              Shard = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 68:
            if (field.Type == TType.Map) {
              {
                Currencies = new Dictionary<string, int>();
                TMap _map6 = iprot.ReadMapBegin();
                for( int _i7 = 0; _i7 < _map6.Count; ++_i7)
                {
                  string _key8;
                  int _val9;
                  _key8 = iprot.ReadString();
                  _val9 = iprot.ReadI32();
                  Currencies[_key8] = _val9;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AccountInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Snid != null && __isset.snid) {
        field.Name = "snid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Snid);
        oprot.WriteFieldEnd();
      }
      if (Snuid != null && __isset.snuid) {
        field.Name = "snuid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Snuid);
        oprot.WriteFieldEnd();
      }
      if (Login != null && __isset.login) {
        field.Name = "login";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Login);
        oprot.WriteFieldEnd();
      }
      if (Email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Email);
        oprot.WriteFieldEnd();
      }
      if (Nickname != null && __isset.nickname) {
        field.Name = "nickname";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Nickname);
        oprot.WriteFieldEnd();
      }
      if (__isset.online) {
        field.Name = "online";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Online);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.silver) {
        field.Name = "silver";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Silver);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource1) {
        field.Name = "resource1";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource1);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource2) {
        field.Name = "resource2";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource2);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource3) {
        field.Name = "resource3";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource3);
        oprot.WriteFieldEnd();
      }
      if (__isset.perl) {
        field.Name = "perl";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Perl);
        oprot.WriteFieldEnd();
      }
      if (__isset.redPerl) {
        field.Name = "redPerl";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RedPerl);
        oprot.WriteFieldEnd();
      }
      if (__isset.currentsession) {
        field.Name = "currentsession";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Currentsession);
        oprot.WriteFieldEnd();
      }
      if (__isset.registerdate) {
        field.Name = "registerdate";
        field.Type = TType.I64;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Registerdate);
        oprot.WriteFieldEnd();
      }
      if (__isset.fame) {
        field.Name = "fame";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fame);
        oprot.WriteFieldEnd();
      }
      if (__isset.reliability) {
        field.Name = "reliability";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Reliability);
        oprot.WriteFieldEnd();
      }
      if (__isset.fraction) {
        field.Name = "fraction";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fraction);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.banFlag) {
        field.Name = "banFlag";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BanFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.banned) {
        field.Name = "banned";
        field.Type = TType.I64;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Banned);
        oprot.WriteFieldEnd();
      }
      if (__isset.muteFlag) {
        field.Name = "muteFlag";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MuteFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.muted) {
        field.Name = "muted";
        field.Type = TType.I64;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Muted);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDeveloper) {
        field.Name = "isDeveloper";
        field.Type = TType.Bool;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDeveloper);
        oprot.WriteFieldEnd();
      }
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.gender) {
        field.Name = "gender";
        field.Type = TType.I32;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Gender);
        oprot.WriteFieldEnd();
      }
      if (__isset.nickChanges) {
        field.Name = "nickChanges";
        field.Type = TType.I32;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NickChanges);
        oprot.WriteFieldEnd();
      }
      if (__isset.nickChangesFree) {
        field.Name = "nickChangesFree";
        field.Type = TType.I32;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NickChangesFree);
        oprot.WriteFieldEnd();
      }
      if (__isset.fractionChanges) {
        field.Name = "fractionChanges";
        field.Type = TType.I32;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FractionChanges);
        oprot.WriteFieldEnd();
      }
      if (__isset.fractionChangesFree) {
        field.Name = "fractionChangesFree";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FractionChangesFree);
        oprot.WriteFieldEnd();
      }
      if (__isset.premiumAccountDate) {
        field.Name = "premiumAccountDate";
        field.Type = TType.I64;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PremiumAccountDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.lordRating) {
        field.Name = "lordRating";
        field.Type = TType.Double;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LordRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfWins) {
        field.Name = "numberOfWins";
        field.Type = TType.Double;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(NumberOfWins);
        oprot.WriteFieldEnd();
      }
      if (__isset.dodges) {
        field.Name = "dodges";
        field.Type = TType.I32;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Dodges);
        oprot.WriteFieldEnd();
      }
      if (__isset.retiredTime) {
        field.Name = "retiredTime";
        field.Type = TType.I64;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RetiredTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.guardRating) {
        field.Name = "guardRating";
        field.Type = TType.Double;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(GuardRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.dailyRating) {
        field.Name = "dailyRating";
        field.Type = TType.Double;
        field.ID = 37;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DailyRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildid) {
        field.Name = "guildid";
        field.Type = TType.I64;
        field.ID = 38;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Guildid);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildBuildingLevel) {
        field.Name = "guildBuildingLevel";
        field.Type = TType.I32;
        field.ID = 39;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GuildBuildingLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSpectator) {
        field.Name = "isSpectator";
        field.Type = TType.Bool;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSpectator);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasLamp) {
        field.Name = "hasLamp";
        field.Type = TType.Bool;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasLamp);
        oprot.WriteFieldEnd();
      }
      if (JoinedSnids != null && __isset.joinedSnids) {
        field.Name = "joinedSnids";
        field.Type = TType.List;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, JoinedSnids.Count));
          foreach (string _iter10 in JoinedSnids)
          {
            oprot.WriteString(_iter10);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.lastPaymentTime) {
        field.Name = "lastPaymentTime";
        field.Type = TType.I64;
        field.ID = 43;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastPaymentTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastLampDropTime) {
        field.Name = "lastLampDropTime";
        field.Type = TType.I64;
        field.ID = 44;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastLampDropTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.isRegularMMAllowed) {
        field.Name = "isRegularMMAllowed";
        field.Type = TType.Bool;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsRegularMMAllowed);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 46;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (Muid != null && __isset.muid) {
        field.Name = "muid";
        field.Type = TType.String;
        field.ID = 47;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Muid);
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 48;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Country);
        oprot.WriteFieldEnd();
      }
      if (Region != null && __isset.region) {
        field.Name = "region";
        field.Type = TType.String;
        field.ID = 49;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Region);
        oprot.WriteFieldEnd();
      }
      if (City != null && __isset.city) {
        field.Name = "city";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(City);
        oprot.WriteFieldEnd();
      }
      if (Gmcountry != null && __isset.gmcountry) {
        field.Name = "gmcountry";
        field.Type = TType.String;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Gmcountry);
        oprot.WriteFieldEnd();
      }
      if (Gmregion != null && __isset.gmregion) {
        field.Name = "gmregion";
        field.Type = TType.String;
        field.ID = 52;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Gmregion);
        oprot.WriteFieldEnd();
      }
      if (Gmcity != null && __isset.gmcity) {
        field.Name = "gmcity";
        field.Type = TType.String;
        field.ID = 53;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Gmcity);
        oprot.WriteFieldEnd();
      }
      if (__isset.cwplayerpoints) {
        field.Name = "cwplayerpoints";
        field.Type = TType.I32;
        field.ID = 54;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cwplayerpoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.leaverPoints) {
        field.Name = "leaverPoints";
        field.Type = TType.I32;
        field.ID = 55;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LeaverPoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLeaver) {
        field.Name = "isLeaver";
        field.Type = TType.Bool;
        field.ID = 56;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLeaver);
        oprot.WriteFieldEnd();
      }
      if (__isset.isBadBehaviour) {
        field.Name = "isBadBehaviour";
        field.Type = TType.Bool;
        field.ID = 57;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsBadBehaviour);
        oprot.WriteFieldEnd();
      }
      if (__isset.canMute) {
        field.Name = "canMute";
        field.Type = TType.Bool;
        field.ID = 58;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanMute);
        oprot.WriteFieldEnd();
      }
      if (__isset.PlayerRating) {
        field.Name = "PlayerRating";
        field.Type = TType.I32;
        field.ID = 59;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PlayerRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.PlayerRatingHero) {
        field.Name = "PlayerRatingHero";
        field.Type = TType.I64;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PlayerRatingHero);
        oprot.WriteFieldEnd();
      }
      if (__isset.PlayerRatingHeroLastPlayed) {
        field.Name = "PlayerRatingHeroLastPlayed";
        field.Type = TType.I64;
        field.ID = 61;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PlayerRatingHeroLastPlayed);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfWinsForPR) {
        field.Name = "numberOfWinsForPR";
        field.Type = TType.I64;
        field.ID = 62;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NumberOfWinsForPR);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraComplaints) {
        field.Name = "extraComplaints";
        field.Type = TType.I32;
        field.ID = 63;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExtraComplaints);
        oprot.WriteFieldEnd();
      }
      if (__isset.bruteForceDefenderBan) {
        field.Name = "bruteForceDefenderBan";
        field.Type = TType.I64;
        field.ID = 64;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BruteForceDefenderBan);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraSessionComplaints) {
        field.Name = "extraSessionComplaints";
        field.Type = TType.I32;
        field.ID = 65;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExtraSessionComplaints);
        oprot.WriteFieldEnd();
      }
      if (ListSeasonsAwards != null && __isset.listSeasonsAwards) {
        field.Name = "listSeasonsAwards";
        field.Type = TType.List;
        field.ID = 66;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListSeasonsAwards.Count));
          foreach (SeasonAwards _iter11 in ListSeasonsAwards)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.Shard) {
        field.Name = "Shard";
        field.Type = TType.I32;
        field.ID = 67;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Shard);
        oprot.WriteFieldEnd();
      }
      if (Currencies != null && __isset.currencies) {
        field.Name = "currencies";
        field.Type = TType.Map;
        field.ID = 68;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Currencies.Count));
          foreach (string _iter12 in Currencies.Keys)
          {
            oprot.WriteString(_iter12);
            oprot.WriteI32(Currencies[_iter12]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AccountInfo(");
      sb.Append("Snid: ");
      sb.Append(Snid);
      sb.Append(",Snuid: ");
      sb.Append(Snuid);
      sb.Append(",Login: ");
      sb.Append(Login);
      sb.Append(",Email: ");
      sb.Append(Email);
      sb.Append(",Nickname: ");
      sb.Append(Nickname);
      sb.Append(",Online: ");
      sb.Append(Online);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Silver: ");
      sb.Append(Silver);
      sb.Append(",Resource1: ");
      sb.Append(Resource1);
      sb.Append(",Resource2: ");
      sb.Append(Resource2);
      sb.Append(",Resource3: ");
      sb.Append(Resource3);
      sb.Append(",Perl: ");
      sb.Append(Perl);
      sb.Append(",RedPerl: ");
      sb.Append(RedPerl);
      sb.Append(",Currentsession: ");
      sb.Append(Currentsession);
      sb.Append(",Registerdate: ");
      sb.Append(Registerdate);
      sb.Append(",Fame: ");
      sb.Append(Fame);
      sb.Append(",Reliability: ");
      sb.Append(Reliability);
      sb.Append(",Fraction: ");
      sb.Append(Fraction);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",BanFlag: ");
      sb.Append(BanFlag);
      sb.Append(",Banned: ");
      sb.Append(Banned);
      sb.Append(",MuteFlag: ");
      sb.Append(MuteFlag);
      sb.Append(",Muted: ");
      sb.Append(Muted);
      sb.Append(",IsDeveloper: ");
      sb.Append(IsDeveloper);
      sb.Append(",Auid: ");
      sb.Append(Auid);
      sb.Append(",Gender: ");
      sb.Append(Gender);
      sb.Append(",NickChanges: ");
      sb.Append(NickChanges);
      sb.Append(",NickChangesFree: ");
      sb.Append(NickChangesFree);
      sb.Append(",FractionChanges: ");
      sb.Append(FractionChanges);
      sb.Append(",FractionChangesFree: ");
      sb.Append(FractionChangesFree);
      sb.Append(",PremiumAccountDate: ");
      sb.Append(PremiumAccountDate);
      sb.Append(",LordRating: ");
      sb.Append(LordRating);
      sb.Append(",NumberOfWins: ");
      sb.Append(NumberOfWins);
      sb.Append(",Dodges: ");
      sb.Append(Dodges);
      sb.Append(",RetiredTime: ");
      sb.Append(RetiredTime);
      sb.Append(",GuardRating: ");
      sb.Append(GuardRating);
      sb.Append(",DailyRating: ");
      sb.Append(DailyRating);
      sb.Append(",Guildid: ");
      sb.Append(Guildid);
      sb.Append(",GuildBuildingLevel: ");
      sb.Append(GuildBuildingLevel);
      sb.Append(",IsSpectator: ");
      sb.Append(IsSpectator);
      sb.Append(",HasLamp: ");
      sb.Append(HasLamp);
      sb.Append(",JoinedSnids: ");
      sb.Append(JoinedSnids);
      sb.Append(",LastPaymentTime: ");
      sb.Append(LastPaymentTime);
      sb.Append(",LastLampDropTime: ");
      sb.Append(LastLampDropTime);
      sb.Append(",IsRegularMMAllowed: ");
      sb.Append(IsRegularMMAllowed);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(",Muid: ");
      sb.Append(Muid);
      sb.Append(",Country: ");
      sb.Append(Country);
      sb.Append(",Region: ");
      sb.Append(Region);
      sb.Append(",City: ");
      sb.Append(City);
      sb.Append(",Gmcountry: ");
      sb.Append(Gmcountry);
      sb.Append(",Gmregion: ");
      sb.Append(Gmregion);
      sb.Append(",Gmcity: ");
      sb.Append(Gmcity);
      sb.Append(",Cwplayerpoints: ");
      sb.Append(Cwplayerpoints);
      sb.Append(",LeaverPoints: ");
      sb.Append(LeaverPoints);
      sb.Append(",IsLeaver: ");
      sb.Append(IsLeaver);
      sb.Append(",IsBadBehaviour: ");
      sb.Append(IsBadBehaviour);
      sb.Append(",CanMute: ");
      sb.Append(CanMute);
      sb.Append(",PlayerRating: ");
      sb.Append(PlayerRating);
      sb.Append(",PlayerRatingHero: ");
      sb.Append(PlayerRatingHero);
      sb.Append(",PlayerRatingHeroLastPlayed: ");
      sb.Append(PlayerRatingHeroLastPlayed);
      sb.Append(",NumberOfWinsForPR: ");
      sb.Append(NumberOfWinsForPR);
      sb.Append(",ExtraComplaints: ");
      sb.Append(ExtraComplaints);
      sb.Append(",BruteForceDefenderBan: ");
      sb.Append(BruteForceDefenderBan);
      sb.Append(",ExtraSessionComplaints: ");
      sb.Append(ExtraSessionComplaints);
      sb.Append(",ListSeasonsAwards: ");
      sb.Append(ListSeasonsAwards);
      sb.Append(",Shard: ");
      sb.Append(Shard);
      sb.Append(",Currencies: ");
      sb.Append(Currencies);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
