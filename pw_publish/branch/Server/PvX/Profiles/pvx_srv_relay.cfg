//============================================================================
//  Настройки relayServer2 (rs2)
//

//----------------------------------------------------------------------------
//  rs2_threads : кол-во потоков используемых rs2 для сетевого aio
//  0 - кол-во потоков по кол-ву процессоров/ядер (значение по умолчанию)
//  rs2_threads 0

//----------------------------------------------------------------------------
//  rs2_loglevel : уровень логирования
//  3 - только ошибки, 2 - 3+диагностика, 1 - 2+дебаг информация, 0 - 1+трейсинг вызовов
//  2 - значение по умолчанию
//  rs2_loglevel 1

//----------------------------------------------------------------------------
//  rs2_ioterabit_loglevel : уровень логирования ioterabit
//  2 - значение по умолчанию
rs2_ioterabit_loglevel 1

//----------------------------------------------------------------------------
//  rs2_newconnection_timeout (в секундах): 
//  timerout на получение сообщения на установку логического по установленному tcp соединению
//  20 - значение по умолчанию
//  0 - timerout не используется
//  rs2_newconnection_timeout 0

//----------------------------------------------------------------------------
//  rs2_keepalive_timeout (в секундах): 
//  keepalive timeout для клиентов, проверяется каждые rs2_check_connection_activity_timeout секунд
//  60 - значение по умолчанию
//  0 - timerout не используется
//  rs2_keepalive_timeout 0

//----------------------------------------------------------------------------
//  rs2_check_connection_activity_timeout (в секундах): 
//  интервал через который проверяется активность клиентов
//  если время прошедшее с момента получения последнего keepalive сообщения превышает rs2_keepalive_timeout,
//  то соединения закрывается
//  120 - значение по умолчанию
//  rs2_check_connection_activity_timeout 120

//----------------------------------------------------------------------------
//  rs2_client_output_queue_warning_threshold (в байтах): 
//  кол-во данных в output очереди клиента, при достижении которых в лог пишется warning
//  0 - отключить проверку
//  600 - значение по умолчанию
//  rs2_client_output_queue_warning_threshold 100

//----------------------------------------------------------------------------
//  rs2_client_output_queue_limit (в байтах): 
//  максимально допустимое кол-во данных в output очереди клиента 
//  если кол-во данных в очереди на отправку клиенту превышает лимит - соединение с клиентом разрывается
//  0 - неограниченно кол-во данных в output очереди клиента
//  8К - значение по умолчанию
//rs2_client_output_queue_limit 65536
rs2_client_output_queue_limit 3000000 // 3MB - currenly required value to support reconnect

rs2_backend_readsize 1048576
rs2_backend_disable_nagle_algorithm 1

//----------------------------------------------------------------------------
//  rs2_client_track_input:
//  включить отслеживание НЕприсылания клиентом данных в опеределенный канал
//  если данные с клиента не приходят в канал(rs2_client_tracked_service) 
//  в течении(rs2_client_input_notification_threshold, задается в секундах)
//  то в лог выводится сообщение об этом
//  0 - значение по умолчанию
rs2_client_track_input 1
rs2_client_input_notification_threshold 1
rs2_client_tracked_service gamesvc

// REGISTER_VAR( "rs2_client_readsize", rs2ClientReadSize, STORAGE_GLOBAL );
// 4096 - default value (4KB)
rs2_client_readsize 16384

//----------------------------------------------------------------------------
//  rs2_client_write_complete_notify
//  включить срабатывание callback'а на нотификацию на завершение записи данных для клиента
//  пока по умолчанию 1 (для диагностики, см. rs2_client_report_amount_of_written_bytes)
rs2_client_write_complete_notify 0

//----------------------------------------------------------------------------
//  rs2_client_report_amount_of_read_bytes
//  кол-во байт через которые делаем запись в лог при чтении из соединения с клиентом
//  по умолчанию 1Мб
//  rs2_client_report_amount_of_read_bytes 1048576

//----------------------------------------------------------------------------
//  rs2_client_report_amount_of_written_bytes
//  кол-во байт через которые делаем запись в лог при завершении записи в соединение с клиентом
//  (для работы этой настройки должен быть rs2_client_write_complete_notify=1)
//  по умолчанию 1Мб
//  rs2_client_report_amount_of_written_bytes 1048576

//----------------------------------------------------------------------------
//  rs2_backend_write_complete_notify
//  включить срабатывание callback'а на нотификацию на завершение записи данных для клиента
//  пока по умолчанию 1 (для диагностики, см. rs2_backend_report_amount_of_written_bytes)
rs2_backend_write_complete_notify 0

//----------------------------------------------------------------------------
//  rs2_backend_report_amount_of_read_bytes
//  кол-во байт через которые делаем запись в лог при чтении из соединения с backend'ом
//  по умолчанию 10Мб
//  rs2_backend_report_amount_of_read_bytes 10485760

//----------------------------------------------------------------------------
//  rs2_backend_report_amount_of_written_bytes
//  кол-во байт через которые делаем запись в лог при завершении записи в соединение с backend'ом
//  (для работы этой настройки должен быть rs2_backend_write_complete_notify=1)
//  по умолчанию 10Мб
//  rs2_backend_report_amount_of_written_bytes 10485760

//----------------------------------------------------------------------------
//  rs2_keep_client_connection_on_wrong_seq_num_error:
//  держать соединение с клиентом приславшим некорректный sequence number сообщения
//  0(отключать) - значение по умолчанию
//  rs2_keep_client_connection_on_wrong_seq_num_error 1

//----------------------------------------------------------------------------
//  rs2_open_backend_channel_timeout
//  Таймаут на открытие канала на сервис
//  Проверяется каждые rs2_check_connection_activity_timeout секунд
//  0 - отключить проверку таймаута
//  0 - значение по умолчанию
//  rs2_open_backend_channel_timeout 0

//----------------------------------------------------------------------------
//  rs2_svcping_logging_freq
//  Частота вывода пинга от relay->service при его получении, 
//  т.е. если количество полученных ответов на сообщений ping в сервис кратно rs2_svcping_logging_freq, 
//  то выводится сообщение в лог со значением пинга
//  0 - значение по умолчанию (не выводить)
//  rs2_svcping_logging_freq  0

//----------------------------------------------------------------------------
//  rs2_service_role
//  Роль relay-сервиса:
//  <пустая строка> - primary релей. Используется для обслуживания gamesvc трафика. 
//                    Если нет secondary релеев, то primary также обслуживает трафик в остальные сервисы.
//  secondary - релеи для обслуживания для обслуживания трафика не realtime трафика (не к gamesvc)
//  <пустая строка> - значение по умолчанию
//  rs2_service_role secondary

//----------------------------------------------------------------------------
//  Настройки транспортного message block allocator'а для клиентских соединений
//----------------------------------------------------------------------------
//  rs2_client_message_block_heap_dump_freq
//  Частота дампа в лог состояния allocator'а (через сколько аллокаций)
//  100000 - значение по умолчанию
//  rs2_client_message_block_heap_dump_freq 100000
//----------------------------------------------------------------------------
//  rs2_client_message_block_heap_per_connection
//  Отдельный аллокатор на каждое клиентское соединение или общий на все
//  0(общий на все) - значение по умолчанию
//  rs2_client_message_block_heap_per_connection 1
//----------------------------------------------------------------------------
//  rs2_client_message_block_write_use_threshold
//  threshold на нахождение блока вне хипа аллокатора в ms
//  100 - значение по умолчанию
//  rs2_client_message_block_write_use_threshold 50
//----------------------------------------------------------------------------
//  rs2_client_message_block_use_threshold_filter
//  Список идентификаторов клиентов, для которых отдельно отслеживать превышения threshold'а
//  (см. rs2_client_message_block_write_use_threshold)
//  Пустой - значение по умолчанию
//  rs2_client_message_block_use_threshold_filter 1073742824

//----------------------------------------------------------------------------
//  Настройки транспортного message block allocator'а для соединений c сервисами
//----------------------------------------------------------------------------
//  rs2_backend_message_block_heap_dump_freq
//  Частота дампа в лог состояния allocator'а (через сколько аллокаций)
//  100000 - значение по умолчанию
//  rs2_client_message_block_heap_dump_freq 10000
//----------------------------------------------------------------------------
//  rs2_backend_message_block_heap_per_connection
//  Отдельный аллокатор на каждое клиентское соединение или общий на все
//  1(отдельный на каждое соединение) - значение по умолчанию
//  rs2_backend_message_block_heap_per_connection 0
//----------------------------------------------------------------------------
//  rs2_backend_message_block_write_use_threshold
//  threshold на нахождение блока вне хипа аллокатора в ms
//  50 - значение по умолчанию
//  rs2_backend_message_block_write_use_threshold 40

//----------------------------------------------------------------------------
//  Настройки трекинга step'а для игровых сессий
//----------------------------------------------------------------------------
//  rs2_track_game_session_rpc_class
//  Идентификатор rpc класса (class crc), который надо мониторить
//  4218993876 (0xfb78bcd4) (см. LIGameClient::GetClassCrc()) - значение по умолчанию
//  rs2_track_game_session_rpc_class 4218993876
//----------------------------------------------------------------------------
//  rs2_track_game_session_methond_idx
//  Индекс метода вызовы которого отслеживать
//  1 (Step) - значение по умолчанию
//  rs2_track_game_session_methond_idx 1
//----------------------------------------------------------------------------
//  rs2_track_game_session_step_period_threshold
//  threshold для периодичности вызова IGameClient::Step для клиента в сессии
//  Если время между 2мя последовательноми вызовами IGameClient::Step превышает данный threshold
//  то в лог (отдельный файл для каждого gamesvc, с которым соединен relay) выводится сообщение
//  Пример имени лога: UniServer-private-0.0.00.0000-2012.05.21-12.09.14-relay_1_gamesvc_1.txt
//  0 - отключить трекинг
//  102 - значение по умолчанию
//  rs2_track_game_session_step_period_threshold 0

//----------------------------------------------------------------------------
//  rs2_channels_per_backend_connection : ограничение на кол-во транспортных каналов в одном соединении между relay'ем и сервисом
//  При достижении данного ограничения relay создаст новое соединение
//  0 - всегда одно соединение между релеем и сервисом
//  50 - значение по умолчанию
//  rs2_channels_per_backend_connection 50

//----------------------------------------------------------------------------
//  rs2_opening_channel_timeout_count_threshold : порог на кол-во последовательных таймаутов на открытие канала на сервис
//  Если случается rs2_opening_channel_timeout_count_threshold последовательных таймаутов, то соединение с сервисом будет закрыто
//  Данная проверка производится раз в rs2_check_connection_activity_timeout
//  0 - отключить учет таймаутов
//  20 - значение по умолчанию
//  rs2_opening_channel_timeout_count_threshold 20

//----------------------------------------------------------------------------
//  rs2_internal_service_ping_period : как часто релей пингует соединения с сервисами (в секундах)
//  Проверка периода выполняется раз в rs2_check_connection_activity_timeout
//  0 - отключить внутренние пинги сервисов
//  0 - значение по умолчанию
//  rs2_internal_service_ping_period 60

//----------------------------------------------------------------------------
//  rs2_client_packet_soft_limit_per_checking_period : кол-во пакетов через которые делается soft проверка на частоту пакетов
//  Когда пришло указанное кол-во пакетов, - фиксируется время, за которое прошло данное кол-во пакетов t
//  Если t < rs2_client_packet_freq_checking_period, то частота превышена - пишется варнинг
//  0 - отключить проверку soft limit на частоту пакетов
//  20 - значение по умолчанию
//  rs2_client_packet_soft_limit_per_checking_period 20

//----------------------------------------------------------------------------
//  rs2_client_packet_hard_limit_per_checking_period : кол-во пакетов через которые делается hard проверка на частоту пакетов
//  Когда пришло указанное кол-во пакетов, - фиксируется время, за которое прошло данное кол-во пакетов t
//  Если t < rs2_client_packet_freq_checking_period, то частота превышена - соединение с клиентом закрываем
//  0 - отключить проверку hard limit на частоту пакетов
//  40 - значение по умолчанию
//  rs2_client_packet_hard_limit_per_checking_period 50

//----------------------------------------------------------------------------
//  rs2_client_packet_freq_checking_period : период(в ms), в который не должно приходить больше rs2_client_packet_hard_limit_per_checking_period пакетов
//  1000 - значение по умолчанию
//  rs2_client_packet_freq_checking_period 1000

//----------------------------------------------------------------------------
//  rs2_open_client_channel_timeout : таймаут(в секундах) на открытие канала с релея на клиент (используется при мультикасте)
//  Проверяется каждые rs2_check_connection_activity_timeout секунд
//  20 - значение по умолчанию
//  0 - не проверять таймаут
//  rs2_open_client_channel_timeout 0

exec pvx_srv_custom_relay.cfg global
