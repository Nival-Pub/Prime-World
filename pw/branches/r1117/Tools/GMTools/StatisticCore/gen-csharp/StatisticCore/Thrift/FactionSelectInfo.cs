/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FactionSelectInfo : TBase
  {
    private long _auid;
    private string _oldfaction;
    private string _newfaction;
    private ResourceTable _rchange;
    private ResourceTable _rtotal;
    private int _timestamp;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public string Oldfaction
    {
      get
      {
        return _oldfaction;
      }
      set
      {
        __isset.oldfaction = true;
        this._oldfaction = value;
      }
    }

    public string Newfaction
    {
      get
      {
        return _newfaction;
      }
      set
      {
        __isset.newfaction = true;
        this._newfaction = value;
      }
    }

    public ResourceTable Rchange
    {
      get
      {
        return _rchange;
      }
      set
      {
        __isset.rchange = true;
        this._rchange = value;
      }
    }

    public ResourceTable Rtotal
    {
      get
      {
        return _rtotal;
      }
      set
      {
        __isset.rtotal = true;
        this._rtotal = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool oldfaction;
      public bool newfaction;
      public bool rchange;
      public bool rtotal;
      public bool timestamp;
    }

    public FactionSelectInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Oldfaction = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Newfaction = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Rchange = new ResourceTable();
              Rchange.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Rtotal = new ResourceTable();
              Rtotal.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FactionSelectInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (Oldfaction != null && __isset.oldfaction) {
        field.Name = "oldfaction";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Oldfaction);
        oprot.WriteFieldEnd();
      }
      if (Newfaction != null && __isset.newfaction) {
        field.Name = "newfaction";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Newfaction);
        oprot.WriteFieldEnd();
      }
      if (Rchange != null && __isset.rchange) {
        field.Name = "rchange";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Rchange.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Rtotal != null && __isset.rtotal) {
        field.Name = "rtotal";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Rtotal.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FactionSelectInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",Oldfaction: ");
      sb.Append(Oldfaction);
      sb.Append(",Newfaction: ");
      sb.Append(Newfaction);
      sb.Append(",Rchange: ");
      sb.Append(Rchange== null ? "<null>" : Rchange.ToString());
      sb.Append(",Rtotal: ");
      sb.Append(Rtotal== null ? "<null>" : Rtotal.ToString());
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
