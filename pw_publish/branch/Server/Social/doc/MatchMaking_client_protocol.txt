Интерфейс общения социального клиента с социальным сервером (REST API)
======================================================================
started: Данила Воробьев, 01.03.2011

---------------------
1. Общий вид запросов
---------------------

Социальный клиент обращается к соц.серверу с обычными HTTP-запросами (HTTP GET),
для отладки можно использовать любой браузер.

В целом, запросы имеют вид:
http://<social_server_address:port>/<server_name>?action=xxx?...params...

Пример:
	http://localhost:88/one?action=mm_add&uid=3604&key=12345&session=pvp&fraction=1&hero=1

Сервер отвечает в формате JSON, ответ представляет собой некоторый JSON-объект (словарь вида {ключ:значение}),
признаком валидности ответа является наличие ключа {"response": {...}}, в котором уже содержится вся остальная инфа.

NB: Для логина поле <server_name> оставляем пустым, запрос будет случайным образом (через load balancer) отправлен на произвольный рабочий сервер.
Например:
	http://localhost:88/?action=login&user=dan&auth=12345

Ответ на login будет содержать:
- имя сервера, к которому надо обращаться с дальнейшими запросами;
- уникальный id юзера (uid) и временный ключ авторизации (key), которые нужно будет использовать в последующих запросах.

Если сервер отвечает error:bad session - логин нужно повторить.
	

------------------------------------
2. Общие для всех запросов параметры
------------------------------------
запрос:
	uid=INT -- уникальный ID пользователя.
	key=STRING -- временный ключ авторизации (пока просто константа "12345", выдаваемая сервером).
	! в дальнейшем key будет содержать цифровую подпись запроса (sign=<md5:STRING>), 
	  которая будет строиться как md5 от конкатенации всех параметров запроса + секретного ключа.
	pretty=0/1 -- если указан параметр pretty=1, JSON-ответ будет красиво отформатирован, с отступами, переносами и сортировкой ключей (удобно для отладки в браузере)
	  
ответ:
	ok:0/1 -- успешность выполнения запроса.
	server:STRING -- имя рабочего сервера, который нам ответил (как правило, это сервер, к которому мы и обращались; сервер, где "живет наш юзер").
	tm:STRING -- информация о времени исполнения запроса.
	error:STRING -- сообщение об ошибке (if any)
	

------------------------------------
3. Параметры конкретных запросов (action)
------------------------------------

------------------------------------
3.0. Логин
------------------------------------
запрос:
	action=login
	user=<username> // логин юзера
	auth=<hex-число> // некий код авторизации (пока просто пропускается сервером)
	ver=<hi.med.low> // версия протокола соц.клиент/соц.сервер; соц.сервер проверяет совпадение двух старших чисел (hi и med), в случае несовпадения ругается.
ответ:
	uid:INT, // уникальный числовой id юзера, использовать во всех последующих запросах к серверу
	key:INT, // некий числовой код, который клиент впоследствии должен использовать при построении цифровой подписи (пока можно игнорировать)

NB: Для логина поле <server_name> оставляем пустым (после IP:порта сразу идет "/?" и параметры), запрос будет случайным образом (через load balancer) отправлен на произвольный рабочий сервер.
Например:
	http://localhost:88/?action=login&user=dan&auth=12345


------------------------------------
3.1. Подтверждение авторизации + запрос persistent-данных юзера
------------------------------------
запрос:
	action=auth
ответ:
	loaded:0/1 -- успели ли загрузиться persistent-данные юзера (если 0, можно подождать и попробовать еще раз)
(если loaded==1)
	data:DICT -- словарь, содержащий все persistent-данные юзера; как временные (memory cached), так и постоянные (хранящиеся в базе данных)
		db:DICT -- на этом уровне вложенности лежат реально persistent данные (хранящиеся в базе данных); выше, на уровне data, временные данные, хранимые в memcache
			rating:INT -- отладочный рейтинг юзера (сейчас просто увеличивается при каждом логине)


------------------------------------
3.2. Создать новую matchmaking-сессию
------------------------------------
запрос:
	action=mm_add
	session=pvp|pvx|train -- тип игровой сессии
	fraction=INT -- номер фракции (стороны), 0=любая, (1=люди, 2=эльфы?..)
	hero=INT -- тип героя (видимо, 0=любой/случайный?)
ответ:
	mmid:STRING -- полученный уникальный ID сессии (сейчас имеет вид "mm_XX_YY")
	mm:DICT -- словарь со всеми текущими игровыми сессиями нашего юзера
		<mmid>:DICT -- словарь с параметрами сессии
			rating,sess,hero,fract -- стартовые параметры сессии (пользовательский rating берется из БД, сейчас он просто автоинкрементится на каждом логине)
			progress:INT -- текущий прогресс matchmaking-сессии, 1=только начали, 2..99=в процессе, 100=завершена, 101=юзер подтвердил готовность играть
			FIN:DICT -- статус подтверждения (появляется после того как matchmaking сессия будет завершена, progress=100)
				user_accepted:0/1 -- пользовательподтвердил готовность играть (accept)
				mm_accepted:0/1 -- pvx matchmaking server подтвердил пользовательский accept

Пример:
------------------------------------
запрос
	http://localhost:88/one?action=mm_add&uid=3604&key=12345&session=pvp&fraction=1&hero=1
ответ	{"response":{"ok":1,"mmid":"mm_128_3","mm":{"mm_114_4":{"rating":57,"sess":"pvp","hero":1,"fract":1,"progress":1},"tReqd":1298982962.5309999},"server":"one","tm":"0.00 ms"}}


------------------------------------
3.3. Запросить статус matchmaking-сессий
------------------------------------
запрос:
	action=mm_ping
	mmid=STRING -- уникальный mmid конкретной сессии или 0=запросить статус всех matchmaking-сессий нашего юзера
ответ:
	mmid:STRING -- запрошенный mmid (или 0)
	mm: полностью аналогично 3.1 (словарь mm:DICT содержит информацию по всем запрошенным сессиям)
	mm_messages:LIST -- список сообщений (относящихся к конкретной сессии или всем сессиям, в зависимости от mmid)
		каждое сообщение в списке это DICT:
			mmid:STRING -- mmid сессии, к которой относится сообщение
			ts:STRING -- таймстемп времени получения сообщения
			error:STRING -- текст сообщения (например "[pvx matchmaker] mm session not accepted")

Особое внимание нужно обращать на параметр сессии
	progress:INT -- текущий прогресс matchmaking-сессии, 1=только начали, 2..99=в процессе, 100=завершена, 101=юзер подтвердил готовность играть
Когда progress>=100, можно слать accept, запускать pvx-клиент и начинать игру.
	

Пример:
------------------------------------
запрос
	http://localhost:88/one?action=mm_ping&uid=3604&key=12345&mmid=0
ответ
	{"response":{"ok":1,"mmid":"0","mm":{"mm_130_4":{"rating":74,"sess":"pvp","hero":0,"progress":1,"fract":0},"mm_130_3":{"rating":74,"sess":"pvp","hero":0,"fract":0,"progress":101,"FIN":{"mm_accepted":1,"user_accepted":1}},"tReqd":1298986280.388},"server":"one","tm":"1.00 ms"}}


------------------------------------
3.4. Отменить matchmaking-сессии
------------------------------------
запрос:
	action=mm_cancel
	mmid=STRING -- уникальный mmid конкретной сессии или 0=отменить ВСЕ активные matchmaking-сессии нашего юзера
ответ:
	mmid:STRING -- запрошенный mmid (или 0)
	mm: новое состояние словаря matchmaking-сессий нашего юзера (при успешной отмене всех сессий этот словарь будет пустой)


------------------------------------
3.5. Подтвердить готовность играть (после того как matchmaking-сессия успешно завершилась)
------------------------------------
запрос:
	action=mm_accept
	mmid=STRING -- уникальный mmid конкретной сессии
ответ:
	mmid:STRING -- запрошенный mmid
	session:DICT -- новое состояние указанной сессии. 
		при успешном исполнении команды mm_accept параметры сессии будут содержать ключ:
		"FIN":{"user_accepted":1}
		
Пример:
------------------------------------
запрос
	http://localhost:88/one?action=mm_accept&uid=3604&key=12345&mmid=mm_130_3
ответ
	{"response":{"session":{"rating":74,"sess":"pvp","hero":0,"fract":0,"progress":100,"FIN":{"user_accepted":1}},"ok":1,"mmid":"mm_130_3","server":"one","tm":"1.00 ms"}}	
