/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuestEventStageStepVariant : TBase
  {
    private string _message;
    private string _winMessage;
    private string _loseMessage;
    private double _winRatioBase;
    private double _winRatioGold;
    private ResourceTableSmall _price;

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }

    public string WinMessage
    {
      get
      {
        return _winMessage;
      }
      set
      {
        __isset.winMessage = true;
        this._winMessage = value;
      }
    }

    public string LoseMessage
    {
      get
      {
        return _loseMessage;
      }
      set
      {
        __isset.loseMessage = true;
        this._loseMessage = value;
      }
    }

    public double WinRatioBase
    {
      get
      {
        return _winRatioBase;
      }
      set
      {
        __isset.winRatioBase = true;
        this._winRatioBase = value;
      }
    }

    public double WinRatioGold
    {
      get
      {
        return _winRatioGold;
      }
      set
      {
        __isset.winRatioGold = true;
        this._winRatioGold = value;
      }
    }

    public ResourceTableSmall Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
      public bool winMessage;
      public bool loseMessage;
      public bool winRatioBase;
      public bool winRatioGold;
      public bool price;
    }

    public QuestEventStageStepVariant() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              WinMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              LoseMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              WinRatioBase = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              WinRatioGold = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Price = new ResourceTableSmall();
              Price.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuestEventStageStepVariant");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      if (WinMessage != null && __isset.winMessage) {
        field.Name = "winMessage";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(WinMessage);
        oprot.WriteFieldEnd();
      }
      if (LoseMessage != null && __isset.loseMessage) {
        field.Name = "loseMessage";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoseMessage);
        oprot.WriteFieldEnd();
      }
      if (__isset.winRatioBase) {
        field.Name = "winRatioBase";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(WinRatioBase);
        oprot.WriteFieldEnd();
      }
      if (__isset.winRatioGold) {
        field.Name = "winRatioGold";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(WinRatioGold);
        oprot.WriteFieldEnd();
      }
      if (Price != null && __isset.price) {
        field.Name = "price";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Price.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuestEventStageStepVariant(");
      sb.Append("Message: ");
      sb.Append(Message);
      sb.Append(",WinMessage: ");
      sb.Append(WinMessage);
      sb.Append(",LoseMessage: ");
      sb.Append(LoseMessage);
      sb.Append(",WinRatioBase: ");
      sb.Append(WinRatioBase);
      sb.Append(",WinRatioGold: ");
      sb.Append(WinRatioGold);
      sb.Append(",Price: ");
      sb.Append(Price== null ? "<null>" : Price.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
