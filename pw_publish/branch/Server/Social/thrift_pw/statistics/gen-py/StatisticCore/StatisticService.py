#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def LoginUsers(self, logins):
    """
    Parameters:
     - logins
    """
    pass

  def LogoutUsers(self, logins):
    """
    Parameters:
     - logins
    """
    pass

  def FactionSelect(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def MoveTalentToSet(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def MoveTalentFromSet(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def UnlockHero(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def MoveHeroToBath(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def ResourcesChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def QuestChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def DynamicQuestChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def TournamentQuestChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def TutorialStateChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def TalentChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def JoinPvpSession(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GiveSessionAwards(self, info):
    """
    Parameters:
     - info
    """
    pass

  def RatingChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def HeroLevelChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def HeroRankChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def CastleLevelChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def AfterParty(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def LeaverPointsChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def ReRollShop(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def ChatMessages(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def ClientPings(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def UserClaims(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GMEditUser(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GMUnlockHero(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GMLockHero(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GMOperation(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GMUserOperation(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def MonitoringResults(self, results):
    """
    Parameters:
     - results
    """
    pass

  def AddIgnore(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def RemoveIgnore(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def LauncherStart(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def LauncherEvents(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def LauncherDActions(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def SocialRegister(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def SocialJoin(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def SocialMerge(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildCreated(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildRenamed(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildJoined(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildLeaved(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildDisbanded(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildShopBuy(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildSiege(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildDailyStats(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildInteraction(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GuildPointsChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def RuneExpire(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def RuneUnsoulbound(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def RuneReplenish(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def RuneHeroApply(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def RuneRoll(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GWEventAdd(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def GWScoreChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def QuestEventStageChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass

  def QuestEventStateChange(self, infos):
    """
    Parameters:
     - infos
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def LoginUsers(self, logins):
    """
    Parameters:
     - logins
    """
    self.send_LoginUsers(logins)
    self.recv_LoginUsers()

  def send_LoginUsers(self, logins):
    self._oprot.writeMessageBegin('LoginUsers', TMessageType.CALL, self._seqid)
    args = LoginUsers_args()
    args.logins = logins
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_LoginUsers(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = LoginUsers_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def LogoutUsers(self, logins):
    """
    Parameters:
     - logins
    """
    self.send_LogoutUsers(logins)
    self.recv_LogoutUsers()

  def send_LogoutUsers(self, logins):
    self._oprot.writeMessageBegin('LogoutUsers', TMessageType.CALL, self._seqid)
    args = LogoutUsers_args()
    args.logins = logins
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_LogoutUsers(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = LogoutUsers_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def FactionSelect(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_FactionSelect(infos)
    self.recv_FactionSelect()

  def send_FactionSelect(self, infos):
    self._oprot.writeMessageBegin('FactionSelect', TMessageType.CALL, self._seqid)
    args = FactionSelect_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_FactionSelect(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = FactionSelect_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def MoveTalentToSet(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_MoveTalentToSet(infos)
    self.recv_MoveTalentToSet()

  def send_MoveTalentToSet(self, infos):
    self._oprot.writeMessageBegin('MoveTalentToSet', TMessageType.CALL, self._seqid)
    args = MoveTalentToSet_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MoveTalentToSet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MoveTalentToSet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def MoveTalentFromSet(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_MoveTalentFromSet(infos)
    self.recv_MoveTalentFromSet()

  def send_MoveTalentFromSet(self, infos):
    self._oprot.writeMessageBegin('MoveTalentFromSet', TMessageType.CALL, self._seqid)
    args = MoveTalentFromSet_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MoveTalentFromSet(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MoveTalentFromSet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def UnlockHero(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_UnlockHero(infos)
    self.recv_UnlockHero()

  def send_UnlockHero(self, infos):
    self._oprot.writeMessageBegin('UnlockHero', TMessageType.CALL, self._seqid)
    args = UnlockHero_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_UnlockHero(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = UnlockHero_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def MoveHeroToBath(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_MoveHeroToBath(infos)
    self.recv_MoveHeroToBath()

  def send_MoveHeroToBath(self, infos):
    self._oprot.writeMessageBegin('MoveHeroToBath', TMessageType.CALL, self._seqid)
    args = MoveHeroToBath_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MoveHeroToBath(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MoveHeroToBath_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def ResourcesChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_ResourcesChange(infos)
    self.recv_ResourcesChange()

  def send_ResourcesChange(self, infos):
    self._oprot.writeMessageBegin('ResourcesChange', TMessageType.CALL, self._seqid)
    args = ResourcesChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ResourcesChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ResourcesChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def QuestChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_QuestChange(infos)
    self.recv_QuestChange()

  def send_QuestChange(self, infos):
    self._oprot.writeMessageBegin('QuestChange', TMessageType.CALL, self._seqid)
    args = QuestChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_QuestChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = QuestChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def DynamicQuestChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_DynamicQuestChange(infos)
    self.recv_DynamicQuestChange()

  def send_DynamicQuestChange(self, infos):
    self._oprot.writeMessageBegin('DynamicQuestChange', TMessageType.CALL, self._seqid)
    args = DynamicQuestChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DynamicQuestChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DynamicQuestChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def TournamentQuestChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_TournamentQuestChange(infos)
    self.recv_TournamentQuestChange()

  def send_TournamentQuestChange(self, infos):
    self._oprot.writeMessageBegin('TournamentQuestChange', TMessageType.CALL, self._seqid)
    args = TournamentQuestChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_TournamentQuestChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = TournamentQuestChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def TutorialStateChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_TutorialStateChange(infos)
    self.recv_TutorialStateChange()

  def send_TutorialStateChange(self, infos):
    self._oprot.writeMessageBegin('TutorialStateChange', TMessageType.CALL, self._seqid)
    args = TutorialStateChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_TutorialStateChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = TutorialStateChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def TalentChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_TalentChange(infos)
    self.recv_TalentChange()

  def send_TalentChange(self, infos):
    self._oprot.writeMessageBegin('TalentChange', TMessageType.CALL, self._seqid)
    args = TalentChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_TalentChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = TalentChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def JoinPvpSession(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_JoinPvpSession(infos)
    self.recv_JoinPvpSession()

  def send_JoinPvpSession(self, infos):
    self._oprot.writeMessageBegin('JoinPvpSession', TMessageType.CALL, self._seqid)
    args = JoinPvpSession_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_JoinPvpSession(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = JoinPvpSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GiveSessionAwards(self, info):
    """
    Parameters:
     - info
    """
    self.send_GiveSessionAwards(info)
    self.recv_GiveSessionAwards()

  def send_GiveSessionAwards(self, info):
    self._oprot.writeMessageBegin('GiveSessionAwards', TMessageType.CALL, self._seqid)
    args = GiveSessionAwards_args()
    args.info = info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GiveSessionAwards(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GiveSessionAwards_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RatingChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RatingChange(infos)
    self.recv_RatingChange()

  def send_RatingChange(self, infos):
    self._oprot.writeMessageBegin('RatingChange', TMessageType.CALL, self._seqid)
    args = RatingChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RatingChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RatingChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def HeroLevelChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_HeroLevelChange(infos)
    self.recv_HeroLevelChange()

  def send_HeroLevelChange(self, infos):
    self._oprot.writeMessageBegin('HeroLevelChange', TMessageType.CALL, self._seqid)
    args = HeroLevelChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_HeroLevelChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = HeroLevelChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def HeroRankChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_HeroRankChange(infos)
    self.recv_HeroRankChange()

  def send_HeroRankChange(self, infos):
    self._oprot.writeMessageBegin('HeroRankChange', TMessageType.CALL, self._seqid)
    args = HeroRankChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_HeroRankChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = HeroRankChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def CastleLevelChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_CastleLevelChange(infos)
    self.recv_CastleLevelChange()

  def send_CastleLevelChange(self, infos):
    self._oprot.writeMessageBegin('CastleLevelChange', TMessageType.CALL, self._seqid)
    args = CastleLevelChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CastleLevelChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = CastleLevelChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def AfterParty(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_AfterParty(infos)
    self.recv_AfterParty()

  def send_AfterParty(self, infos):
    self._oprot.writeMessageBegin('AfterParty', TMessageType.CALL, self._seqid)
    args = AfterParty_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_AfterParty(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = AfterParty_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def LeaverPointsChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_LeaverPointsChange(infos)
    self.recv_LeaverPointsChange()

  def send_LeaverPointsChange(self, infos):
    self._oprot.writeMessageBegin('LeaverPointsChange', TMessageType.CALL, self._seqid)
    args = LeaverPointsChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_LeaverPointsChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = LeaverPointsChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def ReRollShop(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_ReRollShop(infos)
    self.recv_ReRollShop()

  def send_ReRollShop(self, infos):
    self._oprot.writeMessageBegin('ReRollShop', TMessageType.CALL, self._seqid)
    args = ReRollShop_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ReRollShop(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ReRollShop_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def ChatMessages(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_ChatMessages(infos)
    self.recv_ChatMessages()

  def send_ChatMessages(self, infos):
    self._oprot.writeMessageBegin('ChatMessages', TMessageType.CALL, self._seqid)
    args = ChatMessages_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ChatMessages(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ChatMessages_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def ClientPings(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_ClientPings(infos)
    self.recv_ClientPings()

  def send_ClientPings(self, infos):
    self._oprot.writeMessageBegin('ClientPings', TMessageType.CALL, self._seqid)
    args = ClientPings_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ClientPings(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ClientPings_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def UserClaims(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_UserClaims(infos)
    self.recv_UserClaims()

  def send_UserClaims(self, infos):
    self._oprot.writeMessageBegin('UserClaims', TMessageType.CALL, self._seqid)
    args = UserClaims_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_UserClaims(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = UserClaims_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GMEditUser(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GMEditUser(infos)
    self.recv_GMEditUser()

  def send_GMEditUser(self, infos):
    self._oprot.writeMessageBegin('GMEditUser', TMessageType.CALL, self._seqid)
    args = GMEditUser_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GMEditUser(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GMEditUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GMUnlockHero(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GMUnlockHero(infos)
    self.recv_GMUnlockHero()

  def send_GMUnlockHero(self, infos):
    self._oprot.writeMessageBegin('GMUnlockHero', TMessageType.CALL, self._seqid)
    args = GMUnlockHero_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GMUnlockHero(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GMUnlockHero_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GMLockHero(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GMLockHero(infos)
    self.recv_GMLockHero()

  def send_GMLockHero(self, infos):
    self._oprot.writeMessageBegin('GMLockHero', TMessageType.CALL, self._seqid)
    args = GMLockHero_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GMLockHero(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GMLockHero_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GMOperation(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GMOperation(infos)
    self.recv_GMOperation()

  def send_GMOperation(self, infos):
    self._oprot.writeMessageBegin('GMOperation', TMessageType.CALL, self._seqid)
    args = GMOperation_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GMOperation(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GMOperation_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GMUserOperation(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GMUserOperation(infos)
    self.recv_GMUserOperation()

  def send_GMUserOperation(self, infos):
    self._oprot.writeMessageBegin('GMUserOperation', TMessageType.CALL, self._seqid)
    args = GMUserOperation_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GMUserOperation(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GMUserOperation_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def MonitoringResults(self, results):
    """
    Parameters:
     - results
    """
    self.send_MonitoringResults(results)
    self.recv_MonitoringResults()

  def send_MonitoringResults(self, results):
    self._oprot.writeMessageBegin('MonitoringResults', TMessageType.CALL, self._seqid)
    args = MonitoringResults_args()
    args.results = results
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MonitoringResults(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MonitoringResults_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def AddIgnore(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_AddIgnore(infos)
    self.recv_AddIgnore()

  def send_AddIgnore(self, infos):
    self._oprot.writeMessageBegin('AddIgnore', TMessageType.CALL, self._seqid)
    args = AddIgnore_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_AddIgnore(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = AddIgnore_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RemoveIgnore(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RemoveIgnore(infos)
    self.recv_RemoveIgnore()

  def send_RemoveIgnore(self, infos):
    self._oprot.writeMessageBegin('RemoveIgnore', TMessageType.CALL, self._seqid)
    args = RemoveIgnore_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RemoveIgnore(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RemoveIgnore_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def LauncherStart(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_LauncherStart(infos)
    self.recv_LauncherStart()

  def send_LauncherStart(self, infos):
    self._oprot.writeMessageBegin('LauncherStart', TMessageType.CALL, self._seqid)
    args = LauncherStart_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_LauncherStart(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = LauncherStart_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def LauncherEvents(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_LauncherEvents(infos)
    self.recv_LauncherEvents()

  def send_LauncherEvents(self, infos):
    self._oprot.writeMessageBegin('LauncherEvents', TMessageType.CALL, self._seqid)
    args = LauncherEvents_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_LauncherEvents(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = LauncherEvents_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def LauncherDActions(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_LauncherDActions(infos)
    self.recv_LauncherDActions()

  def send_LauncherDActions(self, infos):
    self._oprot.writeMessageBegin('LauncherDActions', TMessageType.CALL, self._seqid)
    args = LauncherDActions_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_LauncherDActions(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = LauncherDActions_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def SocialRegister(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_SocialRegister(infos)
    self.recv_SocialRegister()

  def send_SocialRegister(self, infos):
    self._oprot.writeMessageBegin('SocialRegister', TMessageType.CALL, self._seqid)
    args = SocialRegister_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SocialRegister(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = SocialRegister_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def SocialJoin(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_SocialJoin(infos)
    self.recv_SocialJoin()

  def send_SocialJoin(self, infos):
    self._oprot.writeMessageBegin('SocialJoin', TMessageType.CALL, self._seqid)
    args = SocialJoin_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SocialJoin(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = SocialJoin_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def SocialMerge(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_SocialMerge(infos)
    self.recv_SocialMerge()

  def send_SocialMerge(self, infos):
    self._oprot.writeMessageBegin('SocialMerge', TMessageType.CALL, self._seqid)
    args = SocialMerge_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SocialMerge(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = SocialMerge_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildCreated(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildCreated(infos)
    self.recv_GuildCreated()

  def send_GuildCreated(self, infos):
    self._oprot.writeMessageBegin('GuildCreated', TMessageType.CALL, self._seqid)
    args = GuildCreated_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildCreated(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildCreated_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildRenamed(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildRenamed(infos)
    self.recv_GuildRenamed()

  def send_GuildRenamed(self, infos):
    self._oprot.writeMessageBegin('GuildRenamed', TMessageType.CALL, self._seqid)
    args = GuildRenamed_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildRenamed(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildRenamed_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildJoined(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildJoined(infos)
    self.recv_GuildJoined()

  def send_GuildJoined(self, infos):
    self._oprot.writeMessageBegin('GuildJoined', TMessageType.CALL, self._seqid)
    args = GuildJoined_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildJoined(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildJoined_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildLeaved(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildLeaved(infos)
    self.recv_GuildLeaved()

  def send_GuildLeaved(self, infos):
    self._oprot.writeMessageBegin('GuildLeaved', TMessageType.CALL, self._seqid)
    args = GuildLeaved_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildLeaved(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildLeaved_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildDisbanded(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildDisbanded(infos)
    self.recv_GuildDisbanded()

  def send_GuildDisbanded(self, infos):
    self._oprot.writeMessageBegin('GuildDisbanded', TMessageType.CALL, self._seqid)
    args = GuildDisbanded_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildDisbanded(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildDisbanded_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildShopBuy(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildShopBuy(infos)
    self.recv_GuildShopBuy()

  def send_GuildShopBuy(self, infos):
    self._oprot.writeMessageBegin('GuildShopBuy', TMessageType.CALL, self._seqid)
    args = GuildShopBuy_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildShopBuy(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildShopBuy_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildSiege(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildSiege(infos)
    self.recv_GuildSiege()

  def send_GuildSiege(self, infos):
    self._oprot.writeMessageBegin('GuildSiege', TMessageType.CALL, self._seqid)
    args = GuildSiege_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildSiege(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildSiege_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildDailyStats(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildDailyStats(infos)
    self.recv_GuildDailyStats()

  def send_GuildDailyStats(self, infos):
    self._oprot.writeMessageBegin('GuildDailyStats', TMessageType.CALL, self._seqid)
    args = GuildDailyStats_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildDailyStats(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildDailyStats_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildInteraction(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildInteraction(infos)
    self.recv_GuildInteraction()

  def send_GuildInteraction(self, infos):
    self._oprot.writeMessageBegin('GuildInteraction', TMessageType.CALL, self._seqid)
    args = GuildInteraction_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildInteraction(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildInteraction_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GuildPointsChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GuildPointsChange(infos)
    self.recv_GuildPointsChange()

  def send_GuildPointsChange(self, infos):
    self._oprot.writeMessageBegin('GuildPointsChange', TMessageType.CALL, self._seqid)
    args = GuildPointsChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GuildPointsChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GuildPointsChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RuneExpire(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RuneExpire(infos)
    self.recv_RuneExpire()

  def send_RuneExpire(self, infos):
    self._oprot.writeMessageBegin('RuneExpire', TMessageType.CALL, self._seqid)
    args = RuneExpire_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RuneExpire(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RuneExpire_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RuneUnsoulbound(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RuneUnsoulbound(infos)
    self.recv_RuneUnsoulbound()

  def send_RuneUnsoulbound(self, infos):
    self._oprot.writeMessageBegin('RuneUnsoulbound', TMessageType.CALL, self._seqid)
    args = RuneUnsoulbound_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RuneUnsoulbound(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RuneUnsoulbound_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RuneReplenish(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RuneReplenish(infos)
    self.recv_RuneReplenish()

  def send_RuneReplenish(self, infos):
    self._oprot.writeMessageBegin('RuneReplenish', TMessageType.CALL, self._seqid)
    args = RuneReplenish_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RuneReplenish(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RuneReplenish_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RuneHeroApply(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RuneHeroApply(infos)
    self.recv_RuneHeroApply()

  def send_RuneHeroApply(self, infos):
    self._oprot.writeMessageBegin('RuneHeroApply', TMessageType.CALL, self._seqid)
    args = RuneHeroApply_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RuneHeroApply(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RuneHeroApply_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def RuneRoll(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_RuneRoll(infos)
    self.recv_RuneRoll()

  def send_RuneRoll(self, infos):
    self._oprot.writeMessageBegin('RuneRoll', TMessageType.CALL, self._seqid)
    args = RuneRoll_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RuneRoll(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RuneRoll_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GWEventAdd(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GWEventAdd(infos)
    self.recv_GWEventAdd()

  def send_GWEventAdd(self, infos):
    self._oprot.writeMessageBegin('GWEventAdd', TMessageType.CALL, self._seqid)
    args = GWEventAdd_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GWEventAdd(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GWEventAdd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def GWScoreChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_GWScoreChange(infos)
    self.recv_GWScoreChange()

  def send_GWScoreChange(self, infos):
    self._oprot.writeMessageBegin('GWScoreChange', TMessageType.CALL, self._seqid)
    args = GWScoreChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GWScoreChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GWScoreChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def QuestEventStageChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_QuestEventStageChange(infos)
    self.recv_QuestEventStageChange()

  def send_QuestEventStageChange(self, infos):
    self._oprot.writeMessageBegin('QuestEventStageChange', TMessageType.CALL, self._seqid)
    args = QuestEventStageChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_QuestEventStageChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = QuestEventStageChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def QuestEventStateChange(self, infos):
    """
    Parameters:
     - infos
    """
    self.send_QuestEventStateChange(infos)
    self.recv_QuestEventStateChange()

  def send_QuestEventStateChange(self, infos):
    self._oprot.writeMessageBegin('QuestEventStateChange', TMessageType.CALL, self._seqid)
    args = QuestEventStateChange_args()
    args.infos = infos
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_QuestEventStateChange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = QuestEventStateChange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["LoginUsers"] = Processor.process_LoginUsers
    self._processMap["LogoutUsers"] = Processor.process_LogoutUsers
    self._processMap["FactionSelect"] = Processor.process_FactionSelect
    self._processMap["MoveTalentToSet"] = Processor.process_MoveTalentToSet
    self._processMap["MoveTalentFromSet"] = Processor.process_MoveTalentFromSet
    self._processMap["UnlockHero"] = Processor.process_UnlockHero
    self._processMap["MoveHeroToBath"] = Processor.process_MoveHeroToBath
    self._processMap["ResourcesChange"] = Processor.process_ResourcesChange
    self._processMap["QuestChange"] = Processor.process_QuestChange
    self._processMap["DynamicQuestChange"] = Processor.process_DynamicQuestChange
    self._processMap["TournamentQuestChange"] = Processor.process_TournamentQuestChange
    self._processMap["TutorialStateChange"] = Processor.process_TutorialStateChange
    self._processMap["TalentChange"] = Processor.process_TalentChange
    self._processMap["JoinPvpSession"] = Processor.process_JoinPvpSession
    self._processMap["GiveSessionAwards"] = Processor.process_GiveSessionAwards
    self._processMap["RatingChange"] = Processor.process_RatingChange
    self._processMap["HeroLevelChange"] = Processor.process_HeroLevelChange
    self._processMap["HeroRankChange"] = Processor.process_HeroRankChange
    self._processMap["CastleLevelChange"] = Processor.process_CastleLevelChange
    self._processMap["AfterParty"] = Processor.process_AfterParty
    self._processMap["LeaverPointsChange"] = Processor.process_LeaverPointsChange
    self._processMap["ReRollShop"] = Processor.process_ReRollShop
    self._processMap["ChatMessages"] = Processor.process_ChatMessages
    self._processMap["ClientPings"] = Processor.process_ClientPings
    self._processMap["UserClaims"] = Processor.process_UserClaims
    self._processMap["GMEditUser"] = Processor.process_GMEditUser
    self._processMap["GMUnlockHero"] = Processor.process_GMUnlockHero
    self._processMap["GMLockHero"] = Processor.process_GMLockHero
    self._processMap["GMOperation"] = Processor.process_GMOperation
    self._processMap["GMUserOperation"] = Processor.process_GMUserOperation
    self._processMap["MonitoringResults"] = Processor.process_MonitoringResults
    self._processMap["AddIgnore"] = Processor.process_AddIgnore
    self._processMap["RemoveIgnore"] = Processor.process_RemoveIgnore
    self._processMap["LauncherStart"] = Processor.process_LauncherStart
    self._processMap["LauncherEvents"] = Processor.process_LauncherEvents
    self._processMap["LauncherDActions"] = Processor.process_LauncherDActions
    self._processMap["SocialRegister"] = Processor.process_SocialRegister
    self._processMap["SocialJoin"] = Processor.process_SocialJoin
    self._processMap["SocialMerge"] = Processor.process_SocialMerge
    self._processMap["GuildCreated"] = Processor.process_GuildCreated
    self._processMap["GuildRenamed"] = Processor.process_GuildRenamed
    self._processMap["GuildJoined"] = Processor.process_GuildJoined
    self._processMap["GuildLeaved"] = Processor.process_GuildLeaved
    self._processMap["GuildDisbanded"] = Processor.process_GuildDisbanded
    self._processMap["GuildShopBuy"] = Processor.process_GuildShopBuy
    self._processMap["GuildSiege"] = Processor.process_GuildSiege
    self._processMap["GuildDailyStats"] = Processor.process_GuildDailyStats
    self._processMap["GuildInteraction"] = Processor.process_GuildInteraction
    self._processMap["GuildPointsChange"] = Processor.process_GuildPointsChange
    self._processMap["RuneExpire"] = Processor.process_RuneExpire
    self._processMap["RuneUnsoulbound"] = Processor.process_RuneUnsoulbound
    self._processMap["RuneReplenish"] = Processor.process_RuneReplenish
    self._processMap["RuneHeroApply"] = Processor.process_RuneHeroApply
    self._processMap["RuneRoll"] = Processor.process_RuneRoll
    self._processMap["GWEventAdd"] = Processor.process_GWEventAdd
    self._processMap["GWScoreChange"] = Processor.process_GWScoreChange
    self._processMap["QuestEventStageChange"] = Processor.process_QuestEventStageChange
    self._processMap["QuestEventStateChange"] = Processor.process_QuestEventStateChange

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_LoginUsers(self, seqid, iprot, oprot):
    args = LoginUsers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = LoginUsers_result()
    self._handler.LoginUsers(args.logins)
    oprot.writeMessageBegin("LoginUsers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_LogoutUsers(self, seqid, iprot, oprot):
    args = LogoutUsers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = LogoutUsers_result()
    self._handler.LogoutUsers(args.logins)
    oprot.writeMessageBegin("LogoutUsers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_FactionSelect(self, seqid, iprot, oprot):
    args = FactionSelect_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = FactionSelect_result()
    self._handler.FactionSelect(args.infos)
    oprot.writeMessageBegin("FactionSelect", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MoveTalentToSet(self, seqid, iprot, oprot):
    args = MoveTalentToSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MoveTalentToSet_result()
    self._handler.MoveTalentToSet(args.infos)
    oprot.writeMessageBegin("MoveTalentToSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MoveTalentFromSet(self, seqid, iprot, oprot):
    args = MoveTalentFromSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MoveTalentFromSet_result()
    self._handler.MoveTalentFromSet(args.infos)
    oprot.writeMessageBegin("MoveTalentFromSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_UnlockHero(self, seqid, iprot, oprot):
    args = UnlockHero_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = UnlockHero_result()
    self._handler.UnlockHero(args.infos)
    oprot.writeMessageBegin("UnlockHero", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MoveHeroToBath(self, seqid, iprot, oprot):
    args = MoveHeroToBath_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MoveHeroToBath_result()
    self._handler.MoveHeroToBath(args.infos)
    oprot.writeMessageBegin("MoveHeroToBath", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ResourcesChange(self, seqid, iprot, oprot):
    args = ResourcesChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ResourcesChange_result()
    self._handler.ResourcesChange(args.infos)
    oprot.writeMessageBegin("ResourcesChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_QuestChange(self, seqid, iprot, oprot):
    args = QuestChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = QuestChange_result()
    self._handler.QuestChange(args.infos)
    oprot.writeMessageBegin("QuestChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DynamicQuestChange(self, seqid, iprot, oprot):
    args = DynamicQuestChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DynamicQuestChange_result()
    self._handler.DynamicQuestChange(args.infos)
    oprot.writeMessageBegin("DynamicQuestChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_TournamentQuestChange(self, seqid, iprot, oprot):
    args = TournamentQuestChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = TournamentQuestChange_result()
    self._handler.TournamentQuestChange(args.infos)
    oprot.writeMessageBegin("TournamentQuestChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_TutorialStateChange(self, seqid, iprot, oprot):
    args = TutorialStateChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = TutorialStateChange_result()
    self._handler.TutorialStateChange(args.infos)
    oprot.writeMessageBegin("TutorialStateChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_TalentChange(self, seqid, iprot, oprot):
    args = TalentChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = TalentChange_result()
    self._handler.TalentChange(args.infos)
    oprot.writeMessageBegin("TalentChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_JoinPvpSession(self, seqid, iprot, oprot):
    args = JoinPvpSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = JoinPvpSession_result()
    self._handler.JoinPvpSession(args.infos)
    oprot.writeMessageBegin("JoinPvpSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GiveSessionAwards(self, seqid, iprot, oprot):
    args = GiveSessionAwards_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GiveSessionAwards_result()
    self._handler.GiveSessionAwards(args.info)
    oprot.writeMessageBegin("GiveSessionAwards", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RatingChange(self, seqid, iprot, oprot):
    args = RatingChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RatingChange_result()
    self._handler.RatingChange(args.infos)
    oprot.writeMessageBegin("RatingChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_HeroLevelChange(self, seqid, iprot, oprot):
    args = HeroLevelChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = HeroLevelChange_result()
    self._handler.HeroLevelChange(args.infos)
    oprot.writeMessageBegin("HeroLevelChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_HeroRankChange(self, seqid, iprot, oprot):
    args = HeroRankChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = HeroRankChange_result()
    self._handler.HeroRankChange(args.infos)
    oprot.writeMessageBegin("HeroRankChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_CastleLevelChange(self, seqid, iprot, oprot):
    args = CastleLevelChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CastleLevelChange_result()
    self._handler.CastleLevelChange(args.infos)
    oprot.writeMessageBegin("CastleLevelChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_AfterParty(self, seqid, iprot, oprot):
    args = AfterParty_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = AfterParty_result()
    self._handler.AfterParty(args.infos)
    oprot.writeMessageBegin("AfterParty", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_LeaverPointsChange(self, seqid, iprot, oprot):
    args = LeaverPointsChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = LeaverPointsChange_result()
    self._handler.LeaverPointsChange(args.infos)
    oprot.writeMessageBegin("LeaverPointsChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ReRollShop(self, seqid, iprot, oprot):
    args = ReRollShop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ReRollShop_result()
    self._handler.ReRollShop(args.infos)
    oprot.writeMessageBegin("ReRollShop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ChatMessages(self, seqid, iprot, oprot):
    args = ChatMessages_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ChatMessages_result()
    self._handler.ChatMessages(args.infos)
    oprot.writeMessageBegin("ChatMessages", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ClientPings(self, seqid, iprot, oprot):
    args = ClientPings_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ClientPings_result()
    self._handler.ClientPings(args.infos)
    oprot.writeMessageBegin("ClientPings", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_UserClaims(self, seqid, iprot, oprot):
    args = UserClaims_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = UserClaims_result()
    self._handler.UserClaims(args.infos)
    oprot.writeMessageBegin("UserClaims", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GMEditUser(self, seqid, iprot, oprot):
    args = GMEditUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GMEditUser_result()
    self._handler.GMEditUser(args.infos)
    oprot.writeMessageBegin("GMEditUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GMUnlockHero(self, seqid, iprot, oprot):
    args = GMUnlockHero_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GMUnlockHero_result()
    self._handler.GMUnlockHero(args.infos)
    oprot.writeMessageBegin("GMUnlockHero", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GMLockHero(self, seqid, iprot, oprot):
    args = GMLockHero_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GMLockHero_result()
    self._handler.GMLockHero(args.infos)
    oprot.writeMessageBegin("GMLockHero", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GMOperation(self, seqid, iprot, oprot):
    args = GMOperation_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GMOperation_result()
    self._handler.GMOperation(args.infos)
    oprot.writeMessageBegin("GMOperation", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GMUserOperation(self, seqid, iprot, oprot):
    args = GMUserOperation_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GMUserOperation_result()
    self._handler.GMUserOperation(args.infos)
    oprot.writeMessageBegin("GMUserOperation", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MonitoringResults(self, seqid, iprot, oprot):
    args = MonitoringResults_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MonitoringResults_result()
    self._handler.MonitoringResults(args.results)
    oprot.writeMessageBegin("MonitoringResults", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_AddIgnore(self, seqid, iprot, oprot):
    args = AddIgnore_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = AddIgnore_result()
    self._handler.AddIgnore(args.infos)
    oprot.writeMessageBegin("AddIgnore", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RemoveIgnore(self, seqid, iprot, oprot):
    args = RemoveIgnore_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RemoveIgnore_result()
    self._handler.RemoveIgnore(args.infos)
    oprot.writeMessageBegin("RemoveIgnore", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_LauncherStart(self, seqid, iprot, oprot):
    args = LauncherStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = LauncherStart_result()
    self._handler.LauncherStart(args.infos)
    oprot.writeMessageBegin("LauncherStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_LauncherEvents(self, seqid, iprot, oprot):
    args = LauncherEvents_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = LauncherEvents_result()
    self._handler.LauncherEvents(args.infos)
    oprot.writeMessageBegin("LauncherEvents", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_LauncherDActions(self, seqid, iprot, oprot):
    args = LauncherDActions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = LauncherDActions_result()
    self._handler.LauncherDActions(args.infos)
    oprot.writeMessageBegin("LauncherDActions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SocialRegister(self, seqid, iprot, oprot):
    args = SocialRegister_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SocialRegister_result()
    self._handler.SocialRegister(args.infos)
    oprot.writeMessageBegin("SocialRegister", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SocialJoin(self, seqid, iprot, oprot):
    args = SocialJoin_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SocialJoin_result()
    self._handler.SocialJoin(args.infos)
    oprot.writeMessageBegin("SocialJoin", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SocialMerge(self, seqid, iprot, oprot):
    args = SocialMerge_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SocialMerge_result()
    self._handler.SocialMerge(args.infos)
    oprot.writeMessageBegin("SocialMerge", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildCreated(self, seqid, iprot, oprot):
    args = GuildCreated_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildCreated_result()
    self._handler.GuildCreated(args.infos)
    oprot.writeMessageBegin("GuildCreated", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildRenamed(self, seqid, iprot, oprot):
    args = GuildRenamed_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildRenamed_result()
    self._handler.GuildRenamed(args.infos)
    oprot.writeMessageBegin("GuildRenamed", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildJoined(self, seqid, iprot, oprot):
    args = GuildJoined_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildJoined_result()
    self._handler.GuildJoined(args.infos)
    oprot.writeMessageBegin("GuildJoined", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildLeaved(self, seqid, iprot, oprot):
    args = GuildLeaved_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildLeaved_result()
    self._handler.GuildLeaved(args.infos)
    oprot.writeMessageBegin("GuildLeaved", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildDisbanded(self, seqid, iprot, oprot):
    args = GuildDisbanded_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildDisbanded_result()
    self._handler.GuildDisbanded(args.infos)
    oprot.writeMessageBegin("GuildDisbanded", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildShopBuy(self, seqid, iprot, oprot):
    args = GuildShopBuy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildShopBuy_result()
    self._handler.GuildShopBuy(args.infos)
    oprot.writeMessageBegin("GuildShopBuy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildSiege(self, seqid, iprot, oprot):
    args = GuildSiege_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildSiege_result()
    self._handler.GuildSiege(args.infos)
    oprot.writeMessageBegin("GuildSiege", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildDailyStats(self, seqid, iprot, oprot):
    args = GuildDailyStats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildDailyStats_result()
    self._handler.GuildDailyStats(args.infos)
    oprot.writeMessageBegin("GuildDailyStats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildInteraction(self, seqid, iprot, oprot):
    args = GuildInteraction_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildInteraction_result()
    self._handler.GuildInteraction(args.infos)
    oprot.writeMessageBegin("GuildInteraction", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GuildPointsChange(self, seqid, iprot, oprot):
    args = GuildPointsChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GuildPointsChange_result()
    self._handler.GuildPointsChange(args.infos)
    oprot.writeMessageBegin("GuildPointsChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RuneExpire(self, seqid, iprot, oprot):
    args = RuneExpire_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RuneExpire_result()
    self._handler.RuneExpire(args.infos)
    oprot.writeMessageBegin("RuneExpire", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RuneUnsoulbound(self, seqid, iprot, oprot):
    args = RuneUnsoulbound_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RuneUnsoulbound_result()
    self._handler.RuneUnsoulbound(args.infos)
    oprot.writeMessageBegin("RuneUnsoulbound", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RuneReplenish(self, seqid, iprot, oprot):
    args = RuneReplenish_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RuneReplenish_result()
    self._handler.RuneReplenish(args.infos)
    oprot.writeMessageBegin("RuneReplenish", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RuneHeroApply(self, seqid, iprot, oprot):
    args = RuneHeroApply_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RuneHeroApply_result()
    self._handler.RuneHeroApply(args.infos)
    oprot.writeMessageBegin("RuneHeroApply", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RuneRoll(self, seqid, iprot, oprot):
    args = RuneRoll_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RuneRoll_result()
    self._handler.RuneRoll(args.infos)
    oprot.writeMessageBegin("RuneRoll", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GWEventAdd(self, seqid, iprot, oprot):
    args = GWEventAdd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GWEventAdd_result()
    self._handler.GWEventAdd(args.infos)
    oprot.writeMessageBegin("GWEventAdd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GWScoreChange(self, seqid, iprot, oprot):
    args = GWScoreChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GWScoreChange_result()
    self._handler.GWScoreChange(args.infos)
    oprot.writeMessageBegin("GWScoreChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_QuestEventStageChange(self, seqid, iprot, oprot):
    args = QuestEventStageChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = QuestEventStageChange_result()
    self._handler.QuestEventStageChange(args.infos)
    oprot.writeMessageBegin("QuestEventStageChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_QuestEventStateChange(self, seqid, iprot, oprot):
    args = QuestEventStateChange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = QuestEventStateChange_result()
    self._handler.QuestEventStateChange(args.infos)
    oprot.writeMessageBegin("QuestEventStateChange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class LoginUsers_args(object):
  """
  Attributes:
   - logins
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'logins', (TType.STRUCT,(LoginInfo, LoginInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, logins=None,):
    self.logins = logins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.logins = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = LoginInfo()
            _elem77.read(iprot)
            self.logins.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginUsers_args')
    if self.logins is not None:
      oprot.writeFieldBegin('logins', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.logins))
      for iter78 in self.logins:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginUsers_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginUsers_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogoutUsers_args(object):
  """
  Attributes:
   - logins
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'logins', (TType.STRUCT,(LoginInfo, LoginInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, logins=None,):
    self.logins = logins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.logins = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = LoginInfo()
            _elem84.read(iprot)
            self.logins.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogoutUsers_args')
    if self.logins is not None:
      oprot.writeFieldBegin('logins', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.logins))
      for iter85 in self.logins:
        iter85.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogoutUsers_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogoutUsers_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FactionSelect_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(FactionSelectInfo, FactionSelectInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype89, _size86) = iprot.readListBegin()
          for _i90 in xrange(_size86):
            _elem91 = FactionSelectInfo()
            _elem91.read(iprot)
            self.infos.append(_elem91)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FactionSelect_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter92 in self.infos:
        iter92.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FactionSelect_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FactionSelect_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveTalentToSet_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(MoveTalentInfo, MoveTalentInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype96, _size93) = iprot.readListBegin()
          for _i97 in xrange(_size93):
            _elem98 = MoveTalentInfo()
            _elem98.read(iprot)
            self.infos.append(_elem98)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveTalentToSet_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter99 in self.infos:
        iter99.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveTalentToSet_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveTalentToSet_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveTalentFromSet_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(MoveTalentInfo, MoveTalentInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype103, _size100) = iprot.readListBegin()
          for _i104 in xrange(_size100):
            _elem105 = MoveTalentInfo()
            _elem105.read(iprot)
            self.infos.append(_elem105)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveTalentFromSet_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter106 in self.infos:
        iter106.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveTalentFromSet_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveTalentFromSet_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnlockHero_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(UnlockHeroInfo, UnlockHeroInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype110, _size107) = iprot.readListBegin()
          for _i111 in xrange(_size107):
            _elem112 = UnlockHeroInfo()
            _elem112.read(iprot)
            self.infos.append(_elem112)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnlockHero_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter113 in self.infos:
        iter113.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnlockHero_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnlockHero_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveHeroToBath_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(MoveToBathInfo, MoveToBathInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype117, _size114) = iprot.readListBegin()
          for _i118 in xrange(_size114):
            _elem119 = MoveToBathInfo()
            _elem119.read(iprot)
            self.infos.append(_elem119)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveHeroToBath_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter120 in self.infos:
        iter120.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveHeroToBath_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveHeroToBath_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourcesChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(ResourcesChangeInfo, ResourcesChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype124, _size121) = iprot.readListBegin()
          for _i125 in xrange(_size121):
            _elem126 = ResourcesChangeInfo()
            _elem126.read(iprot)
            self.infos.append(_elem126)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourcesChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter127 in self.infos:
        iter127.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourcesChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourcesChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(QuestChangeInfo, QuestChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype131, _size128) = iprot.readListBegin()
          for _i132 in xrange(_size128):
            _elem133 = QuestChangeInfo()
            _elem133.read(iprot)
            self.infos.append(_elem133)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter134 in self.infos:
        iter134.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(DynamicQuestChangeInfo, DynamicQuestChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype138, _size135) = iprot.readListBegin()
          for _i139 in xrange(_size135):
            _elem140 = DynamicQuestChangeInfo()
            _elem140.read(iprot)
            self.infos.append(_elem140)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter141 in self.infos:
        iter141.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentQuestChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(TournamentQuestChangeInfo, TournamentQuestChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype145, _size142) = iprot.readListBegin()
          for _i146 in xrange(_size142):
            _elem147 = TournamentQuestChangeInfo()
            _elem147.read(iprot)
            self.infos.append(_elem147)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentQuestChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter148 in self.infos:
        iter148.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentQuestChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentQuestChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TutorialStateChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(TutorialStateChangeInfo, TutorialStateChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype152, _size149) = iprot.readListBegin()
          for _i153 in xrange(_size149):
            _elem154 = TutorialStateChangeInfo()
            _elem154.read(iprot)
            self.infos.append(_elem154)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TutorialStateChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter155 in self.infos:
        iter155.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TutorialStateChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TutorialStateChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(TalentChangeInfo, TalentChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype159, _size156) = iprot.readListBegin()
          for _i160 in xrange(_size156):
            _elem161 = TalentChangeInfo()
            _elem161.read(iprot)
            self.infos.append(_elem161)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter162 in self.infos:
        iter162.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JoinPvpSession_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(JoinSessionInfo, JoinSessionInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype166, _size163) = iprot.readListBegin()
          for _i167 in xrange(_size163):
            _elem168 = JoinSessionInfo()
            _elem168.read(iprot)
            self.infos.append(_elem168)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JoinPvpSession_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter169 in self.infos:
        iter169.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JoinPvpSession_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JoinPvpSession_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiveSessionAwards_args(object):
  """
  Attributes:
   - info
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'info', (TType.STRUCT,(SessionAwardsInfo, SessionAwardsInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, info=None,):
    self.info = info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.info = []
          (_etype173, _size170) = iprot.readListBegin()
          for _i174 in xrange(_size170):
            _elem175 = SessionAwardsInfo()
            _elem175.read(iprot)
            self.info.append(_elem175)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiveSessionAwards_args')
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.info))
      for iter176 in self.info:
        iter176.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiveSessionAwards_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiveSessionAwards_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RatingChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RatingChangeInfo, RatingChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype180, _size177) = iprot.readListBegin()
          for _i181 in xrange(_size177):
            _elem182 = RatingChangeInfo()
            _elem182.read(iprot)
            self.infos.append(_elem182)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RatingChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter183 in self.infos:
        iter183.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RatingChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RatingChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroLevelChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(HeroLevelChangeInfo, HeroLevelChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype187, _size184) = iprot.readListBegin()
          for _i188 in xrange(_size184):
            _elem189 = HeroLevelChangeInfo()
            _elem189.read(iprot)
            self.infos.append(_elem189)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroLevelChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter190 in self.infos:
        iter190.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroLevelChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroLevelChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroRankChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(HeroRankChangeInfo, HeroRankChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype194, _size191) = iprot.readListBegin()
          for _i195 in xrange(_size191):
            _elem196 = HeroRankChangeInfo()
            _elem196.read(iprot)
            self.infos.append(_elem196)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroRankChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter197 in self.infos:
        iter197.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroRankChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroRankChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CastleLevelChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(CastleLevelChangeInfo, CastleLevelChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype201, _size198) = iprot.readListBegin()
          for _i202 in xrange(_size198):
            _elem203 = CastleLevelChangeInfo()
            _elem203.read(iprot)
            self.infos.append(_elem203)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CastleLevelChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter204 in self.infos:
        iter204.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CastleLevelChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CastleLevelChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AfterParty_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(AfterPartyInfo, AfterPartyInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype208, _size205) = iprot.readListBegin()
          for _i209 in xrange(_size205):
            _elem210 = AfterPartyInfo()
            _elem210.read(iprot)
            self.infos.append(_elem210)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AfterParty_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter211 in self.infos:
        iter211.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AfterParty_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AfterParty_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LeaverPointsChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(LeaverPointsChangeInfo, LeaverPointsChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype215, _size212) = iprot.readListBegin()
          for _i216 in xrange(_size212):
            _elem217 = LeaverPointsChangeInfo()
            _elem217.read(iprot)
            self.infos.append(_elem217)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LeaverPointsChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter218 in self.infos:
        iter218.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LeaverPointsChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LeaverPointsChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReRollShop_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(ReRollShopInfo, ReRollShopInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype222, _size219) = iprot.readListBegin()
          for _i223 in xrange(_size219):
            _elem224 = ReRollShopInfo()
            _elem224.read(iprot)
            self.infos.append(_elem224)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReRollShop_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter225 in self.infos:
        iter225.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReRollShop_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReRollShop_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatMessages_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(ChatMessageInfo, ChatMessageInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype229, _size226) = iprot.readListBegin()
          for _i230 in xrange(_size226):
            _elem231 = ChatMessageInfo()
            _elem231.read(iprot)
            self.infos.append(_elem231)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatMessages_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter232 in self.infos:
        iter232.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatMessages_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatMessages_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientPings_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(ClientPingInfo, ClientPingInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype236, _size233) = iprot.readListBegin()
          for _i237 in xrange(_size233):
            _elem238 = ClientPingInfo()
            _elem238.read(iprot)
            self.infos.append(_elem238)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientPings_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter239 in self.infos:
        iter239.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientPings_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientPings_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserClaims_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(ClaimInfo, ClaimInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype243, _size240) = iprot.readListBegin()
          for _i244 in xrange(_size240):
            _elem245 = ClaimInfo()
            _elem245.read(iprot)
            self.infos.append(_elem245)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserClaims_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter246 in self.infos:
        iter246.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserClaims_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserClaims_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMEditUser_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GMEditFieldInfo, GMEditFieldInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype250, _size247) = iprot.readListBegin()
          for _i251 in xrange(_size247):
            _elem252 = GMEditFieldInfo()
            _elem252.read(iprot)
            self.infos.append(_elem252)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMEditUser_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter253 in self.infos:
        iter253.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMEditUser_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMEditUser_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMUnlockHero_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GMHeroActionInfo, GMHeroActionInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype257, _size254) = iprot.readListBegin()
          for _i258 in xrange(_size254):
            _elem259 = GMHeroActionInfo()
            _elem259.read(iprot)
            self.infos.append(_elem259)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMUnlockHero_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter260 in self.infos:
        iter260.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMUnlockHero_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMUnlockHero_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMLockHero_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GMHeroActionInfo, GMHeroActionInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype264, _size261) = iprot.readListBegin()
          for _i265 in xrange(_size261):
            _elem266 = GMHeroActionInfo()
            _elem266.read(iprot)
            self.infos.append(_elem266)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMLockHero_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter267 in self.infos:
        iter267.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMLockHero_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMLockHero_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMOperation_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GMOperationInfo, GMOperationInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype271, _size268) = iprot.readListBegin()
          for _i272 in xrange(_size268):
            _elem273 = GMOperationInfo()
            _elem273.read(iprot)
            self.infos.append(_elem273)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMOperation_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter274 in self.infos:
        iter274.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMOperation_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMOperation_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMUserOperation_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GMUserOperationInfo, GMUserOperationInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype278, _size275) = iprot.readListBegin()
          for _i279 in xrange(_size275):
            _elem280 = GMUserOperationInfo()
            _elem280.read(iprot)
            self.infos.append(_elem280)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMUserOperation_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter281 in self.infos:
        iter281.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMUserOperation_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMUserOperation_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MonitoringResults_args(object):
  """
  Attributes:
   - results
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'results', (TType.STRUCT,(MonitoringResultInfo, MonitoringResultInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, results=None,):
    self.results = results

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.results = []
          (_etype285, _size282) = iprot.readListBegin()
          for _i286 in xrange(_size282):
            _elem287 = MonitoringResultInfo()
            _elem287.read(iprot)
            self.results.append(_elem287)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MonitoringResults_args')
    if self.results is not None:
      oprot.writeFieldBegin('results', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.results))
      for iter288 in self.results:
        iter288.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MonitoringResults_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MonitoringResults_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddIgnore_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(AddIgnoreInfo, AddIgnoreInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype292, _size289) = iprot.readListBegin()
          for _i293 in xrange(_size289):
            _elem294 = AddIgnoreInfo()
            _elem294.read(iprot)
            self.infos.append(_elem294)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddIgnore_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter295 in self.infos:
        iter295.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddIgnore_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddIgnore_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveIgnore_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RemoveIgnoreInfo, RemoveIgnoreInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype299, _size296) = iprot.readListBegin()
          for _i300 in xrange(_size296):
            _elem301 = RemoveIgnoreInfo()
            _elem301.read(iprot)
            self.infos.append(_elem301)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveIgnore_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter302 in self.infos:
        iter302.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveIgnore_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveIgnore_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherStart_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(LauncherInfo, LauncherInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype306, _size303) = iprot.readListBegin()
          for _i307 in xrange(_size303):
            _elem308 = LauncherInfo()
            _elem308.read(iprot)
            self.infos.append(_elem308)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherStart_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter309 in self.infos:
        iter309.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherStart_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherStart_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherEvents_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(LauncherEventsInfo, LauncherEventsInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype313, _size310) = iprot.readListBegin()
          for _i314 in xrange(_size310):
            _elem315 = LauncherEventsInfo()
            _elem315.read(iprot)
            self.infos.append(_elem315)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherEvents_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter316 in self.infos:
        iter316.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherEvents_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherEvents_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherDActions_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(LauncherDActionsInfo, LauncherDActionsInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype320, _size317) = iprot.readListBegin()
          for _i321 in xrange(_size317):
            _elem322 = LauncherDActionsInfo()
            _elem322.read(iprot)
            self.infos.append(_elem322)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherDActions_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter323 in self.infos:
        iter323.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherDActions_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherDActions_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialRegister_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(SocialRegisterInfo, SocialRegisterInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype327, _size324) = iprot.readListBegin()
          for _i328 in xrange(_size324):
            _elem329 = SocialRegisterInfo()
            _elem329.read(iprot)
            self.infos.append(_elem329)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialRegister_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter330 in self.infos:
        iter330.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialRegister_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialRegister_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialJoin_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(SocialJoinInfo, SocialJoinInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype334, _size331) = iprot.readListBegin()
          for _i335 in xrange(_size331):
            _elem336 = SocialJoinInfo()
            _elem336.read(iprot)
            self.infos.append(_elem336)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialJoin_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter337 in self.infos:
        iter337.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialJoin_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialJoin_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialMerge_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(SocialMergeInfo, SocialMergeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype341, _size338) = iprot.readListBegin()
          for _i342 in xrange(_size338):
            _elem343 = SocialMergeInfo()
            _elem343.read(iprot)
            self.infos.append(_elem343)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialMerge_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter344 in self.infos:
        iter344.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialMerge_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialMerge_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildCreated_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildInfo, GuildInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype348, _size345) = iprot.readListBegin()
          for _i349 in xrange(_size345):
            _elem350 = GuildInfo()
            _elem350.read(iprot)
            self.infos.append(_elem350)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildCreated_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter351 in self.infos:
        iter351.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildCreated_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildCreated_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildRenamed_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildInfo, GuildInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype355, _size352) = iprot.readListBegin()
          for _i356 in xrange(_size352):
            _elem357 = GuildInfo()
            _elem357.read(iprot)
            self.infos.append(_elem357)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildRenamed_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter358 in self.infos:
        iter358.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildRenamed_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildRenamed_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildJoined_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildCoreInfo, GuildCoreInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype362, _size359) = iprot.readListBegin()
          for _i363 in xrange(_size359):
            _elem364 = GuildCoreInfo()
            _elem364.read(iprot)
            self.infos.append(_elem364)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildJoined_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter365 in self.infos:
        iter365.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildJoined_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildJoined_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildLeaved_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildLeaveInfo, GuildLeaveInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype369, _size366) = iprot.readListBegin()
          for _i370 in xrange(_size366):
            _elem371 = GuildLeaveInfo()
            _elem371.read(iprot)
            self.infos.append(_elem371)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildLeaved_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter372 in self.infos:
        iter372.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildLeaved_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildLeaved_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDisbanded_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildCoreInfo, GuildCoreInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype376, _size373) = iprot.readListBegin()
          for _i377 in xrange(_size373):
            _elem378 = GuildCoreInfo()
            _elem378.read(iprot)
            self.infos.append(_elem378)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDisbanded_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter379 in self.infos:
        iter379.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDisbanded_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDisbanded_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildShopBuy_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildShopBuyInfo, GuildShopBuyInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype383, _size380) = iprot.readListBegin()
          for _i384 in xrange(_size380):
            _elem385 = GuildShopBuyInfo()
            _elem385.read(iprot)
            self.infos.append(_elem385)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildShopBuy_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter386 in self.infos:
        iter386.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildShopBuy_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildShopBuy_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildSiege_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildSiegeInfo, GuildSiegeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype390, _size387) = iprot.readListBegin()
          for _i391 in xrange(_size387):
            _elem392 = GuildSiegeInfo()
            _elem392.read(iprot)
            self.infos.append(_elem392)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildSiege_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter393 in self.infos:
        iter393.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildSiege_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildSiege_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDailyStats_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildDailyStatsInfo, GuildDailyStatsInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype397, _size394) = iprot.readListBegin()
          for _i398 in xrange(_size394):
            _elem399 = GuildDailyStatsInfo()
            _elem399.read(iprot)
            self.infos.append(_elem399)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDailyStats_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter400 in self.infos:
        iter400.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDailyStats_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDailyStats_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInteraction_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildInteractionInfo, GuildInteractionInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype404, _size401) = iprot.readListBegin()
          for _i405 in xrange(_size401):
            _elem406 = GuildInteractionInfo()
            _elem406.read(iprot)
            self.infos.append(_elem406)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInteraction_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter407 in self.infos:
        iter407.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInteraction_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInteraction_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildPointsChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GuildPointsChangeInfo, GuildPointsChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype411, _size408) = iprot.readListBegin()
          for _i412 in xrange(_size408):
            _elem413 = GuildPointsChangeInfo()
            _elem413.read(iprot)
            self.infos.append(_elem413)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildPointsChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter414 in self.infos:
        iter414.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildPointsChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildPointsChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneExpire_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RuneExpireInfo, RuneExpireInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype418, _size415) = iprot.readListBegin()
          for _i419 in xrange(_size415):
            _elem420 = RuneExpireInfo()
            _elem420.read(iprot)
            self.infos.append(_elem420)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneExpire_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter421 in self.infos:
        iter421.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneExpire_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneExpire_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneUnsoulbound_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RuneSoulboundInfo, RuneSoulboundInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype425, _size422) = iprot.readListBegin()
          for _i426 in xrange(_size422):
            _elem427 = RuneSoulboundInfo()
            _elem427.read(iprot)
            self.infos.append(_elem427)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneUnsoulbound_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter428 in self.infos:
        iter428.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneUnsoulbound_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneUnsoulbound_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneReplenish_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RuneReplenishInfo, RuneReplenishInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype432, _size429) = iprot.readListBegin()
          for _i433 in xrange(_size429):
            _elem434 = RuneReplenishInfo()
            _elem434.read(iprot)
            self.infos.append(_elem434)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneReplenish_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter435 in self.infos:
        iter435.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneReplenish_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneReplenish_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneHeroApply_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RuneHeroApplyInfo, RuneHeroApplyInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype439, _size436) = iprot.readListBegin()
          for _i440 in xrange(_size436):
            _elem441 = RuneHeroApplyInfo()
            _elem441.read(iprot)
            self.infos.append(_elem441)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneHeroApply_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter442 in self.infos:
        iter442.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneHeroApply_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneHeroApply_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneRoll_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(RuneRollInfo, RuneRollInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype446, _size443) = iprot.readListBegin()
          for _i447 in xrange(_size443):
            _elem448 = RuneRollInfo()
            _elem448.read(iprot)
            self.infos.append(_elem448)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneRoll_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter449 in self.infos:
        iter449.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneRoll_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneRoll_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWEventAdd_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GWEventInfo, GWEventInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype453, _size450) = iprot.readListBegin()
          for _i454 in xrange(_size450):
            _elem455 = GWEventInfo()
            _elem455.read(iprot)
            self.infos.append(_elem455)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWEventAdd_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter456 in self.infos:
        iter456.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWEventAdd_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWEventAdd_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWScoreChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(GWScoreChangeInfo, GWScoreChangeInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype460, _size457) = iprot.readListBegin()
          for _i461 in xrange(_size457):
            _elem462 = GWScoreChangeInfo()
            _elem462.read(iprot)
            self.infos.append(_elem462)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWScoreChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter463 in self.infos:
        iter463.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWScoreChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWScoreChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStageChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(QuestEventsStagesInfo, QuestEventsStagesInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype467, _size464) = iprot.readListBegin()
          for _i468 in xrange(_size464):
            _elem469 = QuestEventsStagesInfo()
            _elem469.read(iprot)
            self.infos.append(_elem469)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStageChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter470 in self.infos:
        iter470.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStageChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStageChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStateChange_args(object):
  """
  Attributes:
   - infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'infos', (TType.STRUCT,(QuestEventsStatesInfo, QuestEventsStatesInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, infos=None,):
    self.infos = infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.infos = []
          (_etype474, _size471) = iprot.readListBegin()
          for _i475 in xrange(_size471):
            _elem476 = QuestEventsStatesInfo()
            _elem476.read(iprot)
            self.infos.append(_elem476)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStateChange_args')
    if self.infos is not None:
      oprot.writeFieldBegin('infos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.infos))
      for iter477 in self.infos:
        iter477.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventStateChange_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventStateChange_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
