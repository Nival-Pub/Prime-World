/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RuneRollInfo : TBase
  {
    private long _auid;
    private int _rune;
    private RuneRollSource _source;
    private long _sessionpersistentid;
    private int _timestamp;
    private int _runescountold;
    private int _runescountnew;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public int Rune
    {
      get
      {
        return _rune;
      }
      set
      {
        __isset.rune = true;
        this._rune = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RuneRollSource"/>
    /// </summary>
    public RuneRollSource Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public long Sessionpersistentid
    {
      get
      {
        return _sessionpersistentid;
      }
      set
      {
        __isset.sessionpersistentid = true;
        this._sessionpersistentid = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public int Runescountold
    {
      get
      {
        return _runescountold;
      }
      set
      {
        __isset.runescountold = true;
        this._runescountold = value;
      }
    }

    public int Runescountnew
    {
      get
      {
        return _runescountnew;
      }
      set
      {
        __isset.runescountnew = true;
        this._runescountnew = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool rune;
      public bool source;
      public bool sessionpersistentid;
      public bool timestamp;
      public bool runescountold;
      public bool runescountnew;
    }

    public RuneRollInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Rune = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Source = (RuneRollSource)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Sessionpersistentid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Runescountold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Runescountnew = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RuneRollInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.rune) {
        field.Name = "rune";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Rune);
        oprot.WriteFieldEnd();
      }
      if (__isset.source) {
        field.Name = "source";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Source);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionpersistentid) {
        field.Name = "sessionpersistentid";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Sessionpersistentid);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.runescountold) {
        field.Name = "runescountold";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Runescountold);
        oprot.WriteFieldEnd();
      }
      if (__isset.runescountnew) {
        field.Name = "runescountnew";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Runescountnew);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RuneRollInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",Rune: ");
      sb.Append(Rune);
      sb.Append(",Source: ");
      sb.Append(Source);
      sb.Append(",Sessionpersistentid: ");
      sb.Append(Sessionpersistentid);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Runescountold: ");
      sb.Append(Runescountold);
      sb.Append(",Runescountnew: ");
      sb.Append(Runescountnew);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
