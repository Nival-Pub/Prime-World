/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AccountEdit : TBase
  {
    private string _snid;
    private string _snuid;
    private string _login;
    private string _email;
    private string _nickname;
    private int _gold;
    private int _silver;
    private int _resource1;
    private int _resource2;
    private int _resource3;
    private int _perl;
    private int _redPerl;
    private int _fame;
    private int _reliability;
    private int _fraction;
    private string _location;
    private bool _isDeveloper;
    private long _auid;
    private Gender _gender;
    private int _switchQuant;
    private double _lordRating;
    private double _numberOfWins;
    private int _dodges;
    private long _retiredTime;
    private double _guardRating;
    private double _dailyRating;
    private int _guildBuildingLevel;
    private bool _isSpectator;
    private long _lastPaymentTime;
    private long _lastLampDropTime;
    private bool _isRegularMMAllowed;
    private int _cwplayerpoints;
    private bool _canMute;
    private int _PlayerRating;
    private long _numberOfWinsForPR;
    private int _extraComplaints;
    private long _bruteForceDefenderBan;
    private int _extraSessionComplaints;
    private int _Shard;
    private Dictionary<string, int> _currencies;

    public string Snid
    {
      get
      {
        return _snid;
      }
      set
      {
        __isset.snid = true;
        this._snid = value;
      }
    }

    public string Snuid
    {
      get
      {
        return _snuid;
      }
      set
      {
        __isset.snuid = true;
        this._snuid = value;
      }
    }

    public string Login
    {
      get
      {
        return _login;
      }
      set
      {
        __isset.login = true;
        this._login = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Nickname
    {
      get
      {
        return _nickname;
      }
      set
      {
        __isset.nickname = true;
        this._nickname = value;
      }
    }

    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public int Silver
    {
      get
      {
        return _silver;
      }
      set
      {
        __isset.silver = true;
        this._silver = value;
      }
    }

    public int Resource1
    {
      get
      {
        return _resource1;
      }
      set
      {
        __isset.resource1 = true;
        this._resource1 = value;
      }
    }

    public int Resource2
    {
      get
      {
        return _resource2;
      }
      set
      {
        __isset.resource2 = true;
        this._resource2 = value;
      }
    }

    public int Resource3
    {
      get
      {
        return _resource3;
      }
      set
      {
        __isset.resource3 = true;
        this._resource3 = value;
      }
    }

    public int Perl
    {
      get
      {
        return _perl;
      }
      set
      {
        __isset.perl = true;
        this._perl = value;
      }
    }

    public int RedPerl
    {
      get
      {
        return _redPerl;
      }
      set
      {
        __isset.redPerl = true;
        this._redPerl = value;
      }
    }

    public int Fame
    {
      get
      {
        return _fame;
      }
      set
      {
        __isset.fame = true;
        this._fame = value;
      }
    }

    public int Reliability
    {
      get
      {
        return _reliability;
      }
      set
      {
        __isset.reliability = true;
        this._reliability = value;
      }
    }

    public int Fraction
    {
      get
      {
        return _fraction;
      }
      set
      {
        __isset.fraction = true;
        this._fraction = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public bool IsDeveloper
    {
      get
      {
        return _isDeveloper;
      }
      set
      {
        __isset.isDeveloper = true;
        this._isDeveloper = value;
      }
    }

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Gender"/>
    /// </summary>
    public Gender Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int SwitchQuant
    {
      get
      {
        return _switchQuant;
      }
      set
      {
        __isset.switchQuant = true;
        this._switchQuant = value;
      }
    }

    public double LordRating
    {
      get
      {
        return _lordRating;
      }
      set
      {
        __isset.lordRating = true;
        this._lordRating = value;
      }
    }

    public double NumberOfWins
    {
      get
      {
        return _numberOfWins;
      }
      set
      {
        __isset.numberOfWins = true;
        this._numberOfWins = value;
      }
    }

    public int Dodges
    {
      get
      {
        return _dodges;
      }
      set
      {
        __isset.dodges = true;
        this._dodges = value;
      }
    }

    public long RetiredTime
    {
      get
      {
        return _retiredTime;
      }
      set
      {
        __isset.retiredTime = true;
        this._retiredTime = value;
      }
    }

    public double GuardRating
    {
      get
      {
        return _guardRating;
      }
      set
      {
        __isset.guardRating = true;
        this._guardRating = value;
      }
    }

    public double DailyRating
    {
      get
      {
        return _dailyRating;
      }
      set
      {
        __isset.dailyRating = true;
        this._dailyRating = value;
      }
    }

    public int GuildBuildingLevel
    {
      get
      {
        return _guildBuildingLevel;
      }
      set
      {
        __isset.guildBuildingLevel = true;
        this._guildBuildingLevel = value;
      }
    }

    public bool IsSpectator
    {
      get
      {
        return _isSpectator;
      }
      set
      {
        __isset.isSpectator = true;
        this._isSpectator = value;
      }
    }

    public long LastPaymentTime
    {
      get
      {
        return _lastPaymentTime;
      }
      set
      {
        __isset.lastPaymentTime = true;
        this._lastPaymentTime = value;
      }
    }

    public long LastLampDropTime
    {
      get
      {
        return _lastLampDropTime;
      }
      set
      {
        __isset.lastLampDropTime = true;
        this._lastLampDropTime = value;
      }
    }

    public bool IsRegularMMAllowed
    {
      get
      {
        return _isRegularMMAllowed;
      }
      set
      {
        __isset.isRegularMMAllowed = true;
        this._isRegularMMAllowed = value;
      }
    }

    public int Cwplayerpoints
    {
      get
      {
        return _cwplayerpoints;
      }
      set
      {
        __isset.cwplayerpoints = true;
        this._cwplayerpoints = value;
      }
    }

    public bool CanMute
    {
      get
      {
        return _canMute;
      }
      set
      {
        __isset.canMute = true;
        this._canMute = value;
      }
    }

    public int PlayerRating
    {
      get
      {
        return _PlayerRating;
      }
      set
      {
        __isset.PlayerRating = true;
        this._PlayerRating = value;
      }
    }

    public long NumberOfWinsForPR
    {
      get
      {
        return _numberOfWinsForPR;
      }
      set
      {
        __isset.numberOfWinsForPR = true;
        this._numberOfWinsForPR = value;
      }
    }

    public int ExtraComplaints
    {
      get
      {
        return _extraComplaints;
      }
      set
      {
        __isset.extraComplaints = true;
        this._extraComplaints = value;
      }
    }

    public long BruteForceDefenderBan
    {
      get
      {
        return _bruteForceDefenderBan;
      }
      set
      {
        __isset.bruteForceDefenderBan = true;
        this._bruteForceDefenderBan = value;
      }
    }

    public int ExtraSessionComplaints
    {
      get
      {
        return _extraSessionComplaints;
      }
      set
      {
        __isset.extraSessionComplaints = true;
        this._extraSessionComplaints = value;
      }
    }

    public int Shard
    {
      get
      {
        return _Shard;
      }
      set
      {
        __isset.Shard = true;
        this._Shard = value;
      }
    }

    public Dictionary<string, int> Currencies
    {
      get
      {
        return _currencies;
      }
      set
      {
        __isset.currencies = true;
        this._currencies = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snid;
      public bool snuid;
      public bool login;
      public bool email;
      public bool nickname;
      public bool gold;
      public bool silver;
      public bool resource1;
      public bool resource2;
      public bool resource3;
      public bool perl;
      public bool redPerl;
      public bool fame;
      public bool reliability;
      public bool fraction;
      public bool location;
      public bool isDeveloper;
      public bool auid;
      public bool gender;
      public bool switchQuant;
      public bool lordRating;
      public bool numberOfWins;
      public bool dodges;
      public bool retiredTime;
      public bool guardRating;
      public bool dailyRating;
      public bool guildBuildingLevel;
      public bool isSpectator;
      public bool lastPaymentTime;
      public bool lastLampDropTime;
      public bool isRegularMMAllowed;
      public bool cwplayerpoints;
      public bool canMute;
      public bool PlayerRating;
      public bool numberOfWinsForPR;
      public bool extraComplaints;
      public bool bruteForceDefenderBan;
      public bool extraSessionComplaints;
      public bool Shard;
      public bool currencies;
    }

    public AccountEdit() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Snid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Snuid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Login = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Nickname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Silver = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Resource1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Resource2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Resource3 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Perl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              RedPerl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Fame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Reliability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Fraction = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Bool) {
              IsDeveloper = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              Gender = (Gender)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              SwitchQuant = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Double) {
              LordRating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Double) {
              NumberOfWins = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I32) {
              Dodges = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I64) {
              RetiredTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Double) {
              GuardRating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.Double) {
              DailyRating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.I32) {
              GuildBuildingLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Bool) {
              IsSpectator = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.I64) {
              LastPaymentTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I64) {
              LastLampDropTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.Bool) {
              IsRegularMMAllowed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I32) {
              Cwplayerpoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.Bool) {
              CanMute = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.I32) {
              PlayerRating = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.I64) {
              NumberOfWinsForPR = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 36:
            if (field.Type == TType.I32) {
              ExtraComplaints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 37:
            if (field.Type == TType.I64) {
              BruteForceDefenderBan = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 38:
            if (field.Type == TType.I32) {
              ExtraSessionComplaints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 39:
            if (field.Type == TType.I32) {
              Shard = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Map) {
              {
                Currencies = new Dictionary<string, int>();
                TMap _map13 = iprot.ReadMapBegin();
                for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                {
                  string _key15;
                  int _val16;
                  _key15 = iprot.ReadString();
                  _val16 = iprot.ReadI32();
                  Currencies[_key15] = _val16;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AccountEdit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Snid != null && __isset.snid) {
        field.Name = "snid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Snid);
        oprot.WriteFieldEnd();
      }
      if (Snuid != null && __isset.snuid) {
        field.Name = "snuid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Snuid);
        oprot.WriteFieldEnd();
      }
      if (Login != null && __isset.login) {
        field.Name = "login";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Login);
        oprot.WriteFieldEnd();
      }
      if (Email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Email);
        oprot.WriteFieldEnd();
      }
      if (Nickname != null && __isset.nickname) {
        field.Name = "nickname";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Nickname);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.silver) {
        field.Name = "silver";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Silver);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource1) {
        field.Name = "resource1";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource1);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource2) {
        field.Name = "resource2";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource2);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource3) {
        field.Name = "resource3";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource3);
        oprot.WriteFieldEnd();
      }
      if (__isset.perl) {
        field.Name = "perl";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Perl);
        oprot.WriteFieldEnd();
      }
      if (__isset.redPerl) {
        field.Name = "redPerl";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RedPerl);
        oprot.WriteFieldEnd();
      }
      if (__isset.fame) {
        field.Name = "fame";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fame);
        oprot.WriteFieldEnd();
      }
      if (__isset.reliability) {
        field.Name = "reliability";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Reliability);
        oprot.WriteFieldEnd();
      }
      if (__isset.fraction) {
        field.Name = "fraction";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fraction);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDeveloper) {
        field.Name = "isDeveloper";
        field.Type = TType.Bool;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDeveloper);
        oprot.WriteFieldEnd();
      }
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.gender) {
        field.Name = "gender";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Gender);
        oprot.WriteFieldEnd();
      }
      if (__isset.switchQuant) {
        field.Name = "switchQuant";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SwitchQuant);
        oprot.WriteFieldEnd();
      }
      if (__isset.lordRating) {
        field.Name = "lordRating";
        field.Type = TType.Double;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LordRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfWins) {
        field.Name = "numberOfWins";
        field.Type = TType.Double;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(NumberOfWins);
        oprot.WriteFieldEnd();
      }
      if (__isset.dodges) {
        field.Name = "dodges";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Dodges);
        oprot.WriteFieldEnd();
      }
      if (__isset.retiredTime) {
        field.Name = "retiredTime";
        field.Type = TType.I64;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RetiredTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.guardRating) {
        field.Name = "guardRating";
        field.Type = TType.Double;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(GuardRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.dailyRating) {
        field.Name = "dailyRating";
        field.Type = TType.Double;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DailyRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildBuildingLevel) {
        field.Name = "guildBuildingLevel";
        field.Type = TType.I32;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GuildBuildingLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSpectator) {
        field.Name = "isSpectator";
        field.Type = TType.Bool;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSpectator);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastPaymentTime) {
        field.Name = "lastPaymentTime";
        field.Type = TType.I64;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastPaymentTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastLampDropTime) {
        field.Name = "lastLampDropTime";
        field.Type = TType.I64;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastLampDropTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.isRegularMMAllowed) {
        field.Name = "isRegularMMAllowed";
        field.Type = TType.Bool;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsRegularMMAllowed);
        oprot.WriteFieldEnd();
      }
      if (__isset.cwplayerpoints) {
        field.Name = "cwplayerpoints";
        field.Type = TType.I32;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cwplayerpoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.canMute) {
        field.Name = "canMute";
        field.Type = TType.Bool;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanMute);
        oprot.WriteFieldEnd();
      }
      if (__isset.PlayerRating) {
        field.Name = "PlayerRating";
        field.Type = TType.I32;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PlayerRating);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfWinsForPR) {
        field.Name = "numberOfWinsForPR";
        field.Type = TType.I64;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NumberOfWinsForPR);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraComplaints) {
        field.Name = "extraComplaints";
        field.Type = TType.I32;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExtraComplaints);
        oprot.WriteFieldEnd();
      }
      if (__isset.bruteForceDefenderBan) {
        field.Name = "bruteForceDefenderBan";
        field.Type = TType.I64;
        field.ID = 37;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BruteForceDefenderBan);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraSessionComplaints) {
        field.Name = "extraSessionComplaints";
        field.Type = TType.I32;
        field.ID = 38;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExtraSessionComplaints);
        oprot.WriteFieldEnd();
      }
      if (__isset.Shard) {
        field.Name = "Shard";
        field.Type = TType.I32;
        field.ID = 39;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Shard);
        oprot.WriteFieldEnd();
      }
      if (Currencies != null && __isset.currencies) {
        field.Name = "currencies";
        field.Type = TType.Map;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Currencies.Count));
          foreach (string _iter17 in Currencies.Keys)
          {
            oprot.WriteString(_iter17);
            oprot.WriteI32(Currencies[_iter17]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AccountEdit(");
      sb.Append("Snid: ");
      sb.Append(Snid);
      sb.Append(",Snuid: ");
      sb.Append(Snuid);
      sb.Append(",Login: ");
      sb.Append(Login);
      sb.Append(",Email: ");
      sb.Append(Email);
      sb.Append(",Nickname: ");
      sb.Append(Nickname);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Silver: ");
      sb.Append(Silver);
      sb.Append(",Resource1: ");
      sb.Append(Resource1);
      sb.Append(",Resource2: ");
      sb.Append(Resource2);
      sb.Append(",Resource3: ");
      sb.Append(Resource3);
      sb.Append(",Perl: ");
      sb.Append(Perl);
      sb.Append(",RedPerl: ");
      sb.Append(RedPerl);
      sb.Append(",Fame: ");
      sb.Append(Fame);
      sb.Append(",Reliability: ");
      sb.Append(Reliability);
      sb.Append(",Fraction: ");
      sb.Append(Fraction);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",IsDeveloper: ");
      sb.Append(IsDeveloper);
      sb.Append(",Auid: ");
      sb.Append(Auid);
      sb.Append(",Gender: ");
      sb.Append(Gender);
      sb.Append(",SwitchQuant: ");
      sb.Append(SwitchQuant);
      sb.Append(",LordRating: ");
      sb.Append(LordRating);
      sb.Append(",NumberOfWins: ");
      sb.Append(NumberOfWins);
      sb.Append(",Dodges: ");
      sb.Append(Dodges);
      sb.Append(",RetiredTime: ");
      sb.Append(RetiredTime);
      sb.Append(",GuardRating: ");
      sb.Append(GuardRating);
      sb.Append(",DailyRating: ");
      sb.Append(DailyRating);
      sb.Append(",GuildBuildingLevel: ");
      sb.Append(GuildBuildingLevel);
      sb.Append(",IsSpectator: ");
      sb.Append(IsSpectator);
      sb.Append(",LastPaymentTime: ");
      sb.Append(LastPaymentTime);
      sb.Append(",LastLampDropTime: ");
      sb.Append(LastLampDropTime);
      sb.Append(",IsRegularMMAllowed: ");
      sb.Append(IsRegularMMAllowed);
      sb.Append(",Cwplayerpoints: ");
      sb.Append(Cwplayerpoints);
      sb.Append(",CanMute: ");
      sb.Append(CanMute);
      sb.Append(",PlayerRating: ");
      sb.Append(PlayerRating);
      sb.Append(",NumberOfWinsForPR: ");
      sb.Append(NumberOfWinsForPR);
      sb.Append(",ExtraComplaints: ");
      sb.Append(ExtraComplaints);
      sb.Append(",BruteForceDefenderBan: ");
      sb.Append(BruteForceDefenderBan);
      sb.Append(",ExtraSessionComplaints: ");
      sb.Append(ExtraSessionComplaints);
      sb.Append(",Shard: ");
      sb.Append(Shard);
      sb.Append(",Currencies: ");
      sb.Append(Currencies);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
