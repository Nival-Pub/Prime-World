#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ServiceStatus:
  RUNNING = 1
  STOPPED = 2
  START_PENDING = 3
  STOP_PENDING = 4
  WAITING_FOR_STOP = 5
  WAITING_FOR_RESTART = 6

  _VALUES_TO_NAMES = {
    1: "RUNNING",
    2: "STOPPED",
    3: "START_PENDING",
    4: "STOP_PENDING",
    5: "WAITING_FOR_STOP",
    6: "WAITING_FOR_RESTART",
  }

  _NAMES_TO_VALUES = {
    "RUNNING": 1,
    "STOPPED": 2,
    "START_PENDING": 3,
    "STOP_PENDING": 4,
    "WAITING_FOR_STOP": 5,
    "WAITING_FOR_RESTART": 6,
  }

class ServiceCommand:
  START = 1
  STOP = 2
  RESTART = 4
  SOFT_STOP = 8
  SOFT_RESTART = 16
  RELOAD_CONFIG = 32

  _VALUES_TO_NAMES = {
    1: "START",
    2: "STOP",
    4: "RESTART",
    8: "SOFT_STOP",
    16: "SOFT_RESTART",
    32: "RELOAD_CONFIG",
  }

  _NAMES_TO_VALUES = {
    "START": 1,
    "STOP": 2,
    "RESTART": 4,
    "SOFT_STOP": 8,
    "SOFT_RESTART": 16,
    "RELOAD_CONFIG": 32,
  }


class ServiceParameter:
  """
  Attributes:
   - name
   - value
   - changeable
   - needrestart
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
    (3, TType.BOOL, 'changeable', None, None, ), # 3
    (4, TType.BOOL, 'needrestart', None, None, ), # 4
  )

  def __init__(self, name=None, value=None, changeable=None, needrestart=None,):
    self.name = name
    self.value = value
    self.changeable = changeable
    self.needrestart = needrestart

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.changeable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.needrestart = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceParameter')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.changeable is not None:
      oprot.writeFieldBegin('changeable', TType.BOOL, 3)
      oprot.writeBool(self.changeable)
      oprot.writeFieldEnd()
    if self.needrestart is not None:
      oprot.writeFieldBegin('needrestart', TType.BOOL, 4)
      oprot.writeBool(self.needrestart)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceInfo:
  """
  Attributes:
   - sid
   - stype
   - machine
   - status
   - pid
   - uptime
   - backendaddr
   - frontendaddr
   - parameters
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'stype', None, None, ), # 2
    (3, TType.STRING, 'machine', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.I32, 'pid', None, None, ), # 5
    (6, TType.I32, 'uptime', None, None, ), # 6
    (7, TType.STRING, 'backendaddr', None, None, ), # 7
    (8, TType.STRING, 'frontendaddr', None, None, ), # 8
    (9, TType.LIST, 'parameters', (TType.STRUCT,(ServiceParameter, ServiceParameter.thrift_spec)), None, ), # 9
  )

  def __init__(self, sid=None, stype=None, machine=None, status=None, pid=None, uptime=None, backendaddr=None, frontendaddr=None, parameters=None,):
    self.sid = sid
    self.stype = stype
    self.machine = machine
    self.status = status
    self.pid = pid
    self.uptime = uptime
    self.backendaddr = backendaddr
    self.frontendaddr = frontendaddr
    self.parameters = parameters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stype = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.machine = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.uptime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.backendaddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.frontendaddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.parameters = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ServiceParameter()
            _elem5.read(iprot)
            self.parameters.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceInfo')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.stype is not None:
      oprot.writeFieldBegin('stype', TType.STRING, 2)
      oprot.writeString(self.stype)
      oprot.writeFieldEnd()
    if self.machine is not None:
      oprot.writeFieldBegin('machine', TType.STRING, 3)
      oprot.writeString(self.machine)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 5)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    if self.uptime is not None:
      oprot.writeFieldBegin('uptime', TType.I32, 6)
      oprot.writeI32(self.uptime)
      oprot.writeFieldEnd()
    if self.backendaddr is not None:
      oprot.writeFieldBegin('backendaddr', TType.STRING, 7)
      oprot.writeString(self.backendaddr)
      oprot.writeFieldEnd()
    if self.frontendaddr is not None:
      oprot.writeFieldBegin('frontendaddr', TType.STRING, 8)
      oprot.writeString(self.frontendaddr)
      oprot.writeFieldEnd()
    if self.parameters is not None:
      oprot.writeFieldBegin('parameters', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.parameters))
      for iter6 in self.parameters:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
