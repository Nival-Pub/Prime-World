/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RerollShopGroupProbability : TBase
  {
    private string _persistentId;
    private int _rerollTime;
    private int _probability;
    private int _minUpgradeLevel;
    private int _maxUpgradeLevel;

    public string PersistentId
    {
      get
      {
        return _persistentId;
      }
      set
      {
        __isset.persistentId = true;
        this._persistentId = value;
      }
    }

    public int RerollTime
    {
      get
      {
        return _rerollTime;
      }
      set
      {
        __isset.rerollTime = true;
        this._rerollTime = value;
      }
    }

    public int Probability
    {
      get
      {
        return _probability;
      }
      set
      {
        __isset.probability = true;
        this._probability = value;
      }
    }

    public int MinUpgradeLevel
    {
      get
      {
        return _minUpgradeLevel;
      }
      set
      {
        __isset.minUpgradeLevel = true;
        this._minUpgradeLevel = value;
      }
    }

    public int MaxUpgradeLevel
    {
      get
      {
        return _maxUpgradeLevel;
      }
      set
      {
        __isset.maxUpgradeLevel = true;
        this._maxUpgradeLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool persistentId;
      public bool rerollTime;
      public bool probability;
      public bool minUpgradeLevel;
      public bool maxUpgradeLevel;
    }

    public RerollShopGroupProbability() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              PersistentId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RerollTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Probability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              MinUpgradeLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MaxUpgradeLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RerollShopGroupProbability");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PersistentId != null && __isset.persistentId) {
        field.Name = "persistentId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersistentId);
        oprot.WriteFieldEnd();
      }
      if (__isset.rerollTime) {
        field.Name = "rerollTime";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RerollTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.probability) {
        field.Name = "probability";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Probability);
        oprot.WriteFieldEnd();
      }
      if (__isset.minUpgradeLevel) {
        field.Name = "minUpgradeLevel";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MinUpgradeLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxUpgradeLevel) {
        field.Name = "maxUpgradeLevel";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxUpgradeLevel);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RerollShopGroupProbability(");
      sb.Append("PersistentId: ");
      sb.Append(PersistentId);
      sb.Append(",RerollTime: ");
      sb.Append(RerollTime);
      sb.Append(",Probability: ");
      sb.Append(Probability);
      sb.Append(",MinUpgradeLevel: ");
      sb.Append(MinUpgradeLevel);
      sb.Append(",MaxUpgradeLevel: ");
      sb.Append(MaxUpgradeLevel);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
