#include "stdafx.h"
#include "StateGameRoomClient.h"
#include "CoreFSM.h"
#include "GameRoomPackets.h"
#include "../Net/NetDriver.h"
#include "StateLANInit.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NCore
{

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CStateGameRoomClient::CStateGameRoomClient( CoreFSM *pContext, NNet::IDriver *pDdriver, hash_map<int,int> &_nodesMap, int _nMyNode ) 
: CStateLANBase( pContext, pDdriver )
, nodesMap( _nodesMap )
, nMyNode( _nMyNode )
, bExitToLobby( false )
{
	REGISTER_PACKET_PROCESSOR( &NCore::CStateGameRoomClient::OnHandshake );
	REGISTER_PACKET_PROCESSOR( &NCore::CStateGameRoomClient::OnNewClientNotify );
	REGISTER_PACKET_PROCESSOR( &NCore::CStateGameRoomClient::OnTestGameRoom );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStateGameRoomClient::OnClientAdd( int nClient )
{
	Send( nClient, new SConnectHandshakePacket( nMyNode ) );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStateGameRoomClient::OnClientRemove( int nClient )
{
	for ( hash_map<int,int>::iterator it = nodesMap.begin(); it != nodesMap.end(); ++it )
	{
		if ( it->second == nClient )
		{
			if ( it->first == 0 )		// Game Host
			{
				bExitToLobby = true;
			}

			nodesMap.erase( it );
			return;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStateGameRoomClient::OnKicked()
{
	bExitToLobby = true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CStateGameRoomClient::OnHandshake( int nClient, struct SConnectHandshakePacket *pPacket )
{
	nodesMap[pPacket->nNode] = nClient;
	return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CStateGameRoomClient::OnNewClientNotify( int nClient, struct SNewClientNotifyPacket *pPacket )
{
	TryToConnectTo( pPacket->szIP, pPacket->nPort );
	return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IBaseFSMState* CStateGameRoomClient::Step()
{
	CStateLANBase::Step();

	if ( bExitToLobby )
	{
		return new CStateLANInit( pContext );
	}
	return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CStateGameRoomClient::OnTestGameRoom( int nClient, struct STestGameRoomPacket *pPacket )
{
	return true;
}
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; // namespace NCore
