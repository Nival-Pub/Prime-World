#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "SceneTypes.h"

namespace Input
{
  class Event;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NScene
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	_interface ICamera;
	struct SCameraPosition;
	class CameraControllersContainer;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	_interface ICameraController : public CObjectBase
	{
	private:
		virtual void SetCamera( ICamera *pCamera ) = 0;
	public:
		virtual const bool IsEffect() const = 0;
		virtual const bool IsActive() const = 0;

		virtual void Update( 
			SCameraPosition				* pWantedPos,
			const SCameraPosition & currentPos,
			const SCameraPosition & wantedPos,
			Time										timeDiff
			) = 0;

		virtual bool ProcessEvent( const Input::Event& _eEvent ) = 0;

		friend CameraControllersContainer;
	};
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICameraController *CreateFreeCameraController();
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  _interface ICallBackCameraController : public CObjectBase
  {
    virtual void CallBack() = 0;
  };
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}