/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{
  public partial class StatisticService {
    public interface Iface {
      void LoginUsers(List<LoginInfo> logins);
      #if SILVERLIGHT
      IAsyncResult Begin_LoginUsers(AsyncCallback callback, object state, List<LoginInfo> logins);
      void End_LoginUsers(IAsyncResult asyncResult);
      #endif
      void LogoutUsers(List<LoginInfo> logins);
      #if SILVERLIGHT
      IAsyncResult Begin_LogoutUsers(AsyncCallback callback, object state, List<LoginInfo> logins);
      void End_LogoutUsers(IAsyncResult asyncResult);
      #endif
      void FactionSelect(List<FactionSelectInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_FactionSelect(AsyncCallback callback, object state, List<FactionSelectInfo> infos);
      void End_FactionSelect(IAsyncResult asyncResult);
      #endif
      void MoveTalentToSet(List<MoveTalentInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_MoveTalentToSet(AsyncCallback callback, object state, List<MoveTalentInfo> infos);
      void End_MoveTalentToSet(IAsyncResult asyncResult);
      #endif
      void MoveTalentFromSet(List<MoveTalentInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_MoveTalentFromSet(AsyncCallback callback, object state, List<MoveTalentInfo> infos);
      void End_MoveTalentFromSet(IAsyncResult asyncResult);
      #endif
      void UnlockHero(List<UnlockHeroInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_UnlockHero(AsyncCallback callback, object state, List<UnlockHeroInfo> infos);
      void End_UnlockHero(IAsyncResult asyncResult);
      #endif
      void MoveHeroToBath(List<MoveToBathInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_MoveHeroToBath(AsyncCallback callback, object state, List<MoveToBathInfo> infos);
      void End_MoveHeroToBath(IAsyncResult asyncResult);
      #endif
      void ResourcesChange(List<ResourcesChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_ResourcesChange(AsyncCallback callback, object state, List<ResourcesChangeInfo> infos);
      void End_ResourcesChange(IAsyncResult asyncResult);
      #endif
      void QuestChange(List<QuestChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_QuestChange(AsyncCallback callback, object state, List<QuestChangeInfo> infos);
      void End_QuestChange(IAsyncResult asyncResult);
      #endif
      void DynamicQuestChange(List<DynamicQuestChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_DynamicQuestChange(AsyncCallback callback, object state, List<DynamicQuestChangeInfo> infos);
      void End_DynamicQuestChange(IAsyncResult asyncResult);
      #endif
      void TournamentQuestChange(List<TournamentQuestChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_TournamentQuestChange(AsyncCallback callback, object state, List<TournamentQuestChangeInfo> infos);
      void End_TournamentQuestChange(IAsyncResult asyncResult);
      #endif
      void TutorialStateChange(List<TutorialStateChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_TutorialStateChange(AsyncCallback callback, object state, List<TutorialStateChangeInfo> infos);
      void End_TutorialStateChange(IAsyncResult asyncResult);
      #endif
      void TalentChange(List<TalentChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_TalentChange(AsyncCallback callback, object state, List<TalentChangeInfo> infos);
      void End_TalentChange(IAsyncResult asyncResult);
      #endif
      void JoinPvpSession(List<JoinSessionInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_JoinPvpSession(AsyncCallback callback, object state, List<JoinSessionInfo> infos);
      void End_JoinPvpSession(IAsyncResult asyncResult);
      #endif
      void GiveSessionAwards(List<SessionAwardsInfo> info);
      #if SILVERLIGHT
      IAsyncResult Begin_GiveSessionAwards(AsyncCallback callback, object state, List<SessionAwardsInfo> info);
      void End_GiveSessionAwards(IAsyncResult asyncResult);
      #endif
      void RatingChange(List<RatingChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RatingChange(AsyncCallback callback, object state, List<RatingChangeInfo> infos);
      void End_RatingChange(IAsyncResult asyncResult);
      #endif
      void HeroLevelChange(List<HeroLevelChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_HeroLevelChange(AsyncCallback callback, object state, List<HeroLevelChangeInfo> infos);
      void End_HeroLevelChange(IAsyncResult asyncResult);
      #endif
      void HeroRankChange(List<HeroRankChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_HeroRankChange(AsyncCallback callback, object state, List<HeroRankChangeInfo> infos);
      void End_HeroRankChange(IAsyncResult asyncResult);
      #endif
      void CastleLevelChange(List<CastleLevelChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_CastleLevelChange(AsyncCallback callback, object state, List<CastleLevelChangeInfo> infos);
      void End_CastleLevelChange(IAsyncResult asyncResult);
      #endif
      void AfterParty(List<AfterPartyInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_AfterParty(AsyncCallback callback, object state, List<AfterPartyInfo> infos);
      void End_AfterParty(IAsyncResult asyncResult);
      #endif
      void LeaverPointsChange(List<LeaverPointsChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_LeaverPointsChange(AsyncCallback callback, object state, List<LeaverPointsChangeInfo> infos);
      void End_LeaverPointsChange(IAsyncResult asyncResult);
      #endif
      void ReRollShop(List<ReRollShopInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_ReRollShop(AsyncCallback callback, object state, List<ReRollShopInfo> infos);
      void End_ReRollShop(IAsyncResult asyncResult);
      #endif
      void ChatMessages(List<ChatMessageInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_ChatMessages(AsyncCallback callback, object state, List<ChatMessageInfo> infos);
      void End_ChatMessages(IAsyncResult asyncResult);
      #endif
      void ClientPings(List<ClientPingInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_ClientPings(AsyncCallback callback, object state, List<ClientPingInfo> infos);
      void End_ClientPings(IAsyncResult asyncResult);
      #endif
      void UserClaims(List<ClaimInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_UserClaims(AsyncCallback callback, object state, List<ClaimInfo> infos);
      void End_UserClaims(IAsyncResult asyncResult);
      #endif
      void GMEditUser(List<GMEditFieldInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GMEditUser(AsyncCallback callback, object state, List<GMEditFieldInfo> infos);
      void End_GMEditUser(IAsyncResult asyncResult);
      #endif
      void GMUnlockHero(List<GMHeroActionInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GMUnlockHero(AsyncCallback callback, object state, List<GMHeroActionInfo> infos);
      void End_GMUnlockHero(IAsyncResult asyncResult);
      #endif
      void GMLockHero(List<GMHeroActionInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GMLockHero(AsyncCallback callback, object state, List<GMHeroActionInfo> infos);
      void End_GMLockHero(IAsyncResult asyncResult);
      #endif
      void GMOperation(List<GMOperationInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GMOperation(AsyncCallback callback, object state, List<GMOperationInfo> infos);
      void End_GMOperation(IAsyncResult asyncResult);
      #endif
      void GMUserOperation(List<GMUserOperationInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GMUserOperation(AsyncCallback callback, object state, List<GMUserOperationInfo> infos);
      void End_GMUserOperation(IAsyncResult asyncResult);
      #endif
      void MonitoringResults(List<MonitoringResultInfo> results);
      #if SILVERLIGHT
      IAsyncResult Begin_MonitoringResults(AsyncCallback callback, object state, List<MonitoringResultInfo> results);
      void End_MonitoringResults(IAsyncResult asyncResult);
      #endif
      void AddIgnore(List<AddIgnoreInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_AddIgnore(AsyncCallback callback, object state, List<AddIgnoreInfo> infos);
      void End_AddIgnore(IAsyncResult asyncResult);
      #endif
      void RemoveIgnore(List<RemoveIgnoreInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveIgnore(AsyncCallback callback, object state, List<RemoveIgnoreInfo> infos);
      void End_RemoveIgnore(IAsyncResult asyncResult);
      #endif
      void LauncherStart(List<LauncherInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_LauncherStart(AsyncCallback callback, object state, List<LauncherInfo> infos);
      void End_LauncherStart(IAsyncResult asyncResult);
      #endif
      void LauncherEvents(List<LauncherEventsInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_LauncherEvents(AsyncCallback callback, object state, List<LauncherEventsInfo> infos);
      void End_LauncherEvents(IAsyncResult asyncResult);
      #endif
      void LauncherDActions(List<LauncherDActionsInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_LauncherDActions(AsyncCallback callback, object state, List<LauncherDActionsInfo> infos);
      void End_LauncherDActions(IAsyncResult asyncResult);
      #endif
      void SocialRegister(List<SocialRegisterInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_SocialRegister(AsyncCallback callback, object state, List<SocialRegisterInfo> infos);
      void End_SocialRegister(IAsyncResult asyncResult);
      #endif
      void SocialJoin(List<SocialJoinInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_SocialJoin(AsyncCallback callback, object state, List<SocialJoinInfo> infos);
      void End_SocialJoin(IAsyncResult asyncResult);
      #endif
      void SocialMerge(List<SocialMergeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_SocialMerge(AsyncCallback callback, object state, List<SocialMergeInfo> infos);
      void End_SocialMerge(IAsyncResult asyncResult);
      #endif
      void GuildCreated(List<GuildInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildCreated(AsyncCallback callback, object state, List<GuildInfo> infos);
      void End_GuildCreated(IAsyncResult asyncResult);
      #endif
      void GuildRenamed(List<GuildInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildRenamed(AsyncCallback callback, object state, List<GuildInfo> infos);
      void End_GuildRenamed(IAsyncResult asyncResult);
      #endif
      void GuildJoined(List<GuildCoreInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildJoined(AsyncCallback callback, object state, List<GuildCoreInfo> infos);
      void End_GuildJoined(IAsyncResult asyncResult);
      #endif
      void GuildLeaved(List<GuildLeaveInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildLeaved(AsyncCallback callback, object state, List<GuildLeaveInfo> infos);
      void End_GuildLeaved(IAsyncResult asyncResult);
      #endif
      void GuildDisbanded(List<GuildCoreInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildDisbanded(AsyncCallback callback, object state, List<GuildCoreInfo> infos);
      void End_GuildDisbanded(IAsyncResult asyncResult);
      #endif
      void GuildShopBuy(List<GuildShopBuyInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildShopBuy(AsyncCallback callback, object state, List<GuildShopBuyInfo> infos);
      void End_GuildShopBuy(IAsyncResult asyncResult);
      #endif
      void GuildSiege(List<GuildSiegeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildSiege(AsyncCallback callback, object state, List<GuildSiegeInfo> infos);
      void End_GuildSiege(IAsyncResult asyncResult);
      #endif
      void GuildDailyStats(List<GuildDailyStatsInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildDailyStats(AsyncCallback callback, object state, List<GuildDailyStatsInfo> infos);
      void End_GuildDailyStats(IAsyncResult asyncResult);
      #endif
      void GuildInteraction(List<GuildInteractionInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildInteraction(AsyncCallback callback, object state, List<GuildInteractionInfo> infos);
      void End_GuildInteraction(IAsyncResult asyncResult);
      #endif
      void GuildPointsChange(List<GuildPointsChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GuildPointsChange(AsyncCallback callback, object state, List<GuildPointsChangeInfo> infos);
      void End_GuildPointsChange(IAsyncResult asyncResult);
      #endif
      void RuneExpire(List<RuneExpireInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RuneExpire(AsyncCallback callback, object state, List<RuneExpireInfo> infos);
      void End_RuneExpire(IAsyncResult asyncResult);
      #endif
      void RuneUnsoulbound(List<RuneSoulboundInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RuneUnsoulbound(AsyncCallback callback, object state, List<RuneSoulboundInfo> infos);
      void End_RuneUnsoulbound(IAsyncResult asyncResult);
      #endif
      void RuneReplenish(List<RuneReplenishInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RuneReplenish(AsyncCallback callback, object state, List<RuneReplenishInfo> infos);
      void End_RuneReplenish(IAsyncResult asyncResult);
      #endif
      void RuneHeroApply(List<RuneHeroApplyInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RuneHeroApply(AsyncCallback callback, object state, List<RuneHeroApplyInfo> infos);
      void End_RuneHeroApply(IAsyncResult asyncResult);
      #endif
      void RuneRoll(List<RuneRollInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_RuneRoll(AsyncCallback callback, object state, List<RuneRollInfo> infos);
      void End_RuneRoll(IAsyncResult asyncResult);
      #endif
      void GWEventAdd(List<GWEventInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GWEventAdd(AsyncCallback callback, object state, List<GWEventInfo> infos);
      void End_GWEventAdd(IAsyncResult asyncResult);
      #endif
      void GWScoreChange(List<GWScoreChangeInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_GWScoreChange(AsyncCallback callback, object state, List<GWScoreChangeInfo> infos);
      void End_GWScoreChange(IAsyncResult asyncResult);
      #endif
      void QuestEventStageChange(List<QuestEventsStagesInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_QuestEventStageChange(AsyncCallback callback, object state, List<QuestEventsStagesInfo> infos);
      void End_QuestEventStageChange(IAsyncResult asyncResult);
      #endif
      void QuestEventStateChange(List<QuestEventsStatesInfo> infos);
      #if SILVERLIGHT
      IAsyncResult Begin_QuestEventStateChange(AsyncCallback callback, object state, List<QuestEventsStatesInfo> infos);
      void End_QuestEventStateChange(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_LoginUsers(AsyncCallback callback, object state, List<LoginInfo> logins)
      {
        return send_LoginUsers(callback, state, logins);
      }

      public void End_LoginUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LoginUsers();
      }

      #endif

      public void LoginUsers(List<LoginInfo> logins)
      {
        #if !SILVERLIGHT
        send_LoginUsers(logins);
        recv_LoginUsers();

        #else
        var asyncResult = Begin_LoginUsers(null, null, logins);
        End_LoginUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LoginUsers(AsyncCallback callback, object state, List<LoginInfo> logins)
      #else
      public void send_LoginUsers(List<LoginInfo> logins)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LoginUsers", TMessageType.Call, seqid_));
        LoginUsers_args args = new LoginUsers_args();
        args.Logins = logins;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LoginUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoginUsers_result result = new LoginUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LogoutUsers(AsyncCallback callback, object state, List<LoginInfo> logins)
      {
        return send_LogoutUsers(callback, state, logins);
      }

      public void End_LogoutUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LogoutUsers();
      }

      #endif

      public void LogoutUsers(List<LoginInfo> logins)
      {
        #if !SILVERLIGHT
        send_LogoutUsers(logins);
        recv_LogoutUsers();

        #else
        var asyncResult = Begin_LogoutUsers(null, null, logins);
        End_LogoutUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LogoutUsers(AsyncCallback callback, object state, List<LoginInfo> logins)
      #else
      public void send_LogoutUsers(List<LoginInfo> logins)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LogoutUsers", TMessageType.Call, seqid_));
        LogoutUsers_args args = new LogoutUsers_args();
        args.Logins = logins;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LogoutUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LogoutUsers_result result = new LogoutUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FactionSelect(AsyncCallback callback, object state, List<FactionSelectInfo> infos)
      {
        return send_FactionSelect(callback, state, infos);
      }

      public void End_FactionSelect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_FactionSelect();
      }

      #endif

      public void FactionSelect(List<FactionSelectInfo> infos)
      {
        #if !SILVERLIGHT
        send_FactionSelect(infos);
        recv_FactionSelect();

        #else
        var asyncResult = Begin_FactionSelect(null, null, infos);
        End_FactionSelect(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FactionSelect(AsyncCallback callback, object state, List<FactionSelectInfo> infos)
      #else
      public void send_FactionSelect(List<FactionSelectInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FactionSelect", TMessageType.Call, seqid_));
        FactionSelect_args args = new FactionSelect_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_FactionSelect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FactionSelect_result result = new FactionSelect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MoveTalentToSet(AsyncCallback callback, object state, List<MoveTalentInfo> infos)
      {
        return send_MoveTalentToSet(callback, state, infos);
      }

      public void End_MoveTalentToSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_MoveTalentToSet();
      }

      #endif

      public void MoveTalentToSet(List<MoveTalentInfo> infos)
      {
        #if !SILVERLIGHT
        send_MoveTalentToSet(infos);
        recv_MoveTalentToSet();

        #else
        var asyncResult = Begin_MoveTalentToSet(null, null, infos);
        End_MoveTalentToSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MoveTalentToSet(AsyncCallback callback, object state, List<MoveTalentInfo> infos)
      #else
      public void send_MoveTalentToSet(List<MoveTalentInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MoveTalentToSet", TMessageType.Call, seqid_));
        MoveTalentToSet_args args = new MoveTalentToSet_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_MoveTalentToSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MoveTalentToSet_result result = new MoveTalentToSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MoveTalentFromSet(AsyncCallback callback, object state, List<MoveTalentInfo> infos)
      {
        return send_MoveTalentFromSet(callback, state, infos);
      }

      public void End_MoveTalentFromSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_MoveTalentFromSet();
      }

      #endif

      public void MoveTalentFromSet(List<MoveTalentInfo> infos)
      {
        #if !SILVERLIGHT
        send_MoveTalentFromSet(infos);
        recv_MoveTalentFromSet();

        #else
        var asyncResult = Begin_MoveTalentFromSet(null, null, infos);
        End_MoveTalentFromSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MoveTalentFromSet(AsyncCallback callback, object state, List<MoveTalentInfo> infos)
      #else
      public void send_MoveTalentFromSet(List<MoveTalentInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MoveTalentFromSet", TMessageType.Call, seqid_));
        MoveTalentFromSet_args args = new MoveTalentFromSet_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_MoveTalentFromSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MoveTalentFromSet_result result = new MoveTalentFromSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnlockHero(AsyncCallback callback, object state, List<UnlockHeroInfo> infos)
      {
        return send_UnlockHero(callback, state, infos);
      }

      public void End_UnlockHero(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UnlockHero();
      }

      #endif

      public void UnlockHero(List<UnlockHeroInfo> infos)
      {
        #if !SILVERLIGHT
        send_UnlockHero(infos);
        recv_UnlockHero();

        #else
        var asyncResult = Begin_UnlockHero(null, null, infos);
        End_UnlockHero(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnlockHero(AsyncCallback callback, object state, List<UnlockHeroInfo> infos)
      #else
      public void send_UnlockHero(List<UnlockHeroInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnlockHero", TMessageType.Call, seqid_));
        UnlockHero_args args = new UnlockHero_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UnlockHero()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnlockHero_result result = new UnlockHero_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MoveHeroToBath(AsyncCallback callback, object state, List<MoveToBathInfo> infos)
      {
        return send_MoveHeroToBath(callback, state, infos);
      }

      public void End_MoveHeroToBath(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_MoveHeroToBath();
      }

      #endif

      public void MoveHeroToBath(List<MoveToBathInfo> infos)
      {
        #if !SILVERLIGHT
        send_MoveHeroToBath(infos);
        recv_MoveHeroToBath();

        #else
        var asyncResult = Begin_MoveHeroToBath(null, null, infos);
        End_MoveHeroToBath(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MoveHeroToBath(AsyncCallback callback, object state, List<MoveToBathInfo> infos)
      #else
      public void send_MoveHeroToBath(List<MoveToBathInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MoveHeroToBath", TMessageType.Call, seqid_));
        MoveHeroToBath_args args = new MoveHeroToBath_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_MoveHeroToBath()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MoveHeroToBath_result result = new MoveHeroToBath_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResourcesChange(AsyncCallback callback, object state, List<ResourcesChangeInfo> infos)
      {
        return send_ResourcesChange(callback, state, infos);
      }

      public void End_ResourcesChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ResourcesChange();
      }

      #endif

      public void ResourcesChange(List<ResourcesChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_ResourcesChange(infos);
        recv_ResourcesChange();

        #else
        var asyncResult = Begin_ResourcesChange(null, null, infos);
        End_ResourcesChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResourcesChange(AsyncCallback callback, object state, List<ResourcesChangeInfo> infos)
      #else
      public void send_ResourcesChange(List<ResourcesChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResourcesChange", TMessageType.Call, seqid_));
        ResourcesChange_args args = new ResourcesChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ResourcesChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResourcesChange_result result = new ResourcesChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QuestChange(AsyncCallback callback, object state, List<QuestChangeInfo> infos)
      {
        return send_QuestChange(callback, state, infos);
      }

      public void End_QuestChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_QuestChange();
      }

      #endif

      public void QuestChange(List<QuestChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_QuestChange(infos);
        recv_QuestChange();

        #else
        var asyncResult = Begin_QuestChange(null, null, infos);
        End_QuestChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuestChange(AsyncCallback callback, object state, List<QuestChangeInfo> infos)
      #else
      public void send_QuestChange(List<QuestChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QuestChange", TMessageType.Call, seqid_));
        QuestChange_args args = new QuestChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_QuestChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuestChange_result result = new QuestChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DynamicQuestChange(AsyncCallback callback, object state, List<DynamicQuestChangeInfo> infos)
      {
        return send_DynamicQuestChange(callback, state, infos);
      }

      public void End_DynamicQuestChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DynamicQuestChange();
      }

      #endif

      public void DynamicQuestChange(List<DynamicQuestChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_DynamicQuestChange(infos);
        recv_DynamicQuestChange();

        #else
        var asyncResult = Begin_DynamicQuestChange(null, null, infos);
        End_DynamicQuestChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DynamicQuestChange(AsyncCallback callback, object state, List<DynamicQuestChangeInfo> infos)
      #else
      public void send_DynamicQuestChange(List<DynamicQuestChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DynamicQuestChange", TMessageType.Call, seqid_));
        DynamicQuestChange_args args = new DynamicQuestChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_DynamicQuestChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DynamicQuestChange_result result = new DynamicQuestChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TournamentQuestChange(AsyncCallback callback, object state, List<TournamentQuestChangeInfo> infos)
      {
        return send_TournamentQuestChange(callback, state, infos);
      }

      public void End_TournamentQuestChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TournamentQuestChange();
      }

      #endif

      public void TournamentQuestChange(List<TournamentQuestChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_TournamentQuestChange(infos);
        recv_TournamentQuestChange();

        #else
        var asyncResult = Begin_TournamentQuestChange(null, null, infos);
        End_TournamentQuestChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TournamentQuestChange(AsyncCallback callback, object state, List<TournamentQuestChangeInfo> infos)
      #else
      public void send_TournamentQuestChange(List<TournamentQuestChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TournamentQuestChange", TMessageType.Call, seqid_));
        TournamentQuestChange_args args = new TournamentQuestChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TournamentQuestChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TournamentQuestChange_result result = new TournamentQuestChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TutorialStateChange(AsyncCallback callback, object state, List<TutorialStateChangeInfo> infos)
      {
        return send_TutorialStateChange(callback, state, infos);
      }

      public void End_TutorialStateChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TutorialStateChange();
      }

      #endif

      public void TutorialStateChange(List<TutorialStateChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_TutorialStateChange(infos);
        recv_TutorialStateChange();

        #else
        var asyncResult = Begin_TutorialStateChange(null, null, infos);
        End_TutorialStateChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TutorialStateChange(AsyncCallback callback, object state, List<TutorialStateChangeInfo> infos)
      #else
      public void send_TutorialStateChange(List<TutorialStateChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TutorialStateChange", TMessageType.Call, seqid_));
        TutorialStateChange_args args = new TutorialStateChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TutorialStateChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TutorialStateChange_result result = new TutorialStateChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TalentChange(AsyncCallback callback, object state, List<TalentChangeInfo> infos)
      {
        return send_TalentChange(callback, state, infos);
      }

      public void End_TalentChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TalentChange();
      }

      #endif

      public void TalentChange(List<TalentChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_TalentChange(infos);
        recv_TalentChange();

        #else
        var asyncResult = Begin_TalentChange(null, null, infos);
        End_TalentChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TalentChange(AsyncCallback callback, object state, List<TalentChangeInfo> infos)
      #else
      public void send_TalentChange(List<TalentChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TalentChange", TMessageType.Call, seqid_));
        TalentChange_args args = new TalentChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TalentChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TalentChange_result result = new TalentChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_JoinPvpSession(AsyncCallback callback, object state, List<JoinSessionInfo> infos)
      {
        return send_JoinPvpSession(callback, state, infos);
      }

      public void End_JoinPvpSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_JoinPvpSession();
      }

      #endif

      public void JoinPvpSession(List<JoinSessionInfo> infos)
      {
        #if !SILVERLIGHT
        send_JoinPvpSession(infos);
        recv_JoinPvpSession();

        #else
        var asyncResult = Begin_JoinPvpSession(null, null, infos);
        End_JoinPvpSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_JoinPvpSession(AsyncCallback callback, object state, List<JoinSessionInfo> infos)
      #else
      public void send_JoinPvpSession(List<JoinSessionInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("JoinPvpSession", TMessageType.Call, seqid_));
        JoinPvpSession_args args = new JoinPvpSession_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_JoinPvpSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        JoinPvpSession_result result = new JoinPvpSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GiveSessionAwards(AsyncCallback callback, object state, List<SessionAwardsInfo> info)
      {
        return send_GiveSessionAwards(callback, state, info);
      }

      public void End_GiveSessionAwards(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GiveSessionAwards();
      }

      #endif

      public void GiveSessionAwards(List<SessionAwardsInfo> info)
      {
        #if !SILVERLIGHT
        send_GiveSessionAwards(info);
        recv_GiveSessionAwards();

        #else
        var asyncResult = Begin_GiveSessionAwards(null, null, info);
        End_GiveSessionAwards(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GiveSessionAwards(AsyncCallback callback, object state, List<SessionAwardsInfo> info)
      #else
      public void send_GiveSessionAwards(List<SessionAwardsInfo> info)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GiveSessionAwards", TMessageType.Call, seqid_));
        GiveSessionAwards_args args = new GiveSessionAwards_args();
        args.Info = info;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GiveSessionAwards()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GiveSessionAwards_result result = new GiveSessionAwards_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RatingChange(AsyncCallback callback, object state, List<RatingChangeInfo> infos)
      {
        return send_RatingChange(callback, state, infos);
      }

      public void End_RatingChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RatingChange();
      }

      #endif

      public void RatingChange(List<RatingChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_RatingChange(infos);
        recv_RatingChange();

        #else
        var asyncResult = Begin_RatingChange(null, null, infos);
        End_RatingChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RatingChange(AsyncCallback callback, object state, List<RatingChangeInfo> infos)
      #else
      public void send_RatingChange(List<RatingChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RatingChange", TMessageType.Call, seqid_));
        RatingChange_args args = new RatingChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RatingChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RatingChange_result result = new RatingChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_HeroLevelChange(AsyncCallback callback, object state, List<HeroLevelChangeInfo> infos)
      {
        return send_HeroLevelChange(callback, state, infos);
      }

      public void End_HeroLevelChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_HeroLevelChange();
      }

      #endif

      public void HeroLevelChange(List<HeroLevelChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_HeroLevelChange(infos);
        recv_HeroLevelChange();

        #else
        var asyncResult = Begin_HeroLevelChange(null, null, infos);
        End_HeroLevelChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_HeroLevelChange(AsyncCallback callback, object state, List<HeroLevelChangeInfo> infos)
      #else
      public void send_HeroLevelChange(List<HeroLevelChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("HeroLevelChange", TMessageType.Call, seqid_));
        HeroLevelChange_args args = new HeroLevelChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_HeroLevelChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        HeroLevelChange_result result = new HeroLevelChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_HeroRankChange(AsyncCallback callback, object state, List<HeroRankChangeInfo> infos)
      {
        return send_HeroRankChange(callback, state, infos);
      }

      public void End_HeroRankChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_HeroRankChange();
      }

      #endif

      public void HeroRankChange(List<HeroRankChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_HeroRankChange(infos);
        recv_HeroRankChange();

        #else
        var asyncResult = Begin_HeroRankChange(null, null, infos);
        End_HeroRankChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_HeroRankChange(AsyncCallback callback, object state, List<HeroRankChangeInfo> infos)
      #else
      public void send_HeroRankChange(List<HeroRankChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("HeroRankChange", TMessageType.Call, seqid_));
        HeroRankChange_args args = new HeroRankChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_HeroRankChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        HeroRankChange_result result = new HeroRankChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CastleLevelChange(AsyncCallback callback, object state, List<CastleLevelChangeInfo> infos)
      {
        return send_CastleLevelChange(callback, state, infos);
      }

      public void End_CastleLevelChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CastleLevelChange();
      }

      #endif

      public void CastleLevelChange(List<CastleLevelChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_CastleLevelChange(infos);
        recv_CastleLevelChange();

        #else
        var asyncResult = Begin_CastleLevelChange(null, null, infos);
        End_CastleLevelChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CastleLevelChange(AsyncCallback callback, object state, List<CastleLevelChangeInfo> infos)
      #else
      public void send_CastleLevelChange(List<CastleLevelChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CastleLevelChange", TMessageType.Call, seqid_));
        CastleLevelChange_args args = new CastleLevelChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CastleLevelChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CastleLevelChange_result result = new CastleLevelChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AfterParty(AsyncCallback callback, object state, List<AfterPartyInfo> infos)
      {
        return send_AfterParty(callback, state, infos);
      }

      public void End_AfterParty(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AfterParty();
      }

      #endif

      public void AfterParty(List<AfterPartyInfo> infos)
      {
        #if !SILVERLIGHT
        send_AfterParty(infos);
        recv_AfterParty();

        #else
        var asyncResult = Begin_AfterParty(null, null, infos);
        End_AfterParty(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AfterParty(AsyncCallback callback, object state, List<AfterPartyInfo> infos)
      #else
      public void send_AfterParty(List<AfterPartyInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AfterParty", TMessageType.Call, seqid_));
        AfterParty_args args = new AfterParty_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AfterParty()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AfterParty_result result = new AfterParty_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LeaverPointsChange(AsyncCallback callback, object state, List<LeaverPointsChangeInfo> infos)
      {
        return send_LeaverPointsChange(callback, state, infos);
      }

      public void End_LeaverPointsChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LeaverPointsChange();
      }

      #endif

      public void LeaverPointsChange(List<LeaverPointsChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_LeaverPointsChange(infos);
        recv_LeaverPointsChange();

        #else
        var asyncResult = Begin_LeaverPointsChange(null, null, infos);
        End_LeaverPointsChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LeaverPointsChange(AsyncCallback callback, object state, List<LeaverPointsChangeInfo> infos)
      #else
      public void send_LeaverPointsChange(List<LeaverPointsChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LeaverPointsChange", TMessageType.Call, seqid_));
        LeaverPointsChange_args args = new LeaverPointsChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LeaverPointsChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LeaverPointsChange_result result = new LeaverPointsChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReRollShop(AsyncCallback callback, object state, List<ReRollShopInfo> infos)
      {
        return send_ReRollShop(callback, state, infos);
      }

      public void End_ReRollShop(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ReRollShop();
      }

      #endif

      public void ReRollShop(List<ReRollShopInfo> infos)
      {
        #if !SILVERLIGHT
        send_ReRollShop(infos);
        recv_ReRollShop();

        #else
        var asyncResult = Begin_ReRollShop(null, null, infos);
        End_ReRollShop(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReRollShop(AsyncCallback callback, object state, List<ReRollShopInfo> infos)
      #else
      public void send_ReRollShop(List<ReRollShopInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReRollShop", TMessageType.Call, seqid_));
        ReRollShop_args args = new ReRollShop_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ReRollShop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReRollShop_result result = new ReRollShop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChatMessages(AsyncCallback callback, object state, List<ChatMessageInfo> infos)
      {
        return send_ChatMessages(callback, state, infos);
      }

      public void End_ChatMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ChatMessages();
      }

      #endif

      public void ChatMessages(List<ChatMessageInfo> infos)
      {
        #if !SILVERLIGHT
        send_ChatMessages(infos);
        recv_ChatMessages();

        #else
        var asyncResult = Begin_ChatMessages(null, null, infos);
        End_ChatMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChatMessages(AsyncCallback callback, object state, List<ChatMessageInfo> infos)
      #else
      public void send_ChatMessages(List<ChatMessageInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChatMessages", TMessageType.Call, seqid_));
        ChatMessages_args args = new ChatMessages_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ChatMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChatMessages_result result = new ChatMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ClientPings(AsyncCallback callback, object state, List<ClientPingInfo> infos)
      {
        return send_ClientPings(callback, state, infos);
      }

      public void End_ClientPings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ClientPings();
      }

      #endif

      public void ClientPings(List<ClientPingInfo> infos)
      {
        #if !SILVERLIGHT
        send_ClientPings(infos);
        recv_ClientPings();

        #else
        var asyncResult = Begin_ClientPings(null, null, infos);
        End_ClientPings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ClientPings(AsyncCallback callback, object state, List<ClientPingInfo> infos)
      #else
      public void send_ClientPings(List<ClientPingInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ClientPings", TMessageType.Call, seqid_));
        ClientPings_args args = new ClientPings_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ClientPings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ClientPings_result result = new ClientPings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UserClaims(AsyncCallback callback, object state, List<ClaimInfo> infos)
      {
        return send_UserClaims(callback, state, infos);
      }

      public void End_UserClaims(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UserClaims();
      }

      #endif

      public void UserClaims(List<ClaimInfo> infos)
      {
        #if !SILVERLIGHT
        send_UserClaims(infos);
        recv_UserClaims();

        #else
        var asyncResult = Begin_UserClaims(null, null, infos);
        End_UserClaims(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UserClaims(AsyncCallback callback, object state, List<ClaimInfo> infos)
      #else
      public void send_UserClaims(List<ClaimInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UserClaims", TMessageType.Call, seqid_));
        UserClaims_args args = new UserClaims_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UserClaims()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UserClaims_result result = new UserClaims_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GMEditUser(AsyncCallback callback, object state, List<GMEditFieldInfo> infos)
      {
        return send_GMEditUser(callback, state, infos);
      }

      public void End_GMEditUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GMEditUser();
      }

      #endif

      public void GMEditUser(List<GMEditFieldInfo> infos)
      {
        #if !SILVERLIGHT
        send_GMEditUser(infos);
        recv_GMEditUser();

        #else
        var asyncResult = Begin_GMEditUser(null, null, infos);
        End_GMEditUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GMEditUser(AsyncCallback callback, object state, List<GMEditFieldInfo> infos)
      #else
      public void send_GMEditUser(List<GMEditFieldInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GMEditUser", TMessageType.Call, seqid_));
        GMEditUser_args args = new GMEditUser_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GMEditUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GMEditUser_result result = new GMEditUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GMUnlockHero(AsyncCallback callback, object state, List<GMHeroActionInfo> infos)
      {
        return send_GMUnlockHero(callback, state, infos);
      }

      public void End_GMUnlockHero(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GMUnlockHero();
      }

      #endif

      public void GMUnlockHero(List<GMHeroActionInfo> infos)
      {
        #if !SILVERLIGHT
        send_GMUnlockHero(infos);
        recv_GMUnlockHero();

        #else
        var asyncResult = Begin_GMUnlockHero(null, null, infos);
        End_GMUnlockHero(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GMUnlockHero(AsyncCallback callback, object state, List<GMHeroActionInfo> infos)
      #else
      public void send_GMUnlockHero(List<GMHeroActionInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GMUnlockHero", TMessageType.Call, seqid_));
        GMUnlockHero_args args = new GMUnlockHero_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GMUnlockHero()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GMUnlockHero_result result = new GMUnlockHero_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GMLockHero(AsyncCallback callback, object state, List<GMHeroActionInfo> infos)
      {
        return send_GMLockHero(callback, state, infos);
      }

      public void End_GMLockHero(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GMLockHero();
      }

      #endif

      public void GMLockHero(List<GMHeroActionInfo> infos)
      {
        #if !SILVERLIGHT
        send_GMLockHero(infos);
        recv_GMLockHero();

        #else
        var asyncResult = Begin_GMLockHero(null, null, infos);
        End_GMLockHero(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GMLockHero(AsyncCallback callback, object state, List<GMHeroActionInfo> infos)
      #else
      public void send_GMLockHero(List<GMHeroActionInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GMLockHero", TMessageType.Call, seqid_));
        GMLockHero_args args = new GMLockHero_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GMLockHero()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GMLockHero_result result = new GMLockHero_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GMOperation(AsyncCallback callback, object state, List<GMOperationInfo> infos)
      {
        return send_GMOperation(callback, state, infos);
      }

      public void End_GMOperation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GMOperation();
      }

      #endif

      public void GMOperation(List<GMOperationInfo> infos)
      {
        #if !SILVERLIGHT
        send_GMOperation(infos);
        recv_GMOperation();

        #else
        var asyncResult = Begin_GMOperation(null, null, infos);
        End_GMOperation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GMOperation(AsyncCallback callback, object state, List<GMOperationInfo> infos)
      #else
      public void send_GMOperation(List<GMOperationInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GMOperation", TMessageType.Call, seqid_));
        GMOperation_args args = new GMOperation_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GMOperation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GMOperation_result result = new GMOperation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GMUserOperation(AsyncCallback callback, object state, List<GMUserOperationInfo> infos)
      {
        return send_GMUserOperation(callback, state, infos);
      }

      public void End_GMUserOperation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GMUserOperation();
      }

      #endif

      public void GMUserOperation(List<GMUserOperationInfo> infos)
      {
        #if !SILVERLIGHT
        send_GMUserOperation(infos);
        recv_GMUserOperation();

        #else
        var asyncResult = Begin_GMUserOperation(null, null, infos);
        End_GMUserOperation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GMUserOperation(AsyncCallback callback, object state, List<GMUserOperationInfo> infos)
      #else
      public void send_GMUserOperation(List<GMUserOperationInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GMUserOperation", TMessageType.Call, seqid_));
        GMUserOperation_args args = new GMUserOperation_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GMUserOperation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GMUserOperation_result result = new GMUserOperation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MonitoringResults(AsyncCallback callback, object state, List<MonitoringResultInfo> results)
      {
        return send_MonitoringResults(callback, state, results);
      }

      public void End_MonitoringResults(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_MonitoringResults();
      }

      #endif

      public void MonitoringResults(List<MonitoringResultInfo> results)
      {
        #if !SILVERLIGHT
        send_MonitoringResults(results);
        recv_MonitoringResults();

        #else
        var asyncResult = Begin_MonitoringResults(null, null, results);
        End_MonitoringResults(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MonitoringResults(AsyncCallback callback, object state, List<MonitoringResultInfo> results)
      #else
      public void send_MonitoringResults(List<MonitoringResultInfo> results)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MonitoringResults", TMessageType.Call, seqid_));
        MonitoringResults_args args = new MonitoringResults_args();
        args.Results = results;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_MonitoringResults()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MonitoringResults_result result = new MonitoringResults_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddIgnore(AsyncCallback callback, object state, List<AddIgnoreInfo> infos)
      {
        return send_AddIgnore(callback, state, infos);
      }

      public void End_AddIgnore(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddIgnore();
      }

      #endif

      public void AddIgnore(List<AddIgnoreInfo> infos)
      {
        #if !SILVERLIGHT
        send_AddIgnore(infos);
        recv_AddIgnore();

        #else
        var asyncResult = Begin_AddIgnore(null, null, infos);
        End_AddIgnore(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddIgnore(AsyncCallback callback, object state, List<AddIgnoreInfo> infos)
      #else
      public void send_AddIgnore(List<AddIgnoreInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddIgnore", TMessageType.Call, seqid_));
        AddIgnore_args args = new AddIgnore_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AddIgnore()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddIgnore_result result = new AddIgnore_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveIgnore(AsyncCallback callback, object state, List<RemoveIgnoreInfo> infos)
      {
        return send_RemoveIgnore(callback, state, infos);
      }

      public void End_RemoveIgnore(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RemoveIgnore();
      }

      #endif

      public void RemoveIgnore(List<RemoveIgnoreInfo> infos)
      {
        #if !SILVERLIGHT
        send_RemoveIgnore(infos);
        recv_RemoveIgnore();

        #else
        var asyncResult = Begin_RemoveIgnore(null, null, infos);
        End_RemoveIgnore(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveIgnore(AsyncCallback callback, object state, List<RemoveIgnoreInfo> infos)
      #else
      public void send_RemoveIgnore(List<RemoveIgnoreInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveIgnore", TMessageType.Call, seqid_));
        RemoveIgnore_args args = new RemoveIgnore_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RemoveIgnore()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveIgnore_result result = new RemoveIgnore_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LauncherStart(AsyncCallback callback, object state, List<LauncherInfo> infos)
      {
        return send_LauncherStart(callback, state, infos);
      }

      public void End_LauncherStart(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LauncherStart();
      }

      #endif

      public void LauncherStart(List<LauncherInfo> infos)
      {
        #if !SILVERLIGHT
        send_LauncherStart(infos);
        recv_LauncherStart();

        #else
        var asyncResult = Begin_LauncherStart(null, null, infos);
        End_LauncherStart(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LauncherStart(AsyncCallback callback, object state, List<LauncherInfo> infos)
      #else
      public void send_LauncherStart(List<LauncherInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LauncherStart", TMessageType.Call, seqid_));
        LauncherStart_args args = new LauncherStart_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LauncherStart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LauncherStart_result result = new LauncherStart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LauncherEvents(AsyncCallback callback, object state, List<LauncherEventsInfo> infos)
      {
        return send_LauncherEvents(callback, state, infos);
      }

      public void End_LauncherEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LauncherEvents();
      }

      #endif

      public void LauncherEvents(List<LauncherEventsInfo> infos)
      {
        #if !SILVERLIGHT
        send_LauncherEvents(infos);
        recv_LauncherEvents();

        #else
        var asyncResult = Begin_LauncherEvents(null, null, infos);
        End_LauncherEvents(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LauncherEvents(AsyncCallback callback, object state, List<LauncherEventsInfo> infos)
      #else
      public void send_LauncherEvents(List<LauncherEventsInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LauncherEvents", TMessageType.Call, seqid_));
        LauncherEvents_args args = new LauncherEvents_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LauncherEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LauncherEvents_result result = new LauncherEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LauncherDActions(AsyncCallback callback, object state, List<LauncherDActionsInfo> infos)
      {
        return send_LauncherDActions(callback, state, infos);
      }

      public void End_LauncherDActions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LauncherDActions();
      }

      #endif

      public void LauncherDActions(List<LauncherDActionsInfo> infos)
      {
        #if !SILVERLIGHT
        send_LauncherDActions(infos);
        recv_LauncherDActions();

        #else
        var asyncResult = Begin_LauncherDActions(null, null, infos);
        End_LauncherDActions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LauncherDActions(AsyncCallback callback, object state, List<LauncherDActionsInfo> infos)
      #else
      public void send_LauncherDActions(List<LauncherDActionsInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LauncherDActions", TMessageType.Call, seqid_));
        LauncherDActions_args args = new LauncherDActions_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LauncherDActions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LauncherDActions_result result = new LauncherDActions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialRegister(AsyncCallback callback, object state, List<SocialRegisterInfo> infos)
      {
        return send_SocialRegister(callback, state, infos);
      }

      public void End_SocialRegister(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SocialRegister();
      }

      #endif

      public void SocialRegister(List<SocialRegisterInfo> infos)
      {
        #if !SILVERLIGHT
        send_SocialRegister(infos);
        recv_SocialRegister();

        #else
        var asyncResult = Begin_SocialRegister(null, null, infos);
        End_SocialRegister(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialRegister(AsyncCallback callback, object state, List<SocialRegisterInfo> infos)
      #else
      public void send_SocialRegister(List<SocialRegisterInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialRegister", TMessageType.Call, seqid_));
        SocialRegister_args args = new SocialRegister_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SocialRegister()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialRegister_result result = new SocialRegister_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialJoin(AsyncCallback callback, object state, List<SocialJoinInfo> infos)
      {
        return send_SocialJoin(callback, state, infos);
      }

      public void End_SocialJoin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SocialJoin();
      }

      #endif

      public void SocialJoin(List<SocialJoinInfo> infos)
      {
        #if !SILVERLIGHT
        send_SocialJoin(infos);
        recv_SocialJoin();

        #else
        var asyncResult = Begin_SocialJoin(null, null, infos);
        End_SocialJoin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialJoin(AsyncCallback callback, object state, List<SocialJoinInfo> infos)
      #else
      public void send_SocialJoin(List<SocialJoinInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialJoin", TMessageType.Call, seqid_));
        SocialJoin_args args = new SocialJoin_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SocialJoin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialJoin_result result = new SocialJoin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SocialMerge(AsyncCallback callback, object state, List<SocialMergeInfo> infos)
      {
        return send_SocialMerge(callback, state, infos);
      }

      public void End_SocialMerge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SocialMerge();
      }

      #endif

      public void SocialMerge(List<SocialMergeInfo> infos)
      {
        #if !SILVERLIGHT
        send_SocialMerge(infos);
        recv_SocialMerge();

        #else
        var asyncResult = Begin_SocialMerge(null, null, infos);
        End_SocialMerge(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SocialMerge(AsyncCallback callback, object state, List<SocialMergeInfo> infos)
      #else
      public void send_SocialMerge(List<SocialMergeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SocialMerge", TMessageType.Call, seqid_));
        SocialMerge_args args = new SocialMerge_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SocialMerge()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SocialMerge_result result = new SocialMerge_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildCreated(AsyncCallback callback, object state, List<GuildInfo> infos)
      {
        return send_GuildCreated(callback, state, infos);
      }

      public void End_GuildCreated(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildCreated();
      }

      #endif

      public void GuildCreated(List<GuildInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildCreated(infos);
        recv_GuildCreated();

        #else
        var asyncResult = Begin_GuildCreated(null, null, infos);
        End_GuildCreated(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildCreated(AsyncCallback callback, object state, List<GuildInfo> infos)
      #else
      public void send_GuildCreated(List<GuildInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildCreated", TMessageType.Call, seqid_));
        GuildCreated_args args = new GuildCreated_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildCreated()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildCreated_result result = new GuildCreated_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildRenamed(AsyncCallback callback, object state, List<GuildInfo> infos)
      {
        return send_GuildRenamed(callback, state, infos);
      }

      public void End_GuildRenamed(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildRenamed();
      }

      #endif

      public void GuildRenamed(List<GuildInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildRenamed(infos);
        recv_GuildRenamed();

        #else
        var asyncResult = Begin_GuildRenamed(null, null, infos);
        End_GuildRenamed(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildRenamed(AsyncCallback callback, object state, List<GuildInfo> infos)
      #else
      public void send_GuildRenamed(List<GuildInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildRenamed", TMessageType.Call, seqid_));
        GuildRenamed_args args = new GuildRenamed_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildRenamed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildRenamed_result result = new GuildRenamed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildJoined(AsyncCallback callback, object state, List<GuildCoreInfo> infos)
      {
        return send_GuildJoined(callback, state, infos);
      }

      public void End_GuildJoined(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildJoined();
      }

      #endif

      public void GuildJoined(List<GuildCoreInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildJoined(infos);
        recv_GuildJoined();

        #else
        var asyncResult = Begin_GuildJoined(null, null, infos);
        End_GuildJoined(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildJoined(AsyncCallback callback, object state, List<GuildCoreInfo> infos)
      #else
      public void send_GuildJoined(List<GuildCoreInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildJoined", TMessageType.Call, seqid_));
        GuildJoined_args args = new GuildJoined_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildJoined()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildJoined_result result = new GuildJoined_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildLeaved(AsyncCallback callback, object state, List<GuildLeaveInfo> infos)
      {
        return send_GuildLeaved(callback, state, infos);
      }

      public void End_GuildLeaved(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildLeaved();
      }

      #endif

      public void GuildLeaved(List<GuildLeaveInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildLeaved(infos);
        recv_GuildLeaved();

        #else
        var asyncResult = Begin_GuildLeaved(null, null, infos);
        End_GuildLeaved(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildLeaved(AsyncCallback callback, object state, List<GuildLeaveInfo> infos)
      #else
      public void send_GuildLeaved(List<GuildLeaveInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildLeaved", TMessageType.Call, seqid_));
        GuildLeaved_args args = new GuildLeaved_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildLeaved()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildLeaved_result result = new GuildLeaved_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildDisbanded(AsyncCallback callback, object state, List<GuildCoreInfo> infos)
      {
        return send_GuildDisbanded(callback, state, infos);
      }

      public void End_GuildDisbanded(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildDisbanded();
      }

      #endif

      public void GuildDisbanded(List<GuildCoreInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildDisbanded(infos);
        recv_GuildDisbanded();

        #else
        var asyncResult = Begin_GuildDisbanded(null, null, infos);
        End_GuildDisbanded(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildDisbanded(AsyncCallback callback, object state, List<GuildCoreInfo> infos)
      #else
      public void send_GuildDisbanded(List<GuildCoreInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildDisbanded", TMessageType.Call, seqid_));
        GuildDisbanded_args args = new GuildDisbanded_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildDisbanded()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildDisbanded_result result = new GuildDisbanded_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildShopBuy(AsyncCallback callback, object state, List<GuildShopBuyInfo> infos)
      {
        return send_GuildShopBuy(callback, state, infos);
      }

      public void End_GuildShopBuy(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildShopBuy();
      }

      #endif

      public void GuildShopBuy(List<GuildShopBuyInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildShopBuy(infos);
        recv_GuildShopBuy();

        #else
        var asyncResult = Begin_GuildShopBuy(null, null, infos);
        End_GuildShopBuy(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildShopBuy(AsyncCallback callback, object state, List<GuildShopBuyInfo> infos)
      #else
      public void send_GuildShopBuy(List<GuildShopBuyInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildShopBuy", TMessageType.Call, seqid_));
        GuildShopBuy_args args = new GuildShopBuy_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildShopBuy()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildShopBuy_result result = new GuildShopBuy_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildSiege(AsyncCallback callback, object state, List<GuildSiegeInfo> infos)
      {
        return send_GuildSiege(callback, state, infos);
      }

      public void End_GuildSiege(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildSiege();
      }

      #endif

      public void GuildSiege(List<GuildSiegeInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildSiege(infos);
        recv_GuildSiege();

        #else
        var asyncResult = Begin_GuildSiege(null, null, infos);
        End_GuildSiege(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildSiege(AsyncCallback callback, object state, List<GuildSiegeInfo> infos)
      #else
      public void send_GuildSiege(List<GuildSiegeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildSiege", TMessageType.Call, seqid_));
        GuildSiege_args args = new GuildSiege_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildSiege()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildSiege_result result = new GuildSiege_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildDailyStats(AsyncCallback callback, object state, List<GuildDailyStatsInfo> infos)
      {
        return send_GuildDailyStats(callback, state, infos);
      }

      public void End_GuildDailyStats(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildDailyStats();
      }

      #endif

      public void GuildDailyStats(List<GuildDailyStatsInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildDailyStats(infos);
        recv_GuildDailyStats();

        #else
        var asyncResult = Begin_GuildDailyStats(null, null, infos);
        End_GuildDailyStats(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildDailyStats(AsyncCallback callback, object state, List<GuildDailyStatsInfo> infos)
      #else
      public void send_GuildDailyStats(List<GuildDailyStatsInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildDailyStats", TMessageType.Call, seqid_));
        GuildDailyStats_args args = new GuildDailyStats_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildDailyStats()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildDailyStats_result result = new GuildDailyStats_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildInteraction(AsyncCallback callback, object state, List<GuildInteractionInfo> infos)
      {
        return send_GuildInteraction(callback, state, infos);
      }

      public void End_GuildInteraction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildInteraction();
      }

      #endif

      public void GuildInteraction(List<GuildInteractionInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildInteraction(infos);
        recv_GuildInteraction();

        #else
        var asyncResult = Begin_GuildInteraction(null, null, infos);
        End_GuildInteraction(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildInteraction(AsyncCallback callback, object state, List<GuildInteractionInfo> infos)
      #else
      public void send_GuildInteraction(List<GuildInteractionInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildInteraction", TMessageType.Call, seqid_));
        GuildInteraction_args args = new GuildInteraction_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildInteraction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildInteraction_result result = new GuildInteraction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GuildPointsChange(AsyncCallback callback, object state, List<GuildPointsChangeInfo> infos)
      {
        return send_GuildPointsChange(callback, state, infos);
      }

      public void End_GuildPointsChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GuildPointsChange();
      }

      #endif

      public void GuildPointsChange(List<GuildPointsChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_GuildPointsChange(infos);
        recv_GuildPointsChange();

        #else
        var asyncResult = Begin_GuildPointsChange(null, null, infos);
        End_GuildPointsChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GuildPointsChange(AsyncCallback callback, object state, List<GuildPointsChangeInfo> infos)
      #else
      public void send_GuildPointsChange(List<GuildPointsChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GuildPointsChange", TMessageType.Call, seqid_));
        GuildPointsChange_args args = new GuildPointsChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GuildPointsChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GuildPointsChange_result result = new GuildPointsChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuneExpire(AsyncCallback callback, object state, List<RuneExpireInfo> infos)
      {
        return send_RuneExpire(callback, state, infos);
      }

      public void End_RuneExpire(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RuneExpire();
      }

      #endif

      public void RuneExpire(List<RuneExpireInfo> infos)
      {
        #if !SILVERLIGHT
        send_RuneExpire(infos);
        recv_RuneExpire();

        #else
        var asyncResult = Begin_RuneExpire(null, null, infos);
        End_RuneExpire(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuneExpire(AsyncCallback callback, object state, List<RuneExpireInfo> infos)
      #else
      public void send_RuneExpire(List<RuneExpireInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuneExpire", TMessageType.Call, seqid_));
        RuneExpire_args args = new RuneExpire_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RuneExpire()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuneExpire_result result = new RuneExpire_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuneUnsoulbound(AsyncCallback callback, object state, List<RuneSoulboundInfo> infos)
      {
        return send_RuneUnsoulbound(callback, state, infos);
      }

      public void End_RuneUnsoulbound(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RuneUnsoulbound();
      }

      #endif

      public void RuneUnsoulbound(List<RuneSoulboundInfo> infos)
      {
        #if !SILVERLIGHT
        send_RuneUnsoulbound(infos);
        recv_RuneUnsoulbound();

        #else
        var asyncResult = Begin_RuneUnsoulbound(null, null, infos);
        End_RuneUnsoulbound(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuneUnsoulbound(AsyncCallback callback, object state, List<RuneSoulboundInfo> infos)
      #else
      public void send_RuneUnsoulbound(List<RuneSoulboundInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuneUnsoulbound", TMessageType.Call, seqid_));
        RuneUnsoulbound_args args = new RuneUnsoulbound_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RuneUnsoulbound()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuneUnsoulbound_result result = new RuneUnsoulbound_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuneReplenish(AsyncCallback callback, object state, List<RuneReplenishInfo> infos)
      {
        return send_RuneReplenish(callback, state, infos);
      }

      public void End_RuneReplenish(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RuneReplenish();
      }

      #endif

      public void RuneReplenish(List<RuneReplenishInfo> infos)
      {
        #if !SILVERLIGHT
        send_RuneReplenish(infos);
        recv_RuneReplenish();

        #else
        var asyncResult = Begin_RuneReplenish(null, null, infos);
        End_RuneReplenish(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuneReplenish(AsyncCallback callback, object state, List<RuneReplenishInfo> infos)
      #else
      public void send_RuneReplenish(List<RuneReplenishInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuneReplenish", TMessageType.Call, seqid_));
        RuneReplenish_args args = new RuneReplenish_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RuneReplenish()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuneReplenish_result result = new RuneReplenish_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuneHeroApply(AsyncCallback callback, object state, List<RuneHeroApplyInfo> infos)
      {
        return send_RuneHeroApply(callback, state, infos);
      }

      public void End_RuneHeroApply(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RuneHeroApply();
      }

      #endif

      public void RuneHeroApply(List<RuneHeroApplyInfo> infos)
      {
        #if !SILVERLIGHT
        send_RuneHeroApply(infos);
        recv_RuneHeroApply();

        #else
        var asyncResult = Begin_RuneHeroApply(null, null, infos);
        End_RuneHeroApply(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuneHeroApply(AsyncCallback callback, object state, List<RuneHeroApplyInfo> infos)
      #else
      public void send_RuneHeroApply(List<RuneHeroApplyInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuneHeroApply", TMessageType.Call, seqid_));
        RuneHeroApply_args args = new RuneHeroApply_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RuneHeroApply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuneHeroApply_result result = new RuneHeroApply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuneRoll(AsyncCallback callback, object state, List<RuneRollInfo> infos)
      {
        return send_RuneRoll(callback, state, infos);
      }

      public void End_RuneRoll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RuneRoll();
      }

      #endif

      public void RuneRoll(List<RuneRollInfo> infos)
      {
        #if !SILVERLIGHT
        send_RuneRoll(infos);
        recv_RuneRoll();

        #else
        var asyncResult = Begin_RuneRoll(null, null, infos);
        End_RuneRoll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuneRoll(AsyncCallback callback, object state, List<RuneRollInfo> infos)
      #else
      public void send_RuneRoll(List<RuneRollInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuneRoll", TMessageType.Call, seqid_));
        RuneRoll_args args = new RuneRoll_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RuneRoll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuneRoll_result result = new RuneRoll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GWEventAdd(AsyncCallback callback, object state, List<GWEventInfo> infos)
      {
        return send_GWEventAdd(callback, state, infos);
      }

      public void End_GWEventAdd(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GWEventAdd();
      }

      #endif

      public void GWEventAdd(List<GWEventInfo> infos)
      {
        #if !SILVERLIGHT
        send_GWEventAdd(infos);
        recv_GWEventAdd();

        #else
        var asyncResult = Begin_GWEventAdd(null, null, infos);
        End_GWEventAdd(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GWEventAdd(AsyncCallback callback, object state, List<GWEventInfo> infos)
      #else
      public void send_GWEventAdd(List<GWEventInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GWEventAdd", TMessageType.Call, seqid_));
        GWEventAdd_args args = new GWEventAdd_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GWEventAdd()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GWEventAdd_result result = new GWEventAdd_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GWScoreChange(AsyncCallback callback, object state, List<GWScoreChangeInfo> infos)
      {
        return send_GWScoreChange(callback, state, infos);
      }

      public void End_GWScoreChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GWScoreChange();
      }

      #endif

      public void GWScoreChange(List<GWScoreChangeInfo> infos)
      {
        #if !SILVERLIGHT
        send_GWScoreChange(infos);
        recv_GWScoreChange();

        #else
        var asyncResult = Begin_GWScoreChange(null, null, infos);
        End_GWScoreChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GWScoreChange(AsyncCallback callback, object state, List<GWScoreChangeInfo> infos)
      #else
      public void send_GWScoreChange(List<GWScoreChangeInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GWScoreChange", TMessageType.Call, seqid_));
        GWScoreChange_args args = new GWScoreChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GWScoreChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GWScoreChange_result result = new GWScoreChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QuestEventStageChange(AsyncCallback callback, object state, List<QuestEventsStagesInfo> infos)
      {
        return send_QuestEventStageChange(callback, state, infos);
      }

      public void End_QuestEventStageChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_QuestEventStageChange();
      }

      #endif

      public void QuestEventStageChange(List<QuestEventsStagesInfo> infos)
      {
        #if !SILVERLIGHT
        send_QuestEventStageChange(infos);
        recv_QuestEventStageChange();

        #else
        var asyncResult = Begin_QuestEventStageChange(null, null, infos);
        End_QuestEventStageChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuestEventStageChange(AsyncCallback callback, object state, List<QuestEventsStagesInfo> infos)
      #else
      public void send_QuestEventStageChange(List<QuestEventsStagesInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QuestEventStageChange", TMessageType.Call, seqid_));
        QuestEventStageChange_args args = new QuestEventStageChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_QuestEventStageChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuestEventStageChange_result result = new QuestEventStageChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QuestEventStateChange(AsyncCallback callback, object state, List<QuestEventsStatesInfo> infos)
      {
        return send_QuestEventStateChange(callback, state, infos);
      }

      public void End_QuestEventStateChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_QuestEventStateChange();
      }

      #endif

      public void QuestEventStateChange(List<QuestEventsStatesInfo> infos)
      {
        #if !SILVERLIGHT
        send_QuestEventStateChange(infos);
        recv_QuestEventStateChange();

        #else
        var asyncResult = Begin_QuestEventStateChange(null, null, infos);
        End_QuestEventStateChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuestEventStateChange(AsyncCallback callback, object state, List<QuestEventsStatesInfo> infos)
      #else
      public void send_QuestEventStateChange(List<QuestEventsStatesInfo> infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QuestEventStateChange", TMessageType.Call, seqid_));
        QuestEventStateChange_args args = new QuestEventStateChange_args();
        args.Infos = infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_QuestEventStateChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuestEventStateChange_result result = new QuestEventStateChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["LoginUsers"] = LoginUsers_Process;
        processMap_["LogoutUsers"] = LogoutUsers_Process;
        processMap_["FactionSelect"] = FactionSelect_Process;
        processMap_["MoveTalentToSet"] = MoveTalentToSet_Process;
        processMap_["MoveTalentFromSet"] = MoveTalentFromSet_Process;
        processMap_["UnlockHero"] = UnlockHero_Process;
        processMap_["MoveHeroToBath"] = MoveHeroToBath_Process;
        processMap_["ResourcesChange"] = ResourcesChange_Process;
        processMap_["QuestChange"] = QuestChange_Process;
        processMap_["DynamicQuestChange"] = DynamicQuestChange_Process;
        processMap_["TournamentQuestChange"] = TournamentQuestChange_Process;
        processMap_["TutorialStateChange"] = TutorialStateChange_Process;
        processMap_["TalentChange"] = TalentChange_Process;
        processMap_["JoinPvpSession"] = JoinPvpSession_Process;
        processMap_["GiveSessionAwards"] = GiveSessionAwards_Process;
        processMap_["RatingChange"] = RatingChange_Process;
        processMap_["HeroLevelChange"] = HeroLevelChange_Process;
        processMap_["HeroRankChange"] = HeroRankChange_Process;
        processMap_["CastleLevelChange"] = CastleLevelChange_Process;
        processMap_["AfterParty"] = AfterParty_Process;
        processMap_["LeaverPointsChange"] = LeaverPointsChange_Process;
        processMap_["ReRollShop"] = ReRollShop_Process;
        processMap_["ChatMessages"] = ChatMessages_Process;
        processMap_["ClientPings"] = ClientPings_Process;
        processMap_["UserClaims"] = UserClaims_Process;
        processMap_["GMEditUser"] = GMEditUser_Process;
        processMap_["GMUnlockHero"] = GMUnlockHero_Process;
        processMap_["GMLockHero"] = GMLockHero_Process;
        processMap_["GMOperation"] = GMOperation_Process;
        processMap_["GMUserOperation"] = GMUserOperation_Process;
        processMap_["MonitoringResults"] = MonitoringResults_Process;
        processMap_["AddIgnore"] = AddIgnore_Process;
        processMap_["RemoveIgnore"] = RemoveIgnore_Process;
        processMap_["LauncherStart"] = LauncherStart_Process;
        processMap_["LauncherEvents"] = LauncherEvents_Process;
        processMap_["LauncherDActions"] = LauncherDActions_Process;
        processMap_["SocialRegister"] = SocialRegister_Process;
        processMap_["SocialJoin"] = SocialJoin_Process;
        processMap_["SocialMerge"] = SocialMerge_Process;
        processMap_["GuildCreated"] = GuildCreated_Process;
        processMap_["GuildRenamed"] = GuildRenamed_Process;
        processMap_["GuildJoined"] = GuildJoined_Process;
        processMap_["GuildLeaved"] = GuildLeaved_Process;
        processMap_["GuildDisbanded"] = GuildDisbanded_Process;
        processMap_["GuildShopBuy"] = GuildShopBuy_Process;
        processMap_["GuildSiege"] = GuildSiege_Process;
        processMap_["GuildDailyStats"] = GuildDailyStats_Process;
        processMap_["GuildInteraction"] = GuildInteraction_Process;
        processMap_["GuildPointsChange"] = GuildPointsChange_Process;
        processMap_["RuneExpire"] = RuneExpire_Process;
        processMap_["RuneUnsoulbound"] = RuneUnsoulbound_Process;
        processMap_["RuneReplenish"] = RuneReplenish_Process;
        processMap_["RuneHeroApply"] = RuneHeroApply_Process;
        processMap_["RuneRoll"] = RuneRoll_Process;
        processMap_["GWEventAdd"] = GWEventAdd_Process;
        processMap_["GWScoreChange"] = GWScoreChange_Process;
        processMap_["QuestEventStageChange"] = QuestEventStageChange_Process;
        processMap_["QuestEventStateChange"] = QuestEventStateChange_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void LoginUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoginUsers_args args = new LoginUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoginUsers_result result = new LoginUsers_result();
        iface_.LoginUsers(args.Logins);
        oprot.WriteMessageBegin(new TMessage("LoginUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LogoutUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LogoutUsers_args args = new LogoutUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LogoutUsers_result result = new LogoutUsers_result();
        iface_.LogoutUsers(args.Logins);
        oprot.WriteMessageBegin(new TMessage("LogoutUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FactionSelect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FactionSelect_args args = new FactionSelect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FactionSelect_result result = new FactionSelect_result();
        iface_.FactionSelect(args.Infos);
        oprot.WriteMessageBegin(new TMessage("FactionSelect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MoveTalentToSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MoveTalentToSet_args args = new MoveTalentToSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MoveTalentToSet_result result = new MoveTalentToSet_result();
        iface_.MoveTalentToSet(args.Infos);
        oprot.WriteMessageBegin(new TMessage("MoveTalentToSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MoveTalentFromSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MoveTalentFromSet_args args = new MoveTalentFromSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MoveTalentFromSet_result result = new MoveTalentFromSet_result();
        iface_.MoveTalentFromSet(args.Infos);
        oprot.WriteMessageBegin(new TMessage("MoveTalentFromSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnlockHero_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnlockHero_args args = new UnlockHero_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnlockHero_result result = new UnlockHero_result();
        iface_.UnlockHero(args.Infos);
        oprot.WriteMessageBegin(new TMessage("UnlockHero", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MoveHeroToBath_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MoveHeroToBath_args args = new MoveHeroToBath_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MoveHeroToBath_result result = new MoveHeroToBath_result();
        iface_.MoveHeroToBath(args.Infos);
        oprot.WriteMessageBegin(new TMessage("MoveHeroToBath", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResourcesChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResourcesChange_args args = new ResourcesChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResourcesChange_result result = new ResourcesChange_result();
        iface_.ResourcesChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("ResourcesChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuestChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuestChange_args args = new QuestChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuestChange_result result = new QuestChange_result();
        iface_.QuestChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("QuestChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DynamicQuestChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DynamicQuestChange_args args = new DynamicQuestChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DynamicQuestChange_result result = new DynamicQuestChange_result();
        iface_.DynamicQuestChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("DynamicQuestChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TournamentQuestChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TournamentQuestChange_args args = new TournamentQuestChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TournamentQuestChange_result result = new TournamentQuestChange_result();
        iface_.TournamentQuestChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("TournamentQuestChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TutorialStateChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TutorialStateChange_args args = new TutorialStateChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TutorialStateChange_result result = new TutorialStateChange_result();
        iface_.TutorialStateChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("TutorialStateChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TalentChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TalentChange_args args = new TalentChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TalentChange_result result = new TalentChange_result();
        iface_.TalentChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("TalentChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void JoinPvpSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        JoinPvpSession_args args = new JoinPvpSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        JoinPvpSession_result result = new JoinPvpSession_result();
        iface_.JoinPvpSession(args.Infos);
        oprot.WriteMessageBegin(new TMessage("JoinPvpSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GiveSessionAwards_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GiveSessionAwards_args args = new GiveSessionAwards_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GiveSessionAwards_result result = new GiveSessionAwards_result();
        iface_.GiveSessionAwards(args.Info);
        oprot.WriteMessageBegin(new TMessage("GiveSessionAwards", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RatingChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RatingChange_args args = new RatingChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RatingChange_result result = new RatingChange_result();
        iface_.RatingChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RatingChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void HeroLevelChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        HeroLevelChange_args args = new HeroLevelChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        HeroLevelChange_result result = new HeroLevelChange_result();
        iface_.HeroLevelChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("HeroLevelChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void HeroRankChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        HeroRankChange_args args = new HeroRankChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        HeroRankChange_result result = new HeroRankChange_result();
        iface_.HeroRankChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("HeroRankChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CastleLevelChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CastleLevelChange_args args = new CastleLevelChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CastleLevelChange_result result = new CastleLevelChange_result();
        iface_.CastleLevelChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("CastleLevelChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AfterParty_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AfterParty_args args = new AfterParty_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AfterParty_result result = new AfterParty_result();
        iface_.AfterParty(args.Infos);
        oprot.WriteMessageBegin(new TMessage("AfterParty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LeaverPointsChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LeaverPointsChange_args args = new LeaverPointsChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LeaverPointsChange_result result = new LeaverPointsChange_result();
        iface_.LeaverPointsChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("LeaverPointsChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReRollShop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReRollShop_args args = new ReRollShop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReRollShop_result result = new ReRollShop_result();
        iface_.ReRollShop(args.Infos);
        oprot.WriteMessageBegin(new TMessage("ReRollShop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChatMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChatMessages_args args = new ChatMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChatMessages_result result = new ChatMessages_result();
        iface_.ChatMessages(args.Infos);
        oprot.WriteMessageBegin(new TMessage("ChatMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ClientPings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ClientPings_args args = new ClientPings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ClientPings_result result = new ClientPings_result();
        iface_.ClientPings(args.Infos);
        oprot.WriteMessageBegin(new TMessage("ClientPings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UserClaims_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UserClaims_args args = new UserClaims_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UserClaims_result result = new UserClaims_result();
        iface_.UserClaims(args.Infos);
        oprot.WriteMessageBegin(new TMessage("UserClaims", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GMEditUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GMEditUser_args args = new GMEditUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GMEditUser_result result = new GMEditUser_result();
        iface_.GMEditUser(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GMEditUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GMUnlockHero_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GMUnlockHero_args args = new GMUnlockHero_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GMUnlockHero_result result = new GMUnlockHero_result();
        iface_.GMUnlockHero(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GMUnlockHero", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GMLockHero_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GMLockHero_args args = new GMLockHero_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GMLockHero_result result = new GMLockHero_result();
        iface_.GMLockHero(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GMLockHero", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GMOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GMOperation_args args = new GMOperation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GMOperation_result result = new GMOperation_result();
        iface_.GMOperation(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GMOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GMUserOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GMUserOperation_args args = new GMUserOperation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GMUserOperation_result result = new GMUserOperation_result();
        iface_.GMUserOperation(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GMUserOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MonitoringResults_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MonitoringResults_args args = new MonitoringResults_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MonitoringResults_result result = new MonitoringResults_result();
        iface_.MonitoringResults(args.Results);
        oprot.WriteMessageBegin(new TMessage("MonitoringResults", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddIgnore_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddIgnore_args args = new AddIgnore_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddIgnore_result result = new AddIgnore_result();
        iface_.AddIgnore(args.Infos);
        oprot.WriteMessageBegin(new TMessage("AddIgnore", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveIgnore_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveIgnore_args args = new RemoveIgnore_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveIgnore_result result = new RemoveIgnore_result();
        iface_.RemoveIgnore(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RemoveIgnore", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LauncherStart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LauncherStart_args args = new LauncherStart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LauncherStart_result result = new LauncherStart_result();
        iface_.LauncherStart(args.Infos);
        oprot.WriteMessageBegin(new TMessage("LauncherStart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LauncherEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LauncherEvents_args args = new LauncherEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LauncherEvents_result result = new LauncherEvents_result();
        iface_.LauncherEvents(args.Infos);
        oprot.WriteMessageBegin(new TMessage("LauncherEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LauncherDActions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LauncherDActions_args args = new LauncherDActions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LauncherDActions_result result = new LauncherDActions_result();
        iface_.LauncherDActions(args.Infos);
        oprot.WriteMessageBegin(new TMessage("LauncherDActions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialRegister_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialRegister_args args = new SocialRegister_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialRegister_result result = new SocialRegister_result();
        iface_.SocialRegister(args.Infos);
        oprot.WriteMessageBegin(new TMessage("SocialRegister", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialJoin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialJoin_args args = new SocialJoin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialJoin_result result = new SocialJoin_result();
        iface_.SocialJoin(args.Infos);
        oprot.WriteMessageBegin(new TMessage("SocialJoin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SocialMerge_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SocialMerge_args args = new SocialMerge_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SocialMerge_result result = new SocialMerge_result();
        iface_.SocialMerge(args.Infos);
        oprot.WriteMessageBegin(new TMessage("SocialMerge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildCreated_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildCreated_args args = new GuildCreated_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildCreated_result result = new GuildCreated_result();
        iface_.GuildCreated(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildCreated", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildRenamed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildRenamed_args args = new GuildRenamed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildRenamed_result result = new GuildRenamed_result();
        iface_.GuildRenamed(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildRenamed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildJoined_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildJoined_args args = new GuildJoined_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildJoined_result result = new GuildJoined_result();
        iface_.GuildJoined(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildJoined", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildLeaved_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildLeaved_args args = new GuildLeaved_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildLeaved_result result = new GuildLeaved_result();
        iface_.GuildLeaved(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildLeaved", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildDisbanded_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildDisbanded_args args = new GuildDisbanded_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildDisbanded_result result = new GuildDisbanded_result();
        iface_.GuildDisbanded(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildDisbanded", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildShopBuy_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildShopBuy_args args = new GuildShopBuy_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildShopBuy_result result = new GuildShopBuy_result();
        iface_.GuildShopBuy(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildShopBuy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildSiege_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildSiege_args args = new GuildSiege_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildSiege_result result = new GuildSiege_result();
        iface_.GuildSiege(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildSiege", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildDailyStats_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildDailyStats_args args = new GuildDailyStats_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildDailyStats_result result = new GuildDailyStats_result();
        iface_.GuildDailyStats(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildDailyStats", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildInteraction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildInteraction_args args = new GuildInteraction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildInteraction_result result = new GuildInteraction_result();
        iface_.GuildInteraction(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildInteraction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GuildPointsChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GuildPointsChange_args args = new GuildPointsChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GuildPointsChange_result result = new GuildPointsChange_result();
        iface_.GuildPointsChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GuildPointsChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuneExpire_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuneExpire_args args = new RuneExpire_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuneExpire_result result = new RuneExpire_result();
        iface_.RuneExpire(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RuneExpire", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuneUnsoulbound_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuneUnsoulbound_args args = new RuneUnsoulbound_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuneUnsoulbound_result result = new RuneUnsoulbound_result();
        iface_.RuneUnsoulbound(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RuneUnsoulbound", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuneReplenish_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuneReplenish_args args = new RuneReplenish_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuneReplenish_result result = new RuneReplenish_result();
        iface_.RuneReplenish(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RuneReplenish", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuneHeroApply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuneHeroApply_args args = new RuneHeroApply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuneHeroApply_result result = new RuneHeroApply_result();
        iface_.RuneHeroApply(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RuneHeroApply", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuneRoll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuneRoll_args args = new RuneRoll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuneRoll_result result = new RuneRoll_result();
        iface_.RuneRoll(args.Infos);
        oprot.WriteMessageBegin(new TMessage("RuneRoll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GWEventAdd_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GWEventAdd_args args = new GWEventAdd_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GWEventAdd_result result = new GWEventAdd_result();
        iface_.GWEventAdd(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GWEventAdd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GWScoreChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GWScoreChange_args args = new GWScoreChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GWScoreChange_result result = new GWScoreChange_result();
        iface_.GWScoreChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("GWScoreChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuestEventStageChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuestEventStageChange_args args = new QuestEventStageChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuestEventStageChange_result result = new QuestEventStageChange_result();
        iface_.QuestEventStageChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("QuestEventStageChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuestEventStateChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuestEventStateChange_args args = new QuestEventStateChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuestEventStateChange_result result = new QuestEventStateChange_result();
        iface_.QuestEventStateChange(args.Infos);
        oprot.WriteMessageBegin(new TMessage("QuestEventStateChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoginUsers_args : TBase
    {
      private List<LoginInfo> _logins;

      public List<LoginInfo> Logins
      {
        get
        {
          return _logins;
        }
        set
        {
          __isset.logins = true;
          this._logins = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool logins;
      }

      public LoginUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Logins = new List<LoginInfo>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    LoginInfo _elem43 = new LoginInfo();
                    _elem43 = new LoginInfo();
                    _elem43.Read(iprot);
                    Logins.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoginUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Logins != null && __isset.logins) {
          field.Name = "logins";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Logins.Count));
            foreach (LoginInfo _iter44 in Logins)
            {
              _iter44.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoginUsers_args(");
        sb.Append("Logins: ");
        sb.Append(Logins);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoginUsers_result : TBase
    {

      public LoginUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoginUsers_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoginUsers_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LogoutUsers_args : TBase
    {
      private List<LoginInfo> _logins;

      public List<LoginInfo> Logins
      {
        get
        {
          return _logins;
        }
        set
        {
          __isset.logins = true;
          this._logins = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool logins;
      }

      public LogoutUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Logins = new List<LoginInfo>();
                  TList _list45 = iprot.ReadListBegin();
                  for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                  {
                    LoginInfo _elem47 = new LoginInfo();
                    _elem47 = new LoginInfo();
                    _elem47.Read(iprot);
                    Logins.Add(_elem47);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LogoutUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Logins != null && __isset.logins) {
          field.Name = "logins";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Logins.Count));
            foreach (LoginInfo _iter48 in Logins)
            {
              _iter48.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LogoutUsers_args(");
        sb.Append("Logins: ");
        sb.Append(Logins);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LogoutUsers_result : TBase
    {

      public LogoutUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LogoutUsers_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LogoutUsers_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FactionSelect_args : TBase
    {
      private List<FactionSelectInfo> _infos;

      public List<FactionSelectInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public FactionSelect_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<FactionSelectInfo>();
                  TList _list49 = iprot.ReadListBegin();
                  for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                  {
                    FactionSelectInfo _elem51 = new FactionSelectInfo();
                    _elem51 = new FactionSelectInfo();
                    _elem51.Read(iprot);
                    Infos.Add(_elem51);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FactionSelect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (FactionSelectInfo _iter52 in Infos)
            {
              _iter52.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FactionSelect_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FactionSelect_result : TBase
    {

      public FactionSelect_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FactionSelect_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FactionSelect_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentToSet_args : TBase
    {
      private List<MoveTalentInfo> _infos;

      public List<MoveTalentInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public MoveTalentToSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<MoveTalentInfo>();
                  TList _list53 = iprot.ReadListBegin();
                  for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                  {
                    MoveTalentInfo _elem55 = new MoveTalentInfo();
                    _elem55 = new MoveTalentInfo();
                    _elem55.Read(iprot);
                    Infos.Add(_elem55);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentToSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (MoveTalentInfo _iter56 in Infos)
            {
              _iter56.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentToSet_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentToSet_result : TBase
    {

      public MoveTalentToSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentToSet_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentToSet_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentFromSet_args : TBase
    {
      private List<MoveTalentInfo> _infos;

      public List<MoveTalentInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public MoveTalentFromSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<MoveTalentInfo>();
                  TList _list57 = iprot.ReadListBegin();
                  for( int _i58 = 0; _i58 < _list57.Count; ++_i58)
                  {
                    MoveTalentInfo _elem59 = new MoveTalentInfo();
                    _elem59 = new MoveTalentInfo();
                    _elem59.Read(iprot);
                    Infos.Add(_elem59);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentFromSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (MoveTalentInfo _iter60 in Infos)
            {
              _iter60.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentFromSet_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveTalentFromSet_result : TBase
    {

      public MoveTalentFromSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveTalentFromSet_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveTalentFromSet_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnlockHero_args : TBase
    {
      private List<UnlockHeroInfo> _infos;

      public List<UnlockHeroInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public UnlockHero_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<UnlockHeroInfo>();
                  TList _list61 = iprot.ReadListBegin();
                  for( int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    UnlockHeroInfo _elem63 = new UnlockHeroInfo();
                    _elem63 = new UnlockHeroInfo();
                    _elem63.Read(iprot);
                    Infos.Add(_elem63);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnlockHero_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (UnlockHeroInfo _iter64 in Infos)
            {
              _iter64.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnlockHero_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnlockHero_result : TBase
    {

      public UnlockHero_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnlockHero_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnlockHero_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveHeroToBath_args : TBase
    {
      private List<MoveToBathInfo> _infos;

      public List<MoveToBathInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public MoveHeroToBath_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<MoveToBathInfo>();
                  TList _list65 = iprot.ReadListBegin();
                  for( int _i66 = 0; _i66 < _list65.Count; ++_i66)
                  {
                    MoveToBathInfo _elem67 = new MoveToBathInfo();
                    _elem67 = new MoveToBathInfo();
                    _elem67.Read(iprot);
                    Infos.Add(_elem67);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveHeroToBath_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (MoveToBathInfo _iter68 in Infos)
            {
              _iter68.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveHeroToBath_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MoveHeroToBath_result : TBase
    {

      public MoveHeroToBath_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MoveHeroToBath_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MoveHeroToBath_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResourcesChange_args : TBase
    {
      private List<ResourcesChangeInfo> _infos;

      public List<ResourcesChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public ResourcesChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<ResourcesChangeInfo>();
                  TList _list69 = iprot.ReadListBegin();
                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)
                  {
                    ResourcesChangeInfo _elem71 = new ResourcesChangeInfo();
                    _elem71 = new ResourcesChangeInfo();
                    _elem71.Read(iprot);
                    Infos.Add(_elem71);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResourcesChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (ResourcesChangeInfo _iter72 in Infos)
            {
              _iter72.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResourcesChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResourcesChange_result : TBase
    {

      public ResourcesChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResourcesChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResourcesChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuestChange_args : TBase
    {
      private List<QuestChangeInfo> _infos;

      public List<QuestChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public QuestChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<QuestChangeInfo>();
                  TList _list73 = iprot.ReadListBegin();
                  for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
                  {
                    QuestChangeInfo _elem75 = new QuestChangeInfo();
                    _elem75 = new QuestChangeInfo();
                    _elem75.Read(iprot);
                    Infos.Add(_elem75);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QuestChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (QuestChangeInfo _iter76 in Infos)
            {
              _iter76.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QuestChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuestChange_result : TBase
    {

      public QuestChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QuestChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QuestChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DynamicQuestChange_args : TBase
    {
      private List<DynamicQuestChangeInfo> _infos;

      public List<DynamicQuestChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public DynamicQuestChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<DynamicQuestChangeInfo>();
                  TList _list77 = iprot.ReadListBegin();
                  for( int _i78 = 0; _i78 < _list77.Count; ++_i78)
                  {
                    DynamicQuestChangeInfo _elem79 = new DynamicQuestChangeInfo();
                    _elem79 = new DynamicQuestChangeInfo();
                    _elem79.Read(iprot);
                    Infos.Add(_elem79);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DynamicQuestChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (DynamicQuestChangeInfo _iter80 in Infos)
            {
              _iter80.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DynamicQuestChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DynamicQuestChange_result : TBase
    {

      public DynamicQuestChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DynamicQuestChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DynamicQuestChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TournamentQuestChange_args : TBase
    {
      private List<TournamentQuestChangeInfo> _infos;

      public List<TournamentQuestChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public TournamentQuestChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<TournamentQuestChangeInfo>();
                  TList _list81 = iprot.ReadListBegin();
                  for( int _i82 = 0; _i82 < _list81.Count; ++_i82)
                  {
                    TournamentQuestChangeInfo _elem83 = new TournamentQuestChangeInfo();
                    _elem83 = new TournamentQuestChangeInfo();
                    _elem83.Read(iprot);
                    Infos.Add(_elem83);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TournamentQuestChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (TournamentQuestChangeInfo _iter84 in Infos)
            {
              _iter84.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TournamentQuestChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TournamentQuestChange_result : TBase
    {

      public TournamentQuestChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TournamentQuestChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TournamentQuestChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TutorialStateChange_args : TBase
    {
      private List<TutorialStateChangeInfo> _infos;

      public List<TutorialStateChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public TutorialStateChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<TutorialStateChangeInfo>();
                  TList _list85 = iprot.ReadListBegin();
                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)
                  {
                    TutorialStateChangeInfo _elem87 = new TutorialStateChangeInfo();
                    _elem87 = new TutorialStateChangeInfo();
                    _elem87.Read(iprot);
                    Infos.Add(_elem87);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TutorialStateChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (TutorialStateChangeInfo _iter88 in Infos)
            {
              _iter88.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TutorialStateChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TutorialStateChange_result : TBase
    {

      public TutorialStateChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TutorialStateChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TutorialStateChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TalentChange_args : TBase
    {
      private List<TalentChangeInfo> _infos;

      public List<TalentChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public TalentChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<TalentChangeInfo>();
                  TList _list89 = iprot.ReadListBegin();
                  for( int _i90 = 0; _i90 < _list89.Count; ++_i90)
                  {
                    TalentChangeInfo _elem91 = new TalentChangeInfo();
                    _elem91 = new TalentChangeInfo();
                    _elem91.Read(iprot);
                    Infos.Add(_elem91);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TalentChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (TalentChangeInfo _iter92 in Infos)
            {
              _iter92.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TalentChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TalentChange_result : TBase
    {

      public TalentChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TalentChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TalentChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class JoinPvpSession_args : TBase
    {
      private List<JoinSessionInfo> _infos;

      public List<JoinSessionInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public JoinPvpSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<JoinSessionInfo>();
                  TList _list93 = iprot.ReadListBegin();
                  for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                  {
                    JoinSessionInfo _elem95 = new JoinSessionInfo();
                    _elem95 = new JoinSessionInfo();
                    _elem95.Read(iprot);
                    Infos.Add(_elem95);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("JoinPvpSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (JoinSessionInfo _iter96 in Infos)
            {
              _iter96.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("JoinPvpSession_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class JoinPvpSession_result : TBase
    {

      public JoinPvpSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("JoinPvpSession_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("JoinPvpSession_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveSessionAwards_args : TBase
    {
      private List<SessionAwardsInfo> _info;

      public List<SessionAwardsInfo> Info
      {
        get
        {
          return _info;
        }
        set
        {
          __isset.info = true;
          this._info = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool info;
      }

      public GiveSessionAwards_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Info = new List<SessionAwardsInfo>();
                  TList _list97 = iprot.ReadListBegin();
                  for( int _i98 = 0; _i98 < _list97.Count; ++_i98)
                  {
                    SessionAwardsInfo _elem99 = new SessionAwardsInfo();
                    _elem99 = new SessionAwardsInfo();
                    _elem99.Read(iprot);
                    Info.Add(_elem99);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveSessionAwards_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Info.Count));
            foreach (SessionAwardsInfo _iter100 in Info)
            {
              _iter100.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveSessionAwards_args(");
        sb.Append("Info: ");
        sb.Append(Info);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GiveSessionAwards_result : TBase
    {

      public GiveSessionAwards_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GiveSessionAwards_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GiveSessionAwards_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RatingChange_args : TBase
    {
      private List<RatingChangeInfo> _infos;

      public List<RatingChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RatingChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RatingChangeInfo>();
                  TList _list101 = iprot.ReadListBegin();
                  for( int _i102 = 0; _i102 < _list101.Count; ++_i102)
                  {
                    RatingChangeInfo _elem103 = new RatingChangeInfo();
                    _elem103 = new RatingChangeInfo();
                    _elem103.Read(iprot);
                    Infos.Add(_elem103);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RatingChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RatingChangeInfo _iter104 in Infos)
            {
              _iter104.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RatingChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RatingChange_result : TBase
    {

      public RatingChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RatingChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RatingChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class HeroLevelChange_args : TBase
    {
      private List<HeroLevelChangeInfo> _infos;

      public List<HeroLevelChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public HeroLevelChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<HeroLevelChangeInfo>();
                  TList _list105 = iprot.ReadListBegin();
                  for( int _i106 = 0; _i106 < _list105.Count; ++_i106)
                  {
                    HeroLevelChangeInfo _elem107 = new HeroLevelChangeInfo();
                    _elem107 = new HeroLevelChangeInfo();
                    _elem107.Read(iprot);
                    Infos.Add(_elem107);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HeroLevelChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (HeroLevelChangeInfo _iter108 in Infos)
            {
              _iter108.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HeroLevelChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class HeroLevelChange_result : TBase
    {

      public HeroLevelChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HeroLevelChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HeroLevelChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class HeroRankChange_args : TBase
    {
      private List<HeroRankChangeInfo> _infos;

      public List<HeroRankChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public HeroRankChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<HeroRankChangeInfo>();
                  TList _list109 = iprot.ReadListBegin();
                  for( int _i110 = 0; _i110 < _list109.Count; ++_i110)
                  {
                    HeroRankChangeInfo _elem111 = new HeroRankChangeInfo();
                    _elem111 = new HeroRankChangeInfo();
                    _elem111.Read(iprot);
                    Infos.Add(_elem111);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HeroRankChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (HeroRankChangeInfo _iter112 in Infos)
            {
              _iter112.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HeroRankChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class HeroRankChange_result : TBase
    {

      public HeroRankChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HeroRankChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HeroRankChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CastleLevelChange_args : TBase
    {
      private List<CastleLevelChangeInfo> _infos;

      public List<CastleLevelChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public CastleLevelChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<CastleLevelChangeInfo>();
                  TList _list113 = iprot.ReadListBegin();
                  for( int _i114 = 0; _i114 < _list113.Count; ++_i114)
                  {
                    CastleLevelChangeInfo _elem115 = new CastleLevelChangeInfo();
                    _elem115 = new CastleLevelChangeInfo();
                    _elem115.Read(iprot);
                    Infos.Add(_elem115);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CastleLevelChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (CastleLevelChangeInfo _iter116 in Infos)
            {
              _iter116.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CastleLevelChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CastleLevelChange_result : TBase
    {

      public CastleLevelChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CastleLevelChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CastleLevelChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AfterParty_args : TBase
    {
      private List<AfterPartyInfo> _infos;

      public List<AfterPartyInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public AfterParty_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<AfterPartyInfo>();
                  TList _list117 = iprot.ReadListBegin();
                  for( int _i118 = 0; _i118 < _list117.Count; ++_i118)
                  {
                    AfterPartyInfo _elem119 = new AfterPartyInfo();
                    _elem119 = new AfterPartyInfo();
                    _elem119.Read(iprot);
                    Infos.Add(_elem119);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AfterParty_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (AfterPartyInfo _iter120 in Infos)
            {
              _iter120.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AfterParty_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AfterParty_result : TBase
    {

      public AfterParty_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AfterParty_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AfterParty_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LeaverPointsChange_args : TBase
    {
      private List<LeaverPointsChangeInfo> _infos;

      public List<LeaverPointsChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public LeaverPointsChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<LeaverPointsChangeInfo>();
                  TList _list121 = iprot.ReadListBegin();
                  for( int _i122 = 0; _i122 < _list121.Count; ++_i122)
                  {
                    LeaverPointsChangeInfo _elem123 = new LeaverPointsChangeInfo();
                    _elem123 = new LeaverPointsChangeInfo();
                    _elem123.Read(iprot);
                    Infos.Add(_elem123);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LeaverPointsChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (LeaverPointsChangeInfo _iter124 in Infos)
            {
              _iter124.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LeaverPointsChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LeaverPointsChange_result : TBase
    {

      public LeaverPointsChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LeaverPointsChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LeaverPointsChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReRollShop_args : TBase
    {
      private List<ReRollShopInfo> _infos;

      public List<ReRollShopInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public ReRollShop_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<ReRollShopInfo>();
                  TList _list125 = iprot.ReadListBegin();
                  for( int _i126 = 0; _i126 < _list125.Count; ++_i126)
                  {
                    ReRollShopInfo _elem127 = new ReRollShopInfo();
                    _elem127 = new ReRollShopInfo();
                    _elem127.Read(iprot);
                    Infos.Add(_elem127);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReRollShop_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (ReRollShopInfo _iter128 in Infos)
            {
              _iter128.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReRollShop_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReRollShop_result : TBase
    {

      public ReRollShop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReRollShop_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReRollShop_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChatMessages_args : TBase
    {
      private List<ChatMessageInfo> _infos;

      public List<ChatMessageInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public ChatMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<ChatMessageInfo>();
                  TList _list129 = iprot.ReadListBegin();
                  for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    ChatMessageInfo _elem131 = new ChatMessageInfo();
                    _elem131 = new ChatMessageInfo();
                    _elem131.Read(iprot);
                    Infos.Add(_elem131);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChatMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (ChatMessageInfo _iter132 in Infos)
            {
              _iter132.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChatMessages_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChatMessages_result : TBase
    {

      public ChatMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChatMessages_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChatMessages_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ClientPings_args : TBase
    {
      private List<ClientPingInfo> _infos;

      public List<ClientPingInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public ClientPings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<ClientPingInfo>();
                  TList _list133 = iprot.ReadListBegin();
                  for( int _i134 = 0; _i134 < _list133.Count; ++_i134)
                  {
                    ClientPingInfo _elem135 = new ClientPingInfo();
                    _elem135 = new ClientPingInfo();
                    _elem135.Read(iprot);
                    Infos.Add(_elem135);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ClientPings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (ClientPingInfo _iter136 in Infos)
            {
              _iter136.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ClientPings_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ClientPings_result : TBase
    {

      public ClientPings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ClientPings_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ClientPings_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UserClaims_args : TBase
    {
      private List<ClaimInfo> _infos;

      public List<ClaimInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public UserClaims_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<ClaimInfo>();
                  TList _list137 = iprot.ReadListBegin();
                  for( int _i138 = 0; _i138 < _list137.Count; ++_i138)
                  {
                    ClaimInfo _elem139 = new ClaimInfo();
                    _elem139 = new ClaimInfo();
                    _elem139.Read(iprot);
                    Infos.Add(_elem139);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UserClaims_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (ClaimInfo _iter140 in Infos)
            {
              _iter140.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UserClaims_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UserClaims_result : TBase
    {

      public UserClaims_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UserClaims_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UserClaims_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMEditUser_args : TBase
    {
      private List<GMEditFieldInfo> _infos;

      public List<GMEditFieldInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GMEditUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GMEditFieldInfo>();
                  TList _list141 = iprot.ReadListBegin();
                  for( int _i142 = 0; _i142 < _list141.Count; ++_i142)
                  {
                    GMEditFieldInfo _elem143 = new GMEditFieldInfo();
                    _elem143 = new GMEditFieldInfo();
                    _elem143.Read(iprot);
                    Infos.Add(_elem143);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMEditUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GMEditFieldInfo _iter144 in Infos)
            {
              _iter144.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMEditUser_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMEditUser_result : TBase
    {

      public GMEditUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMEditUser_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMEditUser_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMUnlockHero_args : TBase
    {
      private List<GMHeroActionInfo> _infos;

      public List<GMHeroActionInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GMUnlockHero_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GMHeroActionInfo>();
                  TList _list145 = iprot.ReadListBegin();
                  for( int _i146 = 0; _i146 < _list145.Count; ++_i146)
                  {
                    GMHeroActionInfo _elem147 = new GMHeroActionInfo();
                    _elem147 = new GMHeroActionInfo();
                    _elem147.Read(iprot);
                    Infos.Add(_elem147);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMUnlockHero_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GMHeroActionInfo _iter148 in Infos)
            {
              _iter148.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMUnlockHero_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMUnlockHero_result : TBase
    {

      public GMUnlockHero_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMUnlockHero_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMUnlockHero_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMLockHero_args : TBase
    {
      private List<GMHeroActionInfo> _infos;

      public List<GMHeroActionInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GMLockHero_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GMHeroActionInfo>();
                  TList _list149 = iprot.ReadListBegin();
                  for( int _i150 = 0; _i150 < _list149.Count; ++_i150)
                  {
                    GMHeroActionInfo _elem151 = new GMHeroActionInfo();
                    _elem151 = new GMHeroActionInfo();
                    _elem151.Read(iprot);
                    Infos.Add(_elem151);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMLockHero_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GMHeroActionInfo _iter152 in Infos)
            {
              _iter152.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMLockHero_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMLockHero_result : TBase
    {

      public GMLockHero_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMLockHero_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMLockHero_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMOperation_args : TBase
    {
      private List<GMOperationInfo> _infos;

      public List<GMOperationInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GMOperation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GMOperationInfo>();
                  TList _list153 = iprot.ReadListBegin();
                  for( int _i154 = 0; _i154 < _list153.Count; ++_i154)
                  {
                    GMOperationInfo _elem155 = new GMOperationInfo();
                    _elem155 = new GMOperationInfo();
                    _elem155.Read(iprot);
                    Infos.Add(_elem155);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GMOperationInfo _iter156 in Infos)
            {
              _iter156.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMOperation_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMOperation_result : TBase
    {

      public GMOperation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMOperation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMOperation_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMUserOperation_args : TBase
    {
      private List<GMUserOperationInfo> _infos;

      public List<GMUserOperationInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GMUserOperation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GMUserOperationInfo>();
                  TList _list157 = iprot.ReadListBegin();
                  for( int _i158 = 0; _i158 < _list157.Count; ++_i158)
                  {
                    GMUserOperationInfo _elem159 = new GMUserOperationInfo();
                    _elem159 = new GMUserOperationInfo();
                    _elem159.Read(iprot);
                    Infos.Add(_elem159);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMUserOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GMUserOperationInfo _iter160 in Infos)
            {
              _iter160.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMUserOperation_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GMUserOperation_result : TBase
    {

      public GMUserOperation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GMUserOperation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GMUserOperation_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MonitoringResults_args : TBase
    {
      private List<MonitoringResultInfo> _results;

      public List<MonitoringResultInfo> Results
      {
        get
        {
          return _results;
        }
        set
        {
          __isset.results = true;
          this._results = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool results;
      }

      public MonitoringResults_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Results = new List<MonitoringResultInfo>();
                  TList _list161 = iprot.ReadListBegin();
                  for( int _i162 = 0; _i162 < _list161.Count; ++_i162)
                  {
                    MonitoringResultInfo _elem163 = new MonitoringResultInfo();
                    _elem163 = new MonitoringResultInfo();
                    _elem163.Read(iprot);
                    Results.Add(_elem163);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MonitoringResults_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Results != null && __isset.results) {
          field.Name = "results";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Results.Count));
            foreach (MonitoringResultInfo _iter164 in Results)
            {
              _iter164.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MonitoringResults_args(");
        sb.Append("Results: ");
        sb.Append(Results);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MonitoringResults_result : TBase
    {

      public MonitoringResults_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MonitoringResults_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MonitoringResults_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddIgnore_args : TBase
    {
      private List<AddIgnoreInfo> _infos;

      public List<AddIgnoreInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public AddIgnore_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<AddIgnoreInfo>();
                  TList _list165 = iprot.ReadListBegin();
                  for( int _i166 = 0; _i166 < _list165.Count; ++_i166)
                  {
                    AddIgnoreInfo _elem167 = new AddIgnoreInfo();
                    _elem167 = new AddIgnoreInfo();
                    _elem167.Read(iprot);
                    Infos.Add(_elem167);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddIgnore_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (AddIgnoreInfo _iter168 in Infos)
            {
              _iter168.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddIgnore_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddIgnore_result : TBase
    {

      public AddIgnore_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddIgnore_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddIgnore_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveIgnore_args : TBase
    {
      private List<RemoveIgnoreInfo> _infos;

      public List<RemoveIgnoreInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RemoveIgnore_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RemoveIgnoreInfo>();
                  TList _list169 = iprot.ReadListBegin();
                  for( int _i170 = 0; _i170 < _list169.Count; ++_i170)
                  {
                    RemoveIgnoreInfo _elem171 = new RemoveIgnoreInfo();
                    _elem171 = new RemoveIgnoreInfo();
                    _elem171.Read(iprot);
                    Infos.Add(_elem171);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveIgnore_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RemoveIgnoreInfo _iter172 in Infos)
            {
              _iter172.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveIgnore_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveIgnore_result : TBase
    {

      public RemoveIgnore_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveIgnore_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveIgnore_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LauncherStart_args : TBase
    {
      private List<LauncherInfo> _infos;

      public List<LauncherInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public LauncherStart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<LauncherInfo>();
                  TList _list173 = iprot.ReadListBegin();
                  for( int _i174 = 0; _i174 < _list173.Count; ++_i174)
                  {
                    LauncherInfo _elem175 = new LauncherInfo();
                    _elem175 = new LauncherInfo();
                    _elem175.Read(iprot);
                    Infos.Add(_elem175);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LauncherStart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (LauncherInfo _iter176 in Infos)
            {
              _iter176.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LauncherStart_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LauncherStart_result : TBase
    {

      public LauncherStart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LauncherStart_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LauncherStart_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LauncherEvents_args : TBase
    {
      private List<LauncherEventsInfo> _infos;

      public List<LauncherEventsInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public LauncherEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<LauncherEventsInfo>();
                  TList _list177 = iprot.ReadListBegin();
                  for( int _i178 = 0; _i178 < _list177.Count; ++_i178)
                  {
                    LauncherEventsInfo _elem179 = new LauncherEventsInfo();
                    _elem179 = new LauncherEventsInfo();
                    _elem179.Read(iprot);
                    Infos.Add(_elem179);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LauncherEvents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (LauncherEventsInfo _iter180 in Infos)
            {
              _iter180.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LauncherEvents_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LauncherEvents_result : TBase
    {

      public LauncherEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LauncherEvents_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LauncherEvents_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LauncherDActions_args : TBase
    {
      private List<LauncherDActionsInfo> _infos;

      public List<LauncherDActionsInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public LauncherDActions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<LauncherDActionsInfo>();
                  TList _list181 = iprot.ReadListBegin();
                  for( int _i182 = 0; _i182 < _list181.Count; ++_i182)
                  {
                    LauncherDActionsInfo _elem183 = new LauncherDActionsInfo();
                    _elem183 = new LauncherDActionsInfo();
                    _elem183.Read(iprot);
                    Infos.Add(_elem183);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LauncherDActions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (LauncherDActionsInfo _iter184 in Infos)
            {
              _iter184.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LauncherDActions_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LauncherDActions_result : TBase
    {

      public LauncherDActions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LauncherDActions_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LauncherDActions_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialRegister_args : TBase
    {
      private List<SocialRegisterInfo> _infos;

      public List<SocialRegisterInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public SocialRegister_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<SocialRegisterInfo>();
                  TList _list185 = iprot.ReadListBegin();
                  for( int _i186 = 0; _i186 < _list185.Count; ++_i186)
                  {
                    SocialRegisterInfo _elem187 = new SocialRegisterInfo();
                    _elem187 = new SocialRegisterInfo();
                    _elem187.Read(iprot);
                    Infos.Add(_elem187);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SocialRegister_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (SocialRegisterInfo _iter188 in Infos)
            {
              _iter188.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SocialRegister_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialRegister_result : TBase
    {

      public SocialRegister_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SocialRegister_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SocialRegister_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialJoin_args : TBase
    {
      private List<SocialJoinInfo> _infos;

      public List<SocialJoinInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public SocialJoin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<SocialJoinInfo>();
                  TList _list189 = iprot.ReadListBegin();
                  for( int _i190 = 0; _i190 < _list189.Count; ++_i190)
                  {
                    SocialJoinInfo _elem191 = new SocialJoinInfo();
                    _elem191 = new SocialJoinInfo();
                    _elem191.Read(iprot);
                    Infos.Add(_elem191);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SocialJoin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (SocialJoinInfo _iter192 in Infos)
            {
              _iter192.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SocialJoin_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialJoin_result : TBase
    {

      public SocialJoin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SocialJoin_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SocialJoin_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialMerge_args : TBase
    {
      private List<SocialMergeInfo> _infos;

      public List<SocialMergeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public SocialMerge_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<SocialMergeInfo>();
                  TList _list193 = iprot.ReadListBegin();
                  for( int _i194 = 0; _i194 < _list193.Count; ++_i194)
                  {
                    SocialMergeInfo _elem195 = new SocialMergeInfo();
                    _elem195 = new SocialMergeInfo();
                    _elem195.Read(iprot);
                    Infos.Add(_elem195);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SocialMerge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (SocialMergeInfo _iter196 in Infos)
            {
              _iter196.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SocialMerge_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SocialMerge_result : TBase
    {

      public SocialMerge_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SocialMerge_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SocialMerge_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildCreated_args : TBase
    {
      private List<GuildInfo> _infos;

      public List<GuildInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildCreated_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildInfo>();
                  TList _list197 = iprot.ReadListBegin();
                  for( int _i198 = 0; _i198 < _list197.Count; ++_i198)
                  {
                    GuildInfo _elem199 = new GuildInfo();
                    _elem199 = new GuildInfo();
                    _elem199.Read(iprot);
                    Infos.Add(_elem199);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildCreated_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildInfo _iter200 in Infos)
            {
              _iter200.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildCreated_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildCreated_result : TBase
    {

      public GuildCreated_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildCreated_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildCreated_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildRenamed_args : TBase
    {
      private List<GuildInfo> _infos;

      public List<GuildInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildRenamed_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildInfo>();
                  TList _list201 = iprot.ReadListBegin();
                  for( int _i202 = 0; _i202 < _list201.Count; ++_i202)
                  {
                    GuildInfo _elem203 = new GuildInfo();
                    _elem203 = new GuildInfo();
                    _elem203.Read(iprot);
                    Infos.Add(_elem203);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildRenamed_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildInfo _iter204 in Infos)
            {
              _iter204.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildRenamed_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildRenamed_result : TBase
    {

      public GuildRenamed_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildRenamed_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildRenamed_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildJoined_args : TBase
    {
      private List<GuildCoreInfo> _infos;

      public List<GuildCoreInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildJoined_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildCoreInfo>();
                  TList _list205 = iprot.ReadListBegin();
                  for( int _i206 = 0; _i206 < _list205.Count; ++_i206)
                  {
                    GuildCoreInfo _elem207 = new GuildCoreInfo();
                    _elem207 = new GuildCoreInfo();
                    _elem207.Read(iprot);
                    Infos.Add(_elem207);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildJoined_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildCoreInfo _iter208 in Infos)
            {
              _iter208.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildJoined_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildJoined_result : TBase
    {

      public GuildJoined_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildJoined_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildJoined_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildLeaved_args : TBase
    {
      private List<GuildLeaveInfo> _infos;

      public List<GuildLeaveInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildLeaved_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildLeaveInfo>();
                  TList _list209 = iprot.ReadListBegin();
                  for( int _i210 = 0; _i210 < _list209.Count; ++_i210)
                  {
                    GuildLeaveInfo _elem211 = new GuildLeaveInfo();
                    _elem211 = new GuildLeaveInfo();
                    _elem211.Read(iprot);
                    Infos.Add(_elem211);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildLeaved_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildLeaveInfo _iter212 in Infos)
            {
              _iter212.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildLeaved_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildLeaved_result : TBase
    {

      public GuildLeaved_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildLeaved_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildLeaved_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildDisbanded_args : TBase
    {
      private List<GuildCoreInfo> _infos;

      public List<GuildCoreInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildDisbanded_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildCoreInfo>();
                  TList _list213 = iprot.ReadListBegin();
                  for( int _i214 = 0; _i214 < _list213.Count; ++_i214)
                  {
                    GuildCoreInfo _elem215 = new GuildCoreInfo();
                    _elem215 = new GuildCoreInfo();
                    _elem215.Read(iprot);
                    Infos.Add(_elem215);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildDisbanded_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildCoreInfo _iter216 in Infos)
            {
              _iter216.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildDisbanded_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildDisbanded_result : TBase
    {

      public GuildDisbanded_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildDisbanded_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildDisbanded_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildShopBuy_args : TBase
    {
      private List<GuildShopBuyInfo> _infos;

      public List<GuildShopBuyInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildShopBuy_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildShopBuyInfo>();
                  TList _list217 = iprot.ReadListBegin();
                  for( int _i218 = 0; _i218 < _list217.Count; ++_i218)
                  {
                    GuildShopBuyInfo _elem219 = new GuildShopBuyInfo();
                    _elem219 = new GuildShopBuyInfo();
                    _elem219.Read(iprot);
                    Infos.Add(_elem219);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildShopBuy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildShopBuyInfo _iter220 in Infos)
            {
              _iter220.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildShopBuy_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildShopBuy_result : TBase
    {

      public GuildShopBuy_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildShopBuy_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildShopBuy_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildSiege_args : TBase
    {
      private List<GuildSiegeInfo> _infos;

      public List<GuildSiegeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildSiege_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildSiegeInfo>();
                  TList _list221 = iprot.ReadListBegin();
                  for( int _i222 = 0; _i222 < _list221.Count; ++_i222)
                  {
                    GuildSiegeInfo _elem223 = new GuildSiegeInfo();
                    _elem223 = new GuildSiegeInfo();
                    _elem223.Read(iprot);
                    Infos.Add(_elem223);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildSiege_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildSiegeInfo _iter224 in Infos)
            {
              _iter224.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildSiege_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildSiege_result : TBase
    {

      public GuildSiege_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildSiege_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildSiege_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildDailyStats_args : TBase
    {
      private List<GuildDailyStatsInfo> _infos;

      public List<GuildDailyStatsInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildDailyStats_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildDailyStatsInfo>();
                  TList _list225 = iprot.ReadListBegin();
                  for( int _i226 = 0; _i226 < _list225.Count; ++_i226)
                  {
                    GuildDailyStatsInfo _elem227 = new GuildDailyStatsInfo();
                    _elem227 = new GuildDailyStatsInfo();
                    _elem227.Read(iprot);
                    Infos.Add(_elem227);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildDailyStats_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildDailyStatsInfo _iter228 in Infos)
            {
              _iter228.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildDailyStats_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildDailyStats_result : TBase
    {

      public GuildDailyStats_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildDailyStats_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildDailyStats_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildInteraction_args : TBase
    {
      private List<GuildInteractionInfo> _infos;

      public List<GuildInteractionInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildInteraction_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildInteractionInfo>();
                  TList _list229 = iprot.ReadListBegin();
                  for( int _i230 = 0; _i230 < _list229.Count; ++_i230)
                  {
                    GuildInteractionInfo _elem231 = new GuildInteractionInfo();
                    _elem231 = new GuildInteractionInfo();
                    _elem231.Read(iprot);
                    Infos.Add(_elem231);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildInteraction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildInteractionInfo _iter232 in Infos)
            {
              _iter232.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildInteraction_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildInteraction_result : TBase
    {

      public GuildInteraction_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildInteraction_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildInteraction_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildPointsChange_args : TBase
    {
      private List<GuildPointsChangeInfo> _infos;

      public List<GuildPointsChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GuildPointsChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GuildPointsChangeInfo>();
                  TList _list233 = iprot.ReadListBegin();
                  for( int _i234 = 0; _i234 < _list233.Count; ++_i234)
                  {
                    GuildPointsChangeInfo _elem235 = new GuildPointsChangeInfo();
                    _elem235 = new GuildPointsChangeInfo();
                    _elem235.Read(iprot);
                    Infos.Add(_elem235);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildPointsChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GuildPointsChangeInfo _iter236 in Infos)
            {
              _iter236.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildPointsChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GuildPointsChange_result : TBase
    {

      public GuildPointsChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GuildPointsChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GuildPointsChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneExpire_args : TBase
    {
      private List<RuneExpireInfo> _infos;

      public List<RuneExpireInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RuneExpire_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RuneExpireInfo>();
                  TList _list237 = iprot.ReadListBegin();
                  for( int _i238 = 0; _i238 < _list237.Count; ++_i238)
                  {
                    RuneExpireInfo _elem239 = new RuneExpireInfo();
                    _elem239 = new RuneExpireInfo();
                    _elem239.Read(iprot);
                    Infos.Add(_elem239);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneExpire_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RuneExpireInfo _iter240 in Infos)
            {
              _iter240.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneExpire_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneExpire_result : TBase
    {

      public RuneExpire_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneExpire_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneExpire_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneUnsoulbound_args : TBase
    {
      private List<RuneSoulboundInfo> _infos;

      public List<RuneSoulboundInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RuneUnsoulbound_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RuneSoulboundInfo>();
                  TList _list241 = iprot.ReadListBegin();
                  for( int _i242 = 0; _i242 < _list241.Count; ++_i242)
                  {
                    RuneSoulboundInfo _elem243 = new RuneSoulboundInfo();
                    _elem243 = new RuneSoulboundInfo();
                    _elem243.Read(iprot);
                    Infos.Add(_elem243);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneUnsoulbound_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RuneSoulboundInfo _iter244 in Infos)
            {
              _iter244.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneUnsoulbound_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneUnsoulbound_result : TBase
    {

      public RuneUnsoulbound_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneUnsoulbound_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneUnsoulbound_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneReplenish_args : TBase
    {
      private List<RuneReplenishInfo> _infos;

      public List<RuneReplenishInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RuneReplenish_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RuneReplenishInfo>();
                  TList _list245 = iprot.ReadListBegin();
                  for( int _i246 = 0; _i246 < _list245.Count; ++_i246)
                  {
                    RuneReplenishInfo _elem247 = new RuneReplenishInfo();
                    _elem247 = new RuneReplenishInfo();
                    _elem247.Read(iprot);
                    Infos.Add(_elem247);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneReplenish_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RuneReplenishInfo _iter248 in Infos)
            {
              _iter248.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneReplenish_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneReplenish_result : TBase
    {

      public RuneReplenish_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneReplenish_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneReplenish_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneHeroApply_args : TBase
    {
      private List<RuneHeroApplyInfo> _infos;

      public List<RuneHeroApplyInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RuneHeroApply_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RuneHeroApplyInfo>();
                  TList _list249 = iprot.ReadListBegin();
                  for( int _i250 = 0; _i250 < _list249.Count; ++_i250)
                  {
                    RuneHeroApplyInfo _elem251 = new RuneHeroApplyInfo();
                    _elem251 = new RuneHeroApplyInfo();
                    _elem251.Read(iprot);
                    Infos.Add(_elem251);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneHeroApply_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RuneHeroApplyInfo _iter252 in Infos)
            {
              _iter252.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneHeroApply_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneHeroApply_result : TBase
    {

      public RuneHeroApply_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneHeroApply_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneHeroApply_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneRoll_args : TBase
    {
      private List<RuneRollInfo> _infos;

      public List<RuneRollInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public RuneRoll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<RuneRollInfo>();
                  TList _list253 = iprot.ReadListBegin();
                  for( int _i254 = 0; _i254 < _list253.Count; ++_i254)
                  {
                    RuneRollInfo _elem255 = new RuneRollInfo();
                    _elem255 = new RuneRollInfo();
                    _elem255.Read(iprot);
                    Infos.Add(_elem255);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneRoll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (RuneRollInfo _iter256 in Infos)
            {
              _iter256.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneRoll_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuneRoll_result : TBase
    {

      public RuneRoll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RuneRoll_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RuneRoll_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GWEventAdd_args : TBase
    {
      private List<GWEventInfo> _infos;

      public List<GWEventInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GWEventAdd_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GWEventInfo>();
                  TList _list257 = iprot.ReadListBegin();
                  for( int _i258 = 0; _i258 < _list257.Count; ++_i258)
                  {
                    GWEventInfo _elem259 = new GWEventInfo();
                    _elem259 = new GWEventInfo();
                    _elem259.Read(iprot);
                    Infos.Add(_elem259);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GWEventAdd_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GWEventInfo _iter260 in Infos)
            {
              _iter260.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GWEventAdd_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GWEventAdd_result : TBase
    {

      public GWEventAdd_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GWEventAdd_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GWEventAdd_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GWScoreChange_args : TBase
    {
      private List<GWScoreChangeInfo> _infos;

      public List<GWScoreChangeInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public GWScoreChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<GWScoreChangeInfo>();
                  TList _list261 = iprot.ReadListBegin();
                  for( int _i262 = 0; _i262 < _list261.Count; ++_i262)
                  {
                    GWScoreChangeInfo _elem263 = new GWScoreChangeInfo();
                    _elem263 = new GWScoreChangeInfo();
                    _elem263.Read(iprot);
                    Infos.Add(_elem263);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GWScoreChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (GWScoreChangeInfo _iter264 in Infos)
            {
              _iter264.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GWScoreChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GWScoreChange_result : TBase
    {

      public GWScoreChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GWScoreChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GWScoreChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuestEventStageChange_args : TBase
    {
      private List<QuestEventsStagesInfo> _infos;

      public List<QuestEventsStagesInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public QuestEventStageChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<QuestEventsStagesInfo>();
                  TList _list265 = iprot.ReadListBegin();
                  for( int _i266 = 0; _i266 < _list265.Count; ++_i266)
                  {
                    QuestEventsStagesInfo _elem267 = new QuestEventsStagesInfo();
                    _elem267 = new QuestEventsStagesInfo();
                    _elem267.Read(iprot);
                    Infos.Add(_elem267);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QuestEventStageChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (QuestEventsStagesInfo _iter268 in Infos)
            {
              _iter268.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QuestEventStageChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuestEventStageChange_result : TBase
    {

      public QuestEventStageChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QuestEventStageChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QuestEventStageChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuestEventStateChange_args : TBase
    {
      private List<QuestEventsStatesInfo> _infos;

      public List<QuestEventsStatesInfo> Infos
      {
        get
        {
          return _infos;
        }
        set
        {
          __isset.infos = true;
          this._infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool infos;
      }

      public QuestEventStateChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Infos = new List<QuestEventsStatesInfo>();
                  TList _list269 = iprot.ReadListBegin();
                  for( int _i270 = 0; _i270 < _list269.Count; ++_i270)
                  {
                    QuestEventsStatesInfo _elem271 = new QuestEventsStatesInfo();
                    _elem271 = new QuestEventsStatesInfo();
                    _elem271.Read(iprot);
                    Infos.Add(_elem271);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QuestEventStateChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Infos != null && __isset.infos) {
          field.Name = "infos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Infos.Count));
            foreach (QuestEventsStatesInfo _iter272 in Infos)
            {
              _iter272.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QuestEventStateChange_args(");
        sb.Append("Infos: ");
        sb.Append(Infos);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuestEventStateChange_result : TBase
    {

      public QuestEventStateChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QuestEventStateChange_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QuestEventStateChange_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
