/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TransmutationTalentsPerPerlByIdResponse : TBase
  {
    private RequestResult _result;
    private TransmutationTalentsPerPerl _talentsPerPerl;
    private int _talentsDefault;

    /// <summary>
    /// 
    /// <seealso cref="RequestResult"/>
    /// </summary>
    public RequestResult Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public TransmutationTalentsPerPerl TalentsPerPerl
    {
      get
      {
        return _talentsPerPerl;
      }
      set
      {
        __isset.talentsPerPerl = true;
        this._talentsPerPerl = value;
      }
    }

    public int TalentsDefault
    {
      get
      {
        return _talentsDefault;
      }
      set
      {
        __isset.talentsDefault = true;
        this._talentsDefault = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool result;
      public bool talentsPerPerl;
      public bool talentsDefault;
    }

    public TransmutationTalentsPerPerlByIdResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Result = (RequestResult)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              TalentsPerPerl = new TransmutationTalentsPerPerl();
              TalentsPerPerl.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TalentsDefault = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TransmutationTalentsPerPerlByIdResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Result);
        oprot.WriteFieldEnd();
      }
      if (TalentsPerPerl != null && __isset.talentsPerPerl) {
        field.Name = "talentsPerPerl";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        TalentsPerPerl.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.talentsDefault) {
        field.Name = "talentsDefault";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TalentsDefault);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TransmutationTalentsPerPerlByIdResponse(");
      sb.Append("Result: ");
      sb.Append(Result);
      sb.Append(",TalentsPerPerl: ");
      sb.Append(TalentsPerPerl== null ? "<null>" : TalentsPerPerl.ToString());
      sb.Append(",TalentsDefault: ");
      sb.Append(TalentsDefault);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
