/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResourceTable : TBase
  {
    private int _Gold;
    private int _Silver;
    private int _Perl;
    private int _RedPerl;
    private int _Population;
    private int _Resource1;
    private int _Resource2;
    private int _Resource3;
    private int _CWPoints_Player;
    private int _Shard;
    private Dictionary<string, int> _Currencies;

    public int Gold
    {
      get
      {
        return _Gold;
      }
      set
      {
        __isset.Gold = true;
        this._Gold = value;
      }
    }

    public int Silver
    {
      get
      {
        return _Silver;
      }
      set
      {
        __isset.Silver = true;
        this._Silver = value;
      }
    }

    public int Perl
    {
      get
      {
        return _Perl;
      }
      set
      {
        __isset.Perl = true;
        this._Perl = value;
      }
    }

    public int RedPerl
    {
      get
      {
        return _RedPerl;
      }
      set
      {
        __isset.RedPerl = true;
        this._RedPerl = value;
      }
    }

    public int Population
    {
      get
      {
        return _Population;
      }
      set
      {
        __isset.Population = true;
        this._Population = value;
      }
    }

    public int Resource1
    {
      get
      {
        return _Resource1;
      }
      set
      {
        __isset.Resource1 = true;
        this._Resource1 = value;
      }
    }

    public int Resource2
    {
      get
      {
        return _Resource2;
      }
      set
      {
        __isset.Resource2 = true;
        this._Resource2 = value;
      }
    }

    public int Resource3
    {
      get
      {
        return _Resource3;
      }
      set
      {
        __isset.Resource3 = true;
        this._Resource3 = value;
      }
    }

    public int CWPoints_Player
    {
      get
      {
        return _CWPoints_Player;
      }
      set
      {
        __isset.CWPoints_Player = true;
        this._CWPoints_Player = value;
      }
    }

    public int Shard
    {
      get
      {
        return _Shard;
      }
      set
      {
        __isset.Shard = true;
        this._Shard = value;
      }
    }

    public Dictionary<string, int> Currencies
    {
      get
      {
        return _Currencies;
      }
      set
      {
        __isset.Currencies = true;
        this._Currencies = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Gold;
      public bool Silver;
      public bool Perl;
      public bool RedPerl;
      public bool Population;
      public bool Resource1;
      public bool Resource2;
      public bool Resource3;
      public bool CWPoints_Player;
      public bool Shard;
      public bool Currencies;
    }

    public ResourceTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Silver = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Perl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RedPerl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Population = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Resource1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Resource2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Resource3 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              CWPoints_Player = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Shard = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Map) {
              {
                Currencies = new Dictionary<string, int>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  int _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadI32();
                  Currencies[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResourceTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Gold) {
        field.Name = "Gold";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.Silver) {
        field.Name = "Silver";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Silver);
        oprot.WriteFieldEnd();
      }
      if (__isset.Perl) {
        field.Name = "Perl";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Perl);
        oprot.WriteFieldEnd();
      }
      if (__isset.RedPerl) {
        field.Name = "RedPerl";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RedPerl);
        oprot.WriteFieldEnd();
      }
      if (__isset.Population) {
        field.Name = "Population";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Population);
        oprot.WriteFieldEnd();
      }
      if (__isset.Resource1) {
        field.Name = "Resource1";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource1);
        oprot.WriteFieldEnd();
      }
      if (__isset.Resource2) {
        field.Name = "Resource2";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource2);
        oprot.WriteFieldEnd();
      }
      if (__isset.Resource3) {
        field.Name = "Resource3";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource3);
        oprot.WriteFieldEnd();
      }
      if (__isset.CWPoints_Player) {
        field.Name = "CWPoints_Player";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CWPoints_Player);
        oprot.WriteFieldEnd();
      }
      if (__isset.Shard) {
        field.Name = "Shard";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Shard);
        oprot.WriteFieldEnd();
      }
      if (Currencies != null && __isset.Currencies) {
        field.Name = "Currencies";
        field.Type = TType.Map;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Currencies.Count));
          foreach (string _iter4 in Currencies.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteI32(Currencies[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResourceTable(");
      sb.Append("Gold: ");
      sb.Append(Gold);
      sb.Append(",Silver: ");
      sb.Append(Silver);
      sb.Append(",Perl: ");
      sb.Append(Perl);
      sb.Append(",RedPerl: ");
      sb.Append(RedPerl);
      sb.Append(",Population: ");
      sb.Append(Population);
      sb.Append(",Resource1: ");
      sb.Append(Resource1);
      sb.Append(",Resource2: ");
      sb.Append(Resource2);
      sb.Append(",Resource3: ");
      sb.Append(Resource3);
      sb.Append(",CWPoints_Player: ");
      sb.Append(CWPoints_Player);
      sb.Append(",Shard: ");
      sb.Append(Shard);
      sb.Append(",Currencies: ");
      sb.Append(Currencies);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
