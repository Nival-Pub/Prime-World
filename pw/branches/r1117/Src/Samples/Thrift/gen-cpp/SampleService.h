/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef SampleService_H
#define SampleService_H

#include <TProcessor.h>
#include "Example_types.h"

namespace Test {

class SampleServiceIf {
 public:
  virtual ~SampleServiceIf() {}
  virtual int32_t ping() = 0;
};

class SampleServiceNull : virtual public SampleServiceIf {
 public:
  virtual ~SampleServiceNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
};


class SampleService_ping_args {
 public:

  SampleService_ping_args() {
  }

  virtual ~SampleService_ping_args() throw() {}


  bool operator == (const SampleService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SampleService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SampleService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SampleService_ping_pargs {
 public:


  virtual ~SampleService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SampleService_ping_result__isset {
  _SampleService_ping_result__isset() : success(false) {}
  bool success;
} _SampleService_ping_result__isset;

class SampleService_ping_result {
 public:

  SampleService_ping_result() : success(0) {
  }

  virtual ~SampleService_ping_result() throw() {}

  int32_t success;

  _SampleService_ping_result__isset __isset;

  bool operator == (const SampleService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SampleService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SampleService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SampleService_ping_presult__isset {
  _SampleService_ping_presult__isset() : success(false) {}
  bool success;
} _SampleService_ping_presult__isset;

class SampleService_ping_presult {
 public:


  virtual ~SampleService_ping_presult() throw() {}

  int32_t* success;

  _SampleService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SampleServiceClient : virtual public SampleServiceIf {
 public:
  SampleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SampleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SampleServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SampleServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SampleServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SampleServiceProcessor(boost::shared_ptr<SampleServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &SampleServiceProcessor::process_ping;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SampleServiceProcessor() {}
};

class SampleServiceMultiface : virtual public SampleServiceIf {
 public:
  SampleServiceMultiface(std::vector<boost::shared_ptr<SampleServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SampleServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SampleServiceIf> > ifaces_;
  SampleServiceMultiface() {}
  void add(boost::shared_ptr<SampleServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ping();
      } else {
        ifaces_[i]->ping();
      }
    }
  }

};

} // namespace

#endif
