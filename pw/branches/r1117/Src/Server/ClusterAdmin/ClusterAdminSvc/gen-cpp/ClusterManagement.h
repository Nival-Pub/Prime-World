/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClusterManagement_H
#define ClusterManagement_H

#include <thrift/TDispatchProcessor.h>
#include "ClusterManagementAPI_types.h"

namespace ClusterAdmin { namespace Thrift {

class ClusterManagementIf {
 public:
  virtual ~ClusterManagementIf() {}
  virtual void GetServices(std::vector<ServiceInfo> & _return) = 0;
  virtual void GetServicesByMachine(std::vector<ServiceInfo> & _return, const std::string& machine) = 0;
  virtual void GetServicesByType(std::vector<ServiceInfo> & _return, const std::string& stype) = 0;
  virtual void GetServiceById(ServiceInfo& _return, const std::string& serviceid) = 0;
  virtual int32_t ExecuteCommand(const std::string& serviceid, const ServiceCommand::type command, const std::string& arguments) = 0;
  virtual int32_t ChangeParameters(const std::string& serviceid, const std::vector<ServiceParameter> & parameters, const bool saveinconfig) = 0;
};

class ClusterManagementIfFactory {
 public:
  typedef ClusterManagementIf Handler;

  virtual ~ClusterManagementIfFactory() {}

  virtual ClusterManagementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClusterManagementIf* /* handler */) = 0;
};

class ClusterManagementIfSingletonFactory : virtual public ClusterManagementIfFactory {
 public:
  ClusterManagementIfSingletonFactory(const boost::shared_ptr<ClusterManagementIf>& iface) : iface_(iface) {}
  virtual ~ClusterManagementIfSingletonFactory() {}

  virtual ClusterManagementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClusterManagementIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClusterManagementIf> iface_;
};

class ClusterManagementNull : virtual public ClusterManagementIf {
 public:
  virtual ~ClusterManagementNull() {}
  void GetServices(std::vector<ServiceInfo> & /* _return */) {
    return;
  }
  void GetServicesByMachine(std::vector<ServiceInfo> & /* _return */, const std::string& /* machine */) {
    return;
  }
  void GetServicesByType(std::vector<ServiceInfo> & /* _return */, const std::string& /* stype */) {
    return;
  }
  void GetServiceById(ServiceInfo& /* _return */, const std::string& /* serviceid */) {
    return;
  }
  int32_t ExecuteCommand(const std::string& /* serviceid */, const ServiceCommand::type /* command */, const std::string& /* arguments */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ChangeParameters(const std::string& /* serviceid */, const std::vector<ServiceParameter> & /* parameters */, const bool /* saveinconfig */) {
    int32_t _return = 0;
    return _return;
  }
};


class ClusterManagement_GetServices_args {
 public:

  ClusterManagement_GetServices_args() {
  }

  virtual ~ClusterManagement_GetServices_args() throw() {}


  bool operator == (const ClusterManagement_GetServices_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClusterManagement_GetServices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterManagement_GetServices_pargs {
 public:


  virtual ~ClusterManagement_GetServices_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServices_result__isset {
  _ClusterManagement_GetServices_result__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServices_result__isset;

class ClusterManagement_GetServices_result {
 public:

  ClusterManagement_GetServices_result() {
  }

  virtual ~ClusterManagement_GetServices_result() throw() {}

  std::vector<ServiceInfo>  success;

  _ClusterManagement_GetServices_result__isset __isset;

  void __set_success(const std::vector<ServiceInfo> & val) {
    success = val;
  }

  bool operator == (const ClusterManagement_GetServices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServices_presult__isset {
  _ClusterManagement_GetServices_presult__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServices_presult__isset;

class ClusterManagement_GetServices_presult {
 public:


  virtual ~ClusterManagement_GetServices_presult() throw() {}

  std::vector<ServiceInfo> * success;

  _ClusterManagement_GetServices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusterManagement_GetServicesByMachine_args__isset {
  _ClusterManagement_GetServicesByMachine_args__isset() : machine(false) {}
  bool machine;
} _ClusterManagement_GetServicesByMachine_args__isset;

class ClusterManagement_GetServicesByMachine_args {
 public:

  ClusterManagement_GetServicesByMachine_args() : machine() {
  }

  virtual ~ClusterManagement_GetServicesByMachine_args() throw() {}

  std::string machine;

  _ClusterManagement_GetServicesByMachine_args__isset __isset;

  void __set_machine(const std::string& val) {
    machine = val;
  }

  bool operator == (const ClusterManagement_GetServicesByMachine_args & rhs) const
  {
    if (!(machine == rhs.machine))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServicesByMachine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServicesByMachine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterManagement_GetServicesByMachine_pargs {
 public:


  virtual ~ClusterManagement_GetServicesByMachine_pargs() throw() {}

  const std::string* machine;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServicesByMachine_result__isset {
  _ClusterManagement_GetServicesByMachine_result__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServicesByMachine_result__isset;

class ClusterManagement_GetServicesByMachine_result {
 public:

  ClusterManagement_GetServicesByMachine_result() {
  }

  virtual ~ClusterManagement_GetServicesByMachine_result() throw() {}

  std::vector<ServiceInfo>  success;

  _ClusterManagement_GetServicesByMachine_result__isset __isset;

  void __set_success(const std::vector<ServiceInfo> & val) {
    success = val;
  }

  bool operator == (const ClusterManagement_GetServicesByMachine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServicesByMachine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServicesByMachine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServicesByMachine_presult__isset {
  _ClusterManagement_GetServicesByMachine_presult__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServicesByMachine_presult__isset;

class ClusterManagement_GetServicesByMachine_presult {
 public:


  virtual ~ClusterManagement_GetServicesByMachine_presult() throw() {}

  std::vector<ServiceInfo> * success;

  _ClusterManagement_GetServicesByMachine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusterManagement_GetServicesByType_args__isset {
  _ClusterManagement_GetServicesByType_args__isset() : stype(false) {}
  bool stype;
} _ClusterManagement_GetServicesByType_args__isset;

class ClusterManagement_GetServicesByType_args {
 public:

  ClusterManagement_GetServicesByType_args() : stype() {
  }

  virtual ~ClusterManagement_GetServicesByType_args() throw() {}

  std::string stype;

  _ClusterManagement_GetServicesByType_args__isset __isset;

  void __set_stype(const std::string& val) {
    stype = val;
  }

  bool operator == (const ClusterManagement_GetServicesByType_args & rhs) const
  {
    if (!(stype == rhs.stype))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServicesByType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServicesByType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterManagement_GetServicesByType_pargs {
 public:


  virtual ~ClusterManagement_GetServicesByType_pargs() throw() {}

  const std::string* stype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServicesByType_result__isset {
  _ClusterManagement_GetServicesByType_result__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServicesByType_result__isset;

class ClusterManagement_GetServicesByType_result {
 public:

  ClusterManagement_GetServicesByType_result() {
  }

  virtual ~ClusterManagement_GetServicesByType_result() throw() {}

  std::vector<ServiceInfo>  success;

  _ClusterManagement_GetServicesByType_result__isset __isset;

  void __set_success(const std::vector<ServiceInfo> & val) {
    success = val;
  }

  bool operator == (const ClusterManagement_GetServicesByType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServicesByType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServicesByType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServicesByType_presult__isset {
  _ClusterManagement_GetServicesByType_presult__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServicesByType_presult__isset;

class ClusterManagement_GetServicesByType_presult {
 public:


  virtual ~ClusterManagement_GetServicesByType_presult() throw() {}

  std::vector<ServiceInfo> * success;

  _ClusterManagement_GetServicesByType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusterManagement_GetServiceById_args__isset {
  _ClusterManagement_GetServiceById_args__isset() : serviceid(false) {}
  bool serviceid;
} _ClusterManagement_GetServiceById_args__isset;

class ClusterManagement_GetServiceById_args {
 public:

  ClusterManagement_GetServiceById_args() : serviceid() {
  }

  virtual ~ClusterManagement_GetServiceById_args() throw() {}

  std::string serviceid;

  _ClusterManagement_GetServiceById_args__isset __isset;

  void __set_serviceid(const std::string& val) {
    serviceid = val;
  }

  bool operator == (const ClusterManagement_GetServiceById_args & rhs) const
  {
    if (!(serviceid == rhs.serviceid))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServiceById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServiceById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterManagement_GetServiceById_pargs {
 public:


  virtual ~ClusterManagement_GetServiceById_pargs() throw() {}

  const std::string* serviceid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServiceById_result__isset {
  _ClusterManagement_GetServiceById_result__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServiceById_result__isset;

class ClusterManagement_GetServiceById_result {
 public:

  ClusterManagement_GetServiceById_result() {
  }

  virtual ~ClusterManagement_GetServiceById_result() throw() {}

  ServiceInfo success;

  _ClusterManagement_GetServiceById_result__isset __isset;

  void __set_success(const ServiceInfo& val) {
    success = val;
  }

  bool operator == (const ClusterManagement_GetServiceById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_GetServiceById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_GetServiceById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_GetServiceById_presult__isset {
  _ClusterManagement_GetServiceById_presult__isset() : success(false) {}
  bool success;
} _ClusterManagement_GetServiceById_presult__isset;

class ClusterManagement_GetServiceById_presult {
 public:


  virtual ~ClusterManagement_GetServiceById_presult() throw() {}

  ServiceInfo* success;

  _ClusterManagement_GetServiceById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusterManagement_ExecuteCommand_args__isset {
  _ClusterManagement_ExecuteCommand_args__isset() : serviceid(false), command(false), arguments(false) {}
  bool serviceid;
  bool command;
  bool arguments;
} _ClusterManagement_ExecuteCommand_args__isset;

class ClusterManagement_ExecuteCommand_args {
 public:

  ClusterManagement_ExecuteCommand_args() : serviceid(), command((ServiceCommand::type)0), arguments() {
  }

  virtual ~ClusterManagement_ExecuteCommand_args() throw() {}

  std::string serviceid;
  ServiceCommand::type command;
  std::string arguments;

  _ClusterManagement_ExecuteCommand_args__isset __isset;

  void __set_serviceid(const std::string& val) {
    serviceid = val;
  }

  void __set_command(const ServiceCommand::type val) {
    command = val;
  }

  void __set_arguments(const std::string& val) {
    arguments = val;
  }

  bool operator == (const ClusterManagement_ExecuteCommand_args & rhs) const
  {
    if (!(serviceid == rhs.serviceid))
      return false;
    if (!(command == rhs.command))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_ExecuteCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_ExecuteCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterManagement_ExecuteCommand_pargs {
 public:


  virtual ~ClusterManagement_ExecuteCommand_pargs() throw() {}

  const std::string* serviceid;
  const ServiceCommand::type* command;
  const std::string* arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_ExecuteCommand_result__isset {
  _ClusterManagement_ExecuteCommand_result__isset() : success(false) {}
  bool success;
} _ClusterManagement_ExecuteCommand_result__isset;

class ClusterManagement_ExecuteCommand_result {
 public:

  ClusterManagement_ExecuteCommand_result() : success(0) {
  }

  virtual ~ClusterManagement_ExecuteCommand_result() throw() {}

  int32_t success;

  _ClusterManagement_ExecuteCommand_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ClusterManagement_ExecuteCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_ExecuteCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_ExecuteCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_ExecuteCommand_presult__isset {
  _ClusterManagement_ExecuteCommand_presult__isset() : success(false) {}
  bool success;
} _ClusterManagement_ExecuteCommand_presult__isset;

class ClusterManagement_ExecuteCommand_presult {
 public:


  virtual ~ClusterManagement_ExecuteCommand_presult() throw() {}

  int32_t* success;

  _ClusterManagement_ExecuteCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusterManagement_ChangeParameters_args__isset {
  _ClusterManagement_ChangeParameters_args__isset() : serviceid(false), parameters(false), saveinconfig(true) {}
  bool serviceid;
  bool parameters;
  bool saveinconfig;
} _ClusterManagement_ChangeParameters_args__isset;

class ClusterManagement_ChangeParameters_args {
 public:

  ClusterManagement_ChangeParameters_args() : serviceid(), saveinconfig(false) {
  }

  virtual ~ClusterManagement_ChangeParameters_args() throw() {}

  std::string serviceid;
  std::vector<ServiceParameter>  parameters;
  bool saveinconfig;

  _ClusterManagement_ChangeParameters_args__isset __isset;

  void __set_serviceid(const std::string& val) {
    serviceid = val;
  }

  void __set_parameters(const std::vector<ServiceParameter> & val) {
    parameters = val;
  }

  void __set_saveinconfig(const bool val) {
    saveinconfig = val;
  }

  bool operator == (const ClusterManagement_ChangeParameters_args & rhs) const
  {
    if (!(serviceid == rhs.serviceid))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (!(saveinconfig == rhs.saveinconfig))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_ChangeParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_ChangeParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterManagement_ChangeParameters_pargs {
 public:


  virtual ~ClusterManagement_ChangeParameters_pargs() throw() {}

  const std::string* serviceid;
  const std::vector<ServiceParameter> * parameters;
  const bool* saveinconfig;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_ChangeParameters_result__isset {
  _ClusterManagement_ChangeParameters_result__isset() : success(false) {}
  bool success;
} _ClusterManagement_ChangeParameters_result__isset;

class ClusterManagement_ChangeParameters_result {
 public:

  ClusterManagement_ChangeParameters_result() : success(0) {
  }

  virtual ~ClusterManagement_ChangeParameters_result() throw() {}

  int32_t success;

  _ClusterManagement_ChangeParameters_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ClusterManagement_ChangeParameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterManagement_ChangeParameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterManagement_ChangeParameters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterManagement_ChangeParameters_presult__isset {
  _ClusterManagement_ChangeParameters_presult__isset() : success(false) {}
  bool success;
} _ClusterManagement_ChangeParameters_presult__isset;

class ClusterManagement_ChangeParameters_presult {
 public:


  virtual ~ClusterManagement_ChangeParameters_presult() throw() {}

  int32_t* success;

  _ClusterManagement_ChangeParameters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClusterManagementClient : virtual public ClusterManagementIf {
 public:
  ClusterManagementClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClusterManagementClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetServices(std::vector<ServiceInfo> & _return);
  void send_GetServices();
  void recv_GetServices(std::vector<ServiceInfo> & _return);
  void GetServicesByMachine(std::vector<ServiceInfo> & _return, const std::string& machine);
  void send_GetServicesByMachine(const std::string& machine);
  void recv_GetServicesByMachine(std::vector<ServiceInfo> & _return);
  void GetServicesByType(std::vector<ServiceInfo> & _return, const std::string& stype);
  void send_GetServicesByType(const std::string& stype);
  void recv_GetServicesByType(std::vector<ServiceInfo> & _return);
  void GetServiceById(ServiceInfo& _return, const std::string& serviceid);
  void send_GetServiceById(const std::string& serviceid);
  void recv_GetServiceById(ServiceInfo& _return);
  int32_t ExecuteCommand(const std::string& serviceid, const ServiceCommand::type command, const std::string& arguments);
  void send_ExecuteCommand(const std::string& serviceid, const ServiceCommand::type command, const std::string& arguments);
  int32_t recv_ExecuteCommand();
  int32_t ChangeParameters(const std::string& serviceid, const std::vector<ServiceParameter> & parameters, const bool saveinconfig);
  void send_ChangeParameters(const std::string& serviceid, const std::vector<ServiceParameter> & parameters, const bool saveinconfig);
  int32_t recv_ChangeParameters();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClusterManagementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClusterManagementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClusterManagementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetServices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetServicesByMachine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetServicesByType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetServiceById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ChangeParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClusterManagementProcessor(boost::shared_ptr<ClusterManagementIf> iface) :
    iface_(iface) {
    processMap_["GetServices"] = &ClusterManagementProcessor::process_GetServices;
    processMap_["GetServicesByMachine"] = &ClusterManagementProcessor::process_GetServicesByMachine;
    processMap_["GetServicesByType"] = &ClusterManagementProcessor::process_GetServicesByType;
    processMap_["GetServiceById"] = &ClusterManagementProcessor::process_GetServiceById;
    processMap_["ExecuteCommand"] = &ClusterManagementProcessor::process_ExecuteCommand;
    processMap_["ChangeParameters"] = &ClusterManagementProcessor::process_ChangeParameters;
  }

  virtual ~ClusterManagementProcessor() {}
};

class ClusterManagementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClusterManagementProcessorFactory(const ::boost::shared_ptr< ClusterManagementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClusterManagementIfFactory > handlerFactory_;
};

class ClusterManagementMultiface : virtual public ClusterManagementIf {
 public:
  ClusterManagementMultiface(std::vector<boost::shared_ptr<ClusterManagementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClusterManagementMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClusterManagementIf> > ifaces_;
  ClusterManagementMultiface() {}
  void add(boost::shared_ptr<ClusterManagementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetServices(std::vector<ServiceInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServices(_return);
    }
    ifaces_[i]->GetServices(_return);
    return;
  }

  void GetServicesByMachine(std::vector<ServiceInfo> & _return, const std::string& machine) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServicesByMachine(_return, machine);
    }
    ifaces_[i]->GetServicesByMachine(_return, machine);
    return;
  }

  void GetServicesByType(std::vector<ServiceInfo> & _return, const std::string& stype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServicesByType(_return, stype);
    }
    ifaces_[i]->GetServicesByType(_return, stype);
    return;
  }

  void GetServiceById(ServiceInfo& _return, const std::string& serviceid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServiceById(_return, serviceid);
    }
    ifaces_[i]->GetServiceById(_return, serviceid);
    return;
  }

  int32_t ExecuteCommand(const std::string& serviceid, const ServiceCommand::type command, const std::string& arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteCommand(serviceid, command, arguments);
    }
    return ifaces_[i]->ExecuteCommand(serviceid, command, arguments);
  }

  int32_t ChangeParameters(const std::string& serviceid, const std::vector<ServiceParameter> & parameters, const bool saveinconfig) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ChangeParameters(serviceid, parameters, saveinconfig);
    }
    return ifaces_[i]->ChangeParameters(serviceid, parameters, saveinconfig);
  }

};

}} // namespace

#endif
