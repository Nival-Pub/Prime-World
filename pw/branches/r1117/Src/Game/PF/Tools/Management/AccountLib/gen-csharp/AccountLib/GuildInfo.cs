/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildInfo : TBase
  {
    private long _guildid;
    private string _shortname;
    private string _fullname;
    private string _messageoftheday;
    private long _leaderauid;
    private string _leadernickname;
    private List<GuildMemberInfo> _members;
    private long _guildExperience;
    private int _iconChangesCount;
    private int _guildLevel;
    private int _guildBankAddLimit;
    private int _guildBankTakeLimit;
    private int _cwguildpoints;
    private int _cwrating;
    private GuildShortInfo _suzerain;
    private List<GuildShortInfo> _vassals;
    private long _siegeendtime;
    private long _releaselocktime;

    public long Guildid
    {
      get
      {
        return _guildid;
      }
      set
      {
        __isset.guildid = true;
        this._guildid = value;
      }
    }

    public string Shortname
    {
      get
      {
        return _shortname;
      }
      set
      {
        __isset.shortname = true;
        this._shortname = value;
      }
    }

    public string Fullname
    {
      get
      {
        return _fullname;
      }
      set
      {
        __isset.fullname = true;
        this._fullname = value;
      }
    }

    public string Messageoftheday
    {
      get
      {
        return _messageoftheday;
      }
      set
      {
        __isset.messageoftheday = true;
        this._messageoftheday = value;
      }
    }

    public long Leaderauid
    {
      get
      {
        return _leaderauid;
      }
      set
      {
        __isset.leaderauid = true;
        this._leaderauid = value;
      }
    }

    public string Leadernickname
    {
      get
      {
        return _leadernickname;
      }
      set
      {
        __isset.leadernickname = true;
        this._leadernickname = value;
      }
    }

    public List<GuildMemberInfo> Members
    {
      get
      {
        return _members;
      }
      set
      {
        __isset.members = true;
        this._members = value;
      }
    }

    public long GuildExperience
    {
      get
      {
        return _guildExperience;
      }
      set
      {
        __isset.guildExperience = true;
        this._guildExperience = value;
      }
    }

    public int IconChangesCount
    {
      get
      {
        return _iconChangesCount;
      }
      set
      {
        __isset.iconChangesCount = true;
        this._iconChangesCount = value;
      }
    }

    public int GuildLevel
    {
      get
      {
        return _guildLevel;
      }
      set
      {
        __isset.guildLevel = true;
        this._guildLevel = value;
      }
    }

    public int GuildBankAddLimit
    {
      get
      {
        return _guildBankAddLimit;
      }
      set
      {
        __isset.guildBankAddLimit = true;
        this._guildBankAddLimit = value;
      }
    }

    public int GuildBankTakeLimit
    {
      get
      {
        return _guildBankTakeLimit;
      }
      set
      {
        __isset.guildBankTakeLimit = true;
        this._guildBankTakeLimit = value;
      }
    }

    public int Cwguildpoints
    {
      get
      {
        return _cwguildpoints;
      }
      set
      {
        __isset.cwguildpoints = true;
        this._cwguildpoints = value;
      }
    }

    public int Cwrating
    {
      get
      {
        return _cwrating;
      }
      set
      {
        __isset.cwrating = true;
        this._cwrating = value;
      }
    }

    public GuildShortInfo Suzerain
    {
      get
      {
        return _suzerain;
      }
      set
      {
        __isset.suzerain = true;
        this._suzerain = value;
      }
    }

    public List<GuildShortInfo> Vassals
    {
      get
      {
        return _vassals;
      }
      set
      {
        __isset.vassals = true;
        this._vassals = value;
      }
    }

    public long Siegeendtime
    {
      get
      {
        return _siegeendtime;
      }
      set
      {
        __isset.siegeendtime = true;
        this._siegeendtime = value;
      }
    }

    public long Releaselocktime
    {
      get
      {
        return _releaselocktime;
      }
      set
      {
        __isset.releaselocktime = true;
        this._releaselocktime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guildid;
      public bool shortname;
      public bool fullname;
      public bool messageoftheday;
      public bool leaderauid;
      public bool leadernickname;
      public bool members;
      public bool guildExperience;
      public bool iconChangesCount;
      public bool guildLevel;
      public bool guildBankAddLimit;
      public bool guildBankTakeLimit;
      public bool cwguildpoints;
      public bool cwrating;
      public bool suzerain;
      public bool vassals;
      public bool siegeendtime;
      public bool releaselocktime;
    }

    public GuildInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Guildid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Shortname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Fullname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Messageoftheday = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Leaderauid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Leadernickname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Members = new List<GuildMemberInfo>();
                TList _list70 = iprot.ReadListBegin();
                for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                {
                  GuildMemberInfo _elem72 = new GuildMemberInfo();
                  _elem72 = new GuildMemberInfo();
                  _elem72.Read(iprot);
                  Members.Add(_elem72);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              GuildExperience = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              IconChangesCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              GuildLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              GuildBankAddLimit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              GuildBankTakeLimit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Cwguildpoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Cwrating = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              Suzerain = new GuildShortInfo();
              Suzerain.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.List) {
              {
                Vassals = new List<GuildShortInfo>();
                TList _list73 = iprot.ReadListBegin();
                for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
                {
                  GuildShortInfo _elem75 = new GuildShortInfo();
                  _elem75 = new GuildShortInfo();
                  _elem75.Read(iprot);
                  Vassals.Add(_elem75);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              Siegeendtime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              Releaselocktime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.guildid) {
        field.Name = "guildid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Guildid);
        oprot.WriteFieldEnd();
      }
      if (Shortname != null && __isset.shortname) {
        field.Name = "shortname";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Shortname);
        oprot.WriteFieldEnd();
      }
      if (Fullname != null && __isset.fullname) {
        field.Name = "fullname";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Fullname);
        oprot.WriteFieldEnd();
      }
      if (Messageoftheday != null && __isset.messageoftheday) {
        field.Name = "messageoftheday";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Messageoftheday);
        oprot.WriteFieldEnd();
      }
      if (__isset.leaderauid) {
        field.Name = "leaderauid";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Leaderauid);
        oprot.WriteFieldEnd();
      }
      if (Leadernickname != null && __isset.leadernickname) {
        field.Name = "leadernickname";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Leadernickname);
        oprot.WriteFieldEnd();
      }
      if (Members != null && __isset.members) {
        field.Name = "members";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Members.Count));
          foreach (GuildMemberInfo _iter76 in Members)
          {
            _iter76.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.guildExperience) {
        field.Name = "guildExperience";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(GuildExperience);
        oprot.WriteFieldEnd();
      }
      if (__isset.iconChangesCount) {
        field.Name = "iconChangesCount";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IconChangesCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildLevel) {
        field.Name = "guildLevel";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GuildLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildBankAddLimit) {
        field.Name = "guildBankAddLimit";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GuildBankAddLimit);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildBankTakeLimit) {
        field.Name = "guildBankTakeLimit";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GuildBankTakeLimit);
        oprot.WriteFieldEnd();
      }
      if (__isset.cwguildpoints) {
        field.Name = "cwguildpoints";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cwguildpoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.cwrating) {
        field.Name = "cwrating";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cwrating);
        oprot.WriteFieldEnd();
      }
      if (Suzerain != null && __isset.suzerain) {
        field.Name = "suzerain";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        Suzerain.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Vassals != null && __isset.vassals) {
        field.Name = "vassals";
        field.Type = TType.List;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Vassals.Count));
          foreach (GuildShortInfo _iter77 in Vassals)
          {
            _iter77.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.siegeendtime) {
        field.Name = "siegeendtime";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Siegeendtime);
        oprot.WriteFieldEnd();
      }
      if (__isset.releaselocktime) {
        field.Name = "releaselocktime";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Releaselocktime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildInfo(");
      sb.Append("Guildid: ");
      sb.Append(Guildid);
      sb.Append(",Shortname: ");
      sb.Append(Shortname);
      sb.Append(",Fullname: ");
      sb.Append(Fullname);
      sb.Append(",Messageoftheday: ");
      sb.Append(Messageoftheday);
      sb.Append(",Leaderauid: ");
      sb.Append(Leaderauid);
      sb.Append(",Leadernickname: ");
      sb.Append(Leadernickname);
      sb.Append(",Members: ");
      sb.Append(Members);
      sb.Append(",GuildExperience: ");
      sb.Append(GuildExperience);
      sb.Append(",IconChangesCount: ");
      sb.Append(IconChangesCount);
      sb.Append(",GuildLevel: ");
      sb.Append(GuildLevel);
      sb.Append(",GuildBankAddLimit: ");
      sb.Append(GuildBankAddLimit);
      sb.Append(",GuildBankTakeLimit: ");
      sb.Append(GuildBankTakeLimit);
      sb.Append(",Cwguildpoints: ");
      sb.Append(Cwguildpoints);
      sb.Append(",Cwrating: ");
      sb.Append(Cwrating);
      sb.Append(",Suzerain: ");
      sb.Append(Suzerain== null ? "<null>" : Suzerain.ToString());
      sb.Append(",Vassals: ");
      sb.Append(Vassals);
      sb.Append(",Siegeendtime: ");
      sb.Append(Siegeendtime);
      sb.Append(",Releaselocktime: ");
      sb.Append(Releaselocktime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
