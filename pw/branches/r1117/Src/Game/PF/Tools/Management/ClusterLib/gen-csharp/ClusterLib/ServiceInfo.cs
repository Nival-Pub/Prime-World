/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ClusterLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServiceInfo : TBase
  {
    private string _sid;
    private string _stype;
    private string _machine;
    private ServiceStatus _status;
    private int _pid;
    private int _uptime;
    private string _backendaddr;
    private string _frontendaddr;
    private List<ServiceParameter> _parameters;

    public string Sid
    {
      get
      {
        return _sid;
      }
      set
      {
        __isset.sid = true;
        this._sid = value;
      }
    }

    public string Stype
    {
      get
      {
        return _stype;
      }
      set
      {
        __isset.stype = true;
        this._stype = value;
      }
    }

    public string Machine
    {
      get
      {
        return _machine;
      }
      set
      {
        __isset.machine = true;
        this._machine = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ServiceStatus"/>
    /// </summary>
    public ServiceStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public int Pid
    {
      get
      {
        return _pid;
      }
      set
      {
        __isset.pid = true;
        this._pid = value;
      }
    }

    public int Uptime
    {
      get
      {
        return _uptime;
      }
      set
      {
        __isset.uptime = true;
        this._uptime = value;
      }
    }

    public string Backendaddr
    {
      get
      {
        return _backendaddr;
      }
      set
      {
        __isset.backendaddr = true;
        this._backendaddr = value;
      }
    }

    public string Frontendaddr
    {
      get
      {
        return _frontendaddr;
      }
      set
      {
        __isset.frontendaddr = true;
        this._frontendaddr = value;
      }
    }

    public List<ServiceParameter> Parameters
    {
      get
      {
        return _parameters;
      }
      set
      {
        __isset.parameters = true;
        this._parameters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sid;
      public bool stype;
      public bool machine;
      public bool status;
      public bool pid;
      public bool uptime;
      public bool backendaddr;
      public bool frontendaddr;
      public bool parameters;
    }

    public ServiceInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Sid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Stype = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Machine = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Status = (ServiceStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Pid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Uptime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Backendaddr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Frontendaddr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                Parameters = new List<ServiceParameter>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  ServiceParameter _elem2 = new ServiceParameter();
                  _elem2 = new ServiceParameter();
                  _elem2.Read(iprot);
                  Parameters.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ServiceInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Sid != null && __isset.sid) {
        field.Name = "sid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sid);
        oprot.WriteFieldEnd();
      }
      if (Stype != null && __isset.stype) {
        field.Name = "stype";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Stype);
        oprot.WriteFieldEnd();
      }
      if (Machine != null && __isset.machine) {
        field.Name = "machine";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Machine);
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.pid) {
        field.Name = "pid";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Pid);
        oprot.WriteFieldEnd();
      }
      if (__isset.uptime) {
        field.Name = "uptime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uptime);
        oprot.WriteFieldEnd();
      }
      if (Backendaddr != null && __isset.backendaddr) {
        field.Name = "backendaddr";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Backendaddr);
        oprot.WriteFieldEnd();
      }
      if (Frontendaddr != null && __isset.frontendaddr) {
        field.Name = "frontendaddr";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Frontendaddr);
        oprot.WriteFieldEnd();
      }
      if (Parameters != null && __isset.parameters) {
        field.Name = "parameters";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
          foreach (ServiceParameter _iter3 in Parameters)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ServiceInfo(");
      sb.Append("Sid: ");
      sb.Append(Sid);
      sb.Append(",Stype: ");
      sb.Append(Stype);
      sb.Append(",Machine: ");
      sb.Append(Machine);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",Pid: ");
      sb.Append(Pid);
      sb.Append(",Uptime: ");
      sb.Append(Uptime);
      sb.Append(",Backendaddr: ");
      sb.Append(Backendaddr);
      sb.Append(",Frontendaddr: ");
      sb.Append(Frontendaddr);
      sb.Append(",Parameters: ");
      sb.Append(Parameters);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
