#pragma once
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NLogg
{
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define BUFFER_LENGTH 1024
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CLogBuffer
{
	char szBuffer[BUFFER_LENGTH];
	char *szGuard;
	size_t nPosition;
public:
	CLogBuffer() { Reset(); szGuard = &szBuffer[BUFFER_LENGTH]; }
	
	void Reset() { nPosition = 0; szBuffer[nPosition] = 0; }
	void Push( const char *szString )
	{
		char *szWrite = &szBuffer[nPosition];
		const char *szRead = szString;
		while ( szWrite != szGuard && *szRead != 0 )
		{
			*szWrite = *szRead;
			++szWrite;
			++szRead;
		}
		nPosition = szWrite - szBuffer;
		*szWrite = 0;
	}
	
	const char *GetBuffer() const { return szBuffer; }
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
