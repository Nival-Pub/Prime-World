#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ResourceChangeItem(object):
  BuildingPlace = 0
  BuildingUpgrade = 1
  BuildingBuyCycle = 2
  ChangeFraction = 3
  ChangeNickname = 4
  Unsoulbound = 5
  Expansion = 6
  MoveFromPocket = 7
  MovePerlIntoBuilding = 8
  StartProduction = 9
  MoveToPocket = 10
  RemovePerlFromBuilding = 11
  TalentSell = 12
  FinishProduction = 13
  BuildingSell = 14
  ResetHeroStats = 15
  SkipQuestObjective = 16
  BuyPremiumAccount = 17
  UpgradeTalent = 18
  BuySkin = 19
  Unban = 20
  BuyGuildIconChange = 21
  BuyTournamentTicket = 22
  InvestInGuild = 23
  BuyFlag = 24
  Transmutation = 25
  BuyBeginnersPack = 26
  ContextBuyResource = 27
  BoostProduction = 28
  DynamicQuestReward = 29
  RerollShopBuy = 30
  RollEvent = 31
  AddTalentQuest = 32
  QuestEvent = 33
  Session = 34

  _VALUES_TO_NAMES = {
    0: "BuildingPlace",
    1: "BuildingUpgrade",
    2: "BuildingBuyCycle",
    3: "ChangeFraction",
    4: "ChangeNickname",
    5: "Unsoulbound",
    6: "Expansion",
    7: "MoveFromPocket",
    8: "MovePerlIntoBuilding",
    9: "StartProduction",
    10: "MoveToPocket",
    11: "RemovePerlFromBuilding",
    12: "TalentSell",
    13: "FinishProduction",
    14: "BuildingSell",
    15: "ResetHeroStats",
    16: "SkipQuestObjective",
    17: "BuyPremiumAccount",
    18: "UpgradeTalent",
    19: "BuySkin",
    20: "Unban",
    21: "BuyGuildIconChange",
    22: "BuyTournamentTicket",
    23: "InvestInGuild",
    24: "BuyFlag",
    25: "Transmutation",
    26: "BuyBeginnersPack",
    27: "ContextBuyResource",
    28: "BoostProduction",
    29: "DynamicQuestReward",
    30: "RerollShopBuy",
    31: "RollEvent",
    32: "AddTalentQuest",
    33: "QuestEvent",
    34: "Session",
  }

  _NAMES_TO_VALUES = {
    "BuildingPlace": 0,
    "BuildingUpgrade": 1,
    "BuildingBuyCycle": 2,
    "ChangeFraction": 3,
    "ChangeNickname": 4,
    "Unsoulbound": 5,
    "Expansion": 6,
    "MoveFromPocket": 7,
    "MovePerlIntoBuilding": 8,
    "StartProduction": 9,
    "MoveToPocket": 10,
    "RemovePerlFromBuilding": 11,
    "TalentSell": 12,
    "FinishProduction": 13,
    "BuildingSell": 14,
    "ResetHeroStats": 15,
    "SkipQuestObjective": 16,
    "BuyPremiumAccount": 17,
    "UpgradeTalent": 18,
    "BuySkin": 19,
    "Unban": 20,
    "BuyGuildIconChange": 21,
    "BuyTournamentTicket": 22,
    "InvestInGuild": 23,
    "BuyFlag": 24,
    "Transmutation": 25,
    "BuyBeginnersPack": 26,
    "ContextBuyResource": 27,
    "BoostProduction": 28,
    "DynamicQuestReward": 29,
    "RerollShopBuy": 30,
    "RollEvent": 31,
    "AddTalentQuest": 32,
    "QuestEvent": 33,
    "Session": 34,
  }

class QuestChangeItem(object):
  Add = 0
  Accept = 1
  Complete = 2

  _VALUES_TO_NAMES = {
    0: "Add",
    1: "Accept",
    2: "Complete",
  }

  _NAMES_TO_VALUES = {
    "Add": 0,
    "Accept": 1,
    "Complete": 2,
  }

class GMOperationType(object):
  QuestAdd = 0
  QuestAccept = 1
  QuestComplete = 2
  QuestDelete = 3
  BuildingAdd = 4
  BuildingDelete = 5
  BuildingMoveToStorage = 6
  SkinAdd = 7
  SkinDelete = 8
  TalentAdd = 9
  TalentDelete = 10
  TalentEdit = 11
  Kick = 12
  FlagLock = 13
  FlagUnlock = 14
  GuildEdit = 15
  GuildLock = 16
  GuildUnlock = 17
  GuildStopSiege = 18
  GuildSuzerainChange = 19
  SeasonAwardsAdd = 20
  SeasonAwardsChange = 21
  SeasonInfoAdd = 22
  SeasonInfoChange = 23
  TalentUpgradeEntityDelete = 24

  _VALUES_TO_NAMES = {
    0: "QuestAdd",
    1: "QuestAccept",
    2: "QuestComplete",
    3: "QuestDelete",
    4: "BuildingAdd",
    5: "BuildingDelete",
    6: "BuildingMoveToStorage",
    7: "SkinAdd",
    8: "SkinDelete",
    9: "TalentAdd",
    10: "TalentDelete",
    11: "TalentEdit",
    12: "Kick",
    13: "FlagLock",
    14: "FlagUnlock",
    15: "GuildEdit",
    16: "GuildLock",
    17: "GuildUnlock",
    18: "GuildStopSiege",
    19: "GuildSuzerainChange",
    20: "SeasonAwardsAdd",
    21: "SeasonAwardsChange",
    22: "SeasonInfoAdd",
    23: "SeasonInfoChange",
    24: "TalentUpgradeEntityDelete",
  }

  _NAMES_TO_VALUES = {
    "QuestAdd": 0,
    "QuestAccept": 1,
    "QuestComplete": 2,
    "QuestDelete": 3,
    "BuildingAdd": 4,
    "BuildingDelete": 5,
    "BuildingMoveToStorage": 6,
    "SkinAdd": 7,
    "SkinDelete": 8,
    "TalentAdd": 9,
    "TalentDelete": 10,
    "TalentEdit": 11,
    "Kick": 12,
    "FlagLock": 13,
    "FlagUnlock": 14,
    "GuildEdit": 15,
    "GuildLock": 16,
    "GuildUnlock": 17,
    "GuildStopSiege": 18,
    "GuildSuzerainChange": 19,
    "SeasonAwardsAdd": 20,
    "SeasonAwardsChange": 21,
    "SeasonInfoAdd": 22,
    "SeasonInfoChange": 23,
    "TalentUpgradeEntityDelete": 24,
  }

class GMUserOperationType(object):
  Ban = 0
  Mute = 1
  Unban = 2
  Unmute = 3
  Forgive = 4
  SetLeave = 5
  ModeratorMute = 6

  _VALUES_TO_NAMES = {
    0: "Ban",
    1: "Mute",
    2: "Unban",
    3: "Unmute",
    4: "Forgive",
    5: "SetLeave",
    6: "ModeratorMute",
  }

  _NAMES_TO_VALUES = {
    "Ban": 0,
    "Mute": 1,
    "Unban": 2,
    "Unmute": 3,
    "Forgive": 4,
    "SetLeave": 5,
    "ModeratorMute": 6,
  }

class RatingType(object):
  LordRating = 0
  HeroRating = 1
  GuardRating = 2

  _VALUES_TO_NAMES = {
    0: "LordRating",
    1: "HeroRating",
    2: "GuardRating",
  }

  _NAMES_TO_VALUES = {
    "LordRating": 0,
    "HeroRating": 1,
    "GuardRating": 2,
  }

class LauncherStatus(object):
  Complete = 0
  Stopped = 1
  DownloadFailure = 2
  NotApplied = 3

  _VALUES_TO_NAMES = {
    0: "Complete",
    1: "Stopped",
    2: "DownloadFailure",
    3: "NotApplied",
  }

  _NAMES_TO_VALUES = {
    "Complete": 0,
    "Stopped": 1,
    "DownloadFailure": 2,
    "NotApplied": 3,
  }

class RuneRollSource(object):
  GMTool = 0
  DumpTool = 1
  GMToolUpgHeroTal = 2
  DumpToolUpgHeroTal = 3
  Quest = 4
  DynamicQuest = 5
  DynamicQuestUpgHeroTal = 6
  CustomEvent = 7
  SessionDrop = 8
  NivalGift = 9
  ReRollShop = 10

  _VALUES_TO_NAMES = {
    0: "GMTool",
    1: "DumpTool",
    2: "GMToolUpgHeroTal",
    3: "DumpToolUpgHeroTal",
    4: "Quest",
    5: "DynamicQuest",
    6: "DynamicQuestUpgHeroTal",
    7: "CustomEvent",
    8: "SessionDrop",
    9: "NivalGift",
    10: "ReRollShop",
  }

  _NAMES_TO_VALUES = {
    "GMTool": 0,
    "DumpTool": 1,
    "GMToolUpgHeroTal": 2,
    "DumpToolUpgHeroTal": 3,
    "Quest": 4,
    "DynamicQuest": 5,
    "DynamicQuestUpgHeroTal": 6,
    "CustomEvent": 7,
    "SessionDrop": 8,
    "NivalGift": 9,
    "ReRollShop": 10,
  }

class TalentChangeOperation(object):
  GetFromTransmutation = 0
  GetFromQuest = 1
  GetFromTavern = 2
  GetForLevelUp = 3
  Soulbound = 4
  Unsoulbound = 5
  UseForRefining = 6
  Sell = 7
  GetFromSocial = 8
  GetFromDLC = 9
  GetFromEvent = 10
  Refining = 11
  TakeFromBank = 12
  PutToBank = 13
  ReturnToBank = 14
  TakeBackFromBank = 15
  ReturnToBankOnLeave = 16
  ReturnToUserOnLeave = 17
  RerollShopBuy = 18
  UpgradeByEntity = 19
  EntityUsedForUpgrade = 20
  GetEntityFromLootbox = 21

  _VALUES_TO_NAMES = {
    0: "GetFromTransmutation",
    1: "GetFromQuest",
    2: "GetFromTavern",
    3: "GetForLevelUp",
    4: "Soulbound",
    5: "Unsoulbound",
    6: "UseForRefining",
    7: "Sell",
    8: "GetFromSocial",
    9: "GetFromDLC",
    10: "GetFromEvent",
    11: "Refining",
    12: "TakeFromBank",
    13: "PutToBank",
    14: "ReturnToBank",
    15: "TakeBackFromBank",
    16: "ReturnToBankOnLeave",
    17: "ReturnToUserOnLeave",
    18: "RerollShopBuy",
    19: "UpgradeByEntity",
    20: "EntityUsedForUpgrade",
    21: "GetEntityFromLootbox",
  }

  _NAMES_TO_VALUES = {
    "GetFromTransmutation": 0,
    "GetFromQuest": 1,
    "GetFromTavern": 2,
    "GetForLevelUp": 3,
    "Soulbound": 4,
    "Unsoulbound": 5,
    "UseForRefining": 6,
    "Sell": 7,
    "GetFromSocial": 8,
    "GetFromDLC": 9,
    "GetFromEvent": 10,
    "Refining": 11,
    "TakeFromBank": 12,
    "PutToBank": 13,
    "ReturnToBank": 14,
    "TakeBackFromBank": 15,
    "ReturnToBankOnLeave": 16,
    "ReturnToUserOnLeave": 17,
    "RerollShopBuy": 18,
    "UpgradeByEntity": 19,
    "EntityUsedForUpgrade": 20,
    "GetEntityFromLootbox": 21,
  }

class GuildInteractionType(object):
  Capture = 0
  Decline = 1
  Revolt = 2
  Apply = 3

  _VALUES_TO_NAMES = {
    0: "Capture",
    1: "Decline",
    2: "Revolt",
    3: "Apply",
  }

  _NAMES_TO_VALUES = {
    "Capture": 0,
    "Decline": 1,
    "Revolt": 2,
    "Apply": 3,
  }

class ERerollShopResources(object):
  Resource1 = 0
  Resource2 = 1
  Resource3 = 2
  Perl = 3
  RedPerl = 4
  Silver = 5
  Gold = 6
  Shard = 7

  _VALUES_TO_NAMES = {
    0: "Resource1",
    1: "Resource2",
    2: "Resource3",
    3: "Perl",
    4: "RedPerl",
    5: "Silver",
    6: "Gold",
    7: "Shard",
  }

  _NAMES_TO_VALUES = {
    "Resource1": 0,
    "Resource2": 1,
    "Resource3": 2,
    "Perl": 3,
    "RedPerl": 4,
    "Silver": 5,
    "Gold": 6,
    "Shard": 7,
  }

class TournamentQuestResult(object):
  Loss = 0
  Win = 1

  _VALUES_TO_NAMES = {
    0: "Loss",
    1: "Win",
  }

  _NAMES_TO_VALUES = {
    "Loss": 0,
    "Win": 1,
  }


class LoginInfo(object):
  """
  Attributes:
   - auid
   - nick
   - server
   - cluster
   - timestamp
   - ip
   - faction
   - factionselected
   - isdeveloper
   - locale
   - guildid
   - guildshortname
   - guildfullname
   - leaverpoints
   - isleaver
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'nick', None, None, ), # 2
    (3, TType.STRING, 'server', None, None, ), # 3
    (4, TType.STRING, 'cluster', None, None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
    (6, TType.STRING, 'ip', None, None, ), # 6
    (7, TType.STRING, 'faction', None, None, ), # 7
    (8, TType.BOOL, 'factionselected', None, None, ), # 8
    (9, TType.BOOL, 'isdeveloper', None, None, ), # 9
    (10, TType.STRING, 'locale', None, None, ), # 10
    (11, TType.I64, 'guildid', None, None, ), # 11
    (12, TType.STRING, 'guildshortname', None, None, ), # 12
    (13, TType.STRING, 'guildfullname', None, None, ), # 13
    (14, TType.I32, 'leaverpoints', None, None, ), # 14
    (15, TType.BOOL, 'isleaver', None, None, ), # 15
  )

  def __init__(self, auid=None, nick=None, server=None, cluster=None, timestamp=None, ip=None, faction=None, factionselected=None, isdeveloper=None, locale=None, guildid=None, guildshortname=None, guildfullname=None, leaverpoints=None, isleaver=None,):
    self.auid = auid
    self.nick = nick
    self.server = server
    self.cluster = cluster
    self.timestamp = timestamp
    self.ip = ip
    self.faction = faction
    self.factionselected = factionselected
    self.isdeveloper = isdeveloper
    self.locale = locale
    self.guildid = guildid
    self.guildshortname = guildshortname
    self.guildfullname = guildfullname
    self.leaverpoints = leaverpoints
    self.isleaver = isleaver

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nick = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.server = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.faction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.factionselected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.isdeveloper = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.guildshortname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.guildfullname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.leaverpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.isleaver = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.nick is not None:
      oprot.writeFieldBegin('nick', TType.STRING, 2)
      oprot.writeString(self.nick)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 3)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    if self.cluster is not None:
      oprot.writeFieldBegin('cluster', TType.STRING, 4)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 6)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.faction is not None:
      oprot.writeFieldBegin('faction', TType.STRING, 7)
      oprot.writeString(self.faction)
      oprot.writeFieldEnd()
    if self.factionselected is not None:
      oprot.writeFieldBegin('factionselected', TType.BOOL, 8)
      oprot.writeBool(self.factionselected)
      oprot.writeFieldEnd()
    if self.isdeveloper is not None:
      oprot.writeFieldBegin('isdeveloper', TType.BOOL, 9)
      oprot.writeBool(self.isdeveloper)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 10)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 11)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildshortname is not None:
      oprot.writeFieldBegin('guildshortname', TType.STRING, 12)
      oprot.writeString(self.guildshortname)
      oprot.writeFieldEnd()
    if self.guildfullname is not None:
      oprot.writeFieldBegin('guildfullname', TType.STRING, 13)
      oprot.writeString(self.guildfullname)
      oprot.writeFieldEnd()
    if self.leaverpoints is not None:
      oprot.writeFieldBegin('leaverpoints', TType.I32, 14)
      oprot.writeI32(self.leaverpoints)
      oprot.writeFieldEnd()
    if self.isleaver is not None:
      oprot.writeFieldBegin('isleaver', TType.BOOL, 15)
      oprot.writeBool(self.isleaver)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentInfo(object):
  """
  Attributes:
   - classId
   - instanceId
   - boundHeroClassId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'classId', None, None, ), # 1
    (2, TType.I64, 'instanceId', None, None, ), # 2
    (3, TType.I32, 'boundHeroClassId', None, None, ), # 3
  )

  def __init__(self, classId=None, instanceId=None, boundHeroClassId=None,):
    self.classId = classId
    self.instanceId = instanceId
    self.boundHeroClassId = boundHeroClassId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.classId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.instanceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.boundHeroClassId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentInfo')
    if self.classId is not None:
      oprot.writeFieldBegin('classId', TType.I32, 1)
      oprot.writeI32(self.classId)
      oprot.writeFieldEnd()
    if self.instanceId is not None:
      oprot.writeFieldBegin('instanceId', TType.I64, 2)
      oprot.writeI64(self.instanceId)
      oprot.writeFieldEnd()
    if self.boundHeroClassId is not None:
      oprot.writeFieldBegin('boundHeroClassId', TType.I32, 3)
      oprot.writeI32(self.boundHeroClassId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveTalentInfo(object):
  """
  Attributes:
   - auid
   - nick
   - talentid
   - heroid
   - slot
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'nick', None, None, ), # 2
    (3, TType.I32, 'talentid', None, None, ), # 3
    (4, TType.I32, 'heroid', None, None, ), # 4
    (5, TType.BYTE, 'slot', None, None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
  )

  def __init__(self, auid=None, nick=None, talentid=None, heroid=None, slot=None, timestamp=None,):
    self.auid = auid
    self.nick = nick
    self.talentid = talentid
    self.heroid = heroid
    self.slot = slot
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nick = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.talentid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.slot = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveTalentInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.nick is not None:
      oprot.writeFieldBegin('nick', TType.STRING, 2)
      oprot.writeString(self.nick)
      oprot.writeFieldEnd()
    if self.talentid is not None:
      oprot.writeFieldBegin('talentid', TType.I32, 3)
      oprot.writeI32(self.talentid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 4)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.slot is not None:
      oprot.writeFieldBegin('slot', TType.BYTE, 5)
      oprot.writeByte(self.slot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourceTable(object):
  """
  Attributes:
   - Gold
   - Silver
   - Perl
   - RedPerl
   - Population
   - Resource1
   - Resource2
   - Resource3
   - CWPoints_Player
   - Shard
   - Currencies
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Gold', None, None, ), # 1
    (2, TType.I32, 'Silver', None, None, ), # 2
    (3, TType.I32, 'Perl', None, None, ), # 3
    (4, TType.I32, 'RedPerl', None, None, ), # 4
    (5, TType.I32, 'Population', None, None, ), # 5
    (6, TType.I32, 'Resource1', None, None, ), # 6
    (7, TType.I32, 'Resource2', None, None, ), # 7
    (8, TType.I32, 'Resource3', None, None, ), # 8
    (9, TType.I32, 'CWPoints_Player', None, None, ), # 9
    (10, TType.I32, 'Shard', None, None, ), # 10
    (11, TType.MAP, 'Currencies', (TType.STRING,None,TType.I32,None), None, ), # 11
  )

  def __init__(self, Gold=None, Silver=None, Perl=None, RedPerl=None, Population=None, Resource1=None, Resource2=None, Resource3=None, CWPoints_Player=None, Shard=None, Currencies=None,):
    self.Gold = Gold
    self.Silver = Silver
    self.Perl = Perl
    self.RedPerl = RedPerl
    self.Population = Population
    self.Resource1 = Resource1
    self.Resource2 = Resource2
    self.Resource3 = Resource3
    self.CWPoints_Player = CWPoints_Player
    self.Shard = Shard
    self.Currencies = Currencies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Gold = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Silver = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Perl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.RedPerl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.Population = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.Resource1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.Resource2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.Resource3 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.CWPoints_Player = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.Shard = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.MAP:
          self.Currencies = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readI32();
            self.Currencies[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourceTable')
    if self.Gold is not None:
      oprot.writeFieldBegin('Gold', TType.I32, 1)
      oprot.writeI32(self.Gold)
      oprot.writeFieldEnd()
    if self.Silver is not None:
      oprot.writeFieldBegin('Silver', TType.I32, 2)
      oprot.writeI32(self.Silver)
      oprot.writeFieldEnd()
    if self.Perl is not None:
      oprot.writeFieldBegin('Perl', TType.I32, 3)
      oprot.writeI32(self.Perl)
      oprot.writeFieldEnd()
    if self.RedPerl is not None:
      oprot.writeFieldBegin('RedPerl', TType.I32, 4)
      oprot.writeI32(self.RedPerl)
      oprot.writeFieldEnd()
    if self.Population is not None:
      oprot.writeFieldBegin('Population', TType.I32, 5)
      oprot.writeI32(self.Population)
      oprot.writeFieldEnd()
    if self.Resource1 is not None:
      oprot.writeFieldBegin('Resource1', TType.I32, 6)
      oprot.writeI32(self.Resource1)
      oprot.writeFieldEnd()
    if self.Resource2 is not None:
      oprot.writeFieldBegin('Resource2', TType.I32, 7)
      oprot.writeI32(self.Resource2)
      oprot.writeFieldEnd()
    if self.Resource3 is not None:
      oprot.writeFieldBegin('Resource3', TType.I32, 8)
      oprot.writeI32(self.Resource3)
      oprot.writeFieldEnd()
    if self.CWPoints_Player is not None:
      oprot.writeFieldBegin('CWPoints_Player', TType.I32, 9)
      oprot.writeI32(self.CWPoints_Player)
      oprot.writeFieldEnd()
    if self.Shard is not None:
      oprot.writeFieldBegin('Shard', TType.I32, 10)
      oprot.writeI32(self.Shard)
      oprot.writeFieldEnd()
    if self.Currencies is not None:
      oprot.writeFieldBegin('Currencies', TType.MAP, 11)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.Currencies))
      for kiter7,viter8 in self.Currencies.items():
        oprot.writeString(kiter7)
        oprot.writeI32(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourcesChangeInfo(object):
  """
  Attributes:
   - auid
   - gain
   - source
   - buildingname
   - rchange
   - rtotal
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.BOOL, 'gain', None, None, ), # 2
    (3, TType.I32, 'source', None, None, ), # 3
    (4, TType.STRING, 'buildingname', None, None, ), # 4
    (5, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 6
    (7, TType.I32, 'timestamp', None, None, ), # 7
  )

  def __init__(self, auid=None, gain=None, source=None, buildingname=None, rchange=None, rtotal=None, timestamp=None,):
    self.auid = auid
    self.gain = gain
    self.source = source
    self.buildingname = buildingname
    self.rchange = rchange
    self.rtotal = rtotal
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.gain = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.source = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.buildingname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourcesChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.gain is not None:
      oprot.writeFieldBegin('gain', TType.BOOL, 2)
      oprot.writeBool(self.gain)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 3)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.buildingname is not None:
      oprot.writeFieldBegin('buildingname', TType.STRING, 4)
      oprot.writeString(self.buildingname)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 5)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 6)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 7)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestChangeInfo(object):
  """
  Attributes:
   - auid
   - questid
   - reason
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'questid', None, None, ), # 2
    (3, TType.I32, 'reason', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, questid=None, reason=None, timestamp=None,):
    self.auid = auid
    self.questid = questid
    self.reason = reason
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.questid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.reason = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.questid is not None:
      oprot.writeFieldBegin('questid', TType.I32, 2)
      oprot.writeI32(self.questid)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.I32, 3)
      oprot.writeI32(self.reason)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DynamicQuestChangeInfo(object):
  """
  Attributes:
   - auid
   - questindex
   - questname
   - reason
   - timestamp
   - alternativeline
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'questindex', None, None, ), # 2
    (3, TType.STRING, 'questname', None, None, ), # 3
    (4, TType.I32, 'reason', None, None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
    (6, TType.BOOL, 'alternativeline', None, None, ), # 6
  )

  def __init__(self, auid=None, questindex=None, questname=None, reason=None, timestamp=None, alternativeline=None,):
    self.auid = auid
    self.questindex = questindex
    self.questname = questname
    self.reason = reason
    self.timestamp = timestamp
    self.alternativeline = alternativeline

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.questindex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.questname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.reason = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.alternativeline = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DynamicQuestChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.questindex is not None:
      oprot.writeFieldBegin('questindex', TType.I32, 2)
      oprot.writeI32(self.questindex)
      oprot.writeFieldEnd()
    if self.questname is not None:
      oprot.writeFieldBegin('questname', TType.STRING, 3)
      oprot.writeString(self.questname)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.I32, 4)
      oprot.writeI32(self.reason)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.alternativeline is not None:
      oprot.writeFieldBegin('alternativeline', TType.BOOL, 6)
      oprot.writeBool(self.alternativeline)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TutorialStateChangeInfo(object):
  """
  Attributes:
   - auid
   - tutorialstate
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'tutorialstate', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
  )

  def __init__(self, auid=None, tutorialstate=None, timestamp=None,):
    self.auid = auid
    self.tutorialstate = tutorialstate
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tutorialstate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TutorialStateChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.tutorialstate is not None:
      oprot.writeFieldBegin('tutorialstate', TType.STRING, 2)
      oprot.writeString(self.tutorialstate)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FactionSelectInfo(object):
  """
  Attributes:
   - auid
   - oldfaction
   - newfaction
   - rchange
   - rtotal
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'oldfaction', None, None, ), # 2
    (3, TType.STRING, 'newfaction', None, None, ), # 3
    (4, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
  )

  def __init__(self, auid=None, oldfaction=None, newfaction=None, rchange=None, rtotal=None, timestamp=None,):
    self.auid = auid
    self.oldfaction = oldfaction
    self.newfaction = newfaction
    self.rchange = rchange
    self.rtotal = rtotal
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oldfaction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newfaction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FactionSelectInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.oldfaction is not None:
      oprot.writeFieldBegin('oldfaction', TType.STRING, 2)
      oprot.writeString(self.oldfaction)
      oprot.writeFieldEnd()
    if self.newfaction is not None:
      oprot.writeFieldBegin('newfaction', TType.STRING, 3)
      oprot.writeString(self.newfaction)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 4)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 5)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnlockHeroInfo(object):
  """
  Attributes:
   - auid
   - heroid
   - rchange
   - rtotal
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'heroid', None, None, ), # 2
    (3, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
  )

  def __init__(self, auid=None, heroid=None, rchange=None, rtotal=None, timestamp=None,):
    self.auid = auid
    self.heroid = heroid
    self.rchange = rchange
    self.rtotal = rtotal
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnlockHeroInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 2)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 3)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 4)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveToBathInfo(object):
  """
  Attributes:
   - auid
   - heroid
   - minutes
   - rchange
   - rtotal
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'heroid', None, None, ), # 2
    (3, TType.I32, 'minutes', None, None, ), # 3
    (4, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
  )

  def __init__(self, auid=None, heroid=None, minutes=None, rchange=None, rtotal=None, timestamp=None,):
    self.auid = auid
    self.heroid = heroid
    self.minutes = minutes
    self.rchange = rchange
    self.rtotal = rtotal
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.minutes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveToBathInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 2)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.minutes is not None:
      oprot.writeFieldBegin('minutes', TType.I32, 3)
      oprot.writeI32(self.minutes)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 4)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 5)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JoinSessionInfo(object):
  """
  Attributes:
   - auid
   - sessionpersistentid
   - heroid
   - talentset
   - guildbuffs
   - guildwareventpass
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I64, 'sessionpersistentid', None, None, ), # 2
    (3, TType.I32, 'heroid', None, None, ), # 3
    (4, TType.LIST, 'talentset', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'guildbuffs', (TType.I32,None), None, ), # 5
    (6, TType.I32, 'guildwareventpass', None, None, ), # 6
    (7, TType.I32, 'timestamp', None, None, ), # 7
  )

  def __init__(self, auid=None, sessionpersistentid=None, heroid=None, talentset=None, guildbuffs=None, guildwareventpass=None, timestamp=None,):
    self.auid = auid
    self.sessionpersistentid = sessionpersistentid
    self.heroid = heroid
    self.talentset = talentset
    self.guildbuffs = guildbuffs
    self.guildwareventpass = guildwareventpass
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sessionpersistentid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.talentset = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = iprot.readI32();
            self.talentset.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.guildbuffs = []
          (_etype18, _size15) = iprot.readListBegin()
          for _i19 in xrange(_size15):
            _elem20 = iprot.readI32();
            self.guildbuffs.append(_elem20)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.guildwareventpass = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JoinSessionInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.sessionpersistentid is not None:
      oprot.writeFieldBegin('sessionpersistentid', TType.I64, 2)
      oprot.writeI64(self.sessionpersistentid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 3)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.talentset is not None:
      oprot.writeFieldBegin('talentset', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.talentset))
      for iter21 in self.talentset:
        oprot.writeI32(iter21)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.guildbuffs is not None:
      oprot.writeFieldBegin('guildbuffs', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.guildbuffs))
      for iter22 in self.guildbuffs:
        oprot.writeI32(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.guildwareventpass is not None:
      oprot.writeFieldBegin('guildwareventpass', TType.I32, 6)
      oprot.writeI32(self.guildwareventpass)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 7)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatMessageInfo(object):
  """
  Attributes:
   - auid
   - timestamp
   - channel
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'timestamp', None, None, ), # 2
    (3, TType.STRING, 'channel', None, None, ), # 3
    (4, TType.STRING, 'message', None, None, ), # 4
  )

  def __init__(self, auid=None, timestamp=None, channel=None, message=None,):
    self.auid = auid
    self.timestamp = timestamp
    self.channel = channel
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.channel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatMessageInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.STRING, 3)
      oprot.writeString(self.channel)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 4)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FieldEditInfo(object):
  """
  Attributes:
   - field
   - oldvalue
   - newvalue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'field', None, None, ), # 1
    (2, TType.STRING, 'oldvalue', None, None, ), # 2
    (3, TType.STRING, 'newvalue', None, None, ), # 3
  )

  def __init__(self, field=None, oldvalue=None, newvalue=None,):
    self.field = field
    self.oldvalue = oldvalue
    self.newvalue = newvalue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.field = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oldvalue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newvalue = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FieldEditInfo')
    if self.field is not None:
      oprot.writeFieldBegin('field', TType.STRING, 1)
      oprot.writeString(self.field)
      oprot.writeFieldEnd()
    if self.oldvalue is not None:
      oprot.writeFieldBegin('oldvalue', TType.STRING, 2)
      oprot.writeString(self.oldvalue)
      oprot.writeFieldEnd()
    if self.newvalue is not None:
      oprot.writeFieldBegin('newvalue', TType.STRING, 3)
      oprot.writeString(self.newvalue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MonitoringResultInfo(object):
  """
  Attributes:
   - property
   - counter
   - value
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'property', None, None, ), # 1
    (2, TType.STRING, 'counter', None, None, ), # 2
    (3, TType.I32, 'value', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, property=None, counter=None, value=None, timestamp=None,):
    self.property = property
    self.counter = counter
    self.value = value
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.property = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.counter = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MonitoringResultInfo')
    if self.property is not None:
      oprot.writeFieldBegin('property', TType.STRING, 1)
      oprot.writeString(self.property)
      oprot.writeFieldEnd()
    if self.counter is not None:
      oprot.writeFieldBegin('counter', TType.STRING, 2)
      oprot.writeString(self.counter)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMHeroActionInfo(object):
  """
  Attributes:
   - auid
   - gmlogin
   - heroid
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'gmlogin', None, None, ), # 2
    (3, TType.I32, 'heroid', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, gmlogin=None, heroid=None, timestamp=None,):
    self.auid = auid
    self.gmlogin = gmlogin
    self.heroid = heroid
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.gmlogin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMHeroActionInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.gmlogin is not None:
      oprot.writeFieldBegin('gmlogin', TType.STRING, 2)
      oprot.writeString(self.gmlogin)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 3)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMEditFieldInfo(object):
  """
  Attributes:
   - auid
   - gmlogin
   - timestamp
   - field
   - oldvalue
   - newvalue
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'gmlogin', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
    (4, TType.STRING, 'field', None, None, ), # 4
    (5, TType.STRING, 'oldvalue', None, None, ), # 5
    (6, TType.STRING, 'newvalue', None, None, ), # 6
  )

  def __init__(self, auid=None, gmlogin=None, timestamp=None, field=None, oldvalue=None, newvalue=None,):
    self.auid = auid
    self.gmlogin = gmlogin
    self.timestamp = timestamp
    self.field = field
    self.oldvalue = oldvalue
    self.newvalue = newvalue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.gmlogin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.field = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.oldvalue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.newvalue = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMEditFieldInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.gmlogin is not None:
      oprot.writeFieldBegin('gmlogin', TType.STRING, 2)
      oprot.writeString(self.gmlogin)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.field is not None:
      oprot.writeFieldBegin('field', TType.STRING, 4)
      oprot.writeString(self.field)
      oprot.writeFieldEnd()
    if self.oldvalue is not None:
      oprot.writeFieldBegin('oldvalue', TType.STRING, 5)
      oprot.writeString(self.oldvalue)
      oprot.writeFieldEnd()
    if self.newvalue is not None:
      oprot.writeFieldBegin('newvalue', TType.STRING, 6)
      oprot.writeString(self.newvalue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMOperationInfo(object):
  """
  Attributes:
   - auid
   - operation
   - gmlogin
   - timestamp
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'operation', None, None, ), # 2
    (3, TType.STRING, 'gmlogin', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
    (5, TType.STRING, 'data', None, None, ), # 5
  )

  def __init__(self, auid=None, operation=None, gmlogin=None, timestamp=None, data=None,):
    self.auid = auid
    self.operation = operation
    self.gmlogin = gmlogin
    self.timestamp = timestamp
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.operation = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.gmlogin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMOperationInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.operation is not None:
      oprot.writeFieldBegin('operation', TType.I32, 2)
      oprot.writeI32(self.operation)
      oprot.writeFieldEnd()
    if self.gmlogin is not None:
      oprot.writeFieldBegin('gmlogin', TType.STRING, 3)
      oprot.writeString(self.gmlogin)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 5)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GMUserOperationInfo(object):
  """
  Attributes:
   - auid
   - type
   - minutes
   - reason
   - gmlogin
   - timestamp
   - claimIds
   - points
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'minutes', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.STRING, 'gmlogin', None, None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
    (7, TType.LIST, 'claimIds', (TType.I32,None), None, ), # 7
    (8, TType.I32, 'points', None, None, ), # 8
  )

  def __init__(self, auid=None, type=None, minutes=None, reason=None, gmlogin=None, timestamp=None, claimIds=None, points=None,):
    self.auid = auid
    self.type = type
    self.minutes = minutes
    self.reason = reason
    self.gmlogin = gmlogin
    self.timestamp = timestamp
    self.claimIds = claimIds
    self.points = points

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.minutes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.gmlogin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.claimIds = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readI32();
            self.claimIds.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.points = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GMUserOperationInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.minutes is not None:
      oprot.writeFieldBegin('minutes', TType.I32, 3)
      oprot.writeI32(self.minutes)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.gmlogin is not None:
      oprot.writeFieldBegin('gmlogin', TType.STRING, 5)
      oprot.writeString(self.gmlogin)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.claimIds is not None:
      oprot.writeFieldBegin('claimIds', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.claimIds))
      for iter29 in self.claimIds:
        oprot.writeI32(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.points is not None:
      oprot.writeFieldBegin('points', TType.I32, 8)
      oprot.writeI32(self.points)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClaimInfo(object):
  """
  Attributes:
   - fromAuid
   - toAuid
   - source
   - category
   - comment
   - log
   - timestamp
   - sessionpersistentid
   - kills
   - deaths
   - assists
   - points
   - prime
   - distance
   - afks
   - connstatus
   - locale
   - muid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'fromAuid', None, None, ), # 1
    (2, TType.I64, 'toAuid', None, None, ), # 2
    (3, TType.I32, 'source', None, None, ), # 3
    (4, TType.I32, 'category', None, None, ), # 4
    (5, TType.STRING, 'comment', None, None, ), # 5
    (6, TType.STRING, 'log', None, None, ), # 6
    (7, TType.I32, 'timestamp', None, None, ), # 7
    (8, TType.I64, 'sessionpersistentid', None, None, ), # 8
    (9, TType.I32, 'kills', None, None, ), # 9
    (10, TType.I32, 'deaths', None, None, ), # 10
    (11, TType.I32, 'assists', None, None, ), # 11
    (12, TType.I32, 'points', None, None, ), # 12
    (13, TType.I32, 'prime', None, None, ), # 13
    (14, TType.I32, 'distance', None, None, ), # 14
    (15, TType.I32, 'afks', None, None, ), # 15
    (16, TType.I32, 'connstatus', None, None, ), # 16
    (17, TType.STRING, 'locale', None, None, ), # 17
    (18, TType.STRING, 'muid', None, None, ), # 18
  )

  def __init__(self, fromAuid=None, toAuid=None, source=None, category=None, comment=None, log=None, timestamp=None, sessionpersistentid=None, kills=None, deaths=None, assists=None, points=None, prime=None, distance=None, afks=None, connstatus=None, locale=None, muid=None,):
    self.fromAuid = fromAuid
    self.toAuid = toAuid
    self.source = source
    self.category = category
    self.comment = comment
    self.log = log
    self.timestamp = timestamp
    self.sessionpersistentid = sessionpersistentid
    self.kills = kills
    self.deaths = deaths
    self.assists = assists
    self.points = points
    self.prime = prime
    self.distance = distance
    self.afks = afks
    self.connstatus = connstatus
    self.locale = locale
    self.muid = muid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.fromAuid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.toAuid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.source = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.log = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.sessionpersistentid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.kills = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.deaths = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.assists = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.points = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.prime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.distance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.afks = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.connstatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.muid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClaimInfo')
    if self.fromAuid is not None:
      oprot.writeFieldBegin('fromAuid', TType.I64, 1)
      oprot.writeI64(self.fromAuid)
      oprot.writeFieldEnd()
    if self.toAuid is not None:
      oprot.writeFieldBegin('toAuid', TType.I64, 2)
      oprot.writeI64(self.toAuid)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 3)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 4)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 5)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.log is not None:
      oprot.writeFieldBegin('log', TType.STRING, 6)
      oprot.writeString(self.log)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 7)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.sessionpersistentid is not None:
      oprot.writeFieldBegin('sessionpersistentid', TType.I64, 8)
      oprot.writeI64(self.sessionpersistentid)
      oprot.writeFieldEnd()
    if self.kills is not None:
      oprot.writeFieldBegin('kills', TType.I32, 9)
      oprot.writeI32(self.kills)
      oprot.writeFieldEnd()
    if self.deaths is not None:
      oprot.writeFieldBegin('deaths', TType.I32, 10)
      oprot.writeI32(self.deaths)
      oprot.writeFieldEnd()
    if self.assists is not None:
      oprot.writeFieldBegin('assists', TType.I32, 11)
      oprot.writeI32(self.assists)
      oprot.writeFieldEnd()
    if self.points is not None:
      oprot.writeFieldBegin('points', TType.I32, 12)
      oprot.writeI32(self.points)
      oprot.writeFieldEnd()
    if self.prime is not None:
      oprot.writeFieldBegin('prime', TType.I32, 13)
      oprot.writeI32(self.prime)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.I32, 14)
      oprot.writeI32(self.distance)
      oprot.writeFieldEnd()
    if self.afks is not None:
      oprot.writeFieldBegin('afks', TType.I32, 15)
      oprot.writeI32(self.afks)
      oprot.writeFieldEnd()
    if self.connstatus is not None:
      oprot.writeFieldBegin('connstatus', TType.I32, 16)
      oprot.writeI32(self.connstatus)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 17)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.muid is not None:
      oprot.writeFieldBegin('muid', TType.STRING, 18)
      oprot.writeString(self.muid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddIgnoreInfo(object):
  """
  Attributes:
   - auid
   - ignoreauid
   - reason
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I64, 'ignoreauid', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, ignoreauid=None, reason=None, timestamp=None,):
    self.auid = auid
    self.ignoreauid = ignoreauid
    self.reason = reason
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ignoreauid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddIgnoreInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.ignoreauid is not None:
      oprot.writeFieldBegin('ignoreauid', TType.I64, 2)
      oprot.writeI64(self.ignoreauid)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveIgnoreInfo(object):
  """
  Attributes:
   - auid
   - ignoreauid
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I64, 'ignoreauid', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
  )

  def __init__(self, auid=None, ignoreauid=None, timestamp=None,):
    self.auid = auid
    self.ignoreauid = ignoreauid
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ignoreauid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveIgnoreInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.ignoreauid is not None:
      oprot.writeFieldBegin('ignoreauid', TType.I64, 2)
      oprot.writeI64(self.ignoreauid)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LeaverPointsChangeInfo(object):
  """
  Attributes:
   - auid
   - type
   - leaverpointschange
   - leaverpointstotal
   - isleaverchanged
   - isleaver
   - isbadbehaviour
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.I32, 'leaverpointschange', None, None, ), # 3
    (4, TType.I32, 'leaverpointstotal', None, None, ), # 4
    (5, TType.BOOL, 'isleaverchanged', None, None, ), # 5
    (6, TType.BOOL, 'isleaver', None, None, ), # 6
    (7, TType.BOOL, 'isbadbehaviour', None, None, ), # 7
    (8, TType.I32, 'timestamp', None, None, ), # 8
  )

  def __init__(self, auid=None, type=None, leaverpointschange=None, leaverpointstotal=None, isleaverchanged=None, isleaver=None, isbadbehaviour=None, timestamp=None,):
    self.auid = auid
    self.type = type
    self.leaverpointschange = leaverpointschange
    self.leaverpointstotal = leaverpointstotal
    self.isleaverchanged = isleaverchanged
    self.isleaver = isleaver
    self.isbadbehaviour = isbadbehaviour
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.leaverpointschange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.leaverpointstotal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isleaverchanged = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.isleaver = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.isbadbehaviour = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LeaverPointsChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.leaverpointschange is not None:
      oprot.writeFieldBegin('leaverpointschange', TType.I32, 3)
      oprot.writeI32(self.leaverpointschange)
      oprot.writeFieldEnd()
    if self.leaverpointstotal is not None:
      oprot.writeFieldBegin('leaverpointstotal', TType.I32, 4)
      oprot.writeI32(self.leaverpointstotal)
      oprot.writeFieldEnd()
    if self.isleaverchanged is not None:
      oprot.writeFieldBegin('isleaverchanged', TType.BOOL, 5)
      oprot.writeBool(self.isleaverchanged)
      oprot.writeFieldEnd()
    if self.isleaver is not None:
      oprot.writeFieldBegin('isleaver', TType.BOOL, 6)
      oprot.writeBool(self.isleaver)
      oprot.writeFieldEnd()
    if self.isbadbehaviour is not None:
      oprot.writeFieldBegin('isbadbehaviour', TType.BOOL, 7)
      oprot.writeBool(self.isbadbehaviour)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 8)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SessionAwardsInfo(object):
  """
  Attributes:
   - auid
   - sessionpersistentid
   - nick
   - heroid
   - rchange
   - rtotal
   - inc_reliability
   - new_reliability
   - timestamp
   - talents
   - force
   - guildpointschange
   - guildpointstotal
   - appliedbuffs
   - leaverpointschange
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I64, 'sessionpersistentid', None, None, ), # 2
    (3, TType.STRING, 'nick', None, None, ), # 3
    (4, TType.I32, 'heroid', None, None, ), # 4
    (5, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 6
    (7, TType.I32, 'inc_reliability', None, None, ), # 7
    (8, TType.I32, 'new_reliability', None, None, ), # 8
    (9, TType.I32, 'timestamp', None, None, ), # 9
    (10, TType.LIST, 'talents', (TType.STRUCT,(TalentInfo, TalentInfo.thrift_spec)), None, ), # 10
    (11, TType.DOUBLE, 'force', None, None, ), # 11
    (12, TType.I32, 'guildpointschange', None, None, ), # 12
    (13, TType.I32, 'guildpointstotal', None, None, ), # 13
    (14, TType.LIST, 'appliedbuffs', (TType.I32,None), None, ), # 14
    (15, TType.STRUCT, 'leaverpointschange', (LeaverPointsChangeInfo, LeaverPointsChangeInfo.thrift_spec), None, ), # 15
  )

  def __init__(self, auid=None, sessionpersistentid=None, nick=None, heroid=None, rchange=None, rtotal=None, inc_reliability=None, new_reliability=None, timestamp=None, talents=None, force=None, guildpointschange=None, guildpointstotal=None, appliedbuffs=None, leaverpointschange=None,):
    self.auid = auid
    self.sessionpersistentid = sessionpersistentid
    self.nick = nick
    self.heroid = heroid
    self.rchange = rchange
    self.rtotal = rtotal
    self.inc_reliability = inc_reliability
    self.new_reliability = new_reliability
    self.timestamp = timestamp
    self.talents = talents
    self.force = force
    self.guildpointschange = guildpointschange
    self.guildpointstotal = guildpointstotal
    self.appliedbuffs = appliedbuffs
    self.leaverpointschange = leaverpointschange

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sessionpersistentid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nick = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.inc_reliability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.new_reliability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.talents = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = TalentInfo()
            _elem35.read(iprot)
            self.talents.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.force = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.guildpointschange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.guildpointstotal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.appliedbuffs = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readI32();
            self.appliedbuffs.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.leaverpointschange = LeaverPointsChangeInfo()
          self.leaverpointschange.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SessionAwardsInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.sessionpersistentid is not None:
      oprot.writeFieldBegin('sessionpersistentid', TType.I64, 2)
      oprot.writeI64(self.sessionpersistentid)
      oprot.writeFieldEnd()
    if self.nick is not None:
      oprot.writeFieldBegin('nick', TType.STRING, 3)
      oprot.writeString(self.nick)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 4)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 5)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 6)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    if self.inc_reliability is not None:
      oprot.writeFieldBegin('inc_reliability', TType.I32, 7)
      oprot.writeI32(self.inc_reliability)
      oprot.writeFieldEnd()
    if self.new_reliability is not None:
      oprot.writeFieldBegin('new_reliability', TType.I32, 8)
      oprot.writeI32(self.new_reliability)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 9)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.talents is not None:
      oprot.writeFieldBegin('talents', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.talents))
      for iter42 in self.talents:
        iter42.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.force is not None:
      oprot.writeFieldBegin('force', TType.DOUBLE, 11)
      oprot.writeDouble(self.force)
      oprot.writeFieldEnd()
    if self.guildpointschange is not None:
      oprot.writeFieldBegin('guildpointschange', TType.I32, 12)
      oprot.writeI32(self.guildpointschange)
      oprot.writeFieldEnd()
    if self.guildpointstotal is not None:
      oprot.writeFieldBegin('guildpointstotal', TType.I32, 13)
      oprot.writeI32(self.guildpointstotal)
      oprot.writeFieldEnd()
    if self.appliedbuffs is not None:
      oprot.writeFieldBegin('appliedbuffs', TType.LIST, 14)
      oprot.writeListBegin(TType.I32, len(self.appliedbuffs))
      for iter43 in self.appliedbuffs:
        oprot.writeI32(iter43)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.leaverpointschange is not None:
      oprot.writeFieldBegin('leaverpointschange', TType.STRUCT, 15)
      self.leaverpointschange.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RatingChangeInfo(object):
  """
  Attributes:
   - auid
   - type
   - sessionpersistentid
   - heroid
   - rating_inc
   - rating_new
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I64, 'sessionpersistentid', None, None, ), # 3
    (4, TType.I32, 'heroid', None, None, ), # 4
    (5, TType.DOUBLE, 'rating_inc', None, None, ), # 5
    (6, TType.DOUBLE, 'rating_new', None, None, ), # 6
    (7, TType.I32, 'timestamp', None, None, ), # 7
  )

  def __init__(self, auid=None, type=None, sessionpersistentid=None, heroid=None, rating_inc=None, rating_new=None, timestamp=None,):
    self.auid = auid
    self.type = type
    self.sessionpersistentid = sessionpersistentid
    self.heroid = heroid
    self.rating_inc = rating_inc
    self.rating_new = rating_new
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sessionpersistentid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.rating_inc = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.rating_new = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RatingChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.sessionpersistentid is not None:
      oprot.writeFieldBegin('sessionpersistentid', TType.I64, 3)
      oprot.writeI64(self.sessionpersistentid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 4)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.rating_inc is not None:
      oprot.writeFieldBegin('rating_inc', TType.DOUBLE, 5)
      oprot.writeDouble(self.rating_inc)
      oprot.writeFieldEnd()
    if self.rating_new is not None:
      oprot.writeFieldBegin('rating_new', TType.DOUBLE, 6)
      oprot.writeDouble(self.rating_new)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 7)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroLevelChangeInfo(object):
  """
  Attributes:
   - auid
   - heroid
   - level
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'heroid', None, None, ), # 2
    (3, TType.I32, 'level', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, heroid=None, level=None, timestamp=None,):
    self.auid = auid
    self.heroid = heroid
    self.level = level
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroLevelChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 2)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeroRankChangeInfo(object):
  """
  Attributes:
   - auid
   - heroid
   - level
   - rank
   - up
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'heroid', None, None, ), # 2
    (3, TType.I32, 'level', None, None, ), # 3
    (4, TType.I32, 'rank', None, None, ), # 4
    (5, TType.BOOL, 'up', None, None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
  )

  def __init__(self, auid=None, heroid=None, level=None, rank=None, up=None, timestamp=None,):
    self.auid = auid
    self.heroid = heroid
    self.level = level
    self.rank = rank
    self.up = up
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heroid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.rank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.up = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeroRankChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.heroid is not None:
      oprot.writeFieldBegin('heroid', TType.I32, 2)
      oprot.writeI32(self.heroid)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 4)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.up is not None:
      oprot.writeFieldBegin('up', TType.BOOL, 5)
      oprot.writeBool(self.up)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CastleLevelChangeInfo(object):
  """
  Attributes:
   - auid
   - level
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'level', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
  )

  def __init__(self, auid=None, level=None, timestamp=None,):
    self.auid = auid
    self.level = level
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CastleLevelChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 2)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherInfo(object):
  """
  Attributes:
   - hostid
   - package
   - version
   - status
   - auid
   - ip
   - location
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostid', None, None, ), # 1
    (2, TType.STRING, 'package', None, None, ), # 2
    (3, TType.STRING, 'version', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.I64, 'auid', None, None, ), # 5
    (6, TType.STRING, 'ip', None, None, ), # 6
    (7, TType.STRING, 'location', None, None, ), # 7
    (8, TType.STRING, 'locale', None, None, ), # 8
  )

  def __init__(self, hostid=None, package=None, version=None, status=None, auid=None, ip=None, location=None, locale=None,):
    self.hostid = hostid
    self.package = package
    self.version = version
    self.status = status
    self.auid = auid
    self.ip = ip
    self.location = location
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.package = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherInfo')
    if self.hostid is not None:
      oprot.writeFieldBegin('hostid', TType.STRING, 1)
      oprot.writeString(self.hostid)
      oprot.writeFieldEnd()
    if self.package is not None:
      oprot.writeFieldBegin('package', TType.STRING, 2)
      oprot.writeString(self.package)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 3)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 5)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 6)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 7)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 8)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherEventsInfo(object):
  """
  Attributes:
   - muid
   - auid
   - bitmask
   - timestamp
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'muid', None, None, ), # 1
    (2, TType.I64, 'auid', None, None, ), # 2
    (3, TType.I64, 'bitmask', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
    (5, TType.STRING, 'locale', None, None, ), # 5
  )

  def __init__(self, muid=None, auid=None, bitmask=None, timestamp=None, locale=None,):
    self.muid = muid
    self.auid = auid
    self.bitmask = bitmask
    self.timestamp = timestamp
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.muid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.bitmask = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherEventsInfo')
    if self.muid is not None:
      oprot.writeFieldBegin('muid', TType.STRING, 1)
      oprot.writeString(self.muid)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 2)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.bitmask is not None:
      oprot.writeFieldBegin('bitmask', TType.I64, 3)
      oprot.writeI64(self.bitmask)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 5)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LauncherDActionsInfo(object):
  """
  Attributes:
   - action
   - hostid
   - version
   - muid
   - auid
   - speed
   - avg_speed
   - min_speed
   - total_patches
   - applied_patches
   - total_download
   - downloaded
   - error
   - need_close
   - timestamp
   - geolocation
   - server_timestamp
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'action', None, None, ), # 1
    (2, TType.STRING, 'hostid', None, None, ), # 2
    (3, TType.STRING, 'version', None, None, ), # 3
    (4, TType.STRING, 'muid', None, None, ), # 4
    (5, TType.STRING, 'auid', None, None, ), # 5
    (6, TType.DOUBLE, 'speed', None, None, ), # 6
    (7, TType.DOUBLE, 'avg_speed', None, None, ), # 7
    (8, TType.DOUBLE, 'min_speed', None, None, ), # 8
    (9, TType.I32, 'total_patches', None, None, ), # 9
    (10, TType.I32, 'applied_patches', None, None, ), # 10
    (11, TType.DOUBLE, 'total_download', None, None, ), # 11
    (12, TType.DOUBLE, 'downloaded', None, None, ), # 12
    (13, TType.STRING, 'error', None, None, ), # 13
    (14, TType.I32, 'need_close', None, None, ), # 14
    (15, TType.I32, 'timestamp', None, None, ), # 15
    (16, TType.STRING, 'geolocation', None, None, ), # 16
    (17, TType.I32, 'server_timestamp', None, None, ), # 17
    (18, TType.STRING, 'locale', None, None, ), # 18
  )

  def __init__(self, action=None, hostid=None, version=None, muid=None, auid=None, speed=None, avg_speed=None, min_speed=None, total_patches=None, applied_patches=None, total_download=None, downloaded=None, error=None, need_close=None, timestamp=None, geolocation=None, server_timestamp=None, locale=None,):
    self.action = action
    self.hostid = hostid
    self.version = version
    self.muid = muid
    self.auid = auid
    self.speed = speed
    self.avg_speed = avg_speed
    self.min_speed = min_speed
    self.total_patches = total_patches
    self.applied_patches = applied_patches
    self.total_download = total_download
    self.downloaded = downloaded
    self.error = error
    self.need_close = need_close
    self.timestamp = timestamp
    self.geolocation = geolocation
    self.server_timestamp = server_timestamp
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.action = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.muid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.auid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.avg_speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.min_speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.total_patches = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.applied_patches = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.total_download = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.downloaded = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.error = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.need_close = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.geolocation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.server_timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LauncherDActionsInfo')
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.STRING, 1)
      oprot.writeString(self.action)
      oprot.writeFieldEnd()
    if self.hostid is not None:
      oprot.writeFieldBegin('hostid', TType.STRING, 2)
      oprot.writeString(self.hostid)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 3)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.muid is not None:
      oprot.writeFieldBegin('muid', TType.STRING, 4)
      oprot.writeString(self.muid)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.STRING, 5)
      oprot.writeString(self.auid)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.DOUBLE, 6)
      oprot.writeDouble(self.speed)
      oprot.writeFieldEnd()
    if self.avg_speed is not None:
      oprot.writeFieldBegin('avg_speed', TType.DOUBLE, 7)
      oprot.writeDouble(self.avg_speed)
      oprot.writeFieldEnd()
    if self.min_speed is not None:
      oprot.writeFieldBegin('min_speed', TType.DOUBLE, 8)
      oprot.writeDouble(self.min_speed)
      oprot.writeFieldEnd()
    if self.total_patches is not None:
      oprot.writeFieldBegin('total_patches', TType.I32, 9)
      oprot.writeI32(self.total_patches)
      oprot.writeFieldEnd()
    if self.applied_patches is not None:
      oprot.writeFieldBegin('applied_patches', TType.I32, 10)
      oprot.writeI32(self.applied_patches)
      oprot.writeFieldEnd()
    if self.total_download is not None:
      oprot.writeFieldBegin('total_download', TType.DOUBLE, 11)
      oprot.writeDouble(self.total_download)
      oprot.writeFieldEnd()
    if self.downloaded is not None:
      oprot.writeFieldBegin('downloaded', TType.DOUBLE, 12)
      oprot.writeDouble(self.downloaded)
      oprot.writeFieldEnd()
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRING, 13)
      oprot.writeString(self.error)
      oprot.writeFieldEnd()
    if self.need_close is not None:
      oprot.writeFieldBegin('need_close', TType.I32, 14)
      oprot.writeI32(self.need_close)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 15)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.geolocation is not None:
      oprot.writeFieldBegin('geolocation', TType.STRING, 16)
      oprot.writeString(self.geolocation)
      oprot.writeFieldEnd()
    if self.server_timestamp is not None:
      oprot.writeFieldBegin('server_timestamp', TType.I32, 17)
      oprot.writeI32(self.server_timestamp)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 18)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialRegisterInfo(object):
  """
  Attributes:
   - hostid
   - auid
   - snid
   - snuid
   - muid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostid', None, None, ), # 1
    (2, TType.STRING, 'auid', None, None, ), # 2
    (3, TType.STRING, 'snid', None, None, ), # 3
    (4, TType.STRING, 'snuid', None, None, ), # 4
    (5, TType.STRING, 'muid', None, None, ), # 5
  )

  def __init__(self, hostid=None, auid=None, snid=None, snuid=None, muid=None,):
    self.hostid = hostid
    self.auid = auid
    self.snid = snid
    self.snuid = snuid
    self.muid = muid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.auid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.snuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.muid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialRegisterInfo')
    if self.hostid is not None:
      oprot.writeFieldBegin('hostid', TType.STRING, 1)
      oprot.writeString(self.hostid)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.STRING, 2)
      oprot.writeString(self.auid)
      oprot.writeFieldEnd()
    if self.snid is not None:
      oprot.writeFieldBegin('snid', TType.STRING, 3)
      oprot.writeString(self.snid)
      oprot.writeFieldEnd()
    if self.snuid is not None:
      oprot.writeFieldBegin('snuid', TType.STRING, 4)
      oprot.writeString(self.snuid)
      oprot.writeFieldEnd()
    if self.muid is not None:
      oprot.writeFieldBegin('muid', TType.STRING, 5)
      oprot.writeString(self.muid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialJoinInfo(object):
  """
  Attributes:
   - auid
   - snid
   - snuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'auid', None, None, ), # 1
    (2, TType.STRING, 'snid', None, None, ), # 2
    (3, TType.STRING, 'snuid', None, None, ), # 3
  )

  def __init__(self, auid=None, snid=None, snuid=None,):
    self.auid = auid
    self.snid = snid
    self.snuid = snuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.auid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.snid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snuid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialJoinInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.STRING, 1)
      oprot.writeString(self.auid)
      oprot.writeFieldEnd()
    if self.snid is not None:
      oprot.writeFieldBegin('snid', TType.STRING, 2)
      oprot.writeString(self.snid)
      oprot.writeFieldEnd()
    if self.snuid is not None:
      oprot.writeFieldBegin('snuid', TType.STRING, 3)
      oprot.writeString(self.snuid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SocialMergeInfo(object):
  """
  Attributes:
   - auid1
   - auid2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'auid1', None, None, ), # 1
    (2, TType.STRING, 'auid2', None, None, ), # 2
  )

  def __init__(self, auid1=None, auid2=None,):
    self.auid1 = auid1
    self.auid2 = auid2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.auid1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.auid2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SocialMergeInfo')
    if self.auid1 is not None:
      oprot.writeFieldBegin('auid1', TType.STRING, 1)
      oprot.writeString(self.auid1)
      oprot.writeFieldEnd()
    if self.auid2 is not None:
      oprot.writeFieldBegin('auid2', TType.STRING, 2)
      oprot.writeString(self.auid2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildCoreInfo(object):
  """
  Attributes:
   - guildid
   - auid
   - timestamp
   - faction
   - guildmembers
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I64, 'auid', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
    (4, TType.STRING, 'faction', None, None, ), # 4
    (5, TType.I32, 'guildmembers', None, None, ), # 5
  )

  def __init__(self, guildid=None, auid=None, timestamp=None, faction=None, guildmembers=None,):
    self.guildid = guildid
    self.auid = auid
    self.timestamp = timestamp
    self.faction = faction
    self.guildmembers = guildmembers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.faction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.guildmembers = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildCoreInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 2)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.faction is not None:
      oprot.writeFieldBegin('faction', TType.STRING, 4)
      oprot.writeString(self.faction)
      oprot.writeFieldEnd()
    if self.guildmembers is not None:
      oprot.writeFieldBegin('guildmembers', TType.I32, 5)
      oprot.writeI32(self.guildmembers)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfo(object):
  """
  Attributes:
   - coreInfo
   - shortname
   - fullname
   - rchange
   - rtotal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'coreInfo', (GuildCoreInfo, GuildCoreInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'shortname', None, None, ), # 2
    (3, TType.STRING, 'fullname', None, None, ), # 3
    (4, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 5
  )

  def __init__(self, coreInfo=None, shortname=None, fullname=None, rchange=None, rtotal=None,):
    self.coreInfo = coreInfo
    self.shortname = shortname
    self.fullname = fullname
    self.rchange = rchange
    self.rtotal = rtotal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.coreInfo = GuildCoreInfo()
          self.coreInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shortname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fullname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfo')
    if self.coreInfo is not None:
      oprot.writeFieldBegin('coreInfo', TType.STRUCT, 1)
      self.coreInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.shortname is not None:
      oprot.writeFieldBegin('shortname', TType.STRING, 2)
      oprot.writeString(self.shortname)
      oprot.writeFieldEnd()
    if self.fullname is not None:
      oprot.writeFieldBegin('fullname', TType.STRING, 3)
      oprot.writeString(self.fullname)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 4)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 5)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildLeaveInfo(object):
  """
  Attributes:
   - coreInfo
   - kicked
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'coreInfo', (GuildCoreInfo, GuildCoreInfo.thrift_spec), None, ), # 1
    (2, TType.BOOL, 'kicked', None, None, ), # 2
  )

  def __init__(self, coreInfo=None, kicked=None,):
    self.coreInfo = coreInfo
    self.kicked = kicked

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.coreInfo = GuildCoreInfo()
          self.coreInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.kicked = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildLeaveInfo')
    if self.coreInfo is not None:
      oprot.writeFieldBegin('coreInfo', TType.STRUCT, 1)
      self.coreInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.kicked is not None:
      oprot.writeFieldBegin('kicked', TType.BOOL, 2)
      oprot.writeBool(self.kicked)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientPingInfo(object):
  """
  Attributes:
   - auid
   - location
   - msecPing
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRING, 'location', None, None, ), # 2
    (3, TType.I32, 'msecPing', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, location=None, msecPing=None, timestamp=None,):
    self.auid = auid
    self.location = location
    self.msecPing = msecPing
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.msecPing = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientPingInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 2)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.msecPing is not None:
      oprot.writeFieldBegin('msecPing', TType.I32, 3)
      oprot.writeI32(self.msecPing)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneRollInfo(object):
  """
  Attributes:
   - auid
   - rune
   - source
   - sessionpersistentid
   - timestamp
   - runescountold
   - runescountnew
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'rune', None, None, ), # 2
    (3, TType.I32, 'source', None, None, ), # 3
    (4, TType.I64, 'sessionpersistentid', None, None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
    (6, TType.I32, 'runescountold', None, None, ), # 6
    (7, TType.I32, 'runescountnew', None, None, ), # 7
  )

  def __init__(self, auid=None, rune=None, source=None, sessionpersistentid=None, timestamp=None, runescountold=None, runescountnew=None,):
    self.auid = auid
    self.rune = rune
    self.source = source
    self.sessionpersistentid = sessionpersistentid
    self.timestamp = timestamp
    self.runescountold = runescountold
    self.runescountnew = runescountnew

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rune = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.source = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sessionpersistentid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.runescountold = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.runescountnew = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneRollInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.rune is not None:
      oprot.writeFieldBegin('rune', TType.I32, 2)
      oprot.writeI32(self.rune)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 3)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.sessionpersistentid is not None:
      oprot.writeFieldBegin('sessionpersistentid', TType.I64, 4)
      oprot.writeI64(self.sessionpersistentid)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.runescountold is not None:
      oprot.writeFieldBegin('runescountold', TType.I32, 6)
      oprot.writeI32(self.runescountold)
      oprot.writeFieldEnd()
    if self.runescountnew is not None:
      oprot.writeFieldBegin('runescountnew', TType.I32, 7)
      oprot.writeI32(self.runescountnew)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWEventInfo(object):
  """
  Attributes:
   - mongoid
   - eventidx
   - enabled
   - points
   - endtime
   - limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mongoid', None, None, ), # 1
    (2, TType.I32, 'eventidx', None, None, ), # 2
    (3, TType.BOOL, 'enabled', None, None, ), # 3
    (4, TType.I32, 'points', None, None, ), # 4
    (5, TType.I32, 'endtime', None, None, ), # 5
    (6, TType.I32, 'limit', None, None, ), # 6
  )

  def __init__(self, mongoid=None, eventidx=None, enabled=None, points=None, endtime=None, limit=None,):
    self.mongoid = mongoid
    self.eventidx = eventidx
    self.enabled = enabled
    self.points = points
    self.endtime = endtime
    self.limit = limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mongoid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.eventidx = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.points = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.endtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWEventInfo')
    if self.mongoid is not None:
      oprot.writeFieldBegin('mongoid', TType.STRING, 1)
      oprot.writeString(self.mongoid)
      oprot.writeFieldEnd()
    if self.eventidx is not None:
      oprot.writeFieldBegin('eventidx', TType.I32, 2)
      oprot.writeI32(self.eventidx)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 3)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.points is not None:
      oprot.writeFieldBegin('points', TType.I32, 4)
      oprot.writeI32(self.points)
      oprot.writeFieldEnd()
    if self.endtime is not None:
      oprot.writeFieldBegin('endtime', TType.I32, 5)
      oprot.writeI32(self.endtime)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 6)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GWScoreChangeInfo(object):
  """
  Attributes:
   - gweventmid
   - guildid
   - lastpoints
   - currentpoints
   - timestamp
   - auid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gweventmid', None, None, ), # 1
    (2, TType.I64, 'guildid', None, None, ), # 2
    (3, TType.I32, 'lastpoints', None, None, ), # 3
    (4, TType.I32, 'currentpoints', None, None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
    (6, TType.I32, 'auid', None, None, ), # 6
  )

  def __init__(self, gweventmid=None, guildid=None, lastpoints=None, currentpoints=None, timestamp=None, auid=None,):
    self.gweventmid = gweventmid
    self.guildid = guildid
    self.lastpoints = lastpoints
    self.currentpoints = currentpoints
    self.timestamp = timestamp
    self.auid = auid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gweventmid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.lastpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.currentpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.auid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GWScoreChangeInfo')
    if self.gweventmid is not None:
      oprot.writeFieldBegin('gweventmid', TType.STRING, 1)
      oprot.writeString(self.gweventmid)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 2)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.lastpoints is not None:
      oprot.writeFieldBegin('lastpoints', TType.I32, 3)
      oprot.writeI32(self.lastpoints)
      oprot.writeFieldEnd()
    if self.currentpoints is not None:
      oprot.writeFieldBegin('currentpoints', TType.I32, 4)
      oprot.writeI32(self.currentpoints)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I32, 6)
      oprot.writeI32(self.auid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventsStagesInfo(object):
  """
  Attributes:
   - auid
   - tostagechange
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'auid', None, None, ), # 1
    (2, TType.I32, 'tostagechange', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
  )

  def __init__(self, auid=None, tostagechange=None, timestamp=None,):
    self.auid = auid
    self.tostagechange = tostagechange
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.auid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tostagechange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventsStagesInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I32, 1)
      oprot.writeI32(self.auid)
      oprot.writeFieldEnd()
    if self.tostagechange is not None:
      oprot.writeFieldBegin('tostagechange', TType.I32, 2)
      oprot.writeI32(self.tostagechange)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuestEventsStatesInfo(object):
  """
  Attributes:
   - auid
   - tostepschange
   - stage
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'auid', None, None, ), # 1
    (2, TType.I32, 'tostepschange', None, None, ), # 2
    (3, TType.I32, 'stage', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, tostepschange=None, stage=None, timestamp=None,):
    self.auid = auid
    self.tostepschange = tostepschange
    self.stage = stage
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.auid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tostepschange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.stage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuestEventsStatesInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I32, 1)
      oprot.writeI32(self.auid)
      oprot.writeFieldEnd()
    if self.tostepschange is not None:
      oprot.writeFieldBegin('tostepschange', TType.I32, 2)
      oprot.writeI32(self.tostepschange)
      oprot.writeFieldEnd()
    if self.stage is not None:
      oprot.writeFieldBegin('stage', TType.I32, 3)
      oprot.writeI32(self.stage)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneReplenishInfo(object):
  """
  Attributes:
   - auid
   - rune
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'rune', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
  )

  def __init__(self, auid=None, rune=None, timestamp=None,):
    self.auid = auid
    self.rune = rune
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rune = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneReplenishInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.rune is not None:
      oprot.writeFieldBegin('rune', TType.I32, 2)
      oprot.writeI32(self.rune)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneHeroApplyInfo(object):
  """
  Attributes:
   - auid
   - rune
   - hero
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'rune', None, None, ), # 2
    (3, TType.STRING, 'hero', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, rune=None, hero=None, timestamp=None,):
    self.auid = auid
    self.rune = rune
    self.hero = hero
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rune = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hero = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneHeroApplyInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.rune is not None:
      oprot.writeFieldBegin('rune', TType.I32, 2)
      oprot.writeI32(self.rune)
      oprot.writeFieldEnd()
    if self.hero is not None:
      oprot.writeFieldBegin('hero', TType.STRING, 3)
      oprot.writeString(self.hero)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneSoulboundInfo(object):
  """
  Attributes:
   - auid
   - rune
   - talent
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'rune', None, None, ), # 2
    (3, TType.I32, 'talent', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
  )

  def __init__(self, auid=None, rune=None, talent=None, timestamp=None,):
    self.auid = auid
    self.rune = rune
    self.talent = talent
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rune = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.talent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneSoulboundInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.rune is not None:
      oprot.writeFieldBegin('rune', TType.I32, 2)
      oprot.writeI32(self.rune)
      oprot.writeFieldEnd()
    if self.talent is not None:
      oprot.writeFieldBegin('talent', TType.I32, 3)
      oprot.writeI32(self.talent)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuneExpireInfo(object):
  """
  Attributes:
   - auid
   - rune
   - transactionsLeft
   - bonusLeft
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'rune', None, None, ), # 2
    (3, TType.I32, 'transactionsLeft', None, None, ), # 3
    (4, TType.I32, 'bonusLeft', None, None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
  )

  def __init__(self, auid=None, rune=None, transactionsLeft=None, bonusLeft=None, timestamp=None,):
    self.auid = auid
    self.rune = rune
    self.transactionsLeft = transactionsLeft
    self.bonusLeft = bonusLeft
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rune = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.transactionsLeft = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bonusLeft = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuneExpireInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.rune is not None:
      oprot.writeFieldBegin('rune', TType.I32, 2)
      oprot.writeI32(self.rune)
      oprot.writeFieldEnd()
    if self.transactionsLeft is not None:
      oprot.writeFieldBegin('transactionsLeft', TType.I32, 3)
      oprot.writeI32(self.transactionsLeft)
      oprot.writeFieldEnd()
    if self.bonusLeft is not None:
      oprot.writeFieldBegin('bonusLeft', TType.I32, 4)
      oprot.writeI32(self.bonusLeft)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentChangeInfo(object):
  """
  Attributes:
   - auid
   - talent
   - operation
   - timestamp
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.STRUCT, 'talent', (TalentInfo, TalentInfo.thrift_spec), None, ), # 2
    (3, TType.I32, 'operation', None, None, ), # 3
    (4, TType.I32, 'timestamp', None, None, ), # 4
    (5, TType.STRING, 'data', None, None, ), # 5
  )

  def __init__(self, auid=None, talent=None, operation=None, timestamp=None, data=None,):
    self.auid = auid
    self.talent = talent
    self.operation = operation
    self.timestamp = timestamp
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.talent = TalentInfo()
          self.talent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.operation = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.talent is not None:
      oprot.writeFieldBegin('talent', TType.STRUCT, 2)
      self.talent.write(oprot)
      oprot.writeFieldEnd()
    if self.operation is not None:
      oprot.writeFieldBegin('operation', TType.I32, 3)
      oprot.writeI32(self.operation)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 4)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 5)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildShopBuyInfo(object):
  """
  Attributes:
   - auid
   - guildid
   - hassuzerain
   - shoplevel
   - shopitemid
   - rchange
   - rtotal
   - guildpointschange
   - guildpointstotal
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I64, 'guildid', None, None, ), # 2
    (3, TType.BOOL, 'hassuzerain', None, None, ), # 3
    (4, TType.I32, 'shoplevel', None, None, ), # 4
    (5, TType.I32, 'shopitemid', None, None, ), # 5
    (6, TType.STRUCT, 'rchange', (ResourceTable, ResourceTable.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'rtotal', (ResourceTable, ResourceTable.thrift_spec), None, ), # 7
    (8, TType.I32, 'guildpointschange', None, None, ), # 8
    (9, TType.I32, 'guildpointstotal', None, None, ), # 9
    (10, TType.I32, 'timestamp', None, None, ), # 10
  )

  def __init__(self, auid=None, guildid=None, hassuzerain=None, shoplevel=None, shopitemid=None, rchange=None, rtotal=None, guildpointschange=None, guildpointstotal=None, timestamp=None,):
    self.auid = auid
    self.guildid = guildid
    self.hassuzerain = hassuzerain
    self.shoplevel = shoplevel
    self.shopitemid = shopitemid
    self.rchange = rchange
    self.rtotal = rtotal
    self.guildpointschange = guildpointschange
    self.guildpointstotal = guildpointstotal
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.hassuzerain = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.shoplevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.shopitemid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.rchange = ResourceTable()
          self.rchange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.rtotal = ResourceTable()
          self.rtotal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.guildpointschange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.guildpointstotal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildShopBuyInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 2)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.hassuzerain is not None:
      oprot.writeFieldBegin('hassuzerain', TType.BOOL, 3)
      oprot.writeBool(self.hassuzerain)
      oprot.writeFieldEnd()
    if self.shoplevel is not None:
      oprot.writeFieldBegin('shoplevel', TType.I32, 4)
      oprot.writeI32(self.shoplevel)
      oprot.writeFieldEnd()
    if self.shopitemid is not None:
      oprot.writeFieldBegin('shopitemid', TType.I32, 5)
      oprot.writeI32(self.shopitemid)
      oprot.writeFieldEnd()
    if self.rchange is not None:
      oprot.writeFieldBegin('rchange', TType.STRUCT, 6)
      self.rchange.write(oprot)
      oprot.writeFieldEnd()
    if self.rtotal is not None:
      oprot.writeFieldBegin('rtotal', TType.STRUCT, 7)
      self.rtotal.write(oprot)
      oprot.writeFieldEnd()
    if self.guildpointschange is not None:
      oprot.writeFieldBegin('guildpointschange', TType.I32, 8)
      oprot.writeI32(self.guildpointschange)
      oprot.writeFieldEnd()
    if self.guildpointstotal is not None:
      oprot.writeFieldBegin('guildpointstotal', TType.I32, 9)
      oprot.writeI32(self.guildpointstotal)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 10)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildSiegeParticipantInfo(object):
  """
  Attributes:
   - guildid
   - guildrating
   - starttimestamp
   - endtimestamp
   - siegepoints
   - guildpointsprice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I32, 'guildrating', None, None, ), # 2
    (3, TType.I32, 'starttimestamp', None, None, ), # 3
    (4, TType.I32, 'endtimestamp', None, None, ), # 4
    (5, TType.I32, 'siegepoints', None, None, ), # 5
    (6, TType.I32, 'guildpointsprice', None, None, ), # 6
  )

  def __init__(self, guildid=None, guildrating=None, starttimestamp=None, endtimestamp=None, siegepoints=None, guildpointsprice=None,):
    self.guildid = guildid
    self.guildrating = guildrating
    self.starttimestamp = starttimestamp
    self.endtimestamp = endtimestamp
    self.siegepoints = siegepoints
    self.guildpointsprice = guildpointsprice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.guildrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.starttimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.endtimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.siegepoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.guildpointsprice = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildSiegeParticipantInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildrating is not None:
      oprot.writeFieldBegin('guildrating', TType.I32, 2)
      oprot.writeI32(self.guildrating)
      oprot.writeFieldEnd()
    if self.starttimestamp is not None:
      oprot.writeFieldBegin('starttimestamp', TType.I32, 3)
      oprot.writeI32(self.starttimestamp)
      oprot.writeFieldEnd()
    if self.endtimestamp is not None:
      oprot.writeFieldBegin('endtimestamp', TType.I32, 4)
      oprot.writeI32(self.endtimestamp)
      oprot.writeFieldEnd()
    if self.siegepoints is not None:
      oprot.writeFieldBegin('siegepoints', TType.I32, 5)
      oprot.writeI32(self.siegepoints)
      oprot.writeFieldEnd()
    if self.guildpointsprice is not None:
      oprot.writeFieldBegin('guildpointsprice', TType.I32, 6)
      oprot.writeI32(self.guildpointsprice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildSiegeInfo(object):
  """
  Attributes:
   - siegeid
   - guildid
   - guildrating
   - targetguildid
   - targetguildrating
   - targetsuzerainid
   - targetsuzerainrating
   - guildpointsprice
   - starttimestamp
   - endtimestamp
   - participants
   - winnerguildid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'siegeid', None, None, ), # 1
    (2, TType.I64, 'guildid', None, None, ), # 2
    (3, TType.I32, 'guildrating', None, None, ), # 3
    (4, TType.I64, 'targetguildid', None, None, ), # 4
    (5, TType.I32, 'targetguildrating', None, None, ), # 5
    (6, TType.I64, 'targetsuzerainid', None, None, ), # 6
    (7, TType.I32, 'targetsuzerainrating', None, None, ), # 7
    (8, TType.I32, 'guildpointsprice', None, None, ), # 8
    (9, TType.I32, 'starttimestamp', None, None, ), # 9
    (10, TType.I32, 'endtimestamp', None, None, ), # 10
    (11, TType.LIST, 'participants', (TType.STRUCT,(GuildSiegeParticipantInfo, GuildSiegeParticipantInfo.thrift_spec)), None, ), # 11
    (12, TType.I64, 'winnerguildid', None, None, ), # 12
  )

  def __init__(self, siegeid=None, guildid=None, guildrating=None, targetguildid=None, targetguildrating=None, targetsuzerainid=None, targetsuzerainrating=None, guildpointsprice=None, starttimestamp=None, endtimestamp=None, participants=None, winnerguildid=None,):
    self.siegeid = siegeid
    self.guildid = guildid
    self.guildrating = guildrating
    self.targetguildid = targetguildid
    self.targetguildrating = targetguildrating
    self.targetsuzerainid = targetsuzerainid
    self.targetsuzerainrating = targetsuzerainrating
    self.guildpointsprice = guildpointsprice
    self.starttimestamp = starttimestamp
    self.endtimestamp = endtimestamp
    self.participants = participants
    self.winnerguildid = winnerguildid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.siegeid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.guildrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.targetguildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.targetguildrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.targetsuzerainid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.targetsuzerainrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.guildpointsprice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.starttimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.endtimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.participants = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = GuildSiegeParticipantInfo()
            _elem49.read(iprot)
            self.participants.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.winnerguildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildSiegeInfo')
    if self.siegeid is not None:
      oprot.writeFieldBegin('siegeid', TType.I64, 1)
      oprot.writeI64(self.siegeid)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 2)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildrating is not None:
      oprot.writeFieldBegin('guildrating', TType.I32, 3)
      oprot.writeI32(self.guildrating)
      oprot.writeFieldEnd()
    if self.targetguildid is not None:
      oprot.writeFieldBegin('targetguildid', TType.I64, 4)
      oprot.writeI64(self.targetguildid)
      oprot.writeFieldEnd()
    if self.targetguildrating is not None:
      oprot.writeFieldBegin('targetguildrating', TType.I32, 5)
      oprot.writeI32(self.targetguildrating)
      oprot.writeFieldEnd()
    if self.targetsuzerainid is not None:
      oprot.writeFieldBegin('targetsuzerainid', TType.I64, 6)
      oprot.writeI64(self.targetsuzerainid)
      oprot.writeFieldEnd()
    if self.targetsuzerainrating is not None:
      oprot.writeFieldBegin('targetsuzerainrating', TType.I32, 7)
      oprot.writeI32(self.targetsuzerainrating)
      oprot.writeFieldEnd()
    if self.guildpointsprice is not None:
      oprot.writeFieldBegin('guildpointsprice', TType.I32, 8)
      oprot.writeI32(self.guildpointsprice)
      oprot.writeFieldEnd()
    if self.starttimestamp is not None:
      oprot.writeFieldBegin('starttimestamp', TType.I32, 9)
      oprot.writeI32(self.starttimestamp)
      oprot.writeFieldEnd()
    if self.endtimestamp is not None:
      oprot.writeFieldBegin('endtimestamp', TType.I32, 10)
      oprot.writeI32(self.endtimestamp)
      oprot.writeFieldEnd()
    if self.participants is not None:
      oprot.writeFieldBegin('participants', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.participants))
      for iter50 in self.participants:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.winnerguildid is not None:
      oprot.writeFieldBegin('winnerguildid', TType.I64, 12)
      oprot.writeI64(self.winnerguildid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDailyStatsVassalInfo(object):
  """
  Attributes:
   - guildid
   - guildpoints
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I64, 'guildpoints', None, None, ), # 2
  )

  def __init__(self, guildid=None, guildpoints=None,):
    self.guildid = guildid
    self.guildpoints = guildpoints

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildpoints = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDailyStatsVassalInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildpoints is not None:
      oprot.writeFieldBegin('guildpoints', TType.I64, 2)
      oprot.writeI64(self.guildpoints)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDailyStatsSuggestedInfo(object):
  """
  Attributes:
   - guildid
   - guildrating
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I64, 'guildrating', None, None, ), # 2
  )

  def __init__(self, guildid=None, guildrating=None,):
    self.guildid = guildid
    self.guildrating = guildrating

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildrating = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDailyStatsSuggestedInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildrating is not None:
      oprot.writeFieldBegin('guildrating', TType.I64, 2)
      oprot.writeI64(self.guildrating)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildDailyStatsInfo(object):
  """
  Attributes:
   - guildid
   - guildrating
   - guildratingtoday
   - guildpoints
   - guildrank
   - timestamp
   - vassals
   - suggested
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I32, 'guildrating', None, None, ), # 2
    (3, TType.I32, 'guildratingtoday', None, None, ), # 3
    (4, TType.I32, 'guildpoints', None, None, ), # 4
    (5, TType.I32, 'guildrank', None, None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
    (7, TType.LIST, 'vassals', (TType.STRUCT,(GuildDailyStatsVassalInfo, GuildDailyStatsVassalInfo.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'suggested', (TType.STRUCT,(GuildDailyStatsSuggestedInfo, GuildDailyStatsSuggestedInfo.thrift_spec)), None, ), # 8
  )

  def __init__(self, guildid=None, guildrating=None, guildratingtoday=None, guildpoints=None, guildrank=None, timestamp=None, vassals=None, suggested=None,):
    self.guildid = guildid
    self.guildrating = guildrating
    self.guildratingtoday = guildratingtoday
    self.guildpoints = guildpoints
    self.guildrank = guildrank
    self.timestamp = timestamp
    self.vassals = vassals
    self.suggested = suggested

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.guildrating = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.guildratingtoday = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.guildpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.guildrank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.vassals = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = GuildDailyStatsVassalInfo()
            _elem56.read(iprot)
            self.vassals.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.suggested = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = GuildDailyStatsSuggestedInfo()
            _elem62.read(iprot)
            self.suggested.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildDailyStatsInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildrating is not None:
      oprot.writeFieldBegin('guildrating', TType.I32, 2)
      oprot.writeI32(self.guildrating)
      oprot.writeFieldEnd()
    if self.guildratingtoday is not None:
      oprot.writeFieldBegin('guildratingtoday', TType.I32, 3)
      oprot.writeI32(self.guildratingtoday)
      oprot.writeFieldEnd()
    if self.guildpoints is not None:
      oprot.writeFieldBegin('guildpoints', TType.I32, 4)
      oprot.writeI32(self.guildpoints)
      oprot.writeFieldEnd()
    if self.guildrank is not None:
      oprot.writeFieldBegin('guildrank', TType.I32, 5)
      oprot.writeI32(self.guildrank)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.vassals is not None:
      oprot.writeFieldBegin('vassals', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.vassals))
      for iter63 in self.vassals:
        iter63.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.suggested is not None:
      oprot.writeFieldBegin('suggested', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.suggested))
      for iter64 in self.suggested:
        iter64.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInteractionInfo(object):
  """
  Attributes:
   - guildid
   - targetguildid
   - type
   - siegeid
   - waitingtime
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I64, 'targetguildid', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I64, 'siegeid', None, None, ), # 4
    (5, TType.I32, 'waitingtime', None, None, ), # 5
    (6, TType.I32, 'timestamp', None, None, ), # 6
  )

  def __init__(self, guildid=None, targetguildid=None, type=None, siegeid=None, waitingtime=None, timestamp=None,):
    self.guildid = guildid
    self.targetguildid = targetguildid
    self.type = type
    self.siegeid = siegeid
    self.waitingtime = waitingtime
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.targetguildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.siegeid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.waitingtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInteractionInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.targetguildid is not None:
      oprot.writeFieldBegin('targetguildid', TType.I64, 2)
      oprot.writeI64(self.targetguildid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.siegeid is not None:
      oprot.writeFieldBegin('siegeid', TType.I64, 4)
      oprot.writeI64(self.siegeid)
      oprot.writeFieldEnd()
    if self.waitingtime is not None:
      oprot.writeFieldBegin('waitingtime', TType.I32, 5)
      oprot.writeI32(self.waitingtime)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 6)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildPointsChangeInfo(object):
  """
  Attributes:
   - guildid
   - auid
   - source
   - playerpointschange
   - playerpointstotal
   - guildpointschange
   - guildpointstotal
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildid', None, None, ), # 1
    (2, TType.I64, 'auid', None, None, ), # 2
    (3, TType.STRING, 'source', None, None, ), # 3
    (4, TType.I32, 'playerpointschange', None, None, ), # 4
    (5, TType.I32, 'playerpointstotal', None, None, ), # 5
    (6, TType.I32, 'guildpointschange', None, None, ), # 6
    (7, TType.I32, 'guildpointstotal', None, None, ), # 7
    (8, TType.I32, 'timestamp', None, None, ), # 8
  )

  def __init__(self, guildid=None, auid=None, source=None, playerpointschange=None, playerpointstotal=None, guildpointschange=None, guildpointstotal=None, timestamp=None,):
    self.guildid = guildid
    self.auid = auid
    self.source = source
    self.playerpointschange = playerpointschange
    self.playerpointstotal = playerpointstotal
    self.guildpointschange = guildpointschange
    self.guildpointstotal = guildpointstotal
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.playerpointschange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.playerpointstotal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.guildpointschange = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.guildpointstotal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildPointsChangeInfo')
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 1)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 2)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 3)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.playerpointschange is not None:
      oprot.writeFieldBegin('playerpointschange', TType.I32, 4)
      oprot.writeI32(self.playerpointschange)
      oprot.writeFieldEnd()
    if self.playerpointstotal is not None:
      oprot.writeFieldBegin('playerpointstotal', TType.I32, 5)
      oprot.writeI32(self.playerpointstotal)
      oprot.writeFieldEnd()
    if self.guildpointschange is not None:
      oprot.writeFieldBegin('guildpointschange', TType.I32, 6)
      oprot.writeI32(self.guildpointschange)
      oprot.writeFieldEnd()
    if self.guildpointstotal is not None:
      oprot.writeFieldBegin('guildpointstotal', TType.I32, 7)
      oprot.writeI32(self.guildpointstotal)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 8)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AfterPartyMemberInfo(object):
  """
  Attributes:
   - auid
   - sessionPersistentId
   - kicked
   - leaved
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I64, 'sessionPersistentId', None, None, ), # 2
    (3, TType.BOOL, 'kicked', None, None, ), # 3
    (4, TType.BOOL, 'leaved', None, None, ), # 4
  )

  def __init__(self, auid=None, sessionPersistentId=None, kicked=None, leaved=None,):
    self.auid = auid
    self.sessionPersistentId = sessionPersistentId
    self.kicked = kicked
    self.leaved = leaved

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sessionPersistentId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.kicked = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.leaved = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AfterPartyMemberInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.sessionPersistentId is not None:
      oprot.writeFieldBegin('sessionPersistentId', TType.I64, 2)
      oprot.writeI64(self.sessionPersistentId)
      oprot.writeFieldEnd()
    if self.kicked is not None:
      oprot.writeFieldBegin('kicked', TType.BOOL, 3)
      oprot.writeBool(self.kicked)
      oprot.writeFieldEnd()
    if self.leaved is not None:
      oprot.writeFieldBegin('leaved', TType.BOOL, 4)
      oprot.writeBool(self.leaved)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AfterPartyInfo(object):
  """
  Attributes:
   - mmstarted
   - members
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'mmstarted', None, None, ), # 1
    (2, TType.LIST, 'members', (TType.STRUCT,(AfterPartyMemberInfo, AfterPartyMemberInfo.thrift_spec)), None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
  )

  def __init__(self, mmstarted=None, members=None, timestamp=None,):
    self.mmstarted = mmstarted
    self.members = members
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.mmstarted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.members = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = AfterPartyMemberInfo()
            _elem70.read(iprot)
            self.members.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AfterPartyInfo')
    if self.mmstarted is not None:
      oprot.writeFieldBegin('mmstarted', TType.BOOL, 1)
      oprot.writeBool(self.mmstarted)
      oprot.writeFieldEnd()
    if self.members is not None:
      oprot.writeFieldBegin('members', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.members))
      for iter71 in self.members:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReRollShopInfo(object):
  """
  Attributes:
   - auid
   - itemId
   - itemGroup
   - itemPrice
   - itemPriceType
   - rerollCount
   - slotType
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'itemId', None, None, ), # 2
    (3, TType.I32, 'itemGroup', None, None, ), # 3
    (4, TType.I64, 'itemPrice', None, None, ), # 4
    (5, TType.I32, 'itemPriceType', None, None, ), # 5
    (6, TType.I32, 'rerollCount', None, None, ), # 6
    (7, TType.STRING, 'slotType', None, None, ), # 7
    (8, TType.I32, 'timestamp', None, None, ), # 8
  )

  def __init__(self, auid=None, itemId=None, itemGroup=None, itemPrice=None, itemPriceType=None, rerollCount=None, slotType=None, timestamp=None,):
    self.auid = auid
    self.itemId = itemId
    self.itemGroup = itemGroup
    self.itemPrice = itemPrice
    self.itemPriceType = itemPriceType
    self.rerollCount = rerollCount
    self.slotType = slotType
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.itemId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.itemGroup = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.itemPrice = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.itemPriceType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.rerollCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.slotType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReRollShopInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.I32, 2)
      oprot.writeI32(self.itemId)
      oprot.writeFieldEnd()
    if self.itemGroup is not None:
      oprot.writeFieldBegin('itemGroup', TType.I32, 3)
      oprot.writeI32(self.itemGroup)
      oprot.writeFieldEnd()
    if self.itemPrice is not None:
      oprot.writeFieldBegin('itemPrice', TType.I64, 4)
      oprot.writeI64(self.itemPrice)
      oprot.writeFieldEnd()
    if self.itemPriceType is not None:
      oprot.writeFieldBegin('itemPriceType', TType.I32, 5)
      oprot.writeI32(self.itemPriceType)
      oprot.writeFieldEnd()
    if self.rerollCount is not None:
      oprot.writeFieldBegin('rerollCount', TType.I32, 6)
      oprot.writeI32(self.rerollCount)
      oprot.writeFieldEnd()
    if self.slotType is not None:
      oprot.writeFieldBegin('slotType', TType.STRING, 7)
      oprot.writeString(self.slotType)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 8)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TournamentQuestChangeInfo(object):
  """
  Attributes:
   - auid
   - questindex
   - questname
   - reason
   - timestamp
   - alternativeline
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auid', None, None, ), # 1
    (2, TType.I32, 'questindex', None, None, ), # 2
    (3, TType.STRING, 'questname', None, None, ), # 3
    (4, TType.I32, 'reason', None, None, ), # 4
    (5, TType.I32, 'timestamp', None, None, ), # 5
    (6, TType.BOOL, 'alternativeline', None, None, ), # 6
  )

  def __init__(self, auid=None, questindex=None, questname=None, reason=None, timestamp=None, alternativeline=None,):
    self.auid = auid
    self.questindex = questindex
    self.questname = questname
    self.reason = reason
    self.timestamp = timestamp
    self.alternativeline = alternativeline

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.questindex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.questname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.reason = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.alternativeline = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TournamentQuestChangeInfo')
    if self.auid is not None:
      oprot.writeFieldBegin('auid', TType.I64, 1)
      oprot.writeI64(self.auid)
      oprot.writeFieldEnd()
    if self.questindex is not None:
      oprot.writeFieldBegin('questindex', TType.I32, 2)
      oprot.writeI32(self.questindex)
      oprot.writeFieldEnd()
    if self.questname is not None:
      oprot.writeFieldBegin('questname', TType.STRING, 3)
      oprot.writeString(self.questname)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.I32, 4)
      oprot.writeI32(self.reason)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 5)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.alternativeline is not None:
      oprot.writeFieldBegin('alternativeline', TType.BOOL, 6)
      oprot.writeBool(self.alternativeline)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
