/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TradeGroupMemberModel : TBase
  {
    private string _name;
    private string _image;
    private string _currencyName;
    private double _currencyCostPerExp;
    private RollEventItem _rewardA;
    private int _rewardACost;
    private RollEventItem _rewardB;
    private int _rewardBCost;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public string CurrencyName
    {
      get
      {
        return _currencyName;
      }
      set
      {
        __isset.currencyName = true;
        this._currencyName = value;
      }
    }

    public double CurrencyCostPerExp
    {
      get
      {
        return _currencyCostPerExp;
      }
      set
      {
        __isset.currencyCostPerExp = true;
        this._currencyCostPerExp = value;
      }
    }

    public RollEventItem RewardA
    {
      get
      {
        return _rewardA;
      }
      set
      {
        __isset.rewardA = true;
        this._rewardA = value;
      }
    }

    public int RewardACost
    {
      get
      {
        return _rewardACost;
      }
      set
      {
        __isset.rewardACost = true;
        this._rewardACost = value;
      }
    }

    public RollEventItem RewardB
    {
      get
      {
        return _rewardB;
      }
      set
      {
        __isset.rewardB = true;
        this._rewardB = value;
      }
    }

    public int RewardBCost
    {
      get
      {
        return _rewardBCost;
      }
      set
      {
        __isset.rewardBCost = true;
        this._rewardBCost = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool image;
      public bool currencyName;
      public bool currencyCostPerExp;
      public bool rewardA;
      public bool rewardACost;
      public bool rewardB;
      public bool rewardBCost;
    }

    public TradeGroupMemberModel() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Image = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CurrencyName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              CurrencyCostPerExp = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              RewardA = new RollEventItem();
              RewardA.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              RewardACost = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              RewardB = new RollEventItem();
              RewardB.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              RewardBCost = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TradeGroupMemberModel");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Image);
        oprot.WriteFieldEnd();
      }
      if (CurrencyName != null && __isset.currencyName) {
        field.Name = "currencyName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencyName);
        oprot.WriteFieldEnd();
      }
      if (__isset.currencyCostPerExp) {
        field.Name = "currencyCostPerExp";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CurrencyCostPerExp);
        oprot.WriteFieldEnd();
      }
      if (RewardA != null && __isset.rewardA) {
        field.Name = "rewardA";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        RewardA.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewardACost) {
        field.Name = "rewardACost";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RewardACost);
        oprot.WriteFieldEnd();
      }
      if (RewardB != null && __isset.rewardB) {
        field.Name = "rewardB";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        RewardB.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewardBCost) {
        field.Name = "rewardBCost";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RewardBCost);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TradeGroupMemberModel(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",Image: ");
      sb.Append(Image);
      sb.Append(",CurrencyName: ");
      sb.Append(CurrencyName);
      sb.Append(",CurrencyCostPerExp: ");
      sb.Append(CurrencyCostPerExp);
      sb.Append(",RewardA: ");
      sb.Append(RewardA== null ? "<null>" : RewardA.ToString());
      sb.Append(",RewardACost: ");
      sb.Append(RewardACost);
      sb.Append(",RewardB: ");
      sb.Append(RewardB== null ? "<null>" : RewardB.ToString());
      sb.Append(",RewardBCost: ");
      sb.Append(RewardBCost);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
