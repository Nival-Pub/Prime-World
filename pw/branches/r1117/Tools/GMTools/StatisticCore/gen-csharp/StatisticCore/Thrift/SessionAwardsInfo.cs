/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SessionAwardsInfo : TBase
  {
    private long _auid;
    private long _sessionpersistentid;
    private string _nick;
    private int _heroid;
    private ResourceTable _rchange;
    private ResourceTable _rtotal;
    private int _inc_reliability;
    private int _new_reliability;
    private int _timestamp;
    private List<TalentInfo> _talents;
    private double _force;
    private int _guildpointschange;
    private int _guildpointstotal;
    private List<int> _appliedbuffs;
    private LeaverPointsChangeInfo _leaverpointschange;

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public long Sessionpersistentid
    {
      get
      {
        return _sessionpersistentid;
      }
      set
      {
        __isset.sessionpersistentid = true;
        this._sessionpersistentid = value;
      }
    }

    public string Nick
    {
      get
      {
        return _nick;
      }
      set
      {
        __isset.nick = true;
        this._nick = value;
      }
    }

    public int Heroid
    {
      get
      {
        return _heroid;
      }
      set
      {
        __isset.heroid = true;
        this._heroid = value;
      }
    }

    public ResourceTable Rchange
    {
      get
      {
        return _rchange;
      }
      set
      {
        __isset.rchange = true;
        this._rchange = value;
      }
    }

    public ResourceTable Rtotal
    {
      get
      {
        return _rtotal;
      }
      set
      {
        __isset.rtotal = true;
        this._rtotal = value;
      }
    }

    public int Inc_reliability
    {
      get
      {
        return _inc_reliability;
      }
      set
      {
        __isset.inc_reliability = true;
        this._inc_reliability = value;
      }
    }

    public int New_reliability
    {
      get
      {
        return _new_reliability;
      }
      set
      {
        __isset.new_reliability = true;
        this._new_reliability = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public List<TalentInfo> Talents
    {
      get
      {
        return _talents;
      }
      set
      {
        __isset.talents = true;
        this._talents = value;
      }
    }

    public double Force
    {
      get
      {
        return _force;
      }
      set
      {
        __isset.force = true;
        this._force = value;
      }
    }

    public int Guildpointschange
    {
      get
      {
        return _guildpointschange;
      }
      set
      {
        __isset.guildpointschange = true;
        this._guildpointschange = value;
      }
    }

    public int Guildpointstotal
    {
      get
      {
        return _guildpointstotal;
      }
      set
      {
        __isset.guildpointstotal = true;
        this._guildpointstotal = value;
      }
    }

    public List<int> Appliedbuffs
    {
      get
      {
        return _appliedbuffs;
      }
      set
      {
        __isset.appliedbuffs = true;
        this._appliedbuffs = value;
      }
    }

    public LeaverPointsChangeInfo Leaverpointschange
    {
      get
      {
        return _leaverpointschange;
      }
      set
      {
        __isset.leaverpointschange = true;
        this._leaverpointschange = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auid;
      public bool sessionpersistentid;
      public bool nick;
      public bool heroid;
      public bool rchange;
      public bool rtotal;
      public bool inc_reliability;
      public bool new_reliability;
      public bool timestamp;
      public bool talents;
      public bool force;
      public bool guildpointschange;
      public bool guildpointstotal;
      public bool appliedbuffs;
      public bool leaverpointschange;
    }

    public SessionAwardsInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Sessionpersistentid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Nick = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Heroid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Rchange = new ResourceTable();
              Rchange.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Rtotal = new ResourceTable();
              Rtotal.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Inc_reliability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              New_reliability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                Talents = new List<TalentInfo>();
                TList _list17 = iprot.ReadListBegin();
                for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  TalentInfo _elem19 = new TalentInfo();
                  _elem19 = new TalentInfo();
                  _elem19.Read(iprot);
                  Talents.Add(_elem19);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              Force = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Guildpointschange = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Guildpointstotal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.List) {
              {
                Appliedbuffs = new List<int>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  int _elem22 = 0;
                  _elem22 = iprot.ReadI32();
                  Appliedbuffs.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              Leaverpointschange = new LeaverPointsChangeInfo();
              Leaverpointschange.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SessionAwardsInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionpersistentid) {
        field.Name = "sessionpersistentid";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Sessionpersistentid);
        oprot.WriteFieldEnd();
      }
      if (Nick != null && __isset.nick) {
        field.Name = "nick";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Nick);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroid) {
        field.Name = "heroid";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Heroid);
        oprot.WriteFieldEnd();
      }
      if (Rchange != null && __isset.rchange) {
        field.Name = "rchange";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Rchange.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Rtotal != null && __isset.rtotal) {
        field.Name = "rtotal";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Rtotal.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.inc_reliability) {
        field.Name = "inc_reliability";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Inc_reliability);
        oprot.WriteFieldEnd();
      }
      if (__isset.new_reliability) {
        field.Name = "new_reliability";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(New_reliability);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Talents != null && __isset.talents) {
        field.Name = "talents";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Talents.Count));
          foreach (TalentInfo _iter23 in Talents)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.force) {
        field.Name = "force";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Force);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildpointschange) {
        field.Name = "guildpointschange";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildpointschange);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildpointstotal) {
        field.Name = "guildpointstotal";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildpointstotal);
        oprot.WriteFieldEnd();
      }
      if (Appliedbuffs != null && __isset.appliedbuffs) {
        field.Name = "appliedbuffs";
        field.Type = TType.List;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Appliedbuffs.Count));
          foreach (int _iter24 in Appliedbuffs)
          {
            oprot.WriteI32(_iter24);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Leaverpointschange != null && __isset.leaverpointschange) {
        field.Name = "leaverpointschange";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        Leaverpointschange.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SessionAwardsInfo(");
      sb.Append("Auid: ");
      sb.Append(Auid);
      sb.Append(",Sessionpersistentid: ");
      sb.Append(Sessionpersistentid);
      sb.Append(",Nick: ");
      sb.Append(Nick);
      sb.Append(",Heroid: ");
      sb.Append(Heroid);
      sb.Append(",Rchange: ");
      sb.Append(Rchange== null ? "<null>" : Rchange.ToString());
      sb.Append(",Rtotal: ");
      sb.Append(Rtotal== null ? "<null>" : Rtotal.ToString());
      sb.Append(",Inc_reliability: ");
      sb.Append(Inc_reliability);
      sb.Append(",New_reliability: ");
      sb.Append(New_reliability);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Talents: ");
      sb.Append(Talents);
      sb.Append(",Force: ");
      sb.Append(Force);
      sb.Append(",Guildpointschange: ");
      sb.Append(Guildpointschange);
      sb.Append(",Guildpointstotal: ");
      sb.Append(Guildpointstotal);
      sb.Append(",Appliedbuffs: ");
      sb.Append(Appliedbuffs);
      sb.Append(",Leaverpointschange: ");
      sb.Append(Leaverpointschange== null ? "<null>" : Leaverpointschange.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
