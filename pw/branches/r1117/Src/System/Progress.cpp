#include "stdafx.h"
#include "Progress.h"

#include <System/get_tick_count.h>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NProgressHook
{
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const DWORD dwMaxAllowedMillisecondsBetweenSteps = 500;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SCallInfo
{
	string szFileName;
	int nLine;
	DWORD dwTime;

	SCallInfo() : nLine( 0 ), dwTime( GetTickCount() ) { }
	SCallInfo( const string &_szFileName, const int _nLine, const DWORD _dwTime )
		: szFileName( _szFileName ), nLine( _nLine ), dwTime( _dwTime ) { }
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static vector<SCallInfo> locks;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DebugLock( const string &szFileName, const int nLine )
{
	locks.push_back( SCallInfo( szFileName, nLine, GetTickCount() ) );
	//DebugTrace( "progress hook lock begin, level=%d:\n\t%s(%d)", locks.size(), szFileName.c_str(), nLine );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DebugUnLock( const string &, const int )
{
	NI_VERIFY( !locks.empty(), "wrong lock/unlock sequence", return );
	const SCallInfo lockStart = locks.back();
	locks.pop_back();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DebugStep( const string &szFileName, const int nLine )
{
	static SCallInfo previousStep;
	const DWORD dwTime = GetTickCount();
	//NI_ASSERT( dwTime - previousStep.dwTime <= dwMaxAllowedMillisecondsBetweenSteps, "Too long step" );
	
	previousStep.dwTime = dwTime;
	previousStep.szFileName = szFileName;
	previousStep.nLine = nLine;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BASIC_REGISTER_CLASS( IProgressHook );
