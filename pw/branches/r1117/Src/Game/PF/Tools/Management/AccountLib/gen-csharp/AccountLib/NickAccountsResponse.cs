/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace AccountLib
{

  [Serializable]
  public partial class NickAccountsResponse : TBase
  {
    private RequestResult _result;
    private List<AccountInfo> _foundAccounts;

    public RequestResult Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public List<AccountInfo> FoundAccounts
    {
      get
      {
        return _foundAccounts;
      }
      set
      {
        __isset.foundAccounts = true;
        this._foundAccounts = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool result;
      public bool foundAccounts;
    }

    public NickAccountsResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Result = (RequestResult)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                FoundAccounts = new List<AccountInfo>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  AccountInfo _elem10 = new AccountInfo();
                  _elem10 = new AccountInfo();
                  _elem10.Read(iprot);
                  FoundAccounts.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NickAccountsResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Result);
        oprot.WriteFieldEnd();
      }
      if (FoundAccounts != null && __isset.foundAccounts) {
        field.Name = "foundAccounts";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FoundAccounts.Count));
          foreach (AccountInfo _iter11 in FoundAccounts)
          {
            _iter11.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NickAccountsResponse(");
      sb.Append("Result: ");
      sb.Append(Result);
      sb.Append(",FoundAccounts: ");
      sb.Append(FoundAccounts);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
