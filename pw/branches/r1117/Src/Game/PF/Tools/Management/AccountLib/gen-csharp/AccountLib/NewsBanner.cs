/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NewsBanner : TBase
  {
    private int _persistentId;
    private string _buttonText;
    private string _windowCaption;
    private string _buttonUrl;
    private string _mainUrl;
    private string _tooltip;
    private string _mainUrlB;
    private string _LoginNetworks;
    private int _minLordLevel;
    private bool _hideIfViewed;
    private int _startTime;
    private int _endTime;
    private string _locale;
    private bool _enabled;
    private string _description;
    private string _extensionJson;

    public int PersistentId
    {
      get
      {
        return _persistentId;
      }
      set
      {
        __isset.persistentId = true;
        this._persistentId = value;
      }
    }

    public string ButtonText
    {
      get
      {
        return _buttonText;
      }
      set
      {
        __isset.buttonText = true;
        this._buttonText = value;
      }
    }

    public string WindowCaption
    {
      get
      {
        return _windowCaption;
      }
      set
      {
        __isset.windowCaption = true;
        this._windowCaption = value;
      }
    }

    public string ButtonUrl
    {
      get
      {
        return _buttonUrl;
      }
      set
      {
        __isset.buttonUrl = true;
        this._buttonUrl = value;
      }
    }

    public string MainUrl
    {
      get
      {
        return _mainUrl;
      }
      set
      {
        __isset.mainUrl = true;
        this._mainUrl = value;
      }
    }

    public string Tooltip
    {
      get
      {
        return _tooltip;
      }
      set
      {
        __isset.tooltip = true;
        this._tooltip = value;
      }
    }

    public string MainUrlB
    {
      get
      {
        return _mainUrlB;
      }
      set
      {
        __isset.mainUrlB = true;
        this._mainUrlB = value;
      }
    }

    public string LoginNetworks
    {
      get
      {
        return _LoginNetworks;
      }
      set
      {
        __isset.LoginNetworks = true;
        this._LoginNetworks = value;
      }
    }

    public int MinLordLevel
    {
      get
      {
        return _minLordLevel;
      }
      set
      {
        __isset.minLordLevel = true;
        this._minLordLevel = value;
      }
    }

    public bool HideIfViewed
    {
      get
      {
        return _hideIfViewed;
      }
      set
      {
        __isset.hideIfViewed = true;
        this._hideIfViewed = value;
      }
    }

    public int StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public int EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string ExtensionJson
    {
      get
      {
        return _extensionJson;
      }
      set
      {
        __isset.extensionJson = true;
        this._extensionJson = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool persistentId;
      public bool buttonText;
      public bool windowCaption;
      public bool buttonUrl;
      public bool mainUrl;
      public bool tooltip;
      public bool mainUrlB;
      public bool LoginNetworks;
      public bool minLordLevel;
      public bool hideIfViewed;
      public bool startTime;
      public bool endTime;
      public bool locale;
      public bool enabled;
      public bool description;
      public bool extensionJson;
    }

    public NewsBanner() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              PersistentId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ButtonText = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              WindowCaption = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ButtonUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              MainUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Tooltip = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              MainUrlB = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              LoginNetworks = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              MinLordLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              HideIfViewed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              StartTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              EndTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              Enabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              ExtensionJson = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewsBanner");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.persistentId) {
        field.Name = "persistentId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersistentId);
        oprot.WriteFieldEnd();
      }
      if (ButtonText != null && __isset.buttonText) {
        field.Name = "buttonText";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ButtonText);
        oprot.WriteFieldEnd();
      }
      if (WindowCaption != null && __isset.windowCaption) {
        field.Name = "windowCaption";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(WindowCaption);
        oprot.WriteFieldEnd();
      }
      if (ButtonUrl != null && __isset.buttonUrl) {
        field.Name = "buttonUrl";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ButtonUrl);
        oprot.WriteFieldEnd();
      }
      if (MainUrl != null && __isset.mainUrl) {
        field.Name = "mainUrl";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MainUrl);
        oprot.WriteFieldEnd();
      }
      if (Tooltip != null && __isset.tooltip) {
        field.Name = "tooltip";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Tooltip);
        oprot.WriteFieldEnd();
      }
      if (MainUrlB != null && __isset.mainUrlB) {
        field.Name = "mainUrlB";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MainUrlB);
        oprot.WriteFieldEnd();
      }
      if (LoginNetworks != null && __isset.LoginNetworks) {
        field.Name = "LoginNetworks";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginNetworks);
        oprot.WriteFieldEnd();
      }
      if (__isset.minLordLevel) {
        field.Name = "minLordLevel";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MinLordLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.hideIfViewed) {
        field.Name = "hideIfViewed";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HideIfViewed);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndTime);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (__isset.enabled) {
        field.Name = "enabled";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Enabled);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (ExtensionJson != null && __isset.extensionJson) {
        field.Name = "extensionJson";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtensionJson);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NewsBanner(");
      sb.Append("PersistentId: ");
      sb.Append(PersistentId);
      sb.Append(",ButtonText: ");
      sb.Append(ButtonText);
      sb.Append(",WindowCaption: ");
      sb.Append(WindowCaption);
      sb.Append(",ButtonUrl: ");
      sb.Append(ButtonUrl);
      sb.Append(",MainUrl: ");
      sb.Append(MainUrl);
      sb.Append(",Tooltip: ");
      sb.Append(Tooltip);
      sb.Append(",MainUrlB: ");
      sb.Append(MainUrlB);
      sb.Append(",LoginNetworks: ");
      sb.Append(LoginNetworks);
      sb.Append(",MinLordLevel: ");
      sb.Append(MinLordLevel);
      sb.Append(",HideIfViewed: ");
      sb.Append(HideIfViewed);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(",Enabled: ");
      sb.Append(Enabled);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",ExtensionJson: ");
      sb.Append(ExtensionJson);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
