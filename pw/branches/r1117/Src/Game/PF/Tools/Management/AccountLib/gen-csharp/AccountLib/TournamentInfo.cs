/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TournamentInfo : TBase
  {
    private int _Wins;
    private int _Losses;
    private long _LastGameTime;
    private TicketPriseState _TicketPriseState;
    private TicketState _State;
    private TicketBoughtType _TicketBoughtType;
    private int _MissedGames;
    private bool _IsSynchronized;

    public int Wins
    {
      get
      {
        return _Wins;
      }
      set
      {
        __isset.Wins = true;
        this._Wins = value;
      }
    }

    public int Losses
    {
      get
      {
        return _Losses;
      }
      set
      {
        __isset.Losses = true;
        this._Losses = value;
      }
    }

    public long LastGameTime
    {
      get
      {
        return _LastGameTime;
      }
      set
      {
        __isset.LastGameTime = true;
        this._LastGameTime = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TicketPriseState"/>
    /// </summary>
    public TicketPriseState TicketPriseState
    {
      get
      {
        return _TicketPriseState;
      }
      set
      {
        __isset.TicketPriseState = true;
        this._TicketPriseState = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TicketState"/>
    /// </summary>
    public TicketState State
    {
      get
      {
        return _State;
      }
      set
      {
        __isset.State = true;
        this._State = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TicketBoughtType"/>
    /// </summary>
    public TicketBoughtType TicketBoughtType
    {
      get
      {
        return _TicketBoughtType;
      }
      set
      {
        __isset.TicketBoughtType = true;
        this._TicketBoughtType = value;
      }
    }

    public int MissedGames
    {
      get
      {
        return _MissedGames;
      }
      set
      {
        __isset.MissedGames = true;
        this._MissedGames = value;
      }
    }

    public bool IsSynchronized
    {
      get
      {
        return _IsSynchronized;
      }
      set
      {
        __isset.IsSynchronized = true;
        this._IsSynchronized = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Wins;
      public bool Losses;
      public bool LastGameTime;
      public bool TicketPriseState;
      public bool State;
      public bool TicketBoughtType;
      public bool MissedGames;
      public bool IsSynchronized;
    }

    public TournamentInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Wins = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Losses = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              LastGameTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              TicketPriseState = (TicketPriseState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              State = (TicketState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              TicketBoughtType = (TicketBoughtType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              MissedGames = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              IsSynchronized = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TournamentInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Wins) {
        field.Name = "Wins";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Wins);
        oprot.WriteFieldEnd();
      }
      if (__isset.Losses) {
        field.Name = "Losses";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Losses);
        oprot.WriteFieldEnd();
      }
      if (__isset.LastGameTime) {
        field.Name = "LastGameTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastGameTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.TicketPriseState) {
        field.Name = "TicketPriseState";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TicketPriseState);
        oprot.WriteFieldEnd();
      }
      if (__isset.State) {
        field.Name = "State";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.TicketBoughtType) {
        field.Name = "TicketBoughtType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TicketBoughtType);
        oprot.WriteFieldEnd();
      }
      if (__isset.MissedGames) {
        field.Name = "MissedGames";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MissedGames);
        oprot.WriteFieldEnd();
      }
      if (__isset.IsSynchronized) {
        field.Name = "IsSynchronized";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSynchronized);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TournamentInfo(");
      sb.Append("Wins: ");
      sb.Append(Wins);
      sb.Append(",Losses: ");
      sb.Append(Losses);
      sb.Append(",LastGameTime: ");
      sb.Append(LastGameTime);
      sb.Append(",TicketPriseState: ");
      sb.Append(TicketPriseState);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",TicketBoughtType: ");
      sb.Append(TicketBoughtType);
      sb.Append(",MissedGames: ");
      sb.Append(MissedGames);
      sb.Append(",IsSynchronized: ");
      sb.Append(IsSynchronized);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
