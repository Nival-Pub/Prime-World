#include "stdafx.h"
#include "FastMath.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NMath
{

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ************************************************************************************************************************ //
// **
// ** fast trigonometry section
// **
// **
// **
// ************************************************************************************************************************ //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int N_SIN_TABLE_PERIOD = 512;
const float F_SIN_TABLE_MULT = N_SIN_TABLE_PERIOD / FP_2PI;
static const float fSinTable[ N_SIN_TABLE_PERIOD + 1 ] = 
{
	0, 0.0122715f, 0.0245412f, 0.0368072f, 0.0490677f, 0.0613207f, 0.0735646f, 0.0857973f, 
	0.0980171f, 0.110222f, 0.122411f, 0.134581f, 0.14673f, 0.158858f, 0.170962f, 0.18304f, 
	0.19509f, 0.207111f, 0.219101f, 0.231058f, 0.24298f, 0.254866f, 0.266713f, 0.27852f, 
	0.290285f, 0.302006f, 0.313682f, 0.32531f, 0.33689f, 0.348419f, 0.359895f, 0.371317f, 
	0.382683f, 0.393992f, 0.405241f, 0.41643f, 0.427555f, 0.438616f, 0.449611f, 0.460539f, 
	0.471397f, 0.482184f, 0.492898f, 0.503538f, 0.514103f, 0.52459f, 0.534998f, 0.545325f, 
	0.55557f, 0.565732f, 0.575808f, 0.585798f, 0.595699f, 0.605511f, 0.615232f, 0.62486f, 
	0.634393f, 0.643832f, 0.653173f, 0.662416f, 0.671559f, 0.680601f, 0.689541f, 0.698376f, 
	0.707107f, 0.715731f, 0.724247f, 0.732654f, 0.740951f, 0.749136f, 0.757209f, 0.765167f, 
	0.77301f, 0.780737f, 0.788346f, 0.795837f, 0.803208f, 0.810457f, 0.817585f, 0.824589f, 
	0.83147f, 0.838225f, 0.844854f, 0.851355f, 0.857729f, 0.863973f, 0.870087f, 0.87607f, 
	0.881921f, 0.88764f, 0.893224f, 0.898674f, 0.903989f, 0.909168f, 0.91421f, 0.919114f, 
	0.92388f, 0.928506f, 0.932993f, 0.937339f, 0.941544f, 0.945607f, 0.949528f, 0.953306f, 
	0.95694f, 0.960431f, 0.963776f, 0.966976f, 0.970031f, 0.97294f, 0.975702f, 0.978317f, 
	0.980785f, 0.983105f, 0.985278f, 0.987301f, 0.989177f, 0.990903f, 0.99248f, 0.993907f, 
	0.995185f, 0.996313f, 0.99729f, 0.998118f, 0.998795f, 0.999322f, 0.999699f, 0.999925f, 
	1, 0.999925f, 0.999699f, 0.999322f, 0.998795f, 0.998118f, 0.99729f, 0.996313f, 
	0.995185f, 0.993907f, 0.99248f, 0.990903f, 0.989177f, 0.987301f, 0.985278f, 0.983105f, 
	0.980785f, 0.978317f, 0.975702f, 0.97294f, 0.970031f, 0.966976f, 0.963776f, 0.960431f, 
	0.95694f, 0.953306f, 0.949528f, 0.945607f, 0.941544f, 0.937339f, 0.932993f, 0.928506f, 
	0.92388f, 0.919114f, 0.91421f, 0.909168f, 0.903989f, 0.898674f, 0.893224f, 0.88764f, 
	0.881921f, 0.87607f, 0.870087f, 0.863973f, 0.857729f, 0.851355f, 0.844854f, 0.838225f, 
	0.83147f, 0.824589f, 0.817585f, 0.810457f, 0.803208f, 0.795837f, 0.788346f, 0.780737f, 
	0.77301f, 0.765167f, 0.757209f, 0.749136f, 0.740951f, 0.732654f, 0.724247f, 0.715731f, 
	0.707107f, 0.698376f, 0.689541f, 0.680601f, 0.671559f, 0.662416f, 0.653173f, 0.643832f, 
	0.634393f, 0.624859f, 0.615232f, 0.605511f, 0.595699f, 0.585798f, 0.575808f, 0.565732f, 
	0.55557f, 0.545325f, 0.534997f, 0.52459f, 0.514103f, 0.503538f, 0.492898f, 0.482184f, 
	0.471397f, 0.460539f, 0.449611f, 0.438616f, 0.427555f, 0.416429f, 0.405241f, 0.393992f, 
	0.382683f, 0.371317f, 0.359895f, 0.348419f, 0.33689f, 0.32531f, 0.313682f, 0.302006f, 
	0.290285f, 0.27852f, 0.266713f, 0.254866f, 0.24298f, 0.231058f, 0.219101f, 0.207111f, 
	0.19509f, 0.18304f, 0.170962f, 0.158858f, 0.14673f, 0.134581f, 0.122411f, 0.110222f, 
	0.0980171f, 0.0857972f, 0.0735644f, 0.0613206f, 0.0490675f, 0.0368072f, 0.0245412f, 0.0122715f, 
	0, -0.0122717f, -0.0245414f, -0.0368074f, -0.0490677f, -0.0613208f, -0.0735646f, -0.0857974f, 
	-0.0980173f, -0.110222f, -0.122411f, -0.134581f, -0.14673f, -0.158858f, -0.170962f, -0.18304f, 
	-0.19509f, -0.207112f, -0.219101f, -0.231058f, -0.24298f, -0.254866f, -0.266713f, -0.27852f, 
	-0.290285f, -0.302006f, -0.313682f, -0.32531f, -0.33689f, -0.348419f, -0.359895f, -0.371317f, 
	-0.382683f, -0.393992f, -0.405241f, -0.41643f, -0.427555f, -0.438616f, -0.449612f, -0.460539f, 
	-0.471397f, -0.482184f, -0.492898f, -0.503538f, -0.514103f, -0.52459f, -0.534998f, -0.545325f, 
	-0.55557f, -0.565732f, -0.575808f, -0.585798f, -0.595699f, -0.605511f, -0.615232f, -0.62486f, 
	-0.634393f, -0.643832f, -0.653173f, -0.662416f, -0.671559f, -0.680601f, -0.689541f, -0.698376f, 
	-0.707107f, -0.715731f, -0.724247f, -0.732654f, -0.740951f, -0.749136f, -0.757209f, -0.765167f, 
	-0.77301f, -0.780737f, -0.788346f, -0.795837f, -0.803208f, -0.810457f, -0.817585f, -0.824589f, 
	-0.83147f, -0.838225f, -0.844854f, -0.851355f, -0.857729f, -0.863973f, -0.870087f, -0.87607f, 
	-0.881921f, -0.88764f, -0.893224f, -0.898675f, -0.903989f, -0.909168f, -0.91421f, -0.919114f, 
	-0.92388f, -0.928506f, -0.932993f, -0.937339f, -0.941544f, -0.945607f, -0.949528f, -0.953306f, 
	-0.95694f, -0.960431f, -0.963776f, -0.966977f, -0.970031f, -0.97294f, -0.975702f, -0.978317f, 
	-0.980785f, -0.983105f, -0.985278f, -0.987301f, -0.989177f, -0.990903f, -0.99248f, -0.993907f, 
	-0.995185f, -0.996313f, -0.99729f, -0.998118f, -0.998795f, -0.999322f, -0.999699f, -0.999925f, 
	-1, -0.999925f, -0.999699f, -0.999322f, -0.998795f, -0.998118f, -0.99729f, -0.996313f, 
	-0.995185f, -0.993907f, -0.99248f, -0.990903f, -0.989177f, -0.987301f, -0.985278f, -0.983105f, 
	-0.980785f, -0.978317f, -0.975702f, -0.97294f, -0.970031f, -0.966976f, -0.963776f, -0.96043f, 
	-0.95694f, -0.953306f, -0.949528f, -0.945607f, -0.941544f, -0.937339f, -0.932993f, -0.928506f, 
	-0.923879f, -0.919114f, -0.91421f, -0.909168f, -0.903989f, -0.898674f, -0.893224f, -0.88764f, 
	-0.881921f, -0.87607f, -0.870087f, -0.863973f, -0.857729f, -0.851355f, -0.844853f, -0.838225f, 
	-0.831469f, -0.824589f, -0.817585f, -0.810457f, -0.803208f, -0.795837f, -0.788346f, -0.780737f, 
	-0.77301f, -0.765167f, -0.757209f, -0.749136f, -0.740951f, -0.732654f, -0.724247f, -0.715731f, 
	-0.707107f, -0.698376f, -0.689541f, -0.680601f, -0.671559f, -0.662416f, -0.653173f, -0.643831f, 
	-0.634393f, -0.624859f, -0.615231f, -0.605511f, -0.595699f, -0.585798f, -0.575808f, -0.565732f, 
	-0.55557f, -0.545325f, -0.534998f, -0.52459f, -0.514103f, -0.503538f, -0.492898f, -0.482184f, 
	-0.471397f, -0.460538f, -0.449611f, -0.438616f, -0.427555f, -0.416429f, -0.405241f, -0.393992f, 
	-0.382683f, -0.371317f, -0.359895f, -0.348419f, -0.33689f, -0.32531f, -0.313682f, -0.302006f, 
	-0.290284f, -0.278519f, -0.266712f, -0.254865f, -0.24298f, -0.231058f, -0.219101f, -0.207111f, 
	-0.19509f, -0.18304f, -0.170962f, -0.158858f, -0.14673f, -0.13458f, -0.12241f, -0.110222f, 
	-0.0980168f, -0.0857969f, -0.0735646f, -0.0613207f, -0.0490676f, -0.0368072f, -0.0245411f, -0.0122714f, 
	0 
};
// CKO 1e-5
float Sin( float fAngle )
{
	float fA = fAngle * F_SIN_TABLE_MULT;
	int n = Float2Int(fA - 0.5f);
	float fResidual = fA - n;
	n &= N_SIN_TABLE_PERIOD - 1;
	return fSinTable[n] + ( fSinTable[n+1] - fSinTable[n] ) * fResidual;
}

float FastSin( float fAngle )
{
	float fA = fAngle * F_SIN_TABLE_MULT;
	int n = Float2Int( fA - 0.5f );
	float fResidual = fA - n;
	n &= N_SIN_TABLE_PERIOD - 1;
	return fSinTable[n] + ( fSinTable[n+1] - fSinTable[n] ) * fResidual;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
static const float fASinTable[ N_SIN_TABLE_PERIOD + 2 ] = 
{
	0, 0.00195313f, 0.00390626f, 0.00585941f, 0.00781258f, 0.00976578f, 0.011719f, 0.0136723f, 
	0.0156256f, 0.017579f, 0.0195325f, 0.021486f, 0.0234396f, 0.0253934f, 0.0273472f, 0.0293011f, 
	0.0312551f, 0.0332092f, 0.0351635f, 0.0371179f, 0.0390724f, 0.0410271f, 0.042982f, 0.044937f, 
	0.0468922f, 0.0488475f, 0.0508031f, 0.0527588f, 0.0547148f, 0.056671f, 0.0586273f, 0.0605839f, 
	0.0625408f, 0.0644978f, 0.0664552f, 0.0684127f, 0.0703706f, 0.0723287f, 0.0742871f, 0.0762457f, 
	0.0782047f, 0.080164f, 0.0821235f, 0.0840834f, 0.0860436f, 0.0880042f, 0.0899651f, 0.0919263f, 
	0.0938879f, 0.0958498f, 0.0978121f, 0.0997748f, 0.101738f, 0.103701f, 0.105665f, 0.10763f, 
	0.109594f, 0.111559f, 0.113525f, 0.115491f, 0.117457f, 0.119424f, 0.121392f, 0.12336f, 
	0.125328f, 0.127297f, 0.129266f, 0.131236f, 0.133206f, 0.135177f, 0.137148f, 0.13912f, 
	0.141093f, 0.143066f, 0.145039f, 0.147013f, 0.148988f, 0.150963f, 0.152939f, 0.154916f, 
	0.156893f, 0.158871f, 0.160849f, 0.162828f, 0.164808f, 0.166788f, 0.168769f, 0.17075f, 
	0.172733f, 0.174716f, 0.176699f, 0.178684f, 0.180669f, 0.182655f, 0.184641f, 0.186628f, 
	0.188616f, 0.190605f, 0.192595f, 0.194585f, 0.196576f, 0.198568f, 0.200561f, 0.202554f, 
	0.204548f, 0.206544f, 0.208539f, 0.210536f, 0.212534f, 0.214532f, 0.216532f, 0.218532f, 
	0.220533f, 0.222535f, 0.224538f, 0.226542f, 0.228547f, 0.230553f, 0.232559f, 0.234567f, 
	0.236576f, 0.238585f, 0.240596f, 0.242607f, 0.24462f, 0.246633f, 0.248648f, 0.250664f, 
	0.25268f, 0.254698f, 0.256717f, 0.258737f, 0.260757f, 0.262779f, 0.264803f, 0.266827f, 
	0.268852f, 0.270879f, 0.272906f, 0.274935f, 0.276965f, 0.278996f, 0.281028f, 0.283062f, 
	0.285096f, 0.287132f, 0.289169f, 0.291208f, 0.293247f, 0.295288f, 0.29733f, 0.299374f, 
	0.301418f, 0.303464f, 0.305512f, 0.30756f, 0.30961f, 0.311662f, 0.313714f, 0.315768f, 
	0.317824f, 0.31988f, 0.321939f, 0.323998f, 0.326059f, 0.328122f, 0.330186f, 0.332251f, 
	0.334318f, 0.336386f, 0.338456f, 0.340528f, 0.3426f, 0.344675f, 0.346751f, 0.348828f, 
	0.350907f, 0.352988f, 0.35507f, 0.357154f, 0.35924f, 0.361327f, 0.363416f, 0.365506f, 
	0.367598f, 0.369692f, 0.371787f, 0.373885f, 0.375984f, 0.378084f, 0.380187f, 0.382291f, 
	0.384397f, 0.386505f, 0.388614f, 0.390726f, 0.392839f, 0.394954f, 0.397071f, 0.39919f, 
	0.40131f, 0.403433f, 0.405558f, 0.407684f, 0.409813f, 0.411943f, 0.414076f, 0.41621f, 
	0.418346f, 0.420485f, 0.422625f, 0.424768f, 0.426913f, 0.429059f, 0.431208f, 0.433359f, 
	0.435512f, 0.437668f, 0.439825f, 0.441985f, 0.444147f, 0.446311f, 0.448477f, 0.450646f, 
	0.452817f, 0.45499f, 0.457165f, 0.459343f, 0.461523f, 0.463706f, 0.465891f, 0.468078f, 
	0.470268f, 0.47246f, 0.474655f, 0.476852f, 0.479051f, 0.481253f, 0.483458f, 0.485665f, 
	0.487875f, 0.490088f, 0.492303f, 0.49452f, 0.49674f, 0.498963f, 0.501189f, 0.503417f, 
	0.505649f, 0.507883f, 0.510119f, 0.512359f, 0.514601f, 0.516846f, 0.519094f, 0.521345f, 
	0.523599f, 0.525856f, 0.528115f, 0.530378f, 0.532644f, 0.534912f, 0.537184f, 0.539459f, 
	0.541737f, 0.544018f, 0.546302f, 0.54859f, 0.55088f, 0.553174f, 0.555471f, 0.557772f, 
	0.560075f, 0.562382f, 0.564693f, 0.567006f, 0.569324f, 0.571644f, 0.573968f, 0.576296f, 
	0.578627f, 0.580962f, 0.5833f, 0.585642f, 0.587987f, 0.590337f, 0.592689f, 0.595046f, 
	0.597406f, 0.599771f, 0.602139f, 0.60451f, 0.606886f, 0.609266f, 0.61165f, 0.614037f, 
	0.616429f, 0.618825f, 0.621224f, 0.623628f, 0.626036f, 0.628449f, 0.630865f, 0.633286f, 
	0.635711f, 0.638141f, 0.640575f, 0.643013f, 0.645456f, 0.647903f, 0.650355f, 0.652811f, 
	0.655272f, 0.657738f, 0.660208f, 0.662683f, 0.665163f, 0.667648f, 0.670137f, 0.672632f, 
	0.675132f, 0.677636f, 0.680146f, 0.68266f, 0.68518f, 0.687705f, 0.690235f, 0.692771f, 
	0.695312f, 0.697858f, 0.70041f, 0.702967f, 0.70553f, 0.708099f, 0.710673f, 0.713252f, 
	0.715838f, 0.718429f, 0.721027f, 0.72363f, 0.726239f, 0.728855f, 0.731476f, 0.734104f, 
	0.736737f, 0.739378f, 0.742024f, 0.744677f, 0.747337f, 0.750003f, 0.752675f, 0.755355f, 
	0.758041f, 0.760734f, 0.763434f, 0.766141f, 0.768855f, 0.771576f, 0.774304f, 0.77704f, 
	0.779783f, 0.782533f, 0.785291f, 0.788057f, 0.79083f, 0.793612f, 0.796401f, 0.799198f, 
	0.802003f, 0.804816f, 0.807638f, 0.810467f, 0.813306f, 0.816153f, 0.819008f, 0.821872f, 
	0.824745f, 0.827627f, 0.830519f, 0.833419f, 0.836328f, 0.839247f, 0.842176f, 0.845114f, 
	0.848062f, 0.85102f, 0.853988f, 0.856966f, 0.859954f, 0.862953f, 0.865962f, 0.868982f, 
	0.872012f, 0.875054f, 0.878107f, 0.881171f, 0.884246f, 0.887333f, 0.890432f, 0.893543f, 
	0.896666f, 0.899801f, 0.902948f, 0.906108f, 0.909281f, 0.912467f, 0.915666f, 0.918879f, 
	0.922105f, 0.925345f, 0.928598f, 0.931866f, 0.935149f, 0.938446f, 0.941758f, 0.945085f, 
	0.948428f, 0.951786f, 0.95516f, 0.95855f, 0.961957f, 0.965381f, 0.968821f, 0.972279f, 
	0.975754f, 0.979248f, 0.982759f, 0.98629f, 0.989839f, 0.993407f, 0.996995f, 1.0006f, 
	1.00423f, 1.00788f, 1.01155f, 1.01524f, 1.01896f, 1.0227f, 1.02646f, 1.03024f, 
	1.03405f, 1.03788f, 1.04174f, 1.04562f, 1.04953f, 1.05346f, 1.05743f, 1.06142f, 
	1.06544f, 1.06948f, 1.07356f, 1.07767f, 1.08182f, 1.08599f, 1.0902f, 1.09444f, 
	1.09872f, 1.10303f, 1.10738f, 1.11177f, 1.1162f, 1.12067f, 1.12518f, 1.12973f, 
	1.13433f, 1.13897f, 1.14366f, 1.1484f, 1.15319f, 1.15803f, 1.16293f, 1.16788f, 
	1.17289f, 1.17796f, 1.1831f, 1.1883f, 1.19356f, 1.1989f, 1.20431f, 1.2098f, 
	1.21538f, 1.22103f, 1.22678f, 1.23261f, 1.23855f, 1.24459f, 1.25074f, 1.25701f, 
	1.2634f, 1.26992f, 1.27659f, 1.2834f, 1.29037f, 1.29752f, 1.30485f, 1.31238f, 
	1.32014f, 1.32814f, 1.33641f, 1.34497f, 1.35386f, 1.36313f, 1.37283f, 1.38302f, 
	1.39379f, 1.40525f, 1.41755f, 1.43093f, 1.44571f, 1.46249f, 1.48238f, 1.50829f, 
	1.5708f, 1.5708f, 
};
// CKO 0.0005
float ASin( float f )
{
	if ( f < 0 )
		return -ASin( -f );
	float fA = f * N_SIN_TABLE_PERIOD;
	int n = Float2Int(fA - 0.5f);
	float fResidual = fA - n;
	if ( n > N_SIN_TABLE_PERIOD )
		n = N_SIN_TABLE_PERIOD;
	n &= N_SIN_TABLE_PERIOD - 1;
	return fASinTable[n] + ( fASinTable[n+1] - fASinTable[n] ) * fResidual;
}

float FastASin( float f )
{
	if ( f < 0 )
		return -ASin( -f );
	float fA = f * N_SIN_TABLE_PERIOD;
	int n = Float2Int( fA - 0.5f );
	float fResidual = fA - n;
	if ( n > N_SIN_TABLE_PERIOD )
		n = N_SIN_TABLE_PERIOD;
	n &= N_SIN_TABLE_PERIOD - 1;
	return fASinTable[n] + ( fASinTable[n+1] - fASinTable[n] ) * fResidual;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ************************************************************************************************************************ //
// **
// ** fast SQRT
// **
// **
// **
// ************************************************************************************************************************ //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static unsigned int gs_FastSqrtTable[0x10000];	// declare table of square roots 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
union UFastSqrt
{
	float f;
	unsigned int i;
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CalcSqrt( double val )
{
	double _min = 0.0;
	double _max = val + 1.0;

	for( int i = 0; i < 128; ++i )
	{
		double d = ( _min + _max ) * 0.5;
		if( d * d < val )
		{
			_min = d;
		}
		else
		{
			_max = d;
		}
	}

	return _min;
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static struct SFastMathInit
{
	SFastMathInit()
	{
		UFastSqrt s;
		
		for ( unsigned int i = 0; i <= 0x7FFF; ++i )
		{
			
			// Build a float with the bit pattern i as mantissa
			//	and an exponent of 0, stored as 127
			
			s.i = (i << 8) | (0x7F << 23);
			//ASSERT( fabs( CalcSqrt(s.f) - sqrt(s.f) ) < 0.0000000001 );
			s.f = (float)CalcSqrt(s.f);
			
			// Take the square root then strip the first 7 bits of
			//	the mantissa into the table
			
			gs_FastSqrtTable[i + 0x8000] = (s.i & 0x7FFFFF);
			
			// Repeat the process, this time with an exponent of 1, 
			//	stored as 128
			
			s.i = (i << 8) | (0x80 << 23);
			//ASSERT( fabs( CalcSqrt(s.f) - sqrt(s.f) ) < 0.0000000001 );
			s.f = (float)CalcSqrt(s.f);

			gs_FastSqrtTable[i] = (s.i & 0x7FFFFF);
		}
	}
} performSqrtInit;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float Sqrt( float n )
{
	if ( FP_BITS(n) == 0 )
		return 0.0f;								 // check for square root of 0
	
	FP_BITS(n) = gs_FastSqrtTable[(FP_BITS(n) >> 8) & 0xFFFF] | ((((FP_BITS(n) - 0x3F800000) >> 1) + 0x3F800000) & 0x7F800000);
	
	return n;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
