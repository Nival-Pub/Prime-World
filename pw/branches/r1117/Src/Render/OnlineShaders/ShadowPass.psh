#include "_commonPostProcess.h"

sampler depthMap : register(s0);
sampler shadowMap : register(s1);

float4 screenScaleOffset : register( SCREEN_TO_TEXTURE );
float4 uvScaleOffset : register( PSHADER_LOCALCONST0 );
float4 shadowColor : register( PSHADER_LOCALCONST1 );
float4 params : register( PSHADER_LOCALCONST2 ); // size, 1/size, isMultiply, --
float4 range : register( PSHADER_LOCALCONST3 ); // fadeMUL, fadeADD, --, --
float4x4 ViewToLightSpace : register( PSHADER_LOCALCONST4 ); // ViewInv * LightViewProj


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float IsInShadow(float3 pixel, float2 offset)
{
  return pixel.z > tex2D(shadowMap, pixel.xy + offset);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float ComputeShadow(float3 pixel)
{
  // no shadows for farthest pixels
  if (pixel.z > 1.0)
    return 0.0f;

  // named params
  float width = params.x;
  float texel = params.y;

  // split coordinates
  float2 whole;
  float2 fraction = modf(pixel.xy * width - 0.5, whole);
  pixel.xy = whole * texel;

  // sample the anchor point
  float shade = IsInShadow(pixel, 0);

// #ifdef SHADOW_PCF

  // supersample the buffer (PCF = Percentage Closer Filtering)
  float shadeQ[3];
  shadeQ[0] = IsInShadow(pixel, float2(texel,     0));
  shadeQ[1] = IsInShadow(pixel, float2(    0, texel));
  shadeQ[2] = IsInShadow(pixel, float2(texel, texel));

  // perform bilinear interpolation
  shade = lerp(
    lerp(shade,     shadeQ[0], fraction.x),
    lerp(shadeQ[1], shadeQ[2], fraction.x), fraction.y
  );

// #endif // SHADOW_PCF

  return shade;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 PS_main(VS_OUTPUT Input, float4 PixelPos : VPOS ) : COLOR
{
  // restore position in View Space
  float z = tex2D(depthMap, PixelPos.xy * screenScaleOffset.xy + screenScaleOffset.zw ).r;
  float2 xy = (Input.Texcoord * uvScaleOffset.xy + uvScaleOffset.zw) * z;
  float4 PositionVS = float4(xy, z, 1);

  // convert to shadow coordinates
  float4 PositionLS = mul(PositionVS, ViewToLightSpace);
  PositionLS.xyz /= PositionLS.w;
  float4 halfScaleOffset = float4(0.5, -0.5, 1.0, -0.0008);
  float3 pixel = PositionLS.xyz * halfScaleOffset.xyz + halfScaleOffset.xxw;

// smirnov [2009/02/02]: useless, because fxc puts this in the end of the compiled shader (bug or feature?)
//  // skip pixels outside of light frustum
//  clip(min(pixel, 1 - pixel));

  float alpha = ComputeShadow(pixel) * shadowColor.a;

  // fade in the distance
  alpha *= saturate(z * range.x + range.y);

  // select between multiplicative and blended shadows
  float3 color = (params.z == 0) ? shadowColor : lerp(1, shadowColor, alpha);
  return float4(color, alpha);
}
