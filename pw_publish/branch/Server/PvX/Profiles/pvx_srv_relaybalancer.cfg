//============================================================================
// Relay Balancer service configuration file
//============================================================================

//----------------------------------------------------------------------------
//  rb_relay_allocation_mode : режим аллокации релеев, - сколько релеев выделять на 1го пользователя
//  primary_relays_only - выделять всегда 1 релей (primary релей - релей с пустой rs2_service_role)
//  secondary_relays_optional - выделять по возможности 2 релея (primary + secondary; secondary relay - см. rs2_service_role в pvx_srv_relay.cfg)
//                              Если нет secondary релея, выделяется только primary релей
//  secondary_relays_mandatory - выделять 2 релея, если нет доступного secondary релея - аллокация релея фейлится
//  В случае наличия secondary релея, primary релей используется для только работы с gamesvc, 
//  secondary релей используется для работы с остальными сервисами (lobby, gamestat, chat)
//  secondary_relays_optional - значение по умолчанию
//  rb_relay_allocation_mode secondary_relays_mandatory

//----------------------------------------------------------------------------
//  rb_user_softlimit_default : дефолтное значение для soft ограничения на кол-во пользователей на 1 инстанс relay service (для всех ролей)
//  250 - значение по умолчанию
//  rb_user_softlimit_default 250

//----------------------------------------------------------------------------
//  rb_user_hardlimit_default : дефолтное значение для hard ограничения на кол-во пользователей на 1 инстанс relay service (для всех ролей)
//  500 - значение по умолчанию
//  rb_user_hardlimit_default 500

//----------------------------------------------------------------------------
//  rb_relay_role_user_limit : команда для задания ограничения по кол-ву пользователей на 1 релей с определенной ролью
//  Формат: rb_relay_role_user_limit <svcrole> <softuserlimit> (<harduserlimit>)
//  Параметр <harduserlimit> опционален, - если не указан то = <softuserlimit>
//  (1) Если команда для роли не задана, то soft/hard ограничение для хоста соотв. = rb_user_softlimit_default/rb_user_hardlimit_default.
//  Например, 
//  rb_relay_role_user_limit "" 150 300

//----------------------------------------------------------------------------
//  rb_incoming_client_notify_timeout : таймаут на получение подтвеждения от relay,
//  что  relay ждет пользователя. Если в течении таймаута не получаем от relay
//  подтверждения, то аллокация relay для пользователя фейлится
//  30 секунд - значение по умолчанию
//  rb_incoming_client_notify_timeout 0

//----------------------------------------------------------------------------
//  rb_host_user_distribution_accuracy : гранулярность распределения пользователей по хостам с relay'ями
//  Т.е. нагрузка на хосты будет увеличиваться по 50 пользователей
//  После того как кол-во пользователей обслуживаемых 1м relay-хостом станет больше чем 50 на 2м relay-хосте
//  последующие пользователи будут заходить на 2й relay-хост
//  50 - значение по умолчанию
//  rb_host_user_distribution_accuracy 1

//----------------------------------------------------------------------------
//  rb_relay_host_user_soft_limit_default : soft ограничение по кол-ву пользователей на 1 машину с релеями по умолчанию
//  0 - значение по умолчанию (ограничения нет)
//  rb_relay_host_user_soft_limit_default 0

//----------------------------------------------------------------------------
//  rb_relay_host_user_hard_limit_default : hard ограничение по кол-ву пользователей на 1 машину с релеями по умолчанию
//  0 - значение по умолчанию (ограничения нет)
//  rb_relay_host_user_hard_limit_default 0

//----------------------------------------------------------------------------
//  rb_relay_host_user_limit : команда для задания ограничения по кол-ву пользователей на машину с релеями
//  Формат: rb_relay_host_user_limit <host_external_ip> <softuserlimit> (<harduserlimit>)
//  Параметр <harduserlimit> опционален, - если не указан то = <softuserlimit>
//  (1)Если команда для хоста не задана, то soft/hard ограничение для хоста соотв. = rb_relay_host_user_soft_limit_default/rb_relay_host_user_hard_limit_default.
//  (1) и rb_relay_host_user_soft_limit_default = 0, то softlimit хоста вычисляется как <кол-во доступных relay'ев>*rb_user_softlimit.
//  Аналогично для hardlimit'а

//----------------------------------------------------------------------------
//  rb_load_set_size : кол-во релеев используемых в балансировке relaybalancer'ом (нагружаемый набор)
//  Если кол-во релеев превышает rb_load_set_size, то релеи попадают в резервный набор. 
//  Релей из резервного набора может попасть в нагрузочный набор, например, если релей из нагрузочного набора закрыли(упал) или
//  кол-во последовательно НЕпришедших пользователей на релей превысило rb_users_connect_timeout_expired_threshold
//  0 - значение по умолчанию (все запущенные релеи на машине входят в нагрузочный набор, резервный набор всегда пустой)
//  rb_load_set_size 0

//----------------------------------------------------------------------------
//  rb_users_connect_timeout_expired_threshold : ограничение на кол-во последовательно НЕпришедших пользователей на релей после логина
//  Если счетчик на relay превысил данный threshold, то релей будет убран из нагрузочного набора.
//  После, если нагрузочный набор можно пополнить из резервного набора, то из резервного набора будет взять релей вместо убранного,
//  а релей превысивший ограничение будет помещен в конец резервного набора
//  Если же нагрузочный набор нельзя пополнить из резервного, то превысивший ограничение релей будет помещен в конец нагрузочного набора
//  При помещении релея в нагрузочный набор, счетчик кол-ва последовательно НЕпришедших пользователей для него сбрасывается
//  100 - значение по умолчанию
//  0 - отключить ограничение
//  rb_users_connect_timeout_expired_threshold 100

//----------------------------------------------------------------------------
//  rb_relay_allocation_failure_threshold : threshold для фейлов возникающих при аллокации
//  Если последовательно аллокация пользователя зафейлилась для определеного релея >= rb_relay_allocation_failure_threshold раз,
//  то закрывается интрефейс с этим релеем. Т.о. релей переводится в состояние "offline" (отсутствует внутренняя связь с ним по rpc).
//  На релеи в состоянии "offline" направление пользователей не производится (см. rb_offline_relay_in_load_set_timeout)
//  0 - не учитывать фейлы аллокаций
//  5 - значение по умолчанию
//  rb_relay_allocation_failure_threshold 5

//----------------------------------------------------------------------------
//  rb_offline_relay_in_load_set_timeout : время (в секундах), в течении которого релей может находится в состоянии "offline", и при этом находится в нагрузочном наборе
//  Фактически это время в течении которого relaybalancer пытается восстановить rpc связь с relay'ем, пока релей учитывается в нагрузочном наборе
//  Если в течении таймаута не смогли восстановить rpc интерфейс с релеем, то отправляем релей в резервный набор
//  0 - отключить таймаут
//  30 - значение по умолчанию
//  rb_offline_relay_in_load_set_timeout 30

exec pvx_srv_custom_relaybalancer.cfg global
