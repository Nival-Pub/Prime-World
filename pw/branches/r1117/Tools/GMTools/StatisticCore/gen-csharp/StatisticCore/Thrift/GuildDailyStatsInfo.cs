/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildDailyStatsInfo : TBase
  {
    private long _guildid;
    private int _guildrating;
    private int _guildratingtoday;
    private int _guildpoints;
    private int _guildrank;
    private int _timestamp;
    private List<GuildDailyStatsVassalInfo> _vassals;
    private List<GuildDailyStatsSuggestedInfo> _suggested;

    public long Guildid
    {
      get
      {
        return _guildid;
      }
      set
      {
        __isset.guildid = true;
        this._guildid = value;
      }
    }

    public int Guildrating
    {
      get
      {
        return _guildrating;
      }
      set
      {
        __isset.guildrating = true;
        this._guildrating = value;
      }
    }

    public int Guildratingtoday
    {
      get
      {
        return _guildratingtoday;
      }
      set
      {
        __isset.guildratingtoday = true;
        this._guildratingtoday = value;
      }
    }

    public int Guildpoints
    {
      get
      {
        return _guildpoints;
      }
      set
      {
        __isset.guildpoints = true;
        this._guildpoints = value;
      }
    }

    public int Guildrank
    {
      get
      {
        return _guildrank;
      }
      set
      {
        __isset.guildrank = true;
        this._guildrank = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public List<GuildDailyStatsVassalInfo> Vassals
    {
      get
      {
        return _vassals;
      }
      set
      {
        __isset.vassals = true;
        this._vassals = value;
      }
    }

    public List<GuildDailyStatsSuggestedInfo> Suggested
    {
      get
      {
        return _suggested;
      }
      set
      {
        __isset.suggested = true;
        this._suggested = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guildid;
      public bool guildrating;
      public bool guildratingtoday;
      public bool guildpoints;
      public bool guildrank;
      public bool timestamp;
      public bool vassals;
      public bool suggested;
    }

    public GuildDailyStatsInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Guildid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Guildrating = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Guildratingtoday = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Guildpoints = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Guildrank = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Vassals = new List<GuildDailyStatsVassalInfo>();
                TList _list29 = iprot.ReadListBegin();
                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  GuildDailyStatsVassalInfo _elem31 = new GuildDailyStatsVassalInfo();
                  _elem31 = new GuildDailyStatsVassalInfo();
                  _elem31.Read(iprot);
                  Vassals.Add(_elem31);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                Suggested = new List<GuildDailyStatsSuggestedInfo>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  GuildDailyStatsSuggestedInfo _elem34 = new GuildDailyStatsSuggestedInfo();
                  _elem34 = new GuildDailyStatsSuggestedInfo();
                  _elem34.Read(iprot);
                  Suggested.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildDailyStatsInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.guildid) {
        field.Name = "guildid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Guildid);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildrating) {
        field.Name = "guildrating";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildrating);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildratingtoday) {
        field.Name = "guildratingtoday";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildratingtoday);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildpoints) {
        field.Name = "guildpoints";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildpoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildrank) {
        field.Name = "guildrank";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Guildrank);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Vassals != null && __isset.vassals) {
        field.Name = "vassals";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Vassals.Count));
          foreach (GuildDailyStatsVassalInfo _iter35 in Vassals)
          {
            _iter35.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Suggested != null && __isset.suggested) {
        field.Name = "suggested";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Suggested.Count));
          foreach (GuildDailyStatsSuggestedInfo _iter36 in Suggested)
          {
            _iter36.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildDailyStatsInfo(");
      sb.Append("Guildid: ");
      sb.Append(Guildid);
      sb.Append(",Guildrating: ");
      sb.Append(Guildrating);
      sb.Append(",Guildratingtoday: ");
      sb.Append(Guildratingtoday);
      sb.Append(",Guildpoints: ");
      sb.Append(Guildpoints);
      sb.Append(",Guildrank: ");
      sb.Append(Guildrank);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Vassals: ");
      sb.Append(Vassals);
      sb.Append(",Suggested: ");
      sb.Append(Suggested);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
