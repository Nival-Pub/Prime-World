/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeroInfo : TBase
  {
    private int _heroClassId;
    private long _heroInstanceId;
    private int _experience;
    private double _rating;
    private int _epicWins;

    public int HeroClassId
    {
      get
      {
        return _heroClassId;
      }
      set
      {
        __isset.heroClassId = true;
        this._heroClassId = value;
      }
    }

    public long HeroInstanceId
    {
      get
      {
        return _heroInstanceId;
      }
      set
      {
        __isset.heroInstanceId = true;
        this._heroInstanceId = value;
      }
    }

    public int Experience
    {
      get
      {
        return _experience;
      }
      set
      {
        __isset.experience = true;
        this._experience = value;
      }
    }

    public double Rating
    {
      get
      {
        return _rating;
      }
      set
      {
        __isset.rating = true;
        this._rating = value;
      }
    }

    public int EpicWins
    {
      get
      {
        return _epicWins;
      }
      set
      {
        __isset.epicWins = true;
        this._epicWins = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool heroClassId;
      public bool heroInstanceId;
      public bool experience;
      public bool rating;
      public bool epicWins;
    }

    public HeroInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              HeroClassId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              HeroInstanceId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Experience = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Rating = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              EpicWins = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HeroInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.heroClassId) {
        field.Name = "heroClassId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HeroClassId);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroInstanceId) {
        field.Name = "heroInstanceId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(HeroInstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.experience) {
        field.Name = "experience";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Experience);
        oprot.WriteFieldEnd();
      }
      if (__isset.rating) {
        field.Name = "rating";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Rating);
        oprot.WriteFieldEnd();
      }
      if (__isset.epicWins) {
        field.Name = "epicWins";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EpicWins);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HeroInfo(");
      sb.Append("HeroClassId: ");
      sb.Append(HeroClassId);
      sb.Append(",HeroInstanceId: ");
      sb.Append(HeroInstanceId);
      sb.Append(",Experience: ");
      sb.Append(Experience);
      sb.Append(",Rating: ");
      sb.Append(Rating);
      sb.Append(",EpicWins: ");
      sb.Append(EpicWins);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
