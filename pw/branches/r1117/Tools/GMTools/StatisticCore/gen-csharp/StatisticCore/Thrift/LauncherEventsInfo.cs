/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LauncherEventsInfo : TBase
  {
    private string _muid;
    private long _auid;
    private long _bitmask;
    private int _timestamp;
    private string _locale;

    public string Muid
    {
      get
      {
        return _muid;
      }
      set
      {
        __isset.muid = true;
        this._muid = value;
      }
    }

    public long Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public long Bitmask
    {
      get
      {
        return _bitmask;
      }
      set
      {
        __isset.bitmask = true;
        this._bitmask = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool muid;
      public bool auid;
      public bool bitmask;
      public bool timestamp;
      public bool locale;
    }

    public LauncherEventsInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Muid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Auid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Bitmask = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LauncherEventsInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Muid != null && __isset.muid) {
        field.Name = "muid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Muid);
        oprot.WriteFieldEnd();
      }
      if (__isset.auid) {
        field.Name = "auid";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.bitmask) {
        field.Name = "bitmask";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Bitmask);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LauncherEventsInfo(");
      sb.Append("Muid: ");
      sb.Append(Muid);
      sb.Append(",Auid: ");
      sb.Append(Auid);
      sb.Append(",Bitmask: ");
      sb.Append(Bitmask);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
