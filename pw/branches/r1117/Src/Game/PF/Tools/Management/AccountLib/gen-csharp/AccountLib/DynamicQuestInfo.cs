/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DynamicQuestInfo : TBase
  {
    private string _QuestText;
    private string _Locale;
    private int _Index;
    private int _PullId;

    public string QuestText
    {
      get
      {
        return _QuestText;
      }
      set
      {
        __isset.QuestText = true;
        this._QuestText = value;
      }
    }

    public string Locale
    {
      get
      {
        return _Locale;
      }
      set
      {
        __isset.Locale = true;
        this._Locale = value;
      }
    }

    public int Index
    {
      get
      {
        return _Index;
      }
      set
      {
        __isset.Index = true;
        this._Index = value;
      }
    }

    public int PullId
    {
      get
      {
        return _PullId;
      }
      set
      {
        __isset.PullId = true;
        this._PullId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool QuestText;
      public bool Locale;
      public bool Index;
      public bool PullId;
    }

    public DynamicQuestInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              QuestText = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Index = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PullId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DynamicQuestInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (QuestText != null && __isset.QuestText) {
        field.Name = "QuestText";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuestText);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.Locale) {
        field.Name = "Locale";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (__isset.Index) {
        field.Name = "Index";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Index);
        oprot.WriteFieldEnd();
      }
      if (__isset.PullId) {
        field.Name = "PullId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PullId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DynamicQuestInfo(");
      sb.Append("QuestText: ");
      sb.Append(QuestText);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(",Index: ");
      sb.Append(Index);
      sb.Append(",PullId: ");
      sb.Append(PullId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
