/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StatisticCore.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LauncherDActionsInfo : TBase
  {
    private string _action;
    private string _hostid;
    private string _version;
    private string _muid;
    private string _auid;
    private double _speed;
    private double _avg_speed;
    private double _min_speed;
    private int _total_patches;
    private int _applied_patches;
    private double _total_download;
    private double _downloaded;
    private string _error;
    private int _need_close;
    private int _timestamp;
    private string _geolocation;
    private int _server_timestamp;
    private string _locale;

    public string Action
    {
      get
      {
        return _action;
      }
      set
      {
        __isset.action = true;
        this._action = value;
      }
    }

    public string Hostid
    {
      get
      {
        return _hostid;
      }
      set
      {
        __isset.hostid = true;
        this._hostid = value;
      }
    }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public string Muid
    {
      get
      {
        return _muid;
      }
      set
      {
        __isset.muid = true;
        this._muid = value;
      }
    }

    public string Auid
    {
      get
      {
        return _auid;
      }
      set
      {
        __isset.auid = true;
        this._auid = value;
      }
    }

    public double Speed
    {
      get
      {
        return _speed;
      }
      set
      {
        __isset.speed = true;
        this._speed = value;
      }
    }

    public double Avg_speed
    {
      get
      {
        return _avg_speed;
      }
      set
      {
        __isset.avg_speed = true;
        this._avg_speed = value;
      }
    }

    public double Min_speed
    {
      get
      {
        return _min_speed;
      }
      set
      {
        __isset.min_speed = true;
        this._min_speed = value;
      }
    }

    public int Total_patches
    {
      get
      {
        return _total_patches;
      }
      set
      {
        __isset.total_patches = true;
        this._total_patches = value;
      }
    }

    public int Applied_patches
    {
      get
      {
        return _applied_patches;
      }
      set
      {
        __isset.applied_patches = true;
        this._applied_patches = value;
      }
    }

    public double Total_download
    {
      get
      {
        return _total_download;
      }
      set
      {
        __isset.total_download = true;
        this._total_download = value;
      }
    }

    public double Downloaded
    {
      get
      {
        return _downloaded;
      }
      set
      {
        __isset.downloaded = true;
        this._downloaded = value;
      }
    }

    public string Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public int Need_close
    {
      get
      {
        return _need_close;
      }
      set
      {
        __isset.need_close = true;
        this._need_close = value;
      }
    }

    public int Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string Geolocation
    {
      get
      {
        return _geolocation;
      }
      set
      {
        __isset.geolocation = true;
        this._geolocation = value;
      }
    }

    public int Server_timestamp
    {
      get
      {
        return _server_timestamp;
      }
      set
      {
        __isset.server_timestamp = true;
        this._server_timestamp = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool action;
      public bool hostid;
      public bool version;
      public bool muid;
      public bool auid;
      public bool speed;
      public bool avg_speed;
      public bool min_speed;
      public bool total_patches;
      public bool applied_patches;
      public bool total_download;
      public bool downloaded;
      public bool error;
      public bool need_close;
      public bool timestamp;
      public bool geolocation;
      public bool server_timestamp;
      public bool locale;
    }

    public LauncherDActionsInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Action = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Hostid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Muid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Auid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Speed = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Avg_speed = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              Min_speed = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Total_patches = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Applied_patches = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              Total_download = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Double) {
              Downloaded = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Error = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Need_close = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Geolocation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              Server_timestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LauncherDActionsInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Action != null && __isset.action) {
        field.Name = "action";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Action);
        oprot.WriteFieldEnd();
      }
      if (Hostid != null && __isset.hostid) {
        field.Name = "hostid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Hostid);
        oprot.WriteFieldEnd();
      }
      if (Version != null && __isset.version) {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (Muid != null && __isset.muid) {
        field.Name = "muid";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Muid);
        oprot.WriteFieldEnd();
      }
      if (Auid != null && __isset.auid) {
        field.Name = "auid";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Auid);
        oprot.WriteFieldEnd();
      }
      if (__isset.speed) {
        field.Name = "speed";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Speed);
        oprot.WriteFieldEnd();
      }
      if (__isset.avg_speed) {
        field.Name = "avg_speed";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Avg_speed);
        oprot.WriteFieldEnd();
      }
      if (__isset.min_speed) {
        field.Name = "min_speed";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Min_speed);
        oprot.WriteFieldEnd();
      }
      if (__isset.total_patches) {
        field.Name = "total_patches";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Total_patches);
        oprot.WriteFieldEnd();
      }
      if (__isset.applied_patches) {
        field.Name = "applied_patches";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Applied_patches);
        oprot.WriteFieldEnd();
      }
      if (__isset.total_download) {
        field.Name = "total_download";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Total_download);
        oprot.WriteFieldEnd();
      }
      if (__isset.downloaded) {
        field.Name = "downloaded";
        field.Type = TType.Double;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Downloaded);
        oprot.WriteFieldEnd();
      }
      if (Error != null && __isset.error) {
        field.Name = "error";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Error);
        oprot.WriteFieldEnd();
      }
      if (__isset.need_close) {
        field.Name = "need_close";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Need_close);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Geolocation != null && __isset.geolocation) {
        field.Name = "geolocation";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Geolocation);
        oprot.WriteFieldEnd();
      }
      if (__isset.server_timestamp) {
        field.Name = "server_timestamp";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Server_timestamp);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LauncherDActionsInfo(");
      sb.Append("Action: ");
      sb.Append(Action);
      sb.Append(",Hostid: ");
      sb.Append(Hostid);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",Muid: ");
      sb.Append(Muid);
      sb.Append(",Auid: ");
      sb.Append(Auid);
      sb.Append(",Speed: ");
      sb.Append(Speed);
      sb.Append(",Avg_speed: ");
      sb.Append(Avg_speed);
      sb.Append(",Min_speed: ");
      sb.Append(Min_speed);
      sb.Append(",Total_patches: ");
      sb.Append(Total_patches);
      sb.Append(",Applied_patches: ");
      sb.Append(Applied_patches);
      sb.Append(",Total_download: ");
      sb.Append(Total_download);
      sb.Append(",Downloaded: ");
      sb.Append(Downloaded);
      sb.Append(",Error: ");
      sb.Append(Error);
      sb.Append(",Need_close: ");
      sb.Append(Need_close);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Geolocation: ");
      sb.Append(Geolocation);
      sb.Append(",Server_timestamp: ");
      sb.Append(Server_timestamp);
      sb.Append(",Locale: ");
      sb.Append(Locale);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
