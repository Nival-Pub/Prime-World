/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RollEventItem : TBase
  {
    private RollEventItemType _itemType;
    private string _persistentId;
    private ResourceTableSmall _resource;
    private double _ratio;

    /// <summary>
    /// 
    /// <seealso cref="RollEventItemType"/>
    /// </summary>
    public RollEventItemType ItemType
    {
      get
      {
        return _itemType;
      }
      set
      {
        __isset.itemType = true;
        this._itemType = value;
      }
    }

    public string PersistentId
    {
      get
      {
        return _persistentId;
      }
      set
      {
        __isset.persistentId = true;
        this._persistentId = value;
      }
    }

    public ResourceTableSmall Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public double Ratio
    {
      get
      {
        return _ratio;
      }
      set
      {
        __isset.ratio = true;
        this._ratio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemType;
      public bool persistentId;
      public bool resource;
      public bool ratio;
    }

    public RollEventItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ItemType = (RollEventItemType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              PersistentId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Resource = new ResourceTableSmall();
              Resource.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Ratio = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RollEventItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemType) {
        field.Name = "itemType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ItemType);
        oprot.WriteFieldEnd();
      }
      if (PersistentId != null && __isset.persistentId) {
        field.Name = "persistentId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersistentId);
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Resource.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.ratio) {
        field.Name = "ratio";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Ratio);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RollEventItem(");
      sb.Append("ItemType: ");
      sb.Append(ItemType);
      sb.Append(",PersistentId: ");
      sb.Append(PersistentId);
      sb.Append(",Resource: ");
      sb.Append(Resource== null ? "<null>" : Resource.ToString());
      sb.Append(",Ratio: ");
      sb.Append(Ratio);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
