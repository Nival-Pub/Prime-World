/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MonitoringLib
{
  public partial class Monitoring {
    public interface Iface {
      List<PerfCounterInfo> GetPerfCounters();
      #if SILVERLIGHT
      IAsyncResult Begin_GetPerfCounters(AsyncCallback callback, object state);
      List<PerfCounterInfo> End_GetPerfCounters(IAsyncResult asyncResult);
      #endif
      int RegisterPerfCounters(List<PerfCounterInfo> counters);
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterPerfCounters(AsyncCallback callback, object state, List<PerfCounterInfo> counters);
      int End_RegisterPerfCounters(IAsyncResult asyncResult);
      #endif
      int UnregisterPerfCounters(List<string> counters);
      #if SILVERLIGHT
      IAsyncResult Begin_UnregisterPerfCounters(AsyncCallback callback, object state, List<string> counters);
      int End_UnregisterPerfCounters(IAsyncResult asyncResult);
      #endif
      int UnregisterAllPerfCounters();
      #if SILVERLIGHT
      IAsyncResult Begin_UnregisterAllPerfCounters(AsyncCallback callback, object state);
      int End_UnregisterAllPerfCounters(IAsyncResult asyncResult);
      #endif
      List<PerfCounterInfo> GetRegisteredPerfCounters();
      #if SILVERLIGHT
      IAsyncResult Begin_GetRegisteredPerfCounters(AsyncCallback callback, object state);
      List<PerfCounterInfo> End_GetRegisteredPerfCounters(IAsyncResult asyncResult);
      #endif
      List<PerfCounterSample> GetPerfCounterSamples();
      #if SILVERLIGHT
      IAsyncResult Begin_GetPerfCounterSamples(AsyncCallback callback, object state);
      List<PerfCounterSample> End_GetPerfCounterSamples(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPerfCounters(AsyncCallback callback, object state)
      {
        return send_GetPerfCounters(callback, state);
      }

      public List<PerfCounterInfo> End_GetPerfCounters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPerfCounters();
      }

      #endif

      public List<PerfCounterInfo> GetPerfCounters()
      {
        #if !SILVERLIGHT
        send_GetPerfCounters();
        return recv_GetPerfCounters();

        #else
        var asyncResult = Begin_GetPerfCounters(null, null);
        return End_GetPerfCounters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPerfCounters(AsyncCallback callback, object state)
      #else
      public void send_GetPerfCounters()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPerfCounters", TMessageType.Call, seqid_));
        GetPerfCounters_args args = new GetPerfCounters_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PerfCounterInfo> recv_GetPerfCounters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPerfCounters_result result = new GetPerfCounters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPerfCounters failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RegisterPerfCounters(AsyncCallback callback, object state, List<PerfCounterInfo> counters)
      {
        return send_RegisterPerfCounters(callback, state, counters);
      }

      public int End_RegisterPerfCounters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterPerfCounters();
      }

      #endif

      public int RegisterPerfCounters(List<PerfCounterInfo> counters)
      {
        #if !SILVERLIGHT
        send_RegisterPerfCounters(counters);
        return recv_RegisterPerfCounters();

        #else
        var asyncResult = Begin_RegisterPerfCounters(null, null, counters);
        return End_RegisterPerfCounters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterPerfCounters(AsyncCallback callback, object state, List<PerfCounterInfo> counters)
      #else
      public void send_RegisterPerfCounters(List<PerfCounterInfo> counters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterPerfCounters", TMessageType.Call, seqid_));
        RegisterPerfCounters_args args = new RegisterPerfCounters_args();
        args.Counters = counters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_RegisterPerfCounters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterPerfCounters_result result = new RegisterPerfCounters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterPerfCounters failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnregisterPerfCounters(AsyncCallback callback, object state, List<string> counters)
      {
        return send_UnregisterPerfCounters(callback, state, counters);
      }

      public int End_UnregisterPerfCounters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnregisterPerfCounters();
      }

      #endif

      public int UnregisterPerfCounters(List<string> counters)
      {
        #if !SILVERLIGHT
        send_UnregisterPerfCounters(counters);
        return recv_UnregisterPerfCounters();

        #else
        var asyncResult = Begin_UnregisterPerfCounters(null, null, counters);
        return End_UnregisterPerfCounters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnregisterPerfCounters(AsyncCallback callback, object state, List<string> counters)
      #else
      public void send_UnregisterPerfCounters(List<string> counters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterPerfCounters", TMessageType.Call, seqid_));
        UnregisterPerfCounters_args args = new UnregisterPerfCounters_args();
        args.Counters = counters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_UnregisterPerfCounters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnregisterPerfCounters_result result = new UnregisterPerfCounters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnregisterPerfCounters failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UnregisterAllPerfCounters(AsyncCallback callback, object state)
      {
        return send_UnregisterAllPerfCounters(callback, state);
      }

      public int End_UnregisterAllPerfCounters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnregisterAllPerfCounters();
      }

      #endif

      public int UnregisterAllPerfCounters()
      {
        #if !SILVERLIGHT
        send_UnregisterAllPerfCounters();
        return recv_UnregisterAllPerfCounters();

        #else
        var asyncResult = Begin_UnregisterAllPerfCounters(null, null);
        return End_UnregisterAllPerfCounters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnregisterAllPerfCounters(AsyncCallback callback, object state)
      #else
      public void send_UnregisterAllPerfCounters()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterAllPerfCounters", TMessageType.Call, seqid_));
        UnregisterAllPerfCounters_args args = new UnregisterAllPerfCounters_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_UnregisterAllPerfCounters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnregisterAllPerfCounters_result result = new UnregisterAllPerfCounters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnregisterAllPerfCounters failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRegisteredPerfCounters(AsyncCallback callback, object state)
      {
        return send_GetRegisteredPerfCounters(callback, state);
      }

      public List<PerfCounterInfo> End_GetRegisteredPerfCounters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRegisteredPerfCounters();
      }

      #endif

      public List<PerfCounterInfo> GetRegisteredPerfCounters()
      {
        #if !SILVERLIGHT
        send_GetRegisteredPerfCounters();
        return recv_GetRegisteredPerfCounters();

        #else
        var asyncResult = Begin_GetRegisteredPerfCounters(null, null);
        return End_GetRegisteredPerfCounters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRegisteredPerfCounters(AsyncCallback callback, object state)
      #else
      public void send_GetRegisteredPerfCounters()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRegisteredPerfCounters", TMessageType.Call, seqid_));
        GetRegisteredPerfCounters_args args = new GetRegisteredPerfCounters_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PerfCounterInfo> recv_GetRegisteredPerfCounters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRegisteredPerfCounters_result result = new GetRegisteredPerfCounters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRegisteredPerfCounters failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPerfCounterSamples(AsyncCallback callback, object state)
      {
        return send_GetPerfCounterSamples(callback, state);
      }

      public List<PerfCounterSample> End_GetPerfCounterSamples(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPerfCounterSamples();
      }

      #endif

      public List<PerfCounterSample> GetPerfCounterSamples()
      {
        #if !SILVERLIGHT
        send_GetPerfCounterSamples();
        return recv_GetPerfCounterSamples();

        #else
        var asyncResult = Begin_GetPerfCounterSamples(null, null);
        return End_GetPerfCounterSamples(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPerfCounterSamples(AsyncCallback callback, object state)
      #else
      public void send_GetPerfCounterSamples()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPerfCounterSamples", TMessageType.Call, seqid_));
        GetPerfCounterSamples_args args = new GetPerfCounterSamples_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PerfCounterSample> recv_GetPerfCounterSamples()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPerfCounterSamples_result result = new GetPerfCounterSamples_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPerfCounterSamples failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetPerfCounters"] = GetPerfCounters_Process;
        processMap_["RegisterPerfCounters"] = RegisterPerfCounters_Process;
        processMap_["UnregisterPerfCounters"] = UnregisterPerfCounters_Process;
        processMap_["UnregisterAllPerfCounters"] = UnregisterAllPerfCounters_Process;
        processMap_["GetRegisteredPerfCounters"] = GetRegisteredPerfCounters_Process;
        processMap_["GetPerfCounterSamples"] = GetPerfCounterSamples_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetPerfCounters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPerfCounters_args args = new GetPerfCounters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPerfCounters_result result = new GetPerfCounters_result();
        result.Success = iface_.GetPerfCounters();
        oprot.WriteMessageBegin(new TMessage("GetPerfCounters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterPerfCounters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterPerfCounters_args args = new RegisterPerfCounters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterPerfCounters_result result = new RegisterPerfCounters_result();
        result.Success = iface_.RegisterPerfCounters(args.Counters);
        oprot.WriteMessageBegin(new TMessage("RegisterPerfCounters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnregisterPerfCounters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnregisterPerfCounters_args args = new UnregisterPerfCounters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnregisterPerfCounters_result result = new UnregisterPerfCounters_result();
        result.Success = iface_.UnregisterPerfCounters(args.Counters);
        oprot.WriteMessageBegin(new TMessage("UnregisterPerfCounters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnregisterAllPerfCounters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnregisterAllPerfCounters_args args = new UnregisterAllPerfCounters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnregisterAllPerfCounters_result result = new UnregisterAllPerfCounters_result();
        result.Success = iface_.UnregisterAllPerfCounters();
        oprot.WriteMessageBegin(new TMessage("UnregisterAllPerfCounters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRegisteredPerfCounters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRegisteredPerfCounters_args args = new GetRegisteredPerfCounters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRegisteredPerfCounters_result result = new GetRegisteredPerfCounters_result();
        result.Success = iface_.GetRegisteredPerfCounters();
        oprot.WriteMessageBegin(new TMessage("GetRegisteredPerfCounters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPerfCounterSamples_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPerfCounterSamples_args args = new GetPerfCounterSamples_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPerfCounterSamples_result result = new GetPerfCounterSamples_result();
        result.Success = iface_.GetPerfCounterSamples();
        oprot.WriteMessageBegin(new TMessage("GetPerfCounterSamples", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPerfCounters_args : TBase
    {

      public GetPerfCounters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPerfCounters_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPerfCounters_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPerfCounters_result : TBase
    {
      private List<PerfCounterInfo> _success;

      public List<PerfCounterInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPerfCounters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PerfCounterInfo>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    PerfCounterInfo _elem2 = new PerfCounterInfo();
                    _elem2 = new PerfCounterInfo();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPerfCounters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PerfCounterInfo _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPerfCounters_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterPerfCounters_args : TBase
    {
      private List<PerfCounterInfo> _counters;

      public List<PerfCounterInfo> Counters
      {
        get
        {
          return _counters;
        }
        set
        {
          __isset.counters = true;
          this._counters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool counters;
      }

      public RegisterPerfCounters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Counters = new List<PerfCounterInfo>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    PerfCounterInfo _elem6 = new PerfCounterInfo();
                    _elem6 = new PerfCounterInfo();
                    _elem6.Read(iprot);
                    Counters.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterPerfCounters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Counters != null && __isset.counters) {
          field.Name = "counters";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Counters.Count));
            foreach (PerfCounterInfo _iter7 in Counters)
            {
              _iter7.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RegisterPerfCounters_args(");
        sb.Append("Counters: ");
        sb.Append(Counters);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterPerfCounters_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RegisterPerfCounters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterPerfCounters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RegisterPerfCounters_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterPerfCounters_args : TBase
    {
      private List<string> _counters;

      public List<string> Counters
      {
        get
        {
          return _counters;
        }
        set
        {
          __isset.counters = true;
          this._counters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool counters;
      }

      public UnregisterPerfCounters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Counters = new List<string>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    string _elem10 = null;
                    _elem10 = iprot.ReadString();
                    Counters.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnregisterPerfCounters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Counters != null && __isset.counters) {
          field.Name = "counters";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Counters.Count));
            foreach (string _iter11 in Counters)
            {
              oprot.WriteString(_iter11);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnregisterPerfCounters_args(");
        sb.Append("Counters: ");
        sb.Append(Counters);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterPerfCounters_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnregisterPerfCounters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnregisterPerfCounters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnregisterPerfCounters_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterAllPerfCounters_args : TBase
    {

      public UnregisterAllPerfCounters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnregisterAllPerfCounters_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnregisterAllPerfCounters_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterAllPerfCounters_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnregisterAllPerfCounters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UnregisterAllPerfCounters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UnregisterAllPerfCounters_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRegisteredPerfCounters_args : TBase
    {

      public GetRegisteredPerfCounters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRegisteredPerfCounters_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRegisteredPerfCounters_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRegisteredPerfCounters_result : TBase
    {
      private List<PerfCounterInfo> _success;

      public List<PerfCounterInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRegisteredPerfCounters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PerfCounterInfo>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    PerfCounterInfo _elem14 = new PerfCounterInfo();
                    _elem14 = new PerfCounterInfo();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRegisteredPerfCounters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PerfCounterInfo _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRegisteredPerfCounters_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPerfCounterSamples_args : TBase
    {

      public GetPerfCounterSamples_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPerfCounterSamples_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPerfCounterSamples_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPerfCounterSamples_result : TBase
    {
      private List<PerfCounterSample> _success;

      public List<PerfCounterSample> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPerfCounterSamples_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PerfCounterSample>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    PerfCounterSample _elem18 = new PerfCounterSample();
                    _elem18 = new PerfCounterSample();
                    _elem18.Read(iprot);
                    Success.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPerfCounterSamples_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PerfCounterSample _iter19 in Success)
              {
                _iter19.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPerfCounterSamples_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
