=====================================
1) ОБЩИЕ ПАРАМЕТРЫ ДЛЯ ВСЕХ ЗАПРОСОВ
=====================================

Все запросы исполняются в виде:
/j?jsoncb=xxx&action=xxx&...прочие параметры

jsoncb=STRING -- имя callback-функции, в которую будет "обернут" ответ для javascript
action=STRING -- имя команды для исполнения на сервере


Во всех запросах после login (в течение игровой сессии) добавляются сессионные параметры:
id=INT -- id юзера в нашей базе данных (выдается при логине)
key=STRING -- сессионный ключ (выдается при логине; DEBUG: сейчас key всегда = "12345" для удобства отладки)

---------------
ОТВЕТ СЕРВЕРА (кроме случаев стандартных ошибок, типа 403) имеет вид:
---------------
"jsoncb("response":{{"key":value,"key":value,...}})"
где jsoncb -- это указанное в запросе имя callback-функции

Стандартные поля ответа для всех запросов:
"error":TEXT -- ошибки при исполнении запроса (как правило одна строка с диагностическим сообщением; в т.ч. при критических ошибках traceback рассыпания сервера)
"ferr":TEXT -- сообщения об ошибках для передачи флешу (одна или более строк, разделенных \n) 
"flog":TEXT -- набор строчных команд для передачи флешу (в т.ч. спавны, боевые логи и проч.; одна или более строк, разделенных \n))
"dict":{"key"=>"value"} -- ответы боевки для PHP/JavaScript-части, в виде словарика полей "ключ-значение" ("xp", "ding" и т.п.)


====================
2) LOGIN
====================
в начале игровой сессии, при первичном или повторном логине; 
если сервер присылает "error":"bad session" или "wrong key, relogin", значит сессия уже протухла и требуется релогин.

action=login
user_id=INT -- id юзера в социальной сети
app_id=STRING -- application_id приложения в социальной сети
auth_key=STRING -- передаваемая приложению через flash_vars из соц.сети цифровая подпись для авторизации юзера на сервере 
[необязательные:] 
soc_net=INT (по умолчанию 1=SOC_VKONTAKTE)


---------------
ОТВЕТ СЕРВЕРА:
---------------
error, ferr, flog - см. стандартные ответы в п. 1)

ver:FLOAT -- версия сервера
id:INT -- id юзера в нашей базе данных 
key:STRING -- сессионный ключ (DEBUG: сейчас key всегда = "12345" для удобства отладки)
hc:STRING -- "кирпич данных" юзера, в т.ч.:
		серверные параметры аватара "H[...]",
		клиентские параметры аватара "HC[...]",
		параметры юзера "U[...]"
new:0/1 -- создана ли новая запись юзера (логин), или данные юзера уже были на сервере (релогин)


ПРИМЕР:
http://127.0.0.1/j?jsoncb=xxx&action=login&user_id=41865481&app_id=&auth_key=1843466

====================
3) KEEP ALIVE
====================
нужно присылать каждые N минут (DEBUG: сейчас каждую минуту), для поддержания активной сессии

action=keepalive
id, key -- стандартные (см. п. 1)

---------------
ОТВЕТ СЕРВЕРА:
---------------
result:"ok", если все в порядке
error - стандартный (см. п. 1)

ПРИМЕР:
http://127.0.0.1/j?jsoncb=xxx&action=keepalive&id=1&key=12345


====================
4) MINI (FLASH) CMD
====================
для передачи команд от флешки серверу

action=mini
id, key -- стандартные (см. п. 1)
cmd:STRING -- команда для исполнения (например "GSA", "GCP", "GI")
params:STRING -- параметры для команды (обычно разделенные двоеточиями), если параметров нет, можно опустить params

---------------
ОТВЕТ СЕРВЕРА:
---------------
result:"ok", если все в порядке
error, flog, ferr, dict - стандартные (см. п. 1)

обычно часть ответа сервера это "кирпич" строчек, адресованный флешке (надо просто передать ей содержимое flog/ferr).
часть же ответа (dict), предназначенная для веб-гуи (JavaScript), уже погрызена на пары "ключ-значение".

полный список возможных ключей в словаре dict:
---------------
dead:INT -- сдохла ли партия в боевке (1=сдохла, 0=выжила)
xp_add:INT -- начисленная экспа (за битву и проч.)
xp_now:INT - сколько теперь экспы у юзера
xp_next:INT -- экспа для достижения следующего уровня (0 означает, что мы достигли level cap, и дальше расти пока что невозможно)
ding:INT -- получение следующего уровня
hc:STRING -- новые статы аватара (после динга и авто-левелапа)
adv_type:INT -- тип приключения (1=соло, 2=групповое, 3=эпик)
mobs_total:INT -- сколько всего мобов в приключении
mobs_spawn:STRING -- инфа о спавне мобов (сейчас там написано, сколько мин-макс мобов в каждом спавне, напр. "2-3")

tired:ARRAY -- массив пар id->timestamp: когда у аватара с соотв. id истечет таймер "усталости после боя"
now:INT -- текущее время сервера (с которым можно сравнивать timestamp из "tired")
---------------

ПРИМЕРЫ ОТВЕТА на mini+GA:
- партия выжила, мы получили экспу и дингнули 16-й уровень:
	"response":{"dict":{"ding":16,"hc":"HC[1:2:16:50:16:16:16:24:0:32:40:1920:16:3:0:16:C()]","xp_add":225,"dead":0,"xp_next":4096},...
- партия сдохла: 	
	"response":{"dict":{"xp_add":0,"dead":1,"xp_next":4096},"ferr":"","flog":"FS\n....
