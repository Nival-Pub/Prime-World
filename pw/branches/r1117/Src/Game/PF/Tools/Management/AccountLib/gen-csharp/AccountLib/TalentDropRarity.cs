/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TalentDropRarity : TBase
  {
    private int _classRar;
    private int _ordinary;
    private int _good;
    private int _excellent;
    private int _magnificent;
    private int _exclusive;

    public int ClassRar
    {
      get
      {
        return _classRar;
      }
      set
      {
        __isset.classRar = true;
        this._classRar = value;
      }
    }

    public int Ordinary
    {
      get
      {
        return _ordinary;
      }
      set
      {
        __isset.ordinary = true;
        this._ordinary = value;
      }
    }

    public int Good
    {
      get
      {
        return _good;
      }
      set
      {
        __isset.good = true;
        this._good = value;
      }
    }

    public int Excellent
    {
      get
      {
        return _excellent;
      }
      set
      {
        __isset.excellent = true;
        this._excellent = value;
      }
    }

    public int Magnificent
    {
      get
      {
        return _magnificent;
      }
      set
      {
        __isset.magnificent = true;
        this._magnificent = value;
      }
    }

    public int Exclusive
    {
      get
      {
        return _exclusive;
      }
      set
      {
        __isset.exclusive = true;
        this._exclusive = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool classRar;
      public bool ordinary;
      public bool good;
      public bool excellent;
      public bool magnificent;
      public bool exclusive;
    }

    public TalentDropRarity() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ClassRar = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Ordinary = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Good = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Excellent = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Magnificent = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Exclusive = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TalentDropRarity");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.classRar) {
        field.Name = "classRar";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ClassRar);
        oprot.WriteFieldEnd();
      }
      if (__isset.ordinary) {
        field.Name = "ordinary";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ordinary);
        oprot.WriteFieldEnd();
      }
      if (__isset.good) {
        field.Name = "good";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Good);
        oprot.WriteFieldEnd();
      }
      if (__isset.excellent) {
        field.Name = "excellent";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Excellent);
        oprot.WriteFieldEnd();
      }
      if (__isset.magnificent) {
        field.Name = "magnificent";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Magnificent);
        oprot.WriteFieldEnd();
      }
      if (__isset.exclusive) {
        field.Name = "exclusive";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exclusive);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TalentDropRarity(");
      sb.Append("ClassRar: ");
      sb.Append(ClassRar);
      sb.Append(",Ordinary: ");
      sb.Append(Ordinary);
      sb.Append(",Good: ");
      sb.Append(Good);
      sb.Append(",Excellent: ");
      sb.Append(Excellent);
      sb.Append(",Magnificent: ");
      sb.Append(Magnificent);
      sb.Append(",Exclusive: ");
      sb.Append(Exclusive);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
