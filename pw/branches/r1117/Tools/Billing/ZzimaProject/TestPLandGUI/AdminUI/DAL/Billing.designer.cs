#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZzimaBilling.AdminUI.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BillingTest")]
	public partial class BillingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertEmployeeGroup(EmployeeGroup instance);
    partial void UpdateEmployeeGroup(EmployeeGroup instance);
    partial void DeleteEmployeeGroup(EmployeeGroup instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertErrorCode(ErrorCode instance);
    partial void UpdateErrorCode(ErrorCode instance);
    partial void DeleteErrorCode(ErrorCode instance);
    partial void InsertOperationType(OperationType instance);
    partial void UpdateOperationType(OperationType instance);
    partial void DeleteOperationType(OperationType instance);
    partial void InsertPaymentSystem(PaymentSystem instance);
    partial void UpdatePaymentSystem(PaymentSystem instance);
    partial void DeletePaymentSystem(PaymentSystem instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertPromocode(Promocode instance);
    partial void UpdatePromocode(Promocode instance);
    partial void DeletePromocode(Promocode instance);
    partial void InsertProtocol(Protocol instance);
    partial void UpdateProtocol(Protocol instance);
    partial void DeleteProtocol(Protocol instance);
    partial void InsertRecordType(RecordType instance);
    partial void UpdateRecordType(RecordType instance);
    partial void DeleteRecordType(RecordType instance);
    partial void InsertReferalCode(ReferalCode instance);
    partial void UpdateReferalCode(ReferalCode instance);
    partial void DeleteReferalCode(ReferalCode instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertSubAccount(SubAccount instance);
    partial void UpdateSubAccount(SubAccount instance);
    partial void DeleteSubAccount(SubAccount instance);
    partial void InsertTemplate(Template instance);
    partial void UpdateTemplate(Template instance);
    partial void DeleteTemplate(Template instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertUserService(UserService instance);
    partial void UpdateUserService(UserService instance);
    partial void DeleteUserService(UserService instance);
    partial void InsertPartnerProgram(PartnerProgram instance);
    partial void UpdatePartnerProgram(PartnerProgram instance);
    partial void DeletePartnerProgram(PartnerProgram instance);
    partial void InsertProtocolService(ProtocolService instance);
    partial void UpdateProtocolService(ProtocolService instance);
    partial void DeleteProtocolService(ProtocolService instance);
    partial void InsertProtocolSetting(ProtocolSetting instance);
    partial void UpdateProtocolSetting(ProtocolSetting instance);
    partial void DeleteProtocolSetting(ProtocolSetting instance);
    partial void InsertProtocolPaymentSystem(ProtocolPaymentSystem instance);
    partial void UpdateProtocolPaymentSystem(ProtocolPaymentSystem instance);
    partial void DeleteProtocolPaymentSystem(ProtocolPaymentSystem instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    #endregion
		
		public BillingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["billiConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BillingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BillingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BillingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BillingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeGroup> EmployeeGroups
		{
			get
			{
				return this.GetTable<EmployeeGroup>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<ErrorCode> ErrorCodes
		{
			get
			{
				return this.GetTable<ErrorCode>();
			}
		}
		
		public System.Data.Linq.Table<OperationType> OperationTypes
		{
			get
			{
				return this.GetTable<OperationType>();
			}
		}
		
		public System.Data.Linq.Table<PaymentSystem> PaymentSystems
		{
			get
			{
				return this.GetTable<PaymentSystem>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Promocode> Promocodes
		{
			get
			{
				return this.GetTable<Promocode>();
			}
		}
		
		public System.Data.Linq.Table<Protocol> Protocols
		{
			get
			{
				return this.GetTable<Protocol>();
			}
		}
		
		public System.Data.Linq.Table<RecordType> RecordTypes
		{
			get
			{
				return this.GetTable<RecordType>();
			}
		}
		
		public System.Data.Linq.Table<ReferalCode> ReferalCodes
		{
			get
			{
				return this.GetTable<ReferalCode>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<SubAccount> SubAccounts
		{
			get
			{
				return this.GetTable<SubAccount>();
			}
		}
		
		public System.Data.Linq.Table<Template> Templates
		{
			get
			{
				return this.GetTable<Template>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<UserService> UserServices
		{
			get
			{
				return this.GetTable<UserService>();
			}
		}
		
		public System.Data.Linq.Table<PartnerProgram> PartnerPrograms
		{
			get
			{
				return this.GetTable<PartnerProgram>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolService> ProtocolServices
		{
			get
			{
				return this.GetTable<ProtocolService>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolSetting> ProtocolSettings
		{
			get
			{
				return this.GetTable<ProtocolSetting>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolPaymentSystem> ProtocolPaymentSystems
		{
			get
			{
				return this.GetTable<ProtocolPaymentSystem>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<SubAccount> _SubAccounts;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Operation> _Operations;
		
		private EntitySet<Operation> _Operations1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Account()
		{
			this._SubAccounts = new EntitySet<SubAccount>(new Action<SubAccount>(this.attach_SubAccounts), new Action<SubAccount>(this.detach_SubAccounts));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			this._Operations1 = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations1), new Action<Operation>(this.detach_Operations1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_SubAccount", Storage="_SubAccounts", ThisKey="id", OtherKey="accid")]
		public EntitySet<SubAccount> SubAccounts
		{
			get
			{
				return this._SubAccounts;
			}
			set
			{
				this._SubAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_User", Storage="_Users", ThisKey="id", OtherKey="accid")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Operation", Storage="_Operations", ThisKey="id", OtherKey="srcaccid")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Operation1", Storage="_Operations1", ThisKey="id", OtherKey="destaccid")]
		public EntitySet<Operation> Operations1
		{
			get
			{
				return this._Operations1;
			}
			set
			{
				this._Operations1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubAccounts(SubAccount entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_SubAccounts(SubAccount entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Operations1(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_Operations1(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currencies")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private decimal _rate;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnrateChanging(decimal value);
    partial void OnrateChanged();
    #endregion
		
		public Currency()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Decimal(15,2) NOT NULL")]
		public decimal rate
		{
			get
			{
				return this._rate;
			}
			set
			{
				if ((this._rate != value))
				{
					this.OnrateChanging(value);
					this.SendPropertyChanging();
					this._rate = value;
					this.SendPropertyChanged("rate");
					this.OnrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Service", Storage="_Services", ThisKey="id", OtherKey="currencyid")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeGroups")]
	public partial class EmployeeGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public EmployeeGroup()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeGroup_Employee", Storage="_Employees", ThisKey="id", OtherKey="groupid")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeGroup = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Data.Linq.Binary _password;
		
		private int _groupid;
		
		private EntitySet<Promocode> _Promocodes;
		
		private EntitySet<Protocol> _Protocols;
		
		private EntitySet<Operation> _Operations;
		
		private EntityRef<EmployeeGroup> _EmployeeGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(System.Data.Linq.Binary value);
    partial void OnpasswordChanged();
    partial void OngroupidChanging(int value);
    partial void OngroupidChanged();
    #endregion
		
		public Employee()
		{
			this._Promocodes = new EntitySet<Promocode>(new Action<Promocode>(this.attach_Promocodes), new Action<Promocode>(this.detach_Promocodes));
			this._Protocols = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocols), new Action<Protocol>(this.detach_Protocols));
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			this._EmployeeGroup = default(EntityRef<EmployeeGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarBinary(80) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupid", DbType="Int NOT NULL")]
		public int groupid
		{
			get
			{
				return this._groupid;
			}
			set
			{
				if ((this._groupid != value))
				{
					if (this._EmployeeGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupidChanging(value);
					this.SendPropertyChanging();
					this._groupid = value;
					this.SendPropertyChanged("groupid");
					this.OngroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Promocode", Storage="_Promocodes", ThisKey="id", OtherKey="empid")]
		public EntitySet<Promocode> Promocodes
		{
			get
			{
				return this._Promocodes;
			}
			set
			{
				this._Promocodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Protocol", Storage="_Protocols", ThisKey="id", OtherKey="empid")]
		public EntitySet<Protocol> Protocols
		{
			get
			{
				return this._Protocols;
			}
			set
			{
				this._Protocols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Operation", Storage="_Operations", ThisKey="id", OtherKey="empid")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeGroup_Employee", Storage="_EmployeeGroup", ThisKey="groupid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EmployeeGroup EmployeeGroup
		{
			get
			{
				return this._EmployeeGroup.Entity;
			}
			set
			{
				EmployeeGroup previousValue = this._EmployeeGroup.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeGroup.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._EmployeeGroup.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._groupid = value.id;
					}
					else
					{
						this._groupid = default(int);
					}
					this.SendPropertyChanged("EmployeeGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Promocodes(Promocode entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Promocodes(Promocode entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ErrorCodes")]
	public partial class ErrorCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(int value);
    partial void OncodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ErrorCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationTypes")]
	public partial class OperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Operation> _Operations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public OperationType()
		{
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationType_Operation", Storage="_Operations", ThisKey="id", OtherKey="type")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentSystems")]
	public partial class PaymentSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _priority;
		
		private EntitySet<SubAccount> _SubAccounts;
		
		private EntityRef<ProtocolPaymentSystem> _ProtocolPaymentSystem;
		
		private EntitySet<Operation> _Operations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public PaymentSystem()
		{
			this._SubAccounts = new EntitySet<SubAccount>(new Action<SubAccount>(this.attach_SubAccounts), new Action<SubAccount>(this.detach_SubAccounts));
			this._ProtocolPaymentSystem = default(EntityRef<ProtocolPaymentSystem>);
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentSystem_SubAccount", Storage="_SubAccounts", ThisKey="id", OtherKey="systemid")]
		public EntitySet<SubAccount> SubAccounts
		{
			get
			{
				return this._SubAccounts;
			}
			set
			{
				this._SubAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentSystem_ProtocolPaymentSystem", Storage="_ProtocolPaymentSystem", ThisKey="id", OtherKey="systemid", IsUnique=true, IsForeignKey=false)]
		public ProtocolPaymentSystem ProtocolPaymentSystem
		{
			get
			{
				return this._ProtocolPaymentSystem.Entity;
			}
			set
			{
				ProtocolPaymentSystem previousValue = this._ProtocolPaymentSystem.Entity;
				if (((previousValue != value) 
							|| (this._ProtocolPaymentSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProtocolPaymentSystem.Entity = null;
						previousValue.PaymentSystem = null;
					}
					this._ProtocolPaymentSystem.Entity = value;
					if ((value != null))
					{
						value.PaymentSystem = this;
					}
					this.SendPropertyChanged("ProtocolPaymentSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentSystem_Operation", Storage="_Operations", ThisKey="id", OtherKey="systemid")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubAccounts(SubAccount entity)
		{
			this.SendPropertyChanging();
			entity.PaymentSystem = this;
		}
		
		private void detach_SubAccounts(SubAccount entity)
		{
			this.SendPropertyChanging();
			entity.PaymentSystem = null;
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.PaymentSystem = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.PaymentSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profiles")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _createdat;
		
		private string _referalCode;
		
		private int _userid;
		
		private System.Nullable<bool> _agreement;
		
		private string _email;
		
		private System.Nullable<int> _teplateid;
		
		private EntityRef<Template> _Template;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncreatedatChanging(System.DateTime value);
    partial void OncreatedatChanged();
    partial void OnreferalCodeChanging(string value);
    partial void OnreferalCodeChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnagreementChanging(System.Nullable<bool> value);
    partial void OnagreementChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnteplateidChanging(System.Nullable<int> value);
    partial void OnteplateidChanged();
    #endregion
		
		public Profile()
		{
			this._Template = default(EntityRef<Template>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdat", DbType="DateTime NOT NULL")]
		public System.DateTime createdat
		{
			get
			{
				return this._createdat;
			}
			set
			{
				if ((this._createdat != value))
				{
					this.OncreatedatChanging(value);
					this.SendPropertyChanging();
					this._createdat = value;
					this.SendPropertyChanged("createdat");
					this.OncreatedatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referalCode", DbType="VarChar(80)")]
		public string referalCode
		{
			get
			{
				return this._referalCode;
			}
			set
			{
				if ((this._referalCode != value))
				{
					this.OnreferalCodeChanging(value);
					this.SendPropertyChanging();
					this._referalCode = value;
					this.SendPropertyChanged("referalCode");
					this.OnreferalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_agreement", DbType="Bit")]
		public System.Nullable<bool> agreement
		{
			get
			{
				return this._agreement;
			}
			set
			{
				if ((this._agreement != value))
				{
					this.OnagreementChanging(value);
					this.SendPropertyChanging();
					this._agreement = value;
					this.SendPropertyChanged("agreement");
					this.OnagreementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(80)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teplateid", DbType="Int")]
		public System.Nullable<int> teplateid
		{
			get
			{
				return this._teplateid;
			}
			set
			{
				if ((this._teplateid != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteplateidChanging(value);
					this.SendPropertyChanging();
					this._teplateid = value;
					this.SendPropertyChanged("teplateid");
					this.OnteplateidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_Profile", Storage="_Template", ThisKey="teplateid", OtherKey="id", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._teplateid = value.id;
					}
					else
					{
						this._teplateid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profile", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Profile = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
						this._userid = value.id;
					}
					else
					{
						this._userid = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Promocodes")]
	public partial class Promocode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _code;
		
		private System.DateTime _generatedat;
		
		private int _empid;
		
		private System.Nullable<int> _operationid;
		
		private decimal _amount;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Operation> _Operation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OngeneratedatChanging(System.DateTime value);
    partial void OngeneratedatChanged();
    partial void OnempidChanging(int value);
    partial void OnempidChanged();
    partial void OnoperationidChanging(System.Nullable<int> value);
    partial void OnoperationidChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    #endregion
		
		public Promocode()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Operation = default(EntityRef<Operation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_generatedat", DbType="DateTime NOT NULL")]
		public System.DateTime generatedat
		{
			get
			{
				return this._generatedat;
			}
			set
			{
				if ((this._generatedat != value))
				{
					this.OngeneratedatChanging(value);
					this.SendPropertyChanging();
					this._generatedat = value;
					this.SendPropertyChanged("generatedat");
					this.OngeneratedatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empid", DbType="Int NOT NULL")]
		public int empid
		{
			get
			{
				return this._empid;
			}
			set
			{
				if ((this._empid != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnempidChanging(value);
					this.SendPropertyChanging();
					this._empid = value;
					this.SendPropertyChanged("empid");
					this.OnempidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationid", DbType="Int")]
		public System.Nullable<int> operationid
		{
			get
			{
				return this._operationid;
			}
			set
			{
				if ((this._operationid != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoperationidChanging(value);
					this.SendPropertyChanging();
					this._operationid = value;
					this.SendPropertyChanged("operationid");
					this.OnoperationidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Decimal(15,2) NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Promocode", Storage="_Employee", ThisKey="empid", OtherKey="id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Promocodes.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Promocodes.Add(this);
						this._empid = value.id;
					}
					else
					{
						this._empid = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Promocode", Storage="_Operation", ThisKey="operationid", OtherKey="id", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.Promocodes.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.Promocodes.Add(this);
						this._operationid = value.id;
					}
					else
					{
						this._operationid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protocols")]
	public partial class Protocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _occurredat;
		
		private int _typeid;
		
		private System.Nullable<int> _userid;
		
		private System.Nullable<int> _empid;
		
		private System.Nullable<int> _operationid;
		
		private System.Nullable<int> _serviceid;
		
		private System.Data.Linq.Binary _parameters;
		
		private System.Nullable<int> _result;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<RecordType> _RecordType;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnoccurredatChanging(System.DateTime value);
    partial void OnoccurredatChanged();
    partial void OntypeidChanging(int value);
    partial void OntypeidChanged();
    partial void OnuseridChanging(System.Nullable<int> value);
    partial void OnuseridChanged();
    partial void OnempidChanging(System.Nullable<int> value);
    partial void OnempidChanged();
    partial void OnoperationidChanging(System.Nullable<int> value);
    partial void OnoperationidChanged();
    partial void OnserviceidChanging(System.Nullable<int> value);
    partial void OnserviceidChanged();
    partial void OnparametersChanging(System.Data.Linq.Binary value);
    partial void OnparametersChanged();
    partial void OnresultChanging(System.Nullable<int> value);
    partial void OnresultChanged();
    #endregion
		
		public Protocol()
		{
			this._Employee = default(EntityRef<Employee>);
			this._RecordType = default(EntityRef<RecordType>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occurredat", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime occurredat
		{
			get
			{
				return this._occurredat;
			}
			set
			{
				if ((this._occurredat != value))
				{
					this.OnoccurredatChanging(value);
					this.SendPropertyChanging();
					this._occurredat = value;
					this.SendPropertyChanged("occurredat");
					this.OnoccurredatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeid", DbType="Int NOT NULL")]
		public int typeid
		{
			get
			{
				return this._typeid;
			}
			set
			{
				if ((this._typeid != value))
				{
					if (this._RecordType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeidChanging(value);
					this.SendPropertyChanging();
					this._typeid = value;
					this.SendPropertyChanged("typeid");
					this.OntypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int")]
		public System.Nullable<int> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empid", DbType="Int")]
		public System.Nullable<int> empid
		{
			get
			{
				return this._empid;
			}
			set
			{
				if ((this._empid != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnempidChanging(value);
					this.SendPropertyChanging();
					this._empid = value;
					this.SendPropertyChanged("empid");
					this.OnempidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationid", DbType="Int")]
		public System.Nullable<int> operationid
		{
			get
			{
				return this._operationid;
			}
			set
			{
				if ((this._operationid != value))
				{
					this.OnoperationidChanging(value);
					this.SendPropertyChanging();
					this._operationid = value;
					this.SendPropertyChanged("operationid");
					this.OnoperationidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceid", DbType="Int")]
		public System.Nullable<int> serviceid
		{
			get
			{
				return this._serviceid;
			}
			set
			{
				if ((this._serviceid != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceidChanging(value);
					this.SendPropertyChanging();
					this._serviceid = value;
					this.SendPropertyChanged("serviceid");
					this.OnserviceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parameters", DbType="VarBinary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary parameters
		{
			get
			{
				return this._parameters;
			}
			set
			{
				if ((this._parameters != value))
				{
					this.OnparametersChanging(value);
					this.SendPropertyChanging();
					this._parameters = value;
					this.SendPropertyChanged("parameters");
					this.OnparametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="Int")]
		public System.Nullable<int> result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Protocol", Storage="_Employee", ThisKey="empid", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Protocols.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Protocols.Add(this);
						this._empid = value.id;
					}
					else
					{
						this._empid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordType_Protocol", Storage="_RecordType", ThisKey="typeid", OtherKey="id", IsForeignKey=true)]
		public RecordType RecordType
		{
			get
			{
				return this._RecordType.Entity;
			}
			set
			{
				RecordType previousValue = this._RecordType.Entity;
				if (((previousValue != value) 
							|| (this._RecordType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordType.Entity = null;
						previousValue.Protocols.Remove(this);
					}
					this._RecordType.Entity = value;
					if ((value != null))
					{
						value.Protocols.Add(this);
						this._typeid = value.id;
					}
					else
					{
						this._typeid = default(int);
					}
					this.SendPropertyChanged("RecordType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Protocol", Storage="_Service", ThisKey="serviceid", OtherKey="id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Protocols.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Protocols.Add(this);
						this._serviceid = value.id;
					}
					else
					{
						this._serviceid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordTypes")]
	public partial class RecordType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Protocol> _Protocols;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public RecordType()
		{
			this._Protocols = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocols), new Action<Protocol>(this.detach_Protocols));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordType_Protocol", Storage="_Protocols", ThisKey="id", OtherKey="typeid")]
		public EntitySet<Protocol> Protocols
		{
			get
			{
				return this._Protocols;
			}
			set
			{
				this._Protocols.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.RecordType = this;
		}
		
		private void detach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.RecordType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferalCodes")]
	public partial class ReferalCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _partnerid;
		
		private string _mask;
		
		private EntityRef<PartnerProgram> _PartnerProgram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpartneridChanging(int value);
    partial void OnpartneridChanged();
    partial void OnmaskChanging(string value);
    partial void OnmaskChanged();
    #endregion
		
		public ReferalCode()
		{
			this._PartnerProgram = default(EntityRef<PartnerProgram>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partnerid", DbType="Int NOT NULL")]
		public int partnerid
		{
			get
			{
				return this._partnerid;
			}
			set
			{
				if ((this._partnerid != value))
				{
					if (this._PartnerProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartneridChanging(value);
					this.SendPropertyChanging();
					this._partnerid = value;
					this.SendPropertyChanged("partnerid");
					this.OnpartneridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mask", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string mask
		{
			get
			{
				return this._mask;
			}
			set
			{
				if ((this._mask != value))
				{
					this.OnmaskChanging(value);
					this.SendPropertyChanging();
					this._mask = value;
					this.SendPropertyChanged("mask");
					this.OnmaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartnerProgram_ReferalCode", Storage="_PartnerProgram", ThisKey="partnerid", OtherKey="id", IsForeignKey=true)]
		public PartnerProgram PartnerProgram
		{
			get
			{
				return this._PartnerProgram.Entity;
			}
			set
			{
				PartnerProgram previousValue = this._PartnerProgram.Entity;
				if (((previousValue != value) 
							|| (this._PartnerProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartnerProgram.Entity = null;
						previousValue.ReferalCodes.Remove(this);
					}
					this._PartnerProgram.Entity = value;
					if ((value != null))
					{
						value.ReferalCodes.Add(this);
						this._partnerid = value.id;
					}
					else
					{
						this._partnerid = default(int);
					}
					this.SendPropertyChanged("PartnerProgram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _description;
		
		private bool _cbtMode;
		
		private System.Data.Linq.Binary _password;
		
		private System.Nullable<int> _currencyid;
		
		private bool _independent;
		
		private EntitySet<Protocol> _Protocols;
		
		private EntityRef<ProtocolService> _ProtocolService;
		
		private EntitySet<Operation> _Operations;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncbtModeChanging(bool value);
    partial void OncbtModeChanged();
    partial void OnpasswordChanging(System.Data.Linq.Binary value);
    partial void OnpasswordChanged();
    partial void OncurrencyidChanging(System.Nullable<int> value);
    partial void OncurrencyidChanged();
    partial void OnindependentChanging(bool value);
    partial void OnindependentChanged();
    #endregion
		
		public Service()
		{
			this._Protocols = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocols), new Action<Protocol>(this.detach_Protocols));
			this._ProtocolService = default(EntityRef<ProtocolService>);
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cbtMode", DbType="Bit NOT NULL")]
		public bool cbtMode
		{
			get
			{
				return this._cbtMode;
			}
			set
			{
				if ((this._cbtMode != value))
				{
					this.OncbtModeChanging(value);
					this.SendPropertyChanging();
					this._cbtMode = value;
					this.SendPropertyChanged("cbtMode");
					this.OncbtModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarBinary(80) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currencyid", DbType="Int")]
		public System.Nullable<int> currencyid
		{
			get
			{
				return this._currencyid;
			}
			set
			{
				if ((this._currencyid != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncurrencyidChanging(value);
					this.SendPropertyChanging();
					this._currencyid = value;
					this.SendPropertyChanged("currencyid");
					this.OncurrencyidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_independent", DbType="Bit NOT NULL")]
		public bool independent
		{
			get
			{
				return this._independent;
			}
			set
			{
				if ((this._independent != value))
				{
					this.OnindependentChanging(value);
					this.SendPropertyChanging();
					this._independent = value;
					this.SendPropertyChanged("independent");
					this.OnindependentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Protocol", Storage="_Protocols", ThisKey="id", OtherKey="serviceid")]
		public EntitySet<Protocol> Protocols
		{
			get
			{
				return this._Protocols;
			}
			set
			{
				this._Protocols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ProtocolService", Storage="_ProtocolService", ThisKey="id", OtherKey="serviceid", IsUnique=true, IsForeignKey=false)]
		public ProtocolService ProtocolService
		{
			get
			{
				return this._ProtocolService.Entity;
			}
			set
			{
				ProtocolService previousValue = this._ProtocolService.Entity;
				if (((previousValue != value) 
							|| (this._ProtocolService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProtocolService.Entity = null;
						previousValue.Service = null;
					}
					this._ProtocolService.Entity = value;
					if ((value != null))
					{
						value.Service = this;
					}
					this.SendPropertyChanged("ProtocolService");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Operation", Storage="_Operations", ThisKey="id", OtherKey="serviceid")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Service", Storage="_Currency", ThisKey="currencyid", OtherKey="id", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._currencyid = value.id;
					}
					else
					{
						this._currencyid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _usrservid;
		
		private System.DateTime _logonat;
		
		private string _id;
		
		private System.Nullable<System.DateTime> _logoffat;
		
		private EntityRef<UserService> _UserService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusrservidChanging(System.Nullable<int> value);
    partial void OnusrservidChanged();
    partial void OnlogonatChanging(System.DateTime value);
    partial void OnlogonatChanged();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnlogoffatChanging(System.Nullable<System.DateTime> value);
    partial void OnlogoffatChanged();
    #endregion
		
		public Session()
		{
			this._UserService = default(EntityRef<UserService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrservid", DbType="Int")]
		public System.Nullable<int> usrservid
		{
			get
			{
				return this._usrservid;
			}
			set
			{
				if ((this._usrservid != value))
				{
					if (this._UserService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusrservidChanging(value);
					this.SendPropertyChanging();
					this._usrservid = value;
					this.SendPropertyChanged("usrservid");
					this.OnusrservidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logonat", DbType="DateTime NOT NULL")]
		public System.DateTime logonat
		{
			get
			{
				return this._logonat;
			}
			set
			{
				if ((this._logonat != value))
				{
					this.OnlogonatChanging(value);
					this.SendPropertyChanging();
					this._logonat = value;
					this.SendPropertyChanged("logonat");
					this.OnlogonatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(80) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logoffat", DbType="DateTime")]
		public System.Nullable<System.DateTime> logoffat
		{
			get
			{
				return this._logoffat;
			}
			set
			{
				if ((this._logoffat != value))
				{
					this.OnlogoffatChanging(value);
					this.SendPropertyChanging();
					this._logoffat = value;
					this.SendPropertyChanged("logoffat");
					this.OnlogoffatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserService_Session", Storage="_UserService", ThisKey="usrservid", OtherKey="id", IsForeignKey=true)]
		public UserService UserService
		{
			get
			{
				return this._UserService.Entity;
			}
			set
			{
				UserService previousValue = this._UserService.Entity;
				if (((previousValue != value) 
							|| (this._UserService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserService.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._UserService.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._usrservid = value.id;
					}
					else
					{
						this._usrservid = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private object _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(object value);
    partial void OnvalueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Variant NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public object value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubAccounts")]
	public partial class SubAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _systemid;
		
		private decimal _amount;
		
		private System.Nullable<int> _accid;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<PaymentSystem> _PaymentSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsystemidChanging(System.Nullable<int> value);
    partial void OnsystemidChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OnaccidChanging(System.Nullable<int> value);
    partial void OnaccidChanged();
    #endregion
		
		public SubAccount()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Account = default(EntityRef<Account>);
			this._PaymentSystem = default(EntityRef<PaymentSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemid", DbType="Int")]
		public System.Nullable<int> systemid
		{
			get
			{
				return this._systemid;
			}
			set
			{
				if ((this._systemid != value))
				{
					if (this._PaymentSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsystemidChanging(value);
					this.SendPropertyChanging();
					this._systemid = value;
					this.SendPropertyChanged("systemid");
					this.OnsystemidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Decimal(15,2) NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accid", DbType="Int")]
		public System.Nullable<int> accid
		{
			get
			{
				return this._accid;
			}
			set
			{
				if ((this._accid != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaccidChanging(value);
					this.SendPropertyChanging();
					this._accid = value;
					this.SendPropertyChanged("accid");
					this.OnaccidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubAccount_Transaction", Storage="_Transactions", ThisKey="id", OtherKey="subaccid")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_SubAccount", Storage="_Account", ThisKey="accid", OtherKey="id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.SubAccounts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.SubAccounts.Add(this);
						this._accid = value.id;
					}
					else
					{
						this._accid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentSystem_SubAccount", Storage="_PaymentSystem", ThisKey="systemid", OtherKey="id", IsForeignKey=true)]
		public PaymentSystem PaymentSystem
		{
			get
			{
				return this._PaymentSystem.Entity;
			}
			set
			{
				PaymentSystem previousValue = this._PaymentSystem.Entity;
				if (((previousValue != value) 
							|| (this._PaymentSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentSystem.Entity = null;
						previousValue.SubAccounts.Remove(this);
					}
					this._PaymentSystem.Entity = value;
					if ((value != null))
					{
						value.SubAccounts.Add(this);
						this._systemid = value.id;
					}
					else
					{
						this._systemid = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.SubAccount = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.SubAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Templates")]
	public partial class Template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _description;
		
		private string _mask;
		
		private int _priority;
		
		private System.Xml.Linq.XElement _parameters;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnmaskChanging(string value);
    partial void OnmaskChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    partial void OnparametersChanging(System.Xml.Linq.XElement value);
    partial void OnparametersChanged();
    #endregion
		
		public Template()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mask", DbType="VarChar(80)")]
		public string mask
		{
			get
			{
				return this._mask;
			}
			set
			{
				if ((this._mask != value))
				{
					this.OnmaskChanging(value);
					this.SendPropertyChanging();
					this._mask = value;
					this.SendPropertyChanged("mask");
					this.OnmaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parameters", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement parameters
		{
			get
			{
				return this._parameters;
			}
			set
			{
				if ((this._parameters != value))
				{
					this.OnparametersChanging(value);
					this.SendPropertyChanging();
					this._parameters = value;
					this.SendPropertyChanged("parameters");
					this.OnparametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_Profile", Storage="_Profiles", ThisKey="id", OtherKey="teplateid")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _operationid;
		
		private int _subaccid;
		
		private decimal _amount;
		
		private int _id;
		
		private EntityRef<SubAccount> _SubAccount;
		
		private EntityRef<Operation> _Operation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnoperationidChanging(int value);
    partial void OnoperationidChanged();
    partial void OnsubaccidChanging(int value);
    partial void OnsubaccidChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Transaction()
		{
			this._SubAccount = default(EntityRef<SubAccount>);
			this._Operation = default(EntityRef<Operation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationid", DbType="Int NOT NULL")]
		public int operationid
		{
			get
			{
				return this._operationid;
			}
			set
			{
				if ((this._operationid != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoperationidChanging(value);
					this.SendPropertyChanging();
					this._operationid = value;
					this.SendPropertyChanged("operationid");
					this.OnoperationidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subaccid", DbType="Int NOT NULL")]
		public int subaccid
		{
			get
			{
				return this._subaccid;
			}
			set
			{
				if ((this._subaccid != value))
				{
					if (this._SubAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubaccidChanging(value);
					this.SendPropertyChanging();
					this._subaccid = value;
					this.SendPropertyChanged("subaccid");
					this.OnsubaccidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Decimal(15,2) NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubAccount_Transaction", Storage="_SubAccount", ThisKey="subaccid", OtherKey="id", IsForeignKey=true)]
		public SubAccount SubAccount
		{
			get
			{
				return this._SubAccount.Entity;
			}
			set
			{
				SubAccount previousValue = this._SubAccount.Entity;
				if (((previousValue != value) 
							|| (this._SubAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubAccount.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._SubAccount.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._subaccid = value.id;
					}
					else
					{
						this._subaccid = default(int);
					}
					this.SendPropertyChanged("SubAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Transaction", Storage="_Operation", ThisKey="operationid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._operationid = value.id;
					}
					else
					{
						this._operationid = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserServices")]
	public partial class UserService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userid;
		
		private int _serviceid;
		
		private bool _ban;
		
		private System.Data.Linq.Binary _properties;
		
		private int _accountid;
		
		private string _password;
		
		private int _id;
		
		private bool _active;
		
		private EntitySet<Session> _Sessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnserviceidChanging(int value);
    partial void OnserviceidChanged();
    partial void OnbanChanging(bool value);
    partial void OnbanChanged();
    partial void OnpropertiesChanging(System.Data.Linq.Binary value);
    partial void OnpropertiesChanged();
    partial void OnaccountidChanging(int value);
    partial void OnaccountidChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public UserService()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceid", DbType="Int NOT NULL")]
		public int serviceid
		{
			get
			{
				return this._serviceid;
			}
			set
			{
				if ((this._serviceid != value))
				{
					this.OnserviceidChanging(value);
					this.SendPropertyChanging();
					this._serviceid = value;
					this.SendPropertyChanged("serviceid");
					this.OnserviceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ban", DbType="Bit NOT NULL")]
		public bool ban
		{
			get
			{
				return this._ban;
			}
			set
			{
				if ((this._ban != value))
				{
					this.OnbanChanging(value);
					this.SendPropertyChanging();
					this._ban = value;
					this.SendPropertyChanged("ban");
					this.OnbanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_properties", DbType="VarBinary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary properties
		{
			get
			{
				return this._properties;
			}
			set
			{
				if ((this._properties != value))
				{
					this.OnpropertiesChanging(value);
					this.SendPropertyChanging();
					this._properties = value;
					this.SendPropertyChanged("properties");
					this.OnpropertiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountid", DbType="Int NOT NULL")]
		public int accountid
		{
			get
			{
				return this._accountid;
			}
			set
			{
				if ((this._accountid != value))
				{
					this.OnaccountidChanging(value);
					this.SendPropertyChanging();
					this._accountid = value;
					this.SendPropertyChanged("accountid");
					this.OnaccountidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(80)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserService_Session", Storage="_Sessions", ThisKey="id", OtherKey="usrservid")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.UserService = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.UserService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartnerPrograms")]
	public partial class PartnerProgram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _authorizationClass;
		
		private EntitySet<ReferalCode> _ReferalCodes;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnauthorizationClassChanging(string value);
    partial void OnauthorizationClassChanged();
    #endregion
		
		public PartnerProgram()
		{
			this._ReferalCodes = new EntitySet<ReferalCode>(new Action<ReferalCode>(this.attach_ReferalCodes), new Action<ReferalCode>(this.detach_ReferalCodes));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorizationClass", DbType="VarChar(80)")]
		public string authorizationClass
		{
			get
			{
				return this._authorizationClass;
			}
			set
			{
				if ((this._authorizationClass != value))
				{
					this.OnauthorizationClassChanging(value);
					this.SendPropertyChanging();
					this._authorizationClass = value;
					this.SendPropertyChanged("authorizationClass");
					this.OnauthorizationClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartnerProgram_ReferalCode", Storage="_ReferalCodes", ThisKey="id", OtherKey="partnerid")]
		public EntitySet<ReferalCode> ReferalCodes
		{
			get
			{
				return this._ReferalCodes;
			}
			set
			{
				this._ReferalCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartnerProgram_User", Storage="_Users", ThisKey="id", OtherKey="partnerid")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferalCodes(ReferalCode entity)
		{
			this.SendPropertyChanging();
			entity.PartnerProgram = this;
		}
		
		private void detach_ReferalCodes(ReferalCode entity)
		{
			this.SendPropertyChanging();
			entity.PartnerProgram = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.PartnerProgram = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.PartnerProgram = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolServices")]
	public partial class ProtocolService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _serviceid;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnserviceidChanging(int value);
    partial void OnserviceidChanged();
    #endregion
		
		public ProtocolService()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int serviceid
		{
			get
			{
				return this._serviceid;
			}
			set
			{
				if ((this._serviceid != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceidChanging(value);
					this.SendPropertyChanging();
					this._serviceid = value;
					this.SendPropertyChanged("serviceid");
					this.OnserviceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ProtocolService", Storage="_Service", ThisKey="serviceid", OtherKey="id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ProtocolService = null;
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ProtocolService = this;
						this._serviceid = value.id;
					}
					else
					{
						this._serviceid = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolSettings")]
	public partial class ProtocolSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _loglevel;
		
		private System.Nullable<int> _timeout;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnloglevelChanging(int value);
    partial void OnloglevelChanged();
    partial void OntimeoutChanging(System.Nullable<int> value);
    partial void OntimeoutChanged();
    #endregion
		
		public ProtocolSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loglevel", DbType="Int NOT NULL")]
		public int loglevel
		{
			get
			{
				return this._loglevel;
			}
			set
			{
				if ((this._loglevel != value))
				{
					this.OnloglevelChanging(value);
					this.SendPropertyChanging();
					this._loglevel = value;
					this.SendPropertyChanged("loglevel");
					this.OnloglevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeout", DbType="Int")]
		public System.Nullable<int> timeout
		{
			get
			{
				return this._timeout;
			}
			set
			{
				if ((this._timeout != value))
				{
					this.OntimeoutChanging(value);
					this.SendPropertyChanging();
					this._timeout = value;
					this.SendPropertyChanged("timeout");
					this.OntimeoutChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolPaymentSystems")]
	public partial class ProtocolPaymentSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _systemid;
		
		private EntityRef<PaymentSystem> _PaymentSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsystemidChanging(int value);
    partial void OnsystemidChanged();
    #endregion
		
		public ProtocolPaymentSystem()
		{
			this._PaymentSystem = default(EntityRef<PaymentSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int systemid
		{
			get
			{
				return this._systemid;
			}
			set
			{
				if ((this._systemid != value))
				{
					if (this._PaymentSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsystemidChanging(value);
					this.SendPropertyChanging();
					this._systemid = value;
					this.SendPropertyChanged("systemid");
					this.OnsystemidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentSystem_ProtocolPaymentSystem", Storage="_PaymentSystem", ThisKey="systemid", OtherKey="id", IsForeignKey=true)]
		public PaymentSystem PaymentSystem
		{
			get
			{
				return this._PaymentSystem.Entity;
			}
			set
			{
				PaymentSystem previousValue = this._PaymentSystem.Entity;
				if (((previousValue != value) 
							|| (this._PaymentSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentSystem.Entity = null;
						previousValue.ProtocolPaymentSystem = null;
					}
					this._PaymentSystem.Entity = value;
					if ((value != null))
					{
						value.ProtocolPaymentSystem = this;
						this._systemid = value.id;
					}
					else
					{
						this._systemid = default(int);
					}
					this.SendPropertyChanged("PaymentSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Data.Linq.Binary _password;
		
		private System.Nullable<int> _accid;
		
		private System.Nullable<int> _partnerid;
		
		private System.Nullable<bool> _finalBan;
		
		private System.Nullable<System.DateTime> _tempBan;
		
		private EntityRef<Profile> _Profile;
		
		private EntitySet<Operation> _Operations;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<PartnerProgram> _PartnerProgram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(System.Data.Linq.Binary value);
    partial void OnpasswordChanged();
    partial void OnaccidChanging(System.Nullable<int> value);
    partial void OnaccidChanged();
    partial void OnpartneridChanging(System.Nullable<int> value);
    partial void OnpartneridChanged();
    partial void OnfinalBanChanging(System.Nullable<bool> value);
    partial void OnfinalBanChanged();
    partial void OntempBanChanging(System.Nullable<System.DateTime> value);
    partial void OntempBanChanged();
    #endregion
		
		public User()
		{
			this._Profile = default(EntityRef<Profile>);
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			this._Account = default(EntityRef<Account>);
			this._PartnerProgram = default(EntityRef<PartnerProgram>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarBinary(80) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accid", DbType="Int")]
		public System.Nullable<int> accid
		{
			get
			{
				return this._accid;
			}
			set
			{
				if ((this._accid != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaccidChanging(value);
					this.SendPropertyChanging();
					this._accid = value;
					this.SendPropertyChanged("accid");
					this.OnaccidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partnerid", DbType="Int")]
		public System.Nullable<int> partnerid
		{
			get
			{
				return this._partnerid;
			}
			set
			{
				if ((this._partnerid != value))
				{
					if (this._PartnerProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartneridChanging(value);
					this.SendPropertyChanging();
					this._partnerid = value;
					this.SendPropertyChanged("partnerid");
					this.OnpartneridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finalBan", DbType="Bit")]
		public System.Nullable<bool> finalBan
		{
			get
			{
				return this._finalBan;
			}
			set
			{
				if ((this._finalBan != value))
				{
					this.OnfinalBanChanging(value);
					this.SendPropertyChanging();
					this._finalBan = value;
					this.SendPropertyChanged("finalBan");
					this.OnfinalBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tempBan", DbType="DateTime")]
		public System.Nullable<System.DateTime> tempBan
		{
			get
			{
				return this._tempBan;
			}
			set
			{
				if ((this._tempBan != value))
				{
					this.OntempBanChanging(value);
					this.SendPropertyChanging();
					this._tempBan = value;
					this.SendPropertyChanged("tempBan");
					this.OntempBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profile", Storage="_Profile", ThisKey="id", OtherKey="userid", IsUnique=true, IsForeignKey=false)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.User = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Operation", Storage="_Operations", ThisKey="id", OtherKey="userid")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_User", Storage="_Account", ThisKey="accid", OtherKey="id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._accid = value.id;
					}
					else
					{
						this._accid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartnerProgram_User", Storage="_PartnerProgram", ThisKey="partnerid", OtherKey="id", IsForeignKey=true)]
		public PartnerProgram PartnerProgram
		{
			get
			{
				return this._PartnerProgram.Entity;
			}
			set
			{
				PartnerProgram previousValue = this._PartnerProgram.Entity;
				if (((previousValue != value) 
							|| (this._PartnerProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartnerProgram.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._PartnerProgram.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._partnerid = value.id;
					}
					else
					{
						this._partnerid = default(Nullable<int>);
					}
					this.SendPropertyChanged("PartnerProgram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operations")]
	public partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _amount;
		
		private System.Nullable<int> _userid;
		
		private System.DateTime _executedat;
		
		private int _type;
		
		private System.Nullable<int> _srcaccid;
		
		private System.Nullable<int> _destaccid;
		
		private string _reason;
		
		private System.Nullable<int> _empid;
		
		private System.Nullable<int> _systemid;
		
		private System.Nullable<int> _serviceid;
		
		private EntitySet<Promocode> _Promocodes;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<User> _User;
		
		private EntityRef<OperationType> _OperationType;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Account> _Account1;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<PaymentSystem> _PaymentSystem;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OnuseridChanging(System.Nullable<int> value);
    partial void OnuseridChanged();
    partial void OnexecutedatChanging(System.DateTime value);
    partial void OnexecutedatChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void OnsrcaccidChanging(System.Nullable<int> value);
    partial void OnsrcaccidChanged();
    partial void OndestaccidChanging(System.Nullable<int> value);
    partial void OndestaccidChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OnempidChanging(System.Nullable<int> value);
    partial void OnempidChanged();
    partial void OnsystemidChanging(System.Nullable<int> value);
    partial void OnsystemidChanged();
    partial void OnserviceidChanging(System.Nullable<int> value);
    partial void OnserviceidChanged();
    #endregion
		
		public Operation()
		{
			this._Promocodes = new EntitySet<Promocode>(new Action<Promocode>(this.attach_Promocodes), new Action<Promocode>(this.detach_Promocodes));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._User = default(EntityRef<User>);
			this._OperationType = default(EntityRef<OperationType>);
			this._Account = default(EntityRef<Account>);
			this._Account1 = default(EntityRef<Account>);
			this._Employee = default(EntityRef<Employee>);
			this._PaymentSystem = default(EntityRef<PaymentSystem>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Decimal(15,2) NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int")]
		public System.Nullable<int> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_executedat", DbType="DateTime NOT NULL")]
		public System.DateTime executedat
		{
			get
			{
				return this._executedat;
			}
			set
			{
				if ((this._executedat != value))
				{
					this.OnexecutedatChanging(value);
					this.SendPropertyChanging();
					this._executedat = value;
					this.SendPropertyChanged("executedat");
					this.OnexecutedatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_srcaccid", DbType="Int")]
		public System.Nullable<int> srcaccid
		{
			get
			{
				return this._srcaccid;
			}
			set
			{
				if ((this._srcaccid != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsrcaccidChanging(value);
					this.SendPropertyChanging();
					this._srcaccid = value;
					this.SendPropertyChanged("srcaccid");
					this.OnsrcaccidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_destaccid", DbType="Int")]
		public System.Nullable<int> destaccid
		{
			get
			{
				return this._destaccid;
			}
			set
			{
				if ((this._destaccid != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndestaccidChanging(value);
					this.SendPropertyChanging();
					this._destaccid = value;
					this.SendPropertyChanged("destaccid");
					this.OndestaccidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="VarChar(MAX)")]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empid", DbType="Int")]
		public System.Nullable<int> empid
		{
			get
			{
				return this._empid;
			}
			set
			{
				if ((this._empid != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnempidChanging(value);
					this.SendPropertyChanging();
					this._empid = value;
					this.SendPropertyChanged("empid");
					this.OnempidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemid", DbType="Int")]
		public System.Nullable<int> systemid
		{
			get
			{
				return this._systemid;
			}
			set
			{
				if ((this._systemid != value))
				{
					if (this._PaymentSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsystemidChanging(value);
					this.SendPropertyChanging();
					this._systemid = value;
					this.SendPropertyChanged("systemid");
					this.OnsystemidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceid", DbType="Int")]
		public System.Nullable<int> serviceid
		{
			get
			{
				return this._serviceid;
			}
			set
			{
				if ((this._serviceid != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceidChanging(value);
					this.SendPropertyChanging();
					this._serviceid = value;
					this.SendPropertyChanged("serviceid");
					this.OnserviceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Promocode", Storage="_Promocodes", ThisKey="id", OtherKey="operationid")]
		public EntitySet<Promocode> Promocodes
		{
			get
			{
				return this._Promocodes;
			}
			set
			{
				this._Promocodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Transaction", Storage="_Transactions", ThisKey="id", OtherKey="operationid")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Operation", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationType_Operation", Storage="_OperationType", ThisKey="type", OtherKey="id", IsForeignKey=true)]
		public OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value) 
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._type = value.id;
					}
					else
					{
						this._type = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Operation", Storage="_Account", ThisKey="srcaccid", OtherKey="id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._srcaccid = value.id;
					}
					else
					{
						this._srcaccid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Operation1", Storage="_Account1", ThisKey="destaccid", OtherKey="id", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.Operations1.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.Operations1.Add(this);
						this._destaccid = value.id;
					}
					else
					{
						this._destaccid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Operation", Storage="_Employee", ThisKey="empid", OtherKey="id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._empid = value.id;
					}
					else
					{
						this._empid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentSystem_Operation", Storage="_PaymentSystem", ThisKey="systemid", OtherKey="id", IsForeignKey=true)]
		public PaymentSystem PaymentSystem
		{
			get
			{
				return this._PaymentSystem.Entity;
			}
			set
			{
				PaymentSystem previousValue = this._PaymentSystem.Entity;
				if (((previousValue != value) 
							|| (this._PaymentSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentSystem.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._PaymentSystem.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._systemid = value.id;
					}
					else
					{
						this._systemid = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Operation", Storage="_Service", ThisKey="serviceid", OtherKey="id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._serviceid = value.id;
					}
					else
					{
						this._serviceid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Promocodes(Promocode entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_Promocodes(Promocode entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
	}
}
#pragma warning restore 1591
