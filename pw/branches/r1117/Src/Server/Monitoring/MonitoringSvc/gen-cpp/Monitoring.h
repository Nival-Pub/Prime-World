/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Monitoring_H
#define Monitoring_H

#include <thrift/TDispatchProcessor.h>
#include "Monitoring_types.h"

namespace Monitoring { namespace Thrift {

class MonitoringIf {
 public:
  virtual ~MonitoringIf() {}
  virtual void GetPerfCounters(std::vector<PerfCounterInfo> & _return) = 0;
  virtual int32_t RegisterPerfCounters(const std::vector<PerfCounterInfo> & counters) = 0;
  virtual int32_t UnregisterPerfCounters(const std::vector<std::string> & counters) = 0;
  virtual int32_t UnregisterAllPerfCounters() = 0;
  virtual void GetRegisteredPerfCounters(std::vector<PerfCounterInfo> & _return) = 0;
  virtual void GetPerfCounterSamples(std::vector<PerfCounterSample> & _return) = 0;
};

class MonitoringIfFactory {
 public:
  typedef MonitoringIf Handler;

  virtual ~MonitoringIfFactory() {}

  virtual MonitoringIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MonitoringIf* /* handler */) = 0;
};

class MonitoringIfSingletonFactory : virtual public MonitoringIfFactory {
 public:
  MonitoringIfSingletonFactory(const boost::shared_ptr<MonitoringIf>& iface) : iface_(iface) {}
  virtual ~MonitoringIfSingletonFactory() {}

  virtual MonitoringIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MonitoringIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitoringIf> iface_;
};

class MonitoringNull : virtual public MonitoringIf {
 public:
  virtual ~MonitoringNull() {}
  void GetPerfCounters(std::vector<PerfCounterInfo> & /* _return */) {
    return;
  }
  int32_t RegisterPerfCounters(const std::vector<PerfCounterInfo> & /* counters */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t UnregisterPerfCounters(const std::vector<std::string> & /* counters */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t UnregisterAllPerfCounters() {
    int32_t _return = 0;
    return _return;
  }
  void GetRegisteredPerfCounters(std::vector<PerfCounterInfo> & /* _return */) {
    return;
  }
  void GetPerfCounterSamples(std::vector<PerfCounterSample> & /* _return */) {
    return;
  }
};


class Monitoring_GetPerfCounters_args {
 public:

  Monitoring_GetPerfCounters_args() {
  }

  virtual ~Monitoring_GetPerfCounters_args() throw() {}


  bool operator == (const Monitoring_GetPerfCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Monitoring_GetPerfCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_GetPerfCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitoring_GetPerfCounters_pargs {
 public:


  virtual ~Monitoring_GetPerfCounters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_GetPerfCounters_result__isset {
  _Monitoring_GetPerfCounters_result__isset() : success(false) {}
  bool success;
} _Monitoring_GetPerfCounters_result__isset;

class Monitoring_GetPerfCounters_result {
 public:

  Monitoring_GetPerfCounters_result() {
  }

  virtual ~Monitoring_GetPerfCounters_result() throw() {}

  std::vector<PerfCounterInfo>  success;

  _Monitoring_GetPerfCounters_result__isset __isset;

  void __set_success(const std::vector<PerfCounterInfo> & val) {
    success = val;
  }

  bool operator == (const Monitoring_GetPerfCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitoring_GetPerfCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_GetPerfCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_GetPerfCounters_presult__isset {
  _Monitoring_GetPerfCounters_presult__isset() : success(false) {}
  bool success;
} _Monitoring_GetPerfCounters_presult__isset;

class Monitoring_GetPerfCounters_presult {
 public:


  virtual ~Monitoring_GetPerfCounters_presult() throw() {}

  std::vector<PerfCounterInfo> * success;

  _Monitoring_GetPerfCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Monitoring_RegisterPerfCounters_args__isset {
  _Monitoring_RegisterPerfCounters_args__isset() : counters(false) {}
  bool counters;
} _Monitoring_RegisterPerfCounters_args__isset;

class Monitoring_RegisterPerfCounters_args {
 public:

  Monitoring_RegisterPerfCounters_args() {
  }

  virtual ~Monitoring_RegisterPerfCounters_args() throw() {}

  std::vector<PerfCounterInfo>  counters;

  _Monitoring_RegisterPerfCounters_args__isset __isset;

  void __set_counters(const std::vector<PerfCounterInfo> & val) {
    counters = val;
  }

  bool operator == (const Monitoring_RegisterPerfCounters_args & rhs) const
  {
    if (!(counters == rhs.counters))
      return false;
    return true;
  }
  bool operator != (const Monitoring_RegisterPerfCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_RegisterPerfCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitoring_RegisterPerfCounters_pargs {
 public:


  virtual ~Monitoring_RegisterPerfCounters_pargs() throw() {}

  const std::vector<PerfCounterInfo> * counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_RegisterPerfCounters_result__isset {
  _Monitoring_RegisterPerfCounters_result__isset() : success(false) {}
  bool success;
} _Monitoring_RegisterPerfCounters_result__isset;

class Monitoring_RegisterPerfCounters_result {
 public:

  Monitoring_RegisterPerfCounters_result() : success(0) {
  }

  virtual ~Monitoring_RegisterPerfCounters_result() throw() {}

  int32_t success;

  _Monitoring_RegisterPerfCounters_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Monitoring_RegisterPerfCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitoring_RegisterPerfCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_RegisterPerfCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_RegisterPerfCounters_presult__isset {
  _Monitoring_RegisterPerfCounters_presult__isset() : success(false) {}
  bool success;
} _Monitoring_RegisterPerfCounters_presult__isset;

class Monitoring_RegisterPerfCounters_presult {
 public:


  virtual ~Monitoring_RegisterPerfCounters_presult() throw() {}

  int32_t* success;

  _Monitoring_RegisterPerfCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Monitoring_UnregisterPerfCounters_args__isset {
  _Monitoring_UnregisterPerfCounters_args__isset() : counters(false) {}
  bool counters;
} _Monitoring_UnregisterPerfCounters_args__isset;

class Monitoring_UnregisterPerfCounters_args {
 public:

  Monitoring_UnregisterPerfCounters_args() {
  }

  virtual ~Monitoring_UnregisterPerfCounters_args() throw() {}

  std::vector<std::string>  counters;

  _Monitoring_UnregisterPerfCounters_args__isset __isset;

  void __set_counters(const std::vector<std::string> & val) {
    counters = val;
  }

  bool operator == (const Monitoring_UnregisterPerfCounters_args & rhs) const
  {
    if (!(counters == rhs.counters))
      return false;
    return true;
  }
  bool operator != (const Monitoring_UnregisterPerfCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_UnregisterPerfCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitoring_UnregisterPerfCounters_pargs {
 public:


  virtual ~Monitoring_UnregisterPerfCounters_pargs() throw() {}

  const std::vector<std::string> * counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_UnregisterPerfCounters_result__isset {
  _Monitoring_UnregisterPerfCounters_result__isset() : success(false) {}
  bool success;
} _Monitoring_UnregisterPerfCounters_result__isset;

class Monitoring_UnregisterPerfCounters_result {
 public:

  Monitoring_UnregisterPerfCounters_result() : success(0) {
  }

  virtual ~Monitoring_UnregisterPerfCounters_result() throw() {}

  int32_t success;

  _Monitoring_UnregisterPerfCounters_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Monitoring_UnregisterPerfCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitoring_UnregisterPerfCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_UnregisterPerfCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_UnregisterPerfCounters_presult__isset {
  _Monitoring_UnregisterPerfCounters_presult__isset() : success(false) {}
  bool success;
} _Monitoring_UnregisterPerfCounters_presult__isset;

class Monitoring_UnregisterPerfCounters_presult {
 public:


  virtual ~Monitoring_UnregisterPerfCounters_presult() throw() {}

  int32_t* success;

  _Monitoring_UnregisterPerfCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Monitoring_UnregisterAllPerfCounters_args {
 public:

  Monitoring_UnregisterAllPerfCounters_args() {
  }

  virtual ~Monitoring_UnregisterAllPerfCounters_args() throw() {}


  bool operator == (const Monitoring_UnregisterAllPerfCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Monitoring_UnregisterAllPerfCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_UnregisterAllPerfCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitoring_UnregisterAllPerfCounters_pargs {
 public:


  virtual ~Monitoring_UnregisterAllPerfCounters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_UnregisterAllPerfCounters_result__isset {
  _Monitoring_UnregisterAllPerfCounters_result__isset() : success(false) {}
  bool success;
} _Monitoring_UnregisterAllPerfCounters_result__isset;

class Monitoring_UnregisterAllPerfCounters_result {
 public:

  Monitoring_UnregisterAllPerfCounters_result() : success(0) {
  }

  virtual ~Monitoring_UnregisterAllPerfCounters_result() throw() {}

  int32_t success;

  _Monitoring_UnregisterAllPerfCounters_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Monitoring_UnregisterAllPerfCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitoring_UnregisterAllPerfCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_UnregisterAllPerfCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_UnregisterAllPerfCounters_presult__isset {
  _Monitoring_UnregisterAllPerfCounters_presult__isset() : success(false) {}
  bool success;
} _Monitoring_UnregisterAllPerfCounters_presult__isset;

class Monitoring_UnregisterAllPerfCounters_presult {
 public:


  virtual ~Monitoring_UnregisterAllPerfCounters_presult() throw() {}

  int32_t* success;

  _Monitoring_UnregisterAllPerfCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Monitoring_GetRegisteredPerfCounters_args {
 public:

  Monitoring_GetRegisteredPerfCounters_args() {
  }

  virtual ~Monitoring_GetRegisteredPerfCounters_args() throw() {}


  bool operator == (const Monitoring_GetRegisteredPerfCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Monitoring_GetRegisteredPerfCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_GetRegisteredPerfCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitoring_GetRegisteredPerfCounters_pargs {
 public:


  virtual ~Monitoring_GetRegisteredPerfCounters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_GetRegisteredPerfCounters_result__isset {
  _Monitoring_GetRegisteredPerfCounters_result__isset() : success(false) {}
  bool success;
} _Monitoring_GetRegisteredPerfCounters_result__isset;

class Monitoring_GetRegisteredPerfCounters_result {
 public:

  Monitoring_GetRegisteredPerfCounters_result() {
  }

  virtual ~Monitoring_GetRegisteredPerfCounters_result() throw() {}

  std::vector<PerfCounterInfo>  success;

  _Monitoring_GetRegisteredPerfCounters_result__isset __isset;

  void __set_success(const std::vector<PerfCounterInfo> & val) {
    success = val;
  }

  bool operator == (const Monitoring_GetRegisteredPerfCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitoring_GetRegisteredPerfCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_GetRegisteredPerfCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_GetRegisteredPerfCounters_presult__isset {
  _Monitoring_GetRegisteredPerfCounters_presult__isset() : success(false) {}
  bool success;
} _Monitoring_GetRegisteredPerfCounters_presult__isset;

class Monitoring_GetRegisteredPerfCounters_presult {
 public:


  virtual ~Monitoring_GetRegisteredPerfCounters_presult() throw() {}

  std::vector<PerfCounterInfo> * success;

  _Monitoring_GetRegisteredPerfCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Monitoring_GetPerfCounterSamples_args {
 public:

  Monitoring_GetPerfCounterSamples_args() {
  }

  virtual ~Monitoring_GetPerfCounterSamples_args() throw() {}


  bool operator == (const Monitoring_GetPerfCounterSamples_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Monitoring_GetPerfCounterSamples_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_GetPerfCounterSamples_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitoring_GetPerfCounterSamples_pargs {
 public:


  virtual ~Monitoring_GetPerfCounterSamples_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_GetPerfCounterSamples_result__isset {
  _Monitoring_GetPerfCounterSamples_result__isset() : success(false) {}
  bool success;
} _Monitoring_GetPerfCounterSamples_result__isset;

class Monitoring_GetPerfCounterSamples_result {
 public:

  Monitoring_GetPerfCounterSamples_result() {
  }

  virtual ~Monitoring_GetPerfCounterSamples_result() throw() {}

  std::vector<PerfCounterSample>  success;

  _Monitoring_GetPerfCounterSamples_result__isset __isset;

  void __set_success(const std::vector<PerfCounterSample> & val) {
    success = val;
  }

  bool operator == (const Monitoring_GetPerfCounterSamples_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitoring_GetPerfCounterSamples_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitoring_GetPerfCounterSamples_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitoring_GetPerfCounterSamples_presult__isset {
  _Monitoring_GetPerfCounterSamples_presult__isset() : success(false) {}
  bool success;
} _Monitoring_GetPerfCounterSamples_presult__isset;

class Monitoring_GetPerfCounterSamples_presult {
 public:


  virtual ~Monitoring_GetPerfCounterSamples_presult() throw() {}

  std::vector<PerfCounterSample> * success;

  _Monitoring_GetPerfCounterSamples_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MonitoringClient : virtual public MonitoringIf {
 public:
  MonitoringClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MonitoringClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetPerfCounters(std::vector<PerfCounterInfo> & _return);
  void send_GetPerfCounters();
  void recv_GetPerfCounters(std::vector<PerfCounterInfo> & _return);
  int32_t RegisterPerfCounters(const std::vector<PerfCounterInfo> & counters);
  void send_RegisterPerfCounters(const std::vector<PerfCounterInfo> & counters);
  int32_t recv_RegisterPerfCounters();
  int32_t UnregisterPerfCounters(const std::vector<std::string> & counters);
  void send_UnregisterPerfCounters(const std::vector<std::string> & counters);
  int32_t recv_UnregisterPerfCounters();
  int32_t UnregisterAllPerfCounters();
  void send_UnregisterAllPerfCounters();
  int32_t recv_UnregisterAllPerfCounters();
  void GetRegisteredPerfCounters(std::vector<PerfCounterInfo> & _return);
  void send_GetRegisteredPerfCounters();
  void recv_GetRegisteredPerfCounters(std::vector<PerfCounterInfo> & _return);
  void GetPerfCounterSamples(std::vector<PerfCounterSample> & _return);
  void send_GetPerfCounterSamples();
  void recv_GetPerfCounterSamples(std::vector<PerfCounterSample> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MonitoringProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MonitoringIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MonitoringProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetPerfCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterPerfCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnregisterPerfCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnregisterAllPerfCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRegisteredPerfCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPerfCounterSamples(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitoringProcessor(boost::shared_ptr<MonitoringIf> iface) :
    iface_(iface) {
    processMap_["GetPerfCounters"] = &MonitoringProcessor::process_GetPerfCounters;
    processMap_["RegisterPerfCounters"] = &MonitoringProcessor::process_RegisterPerfCounters;
    processMap_["UnregisterPerfCounters"] = &MonitoringProcessor::process_UnregisterPerfCounters;
    processMap_["UnregisterAllPerfCounters"] = &MonitoringProcessor::process_UnregisterAllPerfCounters;
    processMap_["GetRegisteredPerfCounters"] = &MonitoringProcessor::process_GetRegisteredPerfCounters;
    processMap_["GetPerfCounterSamples"] = &MonitoringProcessor::process_GetPerfCounterSamples;
  }

  virtual ~MonitoringProcessor() {}
};

class MonitoringProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitoringProcessorFactory(const ::boost::shared_ptr< MonitoringIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitoringIfFactory > handlerFactory_;
};

class MonitoringMultiface : virtual public MonitoringIf {
 public:
  MonitoringMultiface(std::vector<boost::shared_ptr<MonitoringIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MonitoringMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitoringIf> > ifaces_;
  MonitoringMultiface() {}
  void add(boost::shared_ptr<MonitoringIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetPerfCounters(std::vector<PerfCounterInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPerfCounters(_return);
    }
    ifaces_[i]->GetPerfCounters(_return);
    return;
  }

  int32_t RegisterPerfCounters(const std::vector<PerfCounterInfo> & counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterPerfCounters(counters);
    }
    return ifaces_[i]->RegisterPerfCounters(counters);
  }

  int32_t UnregisterPerfCounters(const std::vector<std::string> & counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnregisterPerfCounters(counters);
    }
    return ifaces_[i]->UnregisterPerfCounters(counters);
  }

  int32_t UnregisterAllPerfCounters() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnregisterAllPerfCounters();
    }
    return ifaces_[i]->UnregisterAllPerfCounters();
  }

  void GetRegisteredPerfCounters(std::vector<PerfCounterInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRegisteredPerfCounters(_return);
    }
    ifaces_[i]->GetRegisteredPerfCounters(_return);
    return;
  }

  void GetPerfCounterSamples(std::vector<PerfCounterSample> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPerfCounterSamples(_return);
    }
    ifaces_[i]->GetPerfCounterSamples(_return);
    return;
  }

};

}} // namespace

#endif
