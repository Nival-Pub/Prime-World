#include "StrFormatter.h"

#include <stdio.h>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace NStr
{
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const bool bValue )
{
	if ( bBoolAlpha )
		return bValue ? "true" : "false";
	else
		return Format( (long)bValue );
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const char cValue )
{
	if ( bHexChar )
		_snprintf_s( szBuffer, FORMATTER_LENGTH, "%02x", cValue );
	else
	{
		szBuffer[0] = cValue;
		szBuffer[1] = 0;
	}
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const short nValue )
{
	if ( bHexInteger )
		return Format( (unsigned short)nValue );
	_snprintf_s( szBuffer, FORMATTER_LENGTH, "%d", nValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const unsigned short nValue )
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, bHexInteger ? "%04x" : "%d", nValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const long nValue )
{
	if ( bHexInteger )
		return Format( (unsigned long)nValue );
	_snprintf_s( szBuffer, FORMATTER_LENGTH, "%d", nValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const unsigned long nValue )
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, bHexInteger ? "%08x" : "%d", nValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const long long nValue ) 
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, bHexInteger ? "%016x" : "%d", nValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const float fValue )
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, bSciFloat ? "%e" : "%.2f", fValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const double fValue )
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, bSciFloat ? "%e" : "%.4f", fValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const long double fValue )
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, bSciFloat ? "%e" : "%.8f", fValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *CStrFormatter::Format( const void *pValue )
{
	_snprintf_s( szBuffer, FORMATTER_LENGTH, "%p", pValue );
	return szBuffer;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
