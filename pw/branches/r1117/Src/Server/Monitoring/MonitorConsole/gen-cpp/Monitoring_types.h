/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Monitoring_TYPES_H
#define Monitoring_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Monitoring { namespace Thrift {

struct PerfCounterType {
  enum type {
    Bool = 1,
    Byte = 2,
    Int16 = 3,
    UInt16 = 4,
    Int32 = 5,
    UInt32 = 6,
    Int64 = 7,
    UInt64 = 8,
    Float = 9,
    Double = 10,
    String = 11
  };
};

extern const std::map<int, const char*> _PerfCounterType_VALUES_TO_NAMES;

typedef struct _PerfCounterInfo__isset {
  _PerfCounterInfo__isset() : name(false), period(false) {}
  bool name;
  bool period;
} _PerfCounterInfo__isset;

class PerfCounterInfo {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  PerfCounterInfo() : name(), period(0) {
  }

  virtual ~PerfCounterInfo() throw() {}

  std::string name;
  int32_t period;

  _PerfCounterInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_period(const int32_t val) {
    period = val;
  }

  bool operator == (const PerfCounterInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(period == rhs.period))
      return false;
    return true;
  }
  bool operator != (const PerfCounterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PerfCounterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PerfCounterInfo &a, PerfCounterInfo &b);

typedef struct _PerfCounterSample__isset {
  _PerfCounterSample__isset() : name(false), type(false), value(false), timestamp(false) {}
  bool name;
  bool type;
  bool value;
  bool timestamp;
} _PerfCounterSample__isset;

class PerfCounterSample {
 public:

  static const char* ascii_fingerprint; // = "D93E36EE59062755BB4EBCCAA72581AC";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x3E,0x36,0xEE,0x59,0x06,0x27,0x55,0xBB,0x4E,0xBC,0xCA,0xA7,0x25,0x81,0xAC};

  PerfCounterSample() : name(), type((PerfCounterType::type)0), value(), timestamp(0) {
  }

  virtual ~PerfCounterSample() throw() {}

  std::string name;
  PerfCounterType::type type;
  std::string value;
  int32_t timestamp;

  _PerfCounterSample__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type(const PerfCounterType::type val) {
    type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_timestamp(const int32_t val) {
    timestamp = val;
  }

  bool operator == (const PerfCounterSample & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const PerfCounterSample &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PerfCounterSample & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PerfCounterSample &a, PerfCounterSample &b);

}} // namespace

#endif
