/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResourceTableSmall : TBase
  {
    private int _resource1;
    private int _resource2;
    private int _resource3;
    private int _silver;
    private int _gold;
    private int _perl;
    private int _redPerl;
    private string _currencyId;
    private int _currency;

    public int Resource1
    {
      get
      {
        return _resource1;
      }
      set
      {
        __isset.resource1 = true;
        this._resource1 = value;
      }
    }

    public int Resource2
    {
      get
      {
        return _resource2;
      }
      set
      {
        __isset.resource2 = true;
        this._resource2 = value;
      }
    }

    public int Resource3
    {
      get
      {
        return _resource3;
      }
      set
      {
        __isset.resource3 = true;
        this._resource3 = value;
      }
    }

    public int Silver
    {
      get
      {
        return _silver;
      }
      set
      {
        __isset.silver = true;
        this._silver = value;
      }
    }

    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public int Perl
    {
      get
      {
        return _perl;
      }
      set
      {
        __isset.perl = true;
        this._perl = value;
      }
    }

    public int RedPerl
    {
      get
      {
        return _redPerl;
      }
      set
      {
        __isset.redPerl = true;
        this._redPerl = value;
      }
    }

    public string CurrencyId
    {
      get
      {
        return _currencyId;
      }
      set
      {
        __isset.currencyId = true;
        this._currencyId = value;
      }
    }

    public int Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        this._currency = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool resource1;
      public bool resource2;
      public bool resource3;
      public bool silver;
      public bool gold;
      public bool perl;
      public bool redPerl;
      public bool currencyId;
      public bool currency;
    }

    public ResourceTableSmall() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Resource1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Resource2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Resource3 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Silver = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Perl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              RedPerl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              CurrencyId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Currency = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResourceTableSmall");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.resource1) {
        field.Name = "resource1";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource1);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource2) {
        field.Name = "resource2";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource2);
        oprot.WriteFieldEnd();
      }
      if (__isset.resource3) {
        field.Name = "resource3";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Resource3);
        oprot.WriteFieldEnd();
      }
      if (__isset.silver) {
        field.Name = "silver";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Silver);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.perl) {
        field.Name = "perl";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Perl);
        oprot.WriteFieldEnd();
      }
      if (__isset.redPerl) {
        field.Name = "redPerl";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RedPerl);
        oprot.WriteFieldEnd();
      }
      if (CurrencyId != null && __isset.currencyId) {
        field.Name = "currencyId";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencyId);
        oprot.WriteFieldEnd();
      }
      if (__isset.currency) {
        field.Name = "currency";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Currency);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResourceTableSmall(");
      sb.Append("Resource1: ");
      sb.Append(Resource1);
      sb.Append(",Resource2: ");
      sb.Append(Resource2);
      sb.Append(",Resource3: ");
      sb.Append(Resource3);
      sb.Append(",Silver: ");
      sb.Append(Silver);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Perl: ");
      sb.Append(Perl);
      sb.Append(",RedPerl: ");
      sb.Append(RedPerl);
      sb.Append(",CurrencyId: ");
      sb.Append(CurrencyId);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
