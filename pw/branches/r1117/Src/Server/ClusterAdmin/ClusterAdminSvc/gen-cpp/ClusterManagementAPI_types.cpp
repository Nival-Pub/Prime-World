/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ClusterManagementAPI_types.h"

#include <algorithm>

namespace ClusterAdmin { namespace Thrift {

int _kServiceStatusValues[] = {
  ServiceStatus::RUNNING,
  ServiceStatus::STOPPED,
  ServiceStatus::START_PENDING,
  ServiceStatus::STOP_PENDING,
  ServiceStatus::WAITING_FOR_STOP,
  ServiceStatus::WAITING_FOR_RESTART
};
const char* _kServiceStatusNames[] = {
  "RUNNING",
  "STOPPED",
  "START_PENDING",
  "STOP_PENDING",
  "WAITING_FOR_STOP",
  "WAITING_FOR_RESTART"
};
const std::map<int, const char*> _ServiceStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kServiceStatusValues, _kServiceStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kServiceCommandValues[] = {
  ServiceCommand::START,
  ServiceCommand::STOP,
  ServiceCommand::RESTART,
  ServiceCommand::SOFT_STOP,
  ServiceCommand::SOFT_RESTART,
  ServiceCommand::RELOAD_CONFIG
};
const char* _kServiceCommandNames[] = {
  "START",
  "STOP",
  "RESTART",
  "SOFT_STOP",
  "SOFT_RESTART",
  "RELOAD_CONFIG"
};
const std::map<int, const char*> _ServiceCommand_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kServiceCommandValues, _kServiceCommandNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ServiceParameter::ascii_fingerprint = "205A83737DD361E88B396E77A0B7A5BD";
const uint8_t ServiceParameter::binary_fingerprint[16] = {0x20,0x5A,0x83,0x73,0x7D,0xD3,0x61,0xE8,0x8B,0x39,0x6E,0x77,0xA0,0xB7,0xA5,0xBD};

uint32_t ServiceParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->changeable);
          this->__isset.changeable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needrestart);
          this->__isset.needrestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceParameter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("changeable", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->changeable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("needrestart", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->needrestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceParameter &a, ServiceParameter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.changeable, b.changeable);
  swap(a.needrestart, b.needrestart);
  swap(a.__isset, b.__isset);
}

const char* ServiceInfo::ascii_fingerprint = "90E6A2A74BC4ABD15DCFC6836ACBD6E8";
const uint8_t ServiceInfo::binary_fingerprint[16] = {0x90,0xE6,0xA2,0xA7,0x4B,0xC4,0xAB,0xD1,0x5D,0xCF,0xC6,0x83,0x6A,0xCB,0xD6,0xE8};

uint32_t ServiceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stype);
          this->__isset.stype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->machine);
          this->__isset.machine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (ServiceStatus::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uptime);
          this->__isset.uptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backendaddr);
          this->__isset.backendaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->frontendaddr);
          this->__isset.frontendaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parameters.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->parameters.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->parameters[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceInfo");

  xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stype", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("machine", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->machine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uptime", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->uptime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backendaddr", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->backendaddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("frontendaddr", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->frontendaddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parameters.size()));
    std::vector<ServiceParameter> ::const_iterator _iter6;
    for (_iter6 = this->parameters.begin(); _iter6 != this->parameters.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceInfo &a, ServiceInfo &b) {
  using ::std::swap;
  swap(a.sid, b.sid);
  swap(a.stype, b.stype);
  swap(a.machine, b.machine);
  swap(a.status, b.status);
  swap(a.pid, b.pid);
  swap(a.uptime, b.uptime);
  swap(a.backendaddr, b.backendaddr);
  swap(a.frontendaddr, b.frontendaddr);
  swap(a.parameters, b.parameters);
  swap(a.__isset, b.__isset);
}

}} // namespace
