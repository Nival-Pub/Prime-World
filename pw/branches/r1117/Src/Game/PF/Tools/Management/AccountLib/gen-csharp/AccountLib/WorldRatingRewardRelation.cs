/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AccountLib
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WorldRatingRewardRelation : TBase
  {
    private RollEventItem _reward;
    private int _rewardCount;
    private int _worldPosition;

    public RollEventItem Reward
    {
      get
      {
        return _reward;
      }
      set
      {
        __isset.reward = true;
        this._reward = value;
      }
    }

    public int RewardCount
    {
      get
      {
        return _rewardCount;
      }
      set
      {
        __isset.rewardCount = true;
        this._rewardCount = value;
      }
    }

    public int WorldPosition
    {
      get
      {
        return _worldPosition;
      }
      set
      {
        __isset.worldPosition = true;
        this._worldPosition = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reward;
      public bool rewardCount;
      public bool worldPosition;
    }

    public WorldRatingRewardRelation() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Reward = new RollEventItem();
              Reward.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RewardCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              WorldPosition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("WorldRatingRewardRelation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Reward != null && __isset.reward) {
        field.Name = "reward";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Reward.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewardCount) {
        field.Name = "rewardCount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RewardCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.worldPosition) {
        field.Name = "worldPosition";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WorldPosition);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("WorldRatingRewardRelation(");
      sb.Append("Reward: ");
      sb.Append(Reward== null ? "<null>" : Reward.ToString());
      sb.Append(",RewardCount: ");
      sb.Append(RewardCount);
      sb.Append(",WorldPosition: ");
      sb.Append(WorldPosition);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
